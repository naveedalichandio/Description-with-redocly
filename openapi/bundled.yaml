openapi: 3.0.0
info:
  title: Combined API Documentation
  version: 1.0.0
servers:
  - url: http://localhost:3000
  - url: https://api.bitmovin.com
  - url: https://api.cloudflare.com
security:
  - bearerAuth: []
paths:
  /api/account/general/create:
    post:
      tags:
        - AccountGeneral
      summary: Account - General - Create
      description: |-
        1. "name": This specifies the name of the endpoint that is being used. Here "Account - General - Create" conveys that this endpoint is used to create a general account.

        2. "request" - This object contains all the necessary details to make the request to the server.

           - "auth" - This details about the type of authentication used for the request. It specifies the 'bearer' token type of authentication.
             - "type" - Specifies the type of authentication. In this case, it's 'bearer'.
             - "bearer" - This is an array of bearer tokens to authenticate the request. Each object in this array has:
               - "key" - The key of the bearer token. Should be 'token' in this case.
               - "value" - The value of the bearer token or the BearerToken itself. 
               - "type" - The datatype of the bearer token. Should be 'string'.

           - "method" - Represents the HTTP method to be used when making the request. Here, it's "POST" method which implies we are sending data to be processed to a specified resource.

           - "url" - This is the link to the API endpoint. This is where the request will be made.

           - "headers" - This is an array of headers to be included in the request. Here It's empty and disabled.

           - "body" - This contains the body of the request.
             - "mode" - Specifies that the raw data type is being sent.
             - "raw" - Contains the raw data in JSON format to be sent along with the request.
               - "email" - The email of the user who is creating the account.
               - "phone" - The phone number of the user.
               - "accountType" - The type of the account. In this case, it's 'User'.
               - "password" - The password for the account.
               - "zipcode" - The zipcode of the area where the user is located. This information may be used for regional services or account recovery.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"email\":\"email\",\"phone\":\"phone\",\"accountType\":\"User\",\"password\":\"password\",\"zipcode\":\"95126\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: locale
          in: query
          schema:
            type: string
          example: en-US
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/general/login:
    post:
      tags:
        - AccountGeneral
      summary: Account - General - Login Phone
      description: |-
        This endpoint is named "Account - General - Login Phone". It is a POST request used for authenticating a user's phone-based login on the account/general resource.

        The endpoint uses Bearer Authentication. The bearer token is denoted by the "token" key with the string type value "BearerToken". This token is passed as a header in the format: Bearer (Access token).

        The URL for the endpoint is http://localhost:3000/api/account/general/login. It represents a local server environment which receives the request, handles it by checking the account's general data, and authenticates login.

        This endpoint doesn't require any additional headers as highlighted in the headers field with the key and value set as default and empty, but it's not active as the disabled property is set to true.

        The request body is in JSON format, and it should be sent in raw mode. The data in the body should include two properties: "phone" and "password". Both are strings that represent a user's phone number and password respectively. These inputs are essential for the phone-based login protocol.

        Please note that this endpoint's functionality, response, or actions will vary depending on the handled data server-side. Make sure to replace the placeholders ("BearerToken," "phone," and "password") with actual user-specific values while testing or using this endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"phone\":\"phone\",\"password\":\"password\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/general/forgot:
    post:
      tags:
        - AccountGeneral
      summary: Account - General - Forgot Phone
      description: |-
        1. "name": This represents the label given to the particular endpoint. Here, it's named as "Account - General - Forgot Phone", plainly indicating this endpoint is related to a feature where a user can recover their account if they forgot their phone.

        2. "request": This object contains all information for making the HTTP request. 

        3. "auth": This object holds the authorization method and token. 
           - "type": This field represents the type of the authentication. Here, it's bearer authentication.
           - "bearer": This array contains information about the bearer token.
             - "key": This is the name of the key, which is "token".
             - "value": This is the placeholder for the actual token value, denoted as "BearerToken".
             - "type": This represents the datatype of the token, which is a string.

        4. "method": This key represents the HTTP method to be used. For this endpoint, POST method should be used.

        5. "url": This is the URL where HTTP request should be made, i.e., "http://localhost:3000/api/account/general/forgot".

        6. "headers": This is an array of objects where each object represents a custom HTTP header. 
           - "key": This represents the name of the HTTP header, which is "Client-UUID"
           - "value": This is the placeholder for the actual headers' value, represented as "ClientUUID".
           - "type": This is set to "default" indicating this is a standard header.

        7. "body": This object holds data that will be sent with the HTTP request.
           - "mode": This defines how data will be sent. In this case, it is raw, meaning the data is sent as it is, without any encoding.
           - "raw": This holds the actual data that will be sent. Here, a JSON object containing a phone key with a placeholder value "phone" is being sent.
           
        Please replace placeholder values (like "BearerToken", "ClientUUID", and "phone") with actual data when performing API calls.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"phone\":\"phone\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/general/session:
    get:
      tags:
        - AccountGeneral
      summary: Account - General - Session - Get Account Type
      description: |-
        1. `name`: This field specifies the name of the endpoint which is "Account - General - Session - Get Account Type". This indicates that the endpoint is used to fetch the type of an account, and it is generally related to a session.

        2. `request`: This field contains information about the type of request, authorization required, the URL to be hit, header information and body content.

        3. `request.auth`: This section outlines the type of authentication needed to make the request to this endpoint. The `type` is "bearer" which means it uses bearer authentication. 

        4. `request.auth.bearer`: This is an array that carries information about the bearer token required for authentication. The `key` is "token" and its respective `value` should be the BearerToken to be provided.

        5. `request.method`: This stands for the HTTP method type the endpoint uses. Here it is a "GET" request, which is used for retrieving data from the specified resource.

        6. `request.url`: This shows the URL or the location of the resource where the request will be sent. In this description, it is specified to hit "http://localhost:3000/api/account/general/session" with query parameters for `accountId`,`sessionId` & `get`.

        7. `request.headers`: This is an array of objects and every object contains information about a header that should be sent with the request. In this description, the key and value of the header aren't specifically set and thus, the header is disabled.

        8. `request.body`: This field contains information about the body of the request. The `mode` is set to "raw", however, the `raw` field is empty indicating no specific data needs to be sent in the body of the request.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: get
          in: query
          schema:
            type: string
          example: accountType
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/general/reset:
    put:
      tags:
        - AccountGeneral
      summary: Account - General - Reset Password
      description: |-
        This endpoint is related to account management, specifically the functionality of resetting passwords. Here are the details:

        1. **Endpoint Name:** The name of this endpoint is "Account - General - Reset Password". It indicates that this endpoint supports resetting of account passwords.

        2. **Authentication:** The endpoint uses Bearer Token authentication. You should include a Bearer Token in the 'token' field in the header for valid authentication. The value provided here is just a placeholder (i.e., "BearerToken").

        3. **HTTP Method:** This endpoint uses the PUT HTTP method, which is typically used for updating resources.

        4. **URL:** This is the URL that you need to call in order to access this function.

        5. **Headers:** Headers for the request are mentioned, but the key and value are both blank and it's disabled. Based on the current data this is not required and you could remove it from the request.

        6. **Request Body:** The request contains three parameters to be included in the body of the request:

           - **sessionId:** Representing session identification, to keep track of the user's interaction with the API.
           
           - **email:** The user's email address associated with the account.
           
           - **password:** The new password that the user wants to set for the account. The example value provided in JSON format is "helloworld". 

        Please replace placeholder values with actual values when making a request to this endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"email\":\"email\",\"password\":\"helloworld\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/general/logout:
    post:
      tags:
        - AccountGeneral
      summary: Account - General - Logout
      description: |-
        The provided data includes the details of the "Account - General - Logout" endpoint request:

        1. `name`: This indicates the name of the endpoint. Here, it is "Account - General - Logout". This corresponds to user's logging out from a general account.

        2. `request`: This includes all the information needed to make the request.

            - `auth`: Specifies the authentication type and details required for accessing the endpoint.
            - `type`: "bearer" indicates that the authentication scheme implemented in this API requires a Bearer token to be sent in headers. This token is usually generated during the login process.
            - `key` and `value`: "token" and "sessionId" respectively represent the actual token key-value pair that needs to be passed with the authentication. Type defines the data type of the token, here, it is a string.
            
        3. `method`: Indicates the HTTP method to be used when making a request to this endpoint. Here, it is a "POST" request, which is mostly used when we want to send some data to the server, like, in this case, to logout from an account.

        4. `url`: This specifies the endpoint URL where the request is to be sent. Here, it is "http://localhost:3000/api/account/general/logout".

        5. `headers`: They define the operating parameters of an HTTP transaction. In this case, an empty default header is set, which is disabled. 

        6. `body`: This contains the data that needs to be sent as the body of the POST request.
            - `mode`: The value "raw" indicates that the contents are sent as is, without any specific structuring or encoding like form-data or x-www-form-urlencoded.
            - `raw`: This field includes raw request body data which contains two parameters "sessionId" and "accountId". They represent the unique session ID and account ID associated with the user which will be used to logout from the account.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/keys/create:
    post:
      tags:
        - AccountKeys
      summary: Account - Keys - Create
      description: |
        Endpoint Name: "Account - Keys - Create"

        This is an endpoint to create a key for a specified account. Below is the detailed information about every data used in the request for this endpoint:

        1. **auth**: This is used for authorization purpose. 

           a. **type:** The type field specifies the kind of authorization being used, which is 'bearer' in this case.
           
           b. **bearer:** It's an array that holds the bearer token information. 

           - **key:** Specifies the identifier for the bearer token which is denoted as 'token'. 
           
           - **value:** Denotes the actual bearer token value. Replace 'BearerToken' with your actual bearer token.
           
           - **type:** The type of the data the token represents. It's a string in this case.


        2. **method**: This represents the HTTP method to be used for this request. Here it's 'POST', which means we are sending data to be processed to a specified resource.

        3. **url**: The URI where the request is being sent. In this case, it's http://localhost:3000/api/account/keys/create, where a new key will be created for the account.

        4. **headers**: It represents metadata sent with the HTTP request. 

            a. **key:** Specify your header key here. 

            b. **value:** The value of the corresponding header key goes here. 

            c. **type:** The type of data the header value represents, which is 'default' in this case. 

            d. **disabled:** If set to true, the header will not be sent with the request.

        5. **body**: Contains data to be sent to the server.

           a. **mode:** Specifies how you want to send the data. Value 'raw' means you are sending the data as it is.

           b. **raw:** This contains actual data being sent. 

              - **accountId:** This should be replaced with the actual account id. 
              - **sessionId:** Here goes the actual session id.
              - **country, region, city, postal:** The geographical information about where the request is being sent from.
              - **latitude, longitude:** The geographical coordinates from where the request is being sent.
              - **ipAddress:** IP address of the client from where the request originated.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"accountId\":\"accountId\",\"sessionId\":\"sessionId\",\"country\":\"United States\",\"region\":\"California\",\"city\":\"San Francisco\",\"postal\":\"94109\",\"latitude\":\"-123.423\",\"longitude\":\"123.123\",\"ipAddress\":\"12.45.67.89.0\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/keys/update:
    put:
      tags:
        - AccountKeys
      summary: Account - Keys - Update
      description: |-
        This endpoint is titled "Account - Keys - Update" and it's used to update the specific keys related to an account in a system. It sends a PUT HTTP request to the given URL, "http://localhost:3000/api/account/keys/update". PUT is a method used to update resource available on the server. Here is a detailed explanation about each component in the request:

        1. `auth`: This object sets the authorization strategy for your request. Here, it's a bearer token authorization. It contains a bearer token string which needs to be passed in the 'token' key.

        2. `method`: This field is for specifying the HTTP method. In this case, it's a PUT method which is used for updating existing resources.

        3. `url`: This is the endpoint URL where the request will be sent. Here, it's running on localhost on port 3000.

        4. `headers`: This is a list where you define request headers. Here, we have a "Client-UUID" key with a default string value, which is likely used to uniquely identify the client.

        5. `body`: This is the request payload, it contains necessary information to update an account's keys. The 'mode' property is set as 'raw', implying that you have to provide a input JSON object in 'raw' format.

            - `keysId`: Unique identifier for the keys associated with an account.
            - `sessionId`: The session identifier.
            - `accountId`: The account identifier.
            - `country`: The country associated with the key's location (in this case, "United States").
            - `region`: The region associated with the key's location (here, "California").
            - `city`: The city associated with the key's location (here, "San Jose").
            - `postal`: The postal code associated with the key's location.
            - `latitude` and `longitude`: Geographical coordinates for the key's location.
            - `ipAddress`: The IP address associated with the request to update the keys.
            
        It's important to provide valid data for all these fields for the request to be processed correctly.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"keysId\":\"f7e29500-b1a9-4d5a-a68b-23ece984b2d4\",\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"country\":\"United States\",\"region\":\"California\",\"city\":\"San Jose\",\"postal\":\"94109\",\"latitude\":\"-123.423\",\"longitude\":\"123.123\",\"ipAddress\":\"12.45.67.89.0\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/keys/get:
    get:
      tags:
        - AccountKeys
      summary: Account - Keys - Get
      description: |-
        The provided endpoint contains detailed information about how to retrieve account keys using a GET request. Here's a detailed explanation for each data point:

        1. "name": This represents the name of the endpoint. In this case, the name is "Account - Keys - Get", signifying that this endpoint is utilized to retrieve keys associated with a specific account.

        2. "request": This field specifies the type of the request, the associated authorization details, the target URL of the request, headers, and the body. Each attribute under this field is as follows -

           a. "auth": The "auth" field contains details about the authorization required to use this API. It includes type of the authorization, which is "bearer" and the object array "bearer" that includes the "key", which is the authorization token name, "value", which is the bearer token, and "type" which is the datatype of the token.

           b. "method": This is the request method, which for the provided endpoint is GET. This means data is being retrieved or 'got' from the server.

           c. "url": This is the URL where the API request would be sent. The URL parameters include keysId, sessionId, and accountId. These parameters are used to specify a unique set of keys, session, and account respectively that are targeted by this request.

           d. "headers": Headers let the server and client pass additional information with an HTTP request. In this case, no key-value pairs are provided and it's set to default, meaning no custom headers are being used unless they are disabled.

           e. "body": The "body" field provides the request's body. As per the provided data, "mode" suggests it's in "raw" form. However, since the request method is GET, the "raw" body is empty.

        If you're using this API, make sure to replace the dummy "token", "keysId", "sessionId", and "accountId" with actual valid values.
      security:
        - bearerAuth: []
      parameters:
        - name: keysId
          in: query
          schema:
            type: string
          example: keysId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/keys/all:
    get:
      tags:
        - AccountKeys
      summary: Account - Keys - Get All
      description: |-
        This endpoint is called "Account - Keys - Get All". It's responsible for fetching all the keys related to a particular account.

        Here is a description of all the elements in the endpoint:

        1. **name:** This is the name of the endpoint. This is how you would refer to the endpoint in the documentation or when discussing it with other developers. In this case, the name indicates that this endpoint is used to get all keys for a given account.

        2. **request:** This object contains all information required to make the HTTP request.

        3. **auth:** This is the authorization method that is used when making the request. For this endpoint, the authorization is of the type "bearer" which means it uses a bearer token for authorization. A bearer token is a type of access token that is issued to the client.

        4. **bearer:** This is an array of objects that contains the bearer token for the request. Each object has a "key", "value", and "type". The "key" is the name given to the token, the "value" is the actual value of the token, and the "type" is the data type of the token.

        5. **method:** This is the HTTP method used for the request. In this case, it's a "GET" request, which means data is being retrieved from the server. 

        6. **url:** This is the URL where the request will be sent. In our case, it's "http://localhost:3000/api/account/keys/all/?sessionId=sessionId&accountId=accountId". It includes query parameters for "sessionId" and "accountId", presumably used to identify the relevant session and account.

        7. **headers:** This is an array of objects, each representing a header that will be included in the request. Currently, the endpoint provides a default empty header which is disabled. Headers can include metadata about the request or other necessary information.

        8. **body:** This is the body of the request. For this endpoint, the "body" is set as "raw", but no data is needed or included as part of the request since it's a "GET" request.

        This is a high-level overview of the endpoint data. For all specific data usage, please refer to the application's API documentation or any inline comments provided in the application code.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/keys/delete:
    post:
      tags:
        - AccountKeys
      summary: Account - Keys - Delete
      description: |-
        The data provided describes the details of an Endpoint (in an API) for Account - Keys - Delete operation. Here's a detailed description of each datapoint:

        1. **name**: This represents the name of the endpoint, which in this case is "Account - Keys - Delete". This endpoint is designed to delete keys from a specific account.
           
        2. **request**: This encapsulates all the details needed to make the actual HTTP request.
           
        3. **auth**: This field describes the authorization details used for the request. It uses a bearer token for authorization. 

            - **type**: The type of authentication applied, which is "bearer" in this case.
           
            - **bearer**: This is an array containing bearer token details. Each object inside the bearer array includes:

                - **key**: The key is set as "token".
               
                - **value**: It holds the actual token value, denoted as "sessionId".
               
                - **type**: Defines the datatype of the value of the key, here it is "string".

        4. **method**: The HTTP method used for the request. In this case, the request method is POST which is typically used to send data to the server.

        5. **url**: The URL where the API request is to be sent. In this case, it's "http://localhost:3000/api/account/keys/delete".

        6. **headers**: An array containing the details of the headers to be sent along with the request. This example has a default header with no key-value pair.

        7. **body**: Contains the details of the body to be sent along with the request.
            
            - **mode**: This field tells what type of body is being sent with the request, here it's "raw".
                
            - **raw**: This contains the raw data in the form of a JSON object to be sent in the body of the request. It contains three fields
         
                - **sessionId**: String representing the session identifier.
               
                - **accountId**: String representing the account identifier.
               
                - **keysId**: String representing the keys identifier to delete from the account.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"keysId\":\"keysId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/location/create:
    post:
      tags:
        - AccountLocation
      summary: Account - Location - Create
      description: |-
        This endpoint is referred to as "Account - Location - Create". It uses a "POST" method for creating a new location entry for a specific account. Below is the detailed description of each field in this endpoint.

        1. **name**: This field indicates the name of this endpoint, which is "Account - Location - Create".

        2. **request**: This field contains all the necessary information required to make a request to this endpoint.

        3. **auth**: This field specifies the authentication method needed for this endpoint. In this case, it's 'Bearer' authentication and the token is provided as the value.

            a. **type**: The type of authorization required which is 'Bearer'.
            
            b. **bearer**: An array containing the key-value pair for bearer token. The key is 'token' and the value is 'BearerToken'. The type confirms the value is a string format.

        4. **method**: The HTTP method used for the request. For this endpoint, it's "POST".

        5. **url**: The URL for the request is 'http://localhost:3000/api/account/location/create'.

        6. **headers**: An array that contains the key/value pairs to be sent in the header of the request. In this case, it's empty and disabled.
           
        7. **body**: This field contains the data to be sent with the request. 

            a. **mode**: Specifies the mode of the body of the request. Here it is in 'raw' format.
            
            b. **raw**: The raw data to be included in the body of the request, described in JSON format. It contains the following keys:

                    - accountId: Identifies the account for which the location is to be created.
                    - sessionId: Identifies the session related to the account.
                    - country: The country of the location (e.g., "United States").
                    - region: The region of the location (e.g., "California").
                    - city: The city of the location (e.g., "San Francisco").
                    - postal: The postal code of the location (e.g., "94109").
                    - latitude: The geographical latitude of the location (e.g., "-123.423").
                    - longitude: The geographical longitude of the location (e.g., "123.123").
                    - ipAddress: The IP address related to the location (e.g., "12.45.67.89.0").

        Thus, this endpoint is used to create a location entry for an account with the provided attributions in JSON format within the body of the request. The endpoint requires 'Bearer' authentication and the request is of 'POST' type.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"accountId\":\"accountId\",\"sessionId\":\"sessionId\",\"country\":\"United States\",\"region\":\"California\",\"city\":\"San Francisco\",\"postal\":\"94109\",\"latitude\":\"-123.423\",\"longitude\":\"123.123\",\"ipAddress\":\"12.45.67.89.0\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/location/update:
    put:
      tags:
        - AccountLocation
      summary: Account - Location - Update
      description: |-
        This endpoint is titled "Account - Location - Update". It gives you the ability to update the location details of a specific account. The request uses a 'PUT' method which indicates this action of modification.

        The request is authenticated with a token, provided as a "bearer" type. The key for this authentication method is simply called "token" and the value it uses is named "BearerToken". The type of value it requires is a string.

        The request URL is "http://localhost:3000/api/account/location/update".

        The header of the request contains a "Client-UUID". This is a default type of key that holds "ClientUUID" as a value. It aids in uniquely identifying each client connection.

        The request body uses the "raw" mode and contains all the information related to the account location to be updated. The individual data descriptions are as follows:

        - "locationId": a unique identifier for a particular location
        - "sessionId": a unique identifier for the current session
        - "accountId": a unique identifier for the specific account
        - "country": the name of the country of the location
        - "region": the name of a specific region within the country
        - "city": the name of the city 
        - "postal": the postal or zip code 
        - "latitude": the latitude coordinate for the location 
        - "longitude": the longitude coordinate for the location 
        - "ipAddress": the IP address of the user updating the location

        All data values in the body are assumed to be strings, and as such they must be enclosed in quotes.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"locationId\":\"f7e29500-b1a9-4d5a-a68b-23ece984b2d4\",\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"country\":\"United States\",\"region\":\"California\",\"city\":\"San Jose\",\"postal\":\"94109\",\"latitude\":\"-123.423\",\"longitude\":\"123.123\",\"ipAddress\":\"12.45.67.89.0\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/location/get:
    get:
      tags:
        - AccountLocation
      summary: Account - Location - Get
      description: |-
        This data refers to an API endpoint named "Account - Location - Get". It deals with retrieving location related information associated with a specific user account. 

        1. "name": This field refers to the name of the API endpoint. In this case, the name of the endpoint is "Account - Location - Get".

        2. "request": This field contains the details for making the API request.
           
            a. "auth": This section contains information related to the method of authentication. The "type" field indicates that a bearer token is being used for the API request authorization. The "bearer" array holds information about the token key and its value.
           
            b. "method": This field specifies the HTTP method to be used for the request, which is "GET" in this case.
           
            c. "url": This field defines the exact URL to which the request is to be sent. It contains parameters called "locationId", "sessionId", and "accountId". These parameters are placeholders and are expected to be replaced by actual values during the execution of the request. 

            d. "headers": This field represents the HTTP headers to be sent with the request. The "key" and "value" are left blank intentionally indicating that there are no additional headers needed for this request.

            e. "body": This field represents the body of the request. "mode" field specifies that the body content type is "raw". However, the "raw" field doesn't contain any data, indicating that GET request does not require a body.

        Remember to replace all the placeholder values in the "url" with actual values before sending the request. Also, ensure that the "token" field under "auth" is updated with a valid bearer token for successful authorization.
      security:
        - bearerAuth: []
      parameters:
        - name: locationId
          in: query
          schema:
            type: string
          example: locationId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/location/all:
    get:
      tags:
        - AccountLocation
      summary: Account - Location - Get All
      description: |-
        This endpoint is named "Account - Location - Get All". Its main function is to retrieve all the location data related to a specific account.

        The request uses a 'GET' method, which implies that information is being fetched from this particular URL: "http://localhost:3000/api/account/location/all/?sessionId=sessionId&accountId=accountId". From this URL, we can observe that the request is being sent to an API related to account locations, on a locally hosted server (localhost) running on port 3000. 

        Two parameters are required in the root URL - 'sessionId' and 'accountId'. The 'sessionId' parameter is likely tied to the active session of the requester, presumably for security and tracking purposes. The 'accountId' parameter is probably related to the specific account from which all location data are required. Both of these parameters should be populated with appropriate values for this request to function correctly. 

        Bearer token authentication is utilized for this request as specified under the 'auth' section. This indicates that a token, identified by "BearerToken" under the bearer section would need to be provided for successful validation and subsequent execution of this request. 

        No specific headers are required for this request as the key-value pair under the 'headers' section is left empty and is marked as "disabled". 

        The 'body' mode for this request is set to 'raw', but since no raw input is mentioned, it is concluded that this endpoint does not need an HTTP body payload. 

        In Summary, to use this endpoint, one would need the two parameters 'sessionId' and 'accountId' to be correctly filled in the URL, as well as a valid bearer token to be supplied under the 'auth' section.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/location/delete:
    post:
      tags:
        - AccountLocation
      summary: Account - Location - Delete
      description: |-
        This endpoint is named "Account - Location - Delete", suggesting it is used to remove a location record associated with a certain account.

        Authorization for this endpoint is provided through a bearer token. The "key" is named "token" and its "value" is obtained from a session ID, which is represented as a string.

        The request method for this endpoint is POST. This implies that it sends data to the server to create a new resource (in this case, a deletion request).

        The URL designated for this endpoint is "http://localhost:3000/api/account/location/delete". This is where the server listens for incoming requests. It's on your local machine, specifically, as is indicated by "localhost:3000".

        There's an array of headers in the request where you can set additional information about the request. It currently contains a default header with empty key-value pair that is disabled.

        The "body" section carries the data for the request. Its mode is "raw" which means the data is sent as is, a JSON payload in this case. The "raw" field contains a JSON string which includes "sessionId", "accountId", and "locationId". This implies that the deletion operation should target the "locationId" attached to an "accountId" within the current "sessionId".

        Recap: This endpoint deletes a location associated with a given account in the provided session, as indicated by the respective IDs in the request body. It uses bearer token authorization parsed from a session ID.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"locationId\":\"locationId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/accountCreated:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Account Created
      description: |-
        The provided data appears to be related to an API endpoint specifically designed to confirm the creation of an account. The key elements can be broken down as follows:

        - **name:** The name is 'Account - Send - Account Created'. It identifies this particular endpoint. This string is typically used by developers to understand what the endpoint is for, particularly during testing.

        - **request:** This details the HTTP request to be made; in this case, a POST request.

          - **auth:** This object details the authentication required in order to access this endpoint. Specifically, it uses a 'bearer token' type of authentication. The token (value = 'BearerToken') must be supplied in string format (type = 'string') to gain access.

          - **method:** The HTTP method used is 'POST'. This is generally used to send data to a server to create/update a resource.

          - **url:** The URL for this endpoint is 'http://localhost:3000/api/account/send/accountCreated'. This is the target address on the server where the HTTP request should be sent.

          - **headers:** The headers object is generally used to define the operating parameters for HTTP transactions. Here, the only defined header element is set to 'default' type and is disabled (disabled = true). The key and value are both empty, meaning no specific HTTP header is defined.

          - **body:** The body object pertains to data that must be sent in the HTTP request. In this case, the body content is in 'raw' format (mode = 'raw'), featuring a JSON string that includes 'sessionId' and 'accountId'. These are placeholders for the actual session ID and account ID that should be sent in the body of the POST HTTP request.
          
        Every time a POST request is made to this endpoint, an account is created, identified by the 'sessionId' and 'accountId'. This endpoint, therefore, is critical in creating user accounts for your application.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/verificationEmail:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Verification Email
      description: |-
        This data describes an endpoint titled "Account - Send - Verification Email". 

        1. `name`: This defines the name of the endpoint. It is named "Account - Send - Verification Email". 

        2. `request`: This section houses all the information about the HTTP request that is sent to the server. 

            A. `auth`: The `auth` section describes the type of authorization used for the request. The type specifies the format of authorization, and in this case, it is 'bearer'. The `bearer` is an array of authentication-related objects.
            
                 - `key`: The key is the identifier for the authentication value. Here, it is labeled "token".
                 - `value`: The value tag in the bearer array symbolizes the actual token value. Here, it is represented as "BearerToken".
                 - `type`: The type indicates the data type of the bearer token. Here, it is "string".

            B. `method`: The method property indicates the HTTP method used to send the request to the API. In this case, it's a "POST" request.

            C. `url`: This is the URL that the API request will be sent to. Here, it is "http://localhost:3000/api/account/send/verificationEmail".

            D. `headers`: An array of objects signifying the collection of HTTP headers enclosed with the request.
            
                 - `key`: This element indicates the name of the header field. It is empty in this case.
                 - `value`: This represents the associated value for the corresponding header key. In this case, it is also empty.
                 - `type`: Denotes the header content type. It is labeled as "default" in this instance.
                 - `disabled`: Shows whether the header is enabled or not. In this case, it is set to true, meaning the header is disabled.

            E. `body`: Contains the actual request body sent to the API.
            
                - `mode`: Determines the format of the body sent with the request. In this case, it is "raw", indicating unprocessed data.
                - `raw`: Contains the actual raw body content. Here, it is a JSON string with property "email" and value "email".
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"email\":\"email\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/verificationSMS:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Verification SMS
      description: |-
        This endpoint is named `Account - Send - Verification SMS`. It uses the `POST` method to send a verification SMS to a user's phone.

        - `auth`: The endpoint uses `bearer` authentication, which means you need to provide a bearer token in the request header. The key for this token is `token` and its initial value is `BearerToken`. The token's data type is `string`. You will likely replace `BearerToken` with an actual token value when you run this endpoint.

        - `method`: This is a `POST` endpoint. That means it is designed to accept and process the submitted data.

        - `url`: The endpoint's URL is `http://localhost:3000/api/account/send/verificationSMS`. You can replace `localhost:3000` with any server's address where this API is running.

        - `headers`: By default, this API does not require any additional request headers. The header object is set to `disabled` and both the `key` and `value` properties are empty strings. You can add headers if required for your application.

        - `body`: The body of the request should be a 'raw' JSON object that includes the phone number where the verification SMS will be sent. The `phone` field should contain the phone number.

        Remember to replace the `BearerToken` with an actual bearer token and the `phone` field value with an actual phone number when you run this endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"phone\":\"phone\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/emailAddressChanged:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Email Address Changed Notification
      description: |-
        1. "name": This field contains the name of the current action that's been taken; in this case, it is sending a notification about an account email address change.

        2. "request": This field encapsulates all the data related to making the specific API request.

        2.1. "auth": It represents the authentication of the API request. The "type" of authentication here is a "bearer" token which means that the sender is the bearer of the token.

            2.1.1. "bearer": It is an array containing the bearer token type credentials, represented by an object holding the properties "key", "value", and "type". The "key" value is the token name, "value" is the actual token, and "type" indicates the data type of the value as string.

        3. "method": This field represents the HTTP method used for the API request. A "POST" method is used here which generally means the request is intended to send data to the server.

        4. "url": This field specifies the URL where the API request would be sent.

        5. "headers": This field is an array of objects which contains the additional information to pass together with the request. Here, an object is present with "key" as "Client-UUID", a unique identifier for the client, the "value" is the actual UUID value and "type" indicates it's a default header.

        6. "body": This section includes the exact data that'll be sent with the POST request.

            6.1. "mode": This field signifies the way the body will be sent. In this case, "raw" indicates the body content will be sent as a raw data string.

            6.2. "raw": This field consists of the actual raw data string which is a JSON string including "sessionId", "accountId", and "email" as properties. "sessionId" represents the session's unique identifier, "accountId" is the account's unique identifier and "email" is the new email address.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"email\":\"email\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/phoneNumberChanged:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Phone Number Changed Notification
      description: |-
        This endpoint accepts a POST request to the path "http://localhost:3000/api/account/send/phoneNumberChanged". It's used to notify the system that the phone number associated with the provided account has been changed.

        Let's break the request into parts:

        1. `"name"`: The name field provides a descriptive label for the endpoint. In this case, the name suggests an action, which in terminalogy, "sends a notification for a changed phone number on an account".

        2. `"auth"`: This is the type of authorization needed to access the endpoint with bearer as the authentication method. This means a bearer token needs to be attached in the header of the request for successful authorization. 
           - `"key"`: Describes the key used within the bearer authorization, which here is "token".
           - `"value"`: The value associated with the key. For this request, the value should be the actual bearer token, "BearerToken" is just a placeholder.

        3. `"method"`: The HTTP verb associated with the request. In this case, it's a "POST" method, which is typically used to send data to a server to create a new resource.

        4. `"url"`: The URL field contains the endpoint's path. This is required for determining where the request will be sent.

        5. `"headers"`: These are additional pieces of information required by the server.
           - `"key"`: The header's key which is "Client-UUID".
           - `"value"`: The value associated with the key in the header, represented here by "ClientUUID".

        6. `"body"`: Contains the data that is sent to the server. In "raw" mode, the data must be a string, often in JSON format.
           - `"sessionId"`: Identifies the current user's session. This ID is unique to a user's session.
           - `"accountId"`: The unique identifier for the user's account.
           - `"email"`: The email associated with the user's account.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"email\":\"email\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/passwordChanged:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Password Changed Notification
      description: |-
        This endpoint is named "Account - Send - Password Changed Notification". It is responsible for sending notification when a user changes their password.

        **Authentication:**
        The endpoint requires Bearer authentication. The bearer token needs to be provided in under the "token" key.

        Key: 'token'
        Value: 'BearerToken'
        Type: 'string'

        The value is where you'll substitute the actual bearer token when making your request.

        **Method:**
        The request method for this endpoint is POST.

        **URL:**
        This endpoint is to be hit at 'http://localhost:3000/api/account/send/passwordChanged'. This URL is bound to change depending on the environment/server where this service is deployed.

        **Headers:**
        This endpoint requires one additional header 'Client-UUID' which must be included with each request. The value for 'Client-UUID' corresponds to your project's unique identifier.

        Key: 'Client-UUID'
        Value: 'ClientUUID'
        Type: 'default'

        **Body:**
        The request body should be in `raw` mode and contains the following keys:

        - sessionId : Represents the ongoing session ID.
        - accountId : The unique identifier of the account.
        - email : The email associated with the account.

        An example body would look like 

        ```json
        {
          "sessionId":"MySessionId",
          "accountId":"MyAccountId",
          "email":"MyEmail"
        }
        ```

        In this example, `MySessionId`, `MyAccountId`, and `MyEmail` should be replaced with actual values while making the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"email\":\"email\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/passwordResetEmail:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Password Reset Code to Email
      description: |-
        Here's a detailed description of each data field in this API endpoint:

        1. "name" - This denotes the name or title of the API endpoint. It's a significant identifier that describes what the API endpoint does. In this case, "Account - Send - Password Reset Code to Email" suggests that the API endpoint is used to transmit password reset codes to email addresses linked with user accounts.

        2. "request" - This outlines the specifics of the HTTP request that will be made. It includes several sub-components detailing the manner and content of the method.

        3. "auth" - This presents information about the authentication protocol that the API will employ for the HTTP request. The "type" is "bearer", implying that the request will utilize bearer token authentication.
           
            "bearer" is an array comprises a single object carrying three properties:
           
           - "key": Represents the header field for the bearer token, here it is named as "token".
           
           - "value": The actual token/credential that's used for authentication. Here it's called "BearerToken".
           
           - "type": Describes the data type of the "value". In this case, it is a string.

        4. "method" - This data field signifies the HTTP method for the request. In this case, "POST" indicates that the endpoint is expecting data to be sent in the request body for processing.

        5. "url" - This contains the exact URL that the request will call. Here the API endpoint is hosted locally on port 3000.

        6. "headers" - This includes any headers required for the request. In this case, a client UUID (Universally Unique Identifier) should be mentioned as the header with the key called "Client-UUID".

        7. "body" - This pertains to the main content of the request. "mode" is set to "raw", which means the request will be made with the raw data as is, without any encoding or modifying. Under "raw", several items need to be sent in JSON form:
           
           - "sessionId": A unique identifier for a single browsing session.
           
           - "accountId": Identifier for a specific user account.
           
           - "securityCode": Security code arranged to verify the identity of the user. In this example, its value is set as '123'.
           
           - "email": The email address linked with the user's account. In this case, `fortunevieyra@icloud.com` is the account email where the reset password link will be dispatched.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"securityCode\":\"123\",\"email\":\"fortunevieyra@icloud.com\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/passwordResetSMS:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Password Reset Code to SMS
      description: |-
        This endpoint is named "Account - Send - Password Reset Code to SMS". It adopts the POST method, indicating that it is designed to push (insert) data to the server. The request URL of this endpoint is "http://localhost:3000/api/account/send/passwordResetSMS". This suggests that it is locally hosted and used for sending password reset codes to a specified SMS.

        It requires bearer authentication. It means you need to supply a bearer token which is used to authorize and authenticate the request.

        "token": This is a string type data where the bearer token should be placed. The placeholder value here is "BearerToken."

        Under Headers, we find additional authorization parameters.

        "Client-UUID": It refers to the unique identifier used to recognize individual clients invoking this API endpoint. Put your Client UUID in the place of 'ClientUUID' here.

        Coming to the body of the endpoint, it contains a raw JSON object with the following data,

        "sessionId": It refers to the unique session identifier. Replace 'sessionId' with the actual session Id.

        "accountId": It refers to a specific user's account identifier. 'accountId' here needs to be replaced with the actual account Id.

        "securityCode": A placeholder (123456) for the security code used in the password reset process. It should be replaced with a real security code.

        "phone": A placeholder (18327051031) for the phone number to which the password reset SMS will be sent. It should be replaced with the target phone number.
          
        Please ensure to replace all the placeholder values with real-time data while using this endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"securityCode\":\"123456\",\"phone\":\"18327051031\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/newMessage:
    post:
      tags:
        - AccountSend
      summary: Account - Send - New Message Notification Email
      description: |-
        The provided data describes a POST endpoint for sending a new message notification email in an account.

        1. `name`: This is the unique identifier or the title of the endpoint. In this case, it is "Account - Send - New Message Notification Email".

        2. `request`: This encapsulates all the information needed to make the API call.

           - `auth`: Specifies the authentication details.
             - `type`: It denotes the type of authentication. Here, it is a "bearer" type.
             - `bearer`:[{...}]: This array contains an object defining a bearer token, specified by:
               - `key`: The key "token" used for identification during authentication.
               - `value`: It is the actual bearer token to be used. Here, it is denoted as "BearerToken".
               - `type`: It defines what type of data the bearer token is. Here, it is a "string".

           - `method`: The HTTP method employed for calling the API. Here, it is "POST".
          
           - `url`: The URL to which the request is made. For the given data, the API endpoint is "http://localhost:3000/api/account/send/newMessage".

           - `headers`: An array containing all the headers to be included in the request.
             - `key`: The identifying key for the header. Here, it is "Client-UUID".
             - `value`: The corresponding value to the key. In this case, "ClientUUID".
             - `type`: The kind of header it is. Here, it is "default".

           - `body`: This includes the body of the HTTP request.
             - `mode`: Indicates the mode of the request body. For this endpoint, it's "raw".
             - `raw`: Contains the actual body of the request sent to the server as a raw string. This string could ideally be a properly formatted JSON, XML, or even just plain text. Here, it is a JSON string containing sessionId, accountId, sender and message properties.
          
        The body values:
        - `sessionId`: The unique identifier for a specific session.
        - `accountId`: Represents the id of the account.
        - `sender`: A string that represents the sender's name. In this case,  "Fortune Vieyra".
        - `message`: The actual content of your message. Provided example is a greeting, "Hello World".
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"sender\":\"Fortune Vieyra\",\"message\":\"Hello World\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/newFollowers:
    post:
      tags:
        - AccountSend
      summary: Account - Send - New Followers Notification Email
      description: |-
        This endpoint, named "Account - Send - New Followers Notification Email", is designed to automatically send an email notification when a user has new followers on their account. It utilizes the `POST` method and interacts with a specific `API` at "http://localhost:3000/api/account/send/newFollowers".

        Starting with `auth` block, it employs `bearer token` authentication which denotes that to achieve successful communication with this API, you'll need to include the relevant access token string under the `bearer` field in the `auth` section. The placeholder for this token is represented as "BearerToken".

        The `request` section also defines a `client-UUID` header where a universally unique client identifier must be substituted in place of "ClientUUID". This identifier is used to uniquely identify each client that uses this endpoint.

        And finally, the `body` section of the request takes three key parts which are `sessionId`, `accountId`, and `newFollowers` in JSON format. The `sessionId` and `accountId` refer to the unique identifiers for a user's session and account respectively where you would replace "sessionId" and "accountId" with actual values. For the `newFollowers`, it takes an array of strings replacing "John Smith","Andy Lee","Michael Jordan" with the actual names of new followers.

        Remember that all the data provided in `request` section should adhere to the right string format as stipulated for each item. Keep your `token`, `ClientUUID`, `sessionId` and `accountId` confidential in order to uphold the security of your data.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"newFollowers\":[\"John Smith\",\"Andy Lee\",\"Michael Jordan\"]}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/streamerNewComment:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Streamer New Comment Notification Email
      description: |-
        This API endpoint is named "Account - Send - Streamer New Comment Notification Email". The endpoint is designed to send a notification email to a user (presumably a streamer), whenever a new comment is made on their content.

        Authentication: This endpoint requires an authentication method of type 'Bearer'. The 'BearerToken' needs to be passed as the value for the 'token' key in the authentication section of the request.

        HTTP Request Method: The request method used for this endpoint is POST.

        URL: The endpoint resides at the URL "http://localhost:3000/api/account/send/streamerNewComment". 

        Headers: The request requires a header field of 'Client-UUID', it is used to identify the client making the request. The value for the 'Client-UUID' field in the headers section is 'ClientUUID'.

        Body: The body of the request should be in 'raw' format. There are four data fields to be included in the body of the request.

        - "sessionId": This refers to the unique identifier for the streaming session. Replace 'sessionId' with the valid session ID.
        - "accountId": It represents the unique identifier for the user's account. Replace 'accountId' with the valid account ID.
        - "commenterId": The unique identifier for the person who made the comment. The placeholder value here is a UUID, and should be replaced with the ID of the commenter.
        - "comment": The content of the comment made by the commenter. It is filled with placeholder text 'HELLO WORLD!'
          
        Please ensure to replace these placeholder values with actual data during implementation.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"commenterId\":\"12345AD3DS-ASDFSA2-ASDFASD-2ASDFASD\",\"comment\":\"HELLO WORLD!\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/streamerTeamDraftRequest:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Streamer Team Draft Request Email
      description: |-
        This endpoint is named "Account - Send - Streamer Team Draft Request Email". It is designed to send a team draft request email through the streamer account. Here's a detailed description of all components of the endpoint:

        1. Auth: This endpoint uses bearer token authentication, which means that the server and client could pass a `token` as the value of the bearer token to authenticate each other. The type of the `token` is string.

        2. Request Method: The HTTP method used by this endpoint is `POST`, which means it submits data to be processed to a specified resource.

        3. URL: This HTTP request is sent to the URL: `http://localhost:3000/api/account/send/streamerTeamDraftRequest`.

        4. Headers: This HTTP request contains headers, which allow the client to pass additional information about the request or about itself, to the server. The `Client-UUID` is sent as a header with the type set to `default`. Replace `ClientUUID` with the unique identifier of the client.

        5. Body: The body of this request contains the data to be sent to the server. The data is sent in `raw` mode which contains the following parameters:
          
            - `sessionId`: A unique identifier for the session.
          
            - `accountId`: The account identifier of the user.
          
            - `ownerId`: The unique identifier of the owner. The value `KALSDF98-OJOASDF9=OASKDHFL-OIUAHSD89=ASDFDSS` is just a placeholder and needs to be replaced with the actual ownerId.

        Make sure to replace the placeholder data with actual values when making the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"ownerId\":\"KALSDF98-OJOASDF9=OASKDHFL-OIUAHSD89=ASDFDSS\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/userNewComment:
    post:
      tags:
        - AccountSend
      summary: Account - Send - User New Comment Request Email
      description: |-
        This endpoint is named "Account - Send - User New Comment Request Email". It is designed to send an email notification to a user when a new comment is made on their account.

        Here is a breakdown of the data:

        - `auth`: This specifies the authorization method that is being used. In this case, the type is "bearer". The bearer key-value pair should be supplied, having a value of type string. 

        - `method`: This specifies the HTTP method that should be used for the request. In this case, the POST method is used, indicating that data will be sent to the server.

        - `url`: This is the URL that the request will be sent to. The path `http://localhost:3000/api/account/send/userNewComment` is the designated route for sending user new comment request emails.

        - `headers`: This is an array of objects that represents the headers that should be included in the HTTP request. The Client-UUID key, which carries a value of type default is required, you need to substitute "ClientUUID" with the appropriate value.

        - `body`: This describes the data that is being sent in the request. The body content is in raw format. The raw string contains a JSON object with four properties:
          
          - `sessionId`: A string that uniquely identifies the current session.

          - `accountId`: A string that uniquely identifies the account that the comment is being made on. 

          - `commenterId`: A unique identifier for the user who has made the comment. The example provided is a placeholder and should be replaced with the actual value.

          - `comment`: A string representing the content of the user's comment. The example "HELLO WORLD!" is a placeholder for actual comment.

        Do replace the placeholder values with actual values before making the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"commenterId\":\"12345AD3DS-ASDFSA2-ASDFASD-2ASDFASD\",\"comment\":\"HELLO WORLD!\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/userTeamDraftRequest:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Users Team Draft Request Email
      description: |-
        This endpoint is named 'Account - Send - Users Team Draft Request Email'. Its purpose is to facilitate a POST request to send a draft request email to the user's team in your account.

        1. Authentication:
           This endpoint is protected by 'bearer' authentication type. The bearer token is passed to authenticate requests made to the endpoint. The 'token' key holds the value of the bearer token in string format.

        2. HTTP Method: 
           This endpoint uses the 'POST' HTTP method. A POST method is used when you want to send some data to the server, for example, file update, form data, etc.

        3. URL: 
           The URL to which the request is to be sent is 'http://localhost:3000/api/account/send/userTeamDraftRequest'. This URL may change depending on the running environment of your application.

        4. Headers: 
           The 'Client-UUID' is the only header key in this endpoint. The value for this key should be your client's unique identifier. It must be sent in the request headers to the server for identification purposes.

        5. Body:
           The body of the request is in 'raw' format. It consists of:
           - 'sessionId', which should hold the unique session identifier.
           - 'accountId', that should include the unique id of the user's account.
           - 'streamerId', a unique identifier to identify individual streamers. 

        Please replace 'BearerToken', 'ClientUUID', 'sessionId', 'accountId', and 'streamerId' with their actual values when using this API endpoint. 

        Remember to adhere to the correct data types (e.g., strings) for each of these fields to avoid unexpected errors.

        This endpoint will handle the logic behind the sending of the draft request email to all members of your user's team.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"streamerId\":\"12345AD3DS-ASDFSA2-ASDFASD-2ASDFASD\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/settings/create:
    post:
      tags:
        - AccountSettings
      summary: Account - Settings - Create
      description: |
        The given endpoint information has the following data:

        1. `name`: "Account - Settings - Create". This indicates the purpose or function of the endpoint. It is used to create settings for an account.

        2. `request`: A container for the various details of the API request.

            a. `auth`: The authentication method used for the endpoint is a bearer token, defined as a JSON object. This object contains a `key` "token", indicating the reference name for the token. Its corresponding `value` is "BearerToken". Its `type` is "string", signifying the data format.

            b. `method`: "POST". This represents the HTTP method to be used when making a request to the endpoint. Since it's a POST request, it means this endpoint is used to send data to the server to create a new resource.

            c. `url`: "http://localhost:3000/api/account/settings/create". This is the URL of the server where the request will be made. It indicates where the API service is hosted.

            d. `headers`: An array for storing header data. In this instance, it doesn't contain any active data as shown by `disabled` set to `true`, it's typically used to define the metadata of the HTTP request.

            e. `body`: This is used to specify the data to be sent to the server. Its `mode` is "raw", meaning that data are sent in an unprocessed form. The `raw` property contains the actual data to be sent to the server as a JSON object. Here, it's sending "accountId" and "sessionId" as key-value pairs.

        Please note that actual values for "accountId" and "sessionId" in the `body` and "BearerToken" in the `auth` must be replaced by the user with actual valid tokens to successfully use this endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"accountId\":\"accountId\",\"sessionId\":\"sessionId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/settings/update:
    put:
      tags:
        - AccountSettings
      summary: Account - Settings - Update - Payments
      description: |-
        This endpoint is named "Account - Settings - Update - Payments" and it is used to update an account's payment settings. It uses the HTTP PUT method.

        The 'auth' field includes the authentication type, which is 'bearer' and takes a 'token' whose value is 'BearerToken'. This is a string type.

        The 'request' field refers to the actual request made to the endpoint. The 'url' field in the 'request' object is the endpoint to which the request is being made, in this case, it is "http://localhost:3000/api/account/settings/update".

        In the 'headers' section, there is a Client-UUID. This holds unique identification for each client.

        The 'body' section contains the details of the user's account settings that are to be updated. It includes important details like session id, account id, settings key, personal information like name, email id, phone no., address, business-related details like company name, tax ID number, business type and structure, bank details like name, account number, email id, routing number. It also includes various other payment source details related to PayPal, Cash App, Venmo, Zelle, BitPay, etc along with their respective auth tokens. A minimum payout amount is also mentioned along with the frequency of occurrence of the payout (monthly in this case) and the preferred payout method. The start date for payout is provided at the end.

        All of these details will be sent as raw data in JSON format in the HTTP body.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\": \"sessionId\",\"accountId\": \"accountId\",\"settingKey\": \"payments\",\"firstName\": \"John\",\"lastName\": \"Doe\",\"birthday\": \"1990-01-01\",\"email\": \"john.doe@example.com\",\"phoneNumber\": \"+1234567890\",\"addressLine1\": \"123 Main St\",\"addressLine2\": \"Apt 456\",\"city\": \"Anytown\",\"state\": \"CA\",\"country\": \"US\",\"zipCode\": \"12345\",\"companyName\": \"ABC Inc\",\"taxIdNumber\": \"123-45-6789\",\"businessType\": \"LLC\",\"businessStructure\": \"Corporation\",\"bankFirstName\": \"John\",\"bankEmailAddress\": \"john.bank@example.com\",\"bankLastName\": \"Doe\",\"bankPhoneNumber\": \"+1234567890\",\"bankName\": \"Bank of Example\",\"bankAccountNumber\": \"123456789\",\"bankRoutingNumber\": \"987654321\",\"paypalSource\": \"john.paypal@example.com\",\"paypalAuthToken\": \"paypal-auth-token\",\"cashAppSource\": \"john.cashapp\",\"cashAppAuthToken\": \"cashapp-auth-token\",\"venmoSource\": \"john.venmo\",\"venmoAuthToken\": \"venmo-auth-token\",\"zelleSource\": \"john.zelle@example.com\",\"zelleAuthToken\": \"zelle-auth-token\",\"bitPaySource\": \"john.bitpay\",\"bitPayAuthToken\": \"bitpay-auth-token\",\"payoutMinimumAmount\": 50.00,\"payoutOccurrence\": \"monthly\",\"payoutPreferredMethod\": \"bank\",\"payoutStartDate\": \"2023-01-01\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/settings/get:
    get:
      tags:
        - AccountSettings
      summary: Account - Settings - Get - Payments
      description: |-
        This endpoint titled "Account - Settings - Get - Payments" retrieves the payment settings of a particular account. Below is a description of each data field:

        - `"name"`: This is the name of the endpoint. It indicates that this endpoint is related to "Account Settings", specifically "Payments", and it uses the GET method.

        - `"request"`: The object that provides details about the HTTP request made to the endpoint.

        - `"auth"`: It is the authentication component for securing the endpoint. This API uses bearer token authentication, specified by "bearer" type. 

           - `"type"`: The type of authentication used, which is bearer authentication.

           - `"bearer"`: This array carries an object that stores the bearer token for the endpoint. 

             - `"key"`: The key is 'token' which is a part of the bearer authentication scheme.

             - `"value"`: The actual value of the bearer token (BearerToken) that would be used in production environment is placed here.

             - `"type"`: The type signifies that the bearer token is represented as a string value.


        - `"method"`: This refers to the HTTP method used to make a request to the endpoint. In this case, it is the 'GET' method.

        - `"url"`: This is the URL of the API endpoint. It specifies API root(i.e., http://localhost:3000/api/), the path to the endpoint(i.e., account/settings/get/), and query parameters(settingKey, sessionId, accountId).

        - `"headers"`: This array object would include any additional headers needed for the request, but in this case, it is either left empty or not required for this request, which is indicated by the "disabled": true attribute.

        - `"body"`: This section holds the data that is sent to the API in the body of the request. 

           - `"mode"`: The mode denotes that the body of the request is to be sent in as 'raw' to the endpoint.

           - `"raw"`: The raw field means raw data can be inserted but in the provided data it is left empty, indicating that the GET request does not require additional body data.
           
        Overall, this endpoint retrieves the payment settings linked to the given sessionId and accountId. Please remember this endpoint needs a bearer token for the authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: settingKey
          in: query
          schema:
            type: string
          example: payments
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/settings/all:
    get:
      tags:
        - AccountSettings
      summary: Account - Settings - Get All - With Deleted
      description: |-
        The endpoint "Account - Settings - Get All - With Deleted" is a GET request that is used to fetch all account settings, even those attached to deleted accounts.

        1. "name": This is the name of the endpoint - Account - Settings - Get All - With Deleted

        2. "request": It contains everything about the request.

        3. "auth": This is the authorization required for this endpoint. Here, authentication needs to be a Bearer type which essentially means you need to send a bearer token to access this endpoint.
            - "type": The type of the authentication required which is 'bearer'
            - "bearer": Contains the key-value pair which would be sent in the header for authentication.
                - "key": The key which is 'token'.
                - "value": It's 'BearerToken'. This will be the actual token required for accessing the endpoint.
                - "type": The type of the value here, borne by the key which is 'string'. 

        4. "method": It is the HTTP verb and here it is 'GET'. This type of request is used to retrieve data from a server.

        5. "url": This is the link to the specific endpoint where the request is sent. The url here is 'http://localhost:3000/api/account/settings/all/?sessionId=sessionId&accountId=accountId&includeDeleted=true'. It contains query parameters such as sessionId, accountId and includeDeleted which might be required to get the appropriate response.

        6. "headers": These are used to provide the server with additional information. This endpoint does not require any additional headers, and the default header is disabled.

        7. "body": The body holds the data to be sent for a POST or PUT request. This is not used in a GET request as in this case, so 'mode' is 'raw', and 'raw' is blank as data is not sent in the body.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: includeDeleted
          in: query
          schema:
            type: boolean
          example: 'true'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/settings/delete:
    post:
      tags:
        - AccountSettings
      summary: Account - Settings - Delete - Payments
      description: |-
        The provided data is an endpoint for an API that acts as a back-end functionality for your application.

        Here's a detailed breakdown of each data instance:

        1. "name": Account - Settings - Delete - Payments - This is the name assigned to this API endpoint. It hints that it is used to delete payment settings.

        2. "request": Houses information about the HTTP request.

        3. "auth": The authentication method used to validate the given request. A bearer token authorization method is used.

        4. "bearer": The bearer object that carries the necessary authentication details.

        5. "key": The key here is named 'token'. It is the placeholder for the actual token.

        6. "value": Value is the corresponding value for the key (here, 'token'). This field expects a unique 'sessionId' (value) corresponding to the bearer token's name.

        7. "type": It represents the data type. In this case, it is string.

        8. "method": The HTTP request method to be used. It uses the POST method, which is used to send data to a server to create a resource.

        9. "url": This field contains the URL where the request should be made. The server is currently running locally on port 3000.

        10. "headers": Contains the information passed in header part of the HTTP request. Currently, it's set to 'default' type and is disabled.

        11. "body": Contains the data to be sent in the body of the HTTP request. It is in raw format and must include a JSON object containing: 
             - "sessionId": The session Id for the account.
             - "accountId": The ID identifying the specific user account. 
             - "settingKey": Identified as 'payments'. It usually represents the specific settings that need to be affected.

        Please ensure all of the required information (sessionId, accountId, settingKey) is provided when using this endpoint for it to function correctly.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"settingKey\":\"payments\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/update/account:
    put:
      tags:
        - AccountUpdate
      summary: Account - Update - Account
      description: |-
        This endpoint is named "Account - Update - Account". It is used to update an existing account on the system. The HTTP request method used is PUT and the endpoint URL is 'http://localhost:3000/api/account/update/account'.

        - Authentication:
          The endpoint requires bearer token authentication. The token should be replaced with valid "BearerToken".

        - HTTP Headers:
          In the headers, you need to include a key named "Client-UUID", replacing "ClientUUID" with the actual UUID related to the client application.

        - Request Body:
          The request body should be of JSON format and contains the following fields:

            * "zipcode": The postal code associated with the user's address, replace "95126" with the actual value.
            * "instagram": The user's Instagram handle, replace "fortunevieyra_" with the user's actual Instagram handle.
            * "username": A unique username for the user. You should replace "fortunevieyra" with the user's actual username.
            * "firstName": The first name of the user. Replace "fortune" with the user's actual first name.
            * "lastName": The last name of the user. Replace "vieyra" with the user's actual last name.
            * "birthday": The date of birth of the user in the format "MM/DD/YYYY", replace "02/02/1988" with user's actual birthday.
            * "sessionId": The ID of the session. Replace "sessionId" with the correct session ID.
            * "accountId": Unique identifier for the user's account. Replace "accountId" with the actual account ID of the user.

        Please note, all values need to be sent as strings. So, always encapsulate them in quotes.

        In the "options" field of the request body, the "raw" language is set to JSON, indicating that the data should be sent in the JSON format.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                zipcode: '95126'
                instagram: fortunevieyra_
                username: fortunevieyra
                firstName: fortune
                lastName: vieyra
                birthday: 02/02/1988
                sessionId: sessionId
                accountId: accountId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/update/display:
    put:
      tags:
        - AccountUpdate
      summary: Account - Update - Display
      description: |-
        This endpoint, named "Account - Update - Display", is designed to update a user's account display settings in your system.

        Starting with the "auth" key, it uses the authentication method "bearer". This requires a token, which is labelled under the "key" as "token". The value for this is "BearerToken". This authentication method verifies that the requests being sent to your API are from a trusted source.

        The "request" key defines the HTTP method to be a "PUT", signifying this endpoint is used to update existing resources or create them if they don't exist.

        The "url" key specifies the URL of the API endpoint, to which requests need to be sent. The link is "http://localhost:3000/api/account/update/display".

        The "headers" key contains a "Client-UUID" which serves as an identifier for the client making the API request. Its value is "ClientUUID".

        The "body" key is where you specify the details to be sent to the server. The "mode" is "raw", meaning that the data is sent in a raw, unprocessed format.

        The "body" also contains the "raw" key, which carries a JSON string. It includes parameters:
        - "displayPreference": This specifies the desired display setting; in this example, it is set to "dark".
        - "sessionId": This is a unique identifier for the user's current session; in this example, it is labeled as "sessionId".
        - "accountId": This is a unique identifier for the user's account; in this example, it is labeled as "accountId".

        These are provided as raw JSON input when making the PUT request. When using this endpoint to update an account's display settings, replace these things with actual values.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"displayPreference\":\"dark\",\"sessionId\":\"sessionId\",\"accountId\":\"accountId\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/update/email:
    put:
      tags:
        - AccountUpdate
      summary: Account - Update - Email
      description: |-
        This endpoint is named "Account - Update - Email". This specifies its purpose: It's a component in an API that facilitates email updates in an account. 

        - The `request` field contains the defining features of the endpoint's request parameters. 

        - The `auth` form of this endpoint is "bearer". This signifies that it uses bearer tokens for authorization. The token's details are stored in a subfield where "key" is "token", the "value" is "BearerToken" and the token type is set to "string".

        - The `method` details the type of HTTP request that should be made. In this case, it's a `PUT` request indicating that it's used to update current resource.

        - The `url` field provides the exact location at which the request should be pointed. Here, it's targeted at the "http://localhost:3000/api/account/update/email" endpoint. 

        - Inside the `headers` is a single object that indicates "Client-UUID" as a "key" with a "value" of "ClientUUID". The type of this header is "default". This header might be used to specify the unique identifier of the client making the request.

        - The `body` of the request includes three parameters packed into a raw JSON payload. The `mode` is set to "raw" indicating the form in which the body data is sent.

          - The `newEmail` field is likely expected to receive the updated email address. For example, "fortunevieyra@icloud.com" has been used in the placeholder.

          - `sessionId` is likely a unique identifier for the session during which the request is made. 

          - The `accountId` is probably the unique identifier of the account for which the email is to be updated. 

        Each of these fields and their particular values work together to form the complete functionality of this endpoint. Be sure to replace placeholders with actual data before use.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"newEmail\":\"fortunevieyra@icloud.com\",\"sessionId\":\"sessionId\",\"accountId\":\"accountId\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/update/language:
    put:
      tags:
        - AccountUpdate
      summary: Account - Update - Language
      description: |-
        **Endpoint Name:** Account - Update - Language

        This endpoint is used to update the language preference of an account. Below is a comprehensive analysis of the data fields involved:

        **Request Authentication:**

        * `auth`: Describes the authentication method. Specifically, the type is bearer type authentication. 

        * `bearer` Array: This holds the access token information. 
            * `key`: Refers to the identifier of the token. By default, it is "token".
            * `value`: This is the actual token value used for authorization. Placeholder here is "BearerToken".
            * `type`: This is the data type of the token, and the default is set as "string".

        **Request Method:**

        * `method`: The HTTP method used for the API call. This endpoint uses the "PUT" method, implying that it is intended for updating an existing resource.

        **Request URL:**

        * `url`: The URL of the API endpoint. For this request, it is "http://localhost:3000/api/account/update/language".

        **Request Headers:**

        * `headers`: This includes extra information sent with the request. Here, a "Client-UUID" is sent, which uniquely identifies every client.

        **Request Body:**

        * `body`: This is the main content of the request. In this case, it's in raw JSON format.
            * `mode`: Specifies that the request body is raw.
            * `raw`: This includes the essential details viz., language preference ('languagePreference'), a unique session identifier ('sessionId'), and the account identifier ('accountId') of the account for which the language preference needs to be updated. The language preference here is set to Spanish ('es'). 

        This endpoint, thus, takes an Authorization token, client UUID, session ID, account ID, and the preferred language to update the language preference of the specific account.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"languagePreference\":\"es\",\"sessionId\":\"sessionId\",\"accountId\":\"accountId\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/update/phone:
    put:
      tags:
        - AccountUpdate
      summary: Account - Update - Phone
      description: |-
        1. "name": This represents the name of the endpoint. In this case, the name "Account - Update - Phone" is indicative of an endpoint that handles updates to a phone number in an account.

        2. "request": This object contains details about the request to be made to the API.

        3. "auth": This object describes the authorization method required to access the endpoint. It includes:
           - "type": The type of authorization used, which here is "bearer", indicating the Bearer Token Authorization method.
           - "bearer": This array contains an object with three keys:
             - "key": The key which represents the name of the authorization token, here it's "token".
             - "value": The value of the token which is "BearerToken".
             - "type": Represents the data type of the token, which is "string".

        4. "method": This is the HTTP method used to call the endpoint. For this endpoint, the method is "PUT", indicating that we're executing an update operation.

        5. "url": The URL of the endpoint. In this case, it's "http://localhost:3000/api/account/update/phone".

        6. "headers": The headers to include in the HTTP request. Here, there's a single header with:
           - "key": The key or name of the header field, here it's "Client-UUID".
           - "value": The value of this header field, which is "ClientUUID".
           - "type": The type of the header field, here it's "default".

        7. "body": The body of the request. This object has two fields:
           - "mode": The type or format of the body data, which is "raw" in this case, meaning that the data is sent in a raw block of text.
           - "raw": The actual content to send with the request. This field contains a JSON string with the new phone number ("newPhone"), the session ID ("sessionId"), and account ID ("accountId"). Please note that values shown here are placeholders, replace them with actual values while using the API.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"newPhone\":\"4084599441\",\"sessionId\":\"sessionId\",\"accountId\":\"accountId\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/update/type:
    put:
      tags:
        - AccountUpdate
      summary: Account - Update - Type
      description: |-
        This endpoint represents an operation to update the 'type' of an account in a system. It is named "Account - Update - Type". The operation uses the 'PUT' method, implying it is for updating a resource on the server. 

        Here's a breakdown of all the data:

        1. `name`: This is the identifier of the endpoint. In this context, it represents the name of the operation which is "Account - Update - Type". 

        2. `request`: This contains all the details of the request that needs to be made to the server.

        3. `auth`: This holds the authentication method and credentials required to gain access to the endpoint. The type of authorization here is "bearer". It requires a "token" for authorization which is a "BearerToken" here.

        4. `method`: This specifies the HTTP method for the request. In this case, it's "PUT", which means it’s used to update an existing resource.

        5. `url`: This is the URL of the server where the request will be made. 'http://localhost:3000/api/account/update/type' is the URL in this case.

        6. `headers`: These are used to send additional information to the server. In this case, there is one key-value pair as header input. The 'key' is the 'Client-UUID', and its 'value' is the 'ClientUUID'.

        7. `body`: This holds the actual data that needs to be sent to the server. Body type is 'raw', implying the data is sent in plain text. An object is being sent here with the following fields:
           - `accountType`: It signifies the type of the account. In this case, it's "Business".
           - `sessionId`: This is a unique identifier for a session. It's current value is "sessionId".
           - `accountId`: It stands for the unique identifier of the account. It's current value is "accountId".
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"accountType\":\"Business\",\"sessionId\":\"sessionId\",\"accountId\":\"accountId\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/update/username:
    put:
      tags:
        - AccountUpdate
      summary: Account - Update - Username
      description: |-
        This endpoint is named "Account - Update - Username" and it is used to update the username of an account.

        It uses the "PUT" method of request which means it's designed to update or replace existing data.

        The URL for this endpoint is "http://localhost:3000/api/account/update/username". You can replace the "localhost:3000" part with the actual server address where your API is hosted. 

        Authorization of the request is managed using a "bearer" token which needs to be provided in the "auth" field. The key for this is "token" and the value should be the actual "BearerToken", which is a unique token assigned for each user.

        There is a header field which expects a "Client-UUID", this is essentially the unique identifier for each client. The client is expected to send their UUID every time they make a request to this endpoint.

        The request body is sent in "raw" mode. The payload contains the new "username" that needs to be updated. It also contains a "sessionId" which represents the session of the user. The "accountId" is the unique identifier of the account that you wish to update the username of.

        In summary, to use this endpoint effectively, you need to include the bearer token, the client UUID, and an appropriate payload in the request. If all these details are accurate, the username of the specified account will be updated successfully.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"username\":\"fortunevieyra\",\"sessionId\":\"sessionId\",\"accountId\":\"accountId\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/update/password:
    put:
      tags:
        - AccountUpdate
      summary: Account - Update - Password
      description: |-
        "name": This specifies the name of the endpoint. Here, it is "Account - Update - Password" implying this API endpoint is used for updating password in the account section.

        "request": This indicates the type of request to be made to the server, and contains all the required parameters needed to make the request.

        "auth": It signifies the authentication method to be used. The type here is "bearer", which is a HTTP authentication scheme that involves security tokens called bearer tokens.

        "bearer": It is an array of bearer authentication factors. Here, we have a key-value pair specifying the bearer token.

        "key": This is the parameter name. For bearer array, the key is 'token'.

        "value": This is the actual value of the parameter. For bearer array, the value is 'BearerToken', which should be replaced by your actual bearer token.

        "type": It describes the data type of the parameter. Here, it is 'string', which means the bearer token is a string.

        "method": This indicates the HTTP method to be used when making the request to the API. In this endpoint, it is 'PUT' which is typically used to update resources.

        "url": This is the API endpoint where the request will be sent. For this endpoint, the URL is http://localhost:3000/api/account/update/password.

        "headers": This is a list of all the HTTP headers to be included in the request. In this request, there is one header parameter.

        "key": For the header, the key is 'Client-UUID'.

        "value": For the header, the value should be your ClientUUID.

        "type": This value describes the type for the header field. Here, it is 'default'.

        "body": This is the data to be sent to the server. In this request, it contains JSON raw data and its options.

        "mode": This specifies how the body data is sent. Here 'raw' mode means the data is sent exactly as it is. 

        "raw": This is the actual data to be sent in JSON format. It consists of 'password' (values should be your new password), 'sessionId' (values should be your session id), and 'accountId' (values should be your account id).

        "options": This field defines options for raw data. Here, it specifies that the language used is JSON.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                password: '111111'
                sessionId: sessionId
                accountId: accountId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/verify/account:
    post:
      tags:
        - AccountVerify
      summary: Account - Verify - Account
      description: |-
        This endpoint is named "Account - Verify - Account". It is designed to verify an account using the POST method. 

        1. `name`: The name is "Account - Verify - Account". This illustrates the purpose of the endpoint, which is to verify an account.
         
        2. `request`: This object contains all the information about the HTTP request.

        3. `method`: The method indicates the type of HTTP request method used for the API request. In this case, the method is "POST", which signifies that this request will submit data to the server to be processed.

        4. `url`: This specifies the URL for the endpoint. The URL is "http://localhost:3000/api/account/verify/account". This is the address that we will send our POST request to.

        5. `headers`: This currently contains no values; headers are used to pass additional information with the request or the response. They define the operating parameters of an HTTP request or response.

        6. `body`: This object contains the information that will be sent to the server. It contains another object with the `mode` and `raw` properties.

        7. `mode`: The mode is "raw". This refers to the raw body content of the HTTP request. The "raw" mode here means that we are sending a raw request body, which is not formatted in any specific way.

        8. `raw`: This is the raw request body. It's in the form of a JSON object. It contains three properties: "unlockCode", "sessionId", and "accountId".
           - `unlockCode`: This is the unlock code used for account verification.
           - `sessionId`: This refers to the unique identifier of a user session.
           - `accountId`: This refers to the unique identifier of the account to be verified.
           
        This endpoint should be used when you want to verify an account by sending a POST request to the server. The request will contain the user's unlock code, session ID and account ID as parameters.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"unlockCode\":\"unlockCode\",\"sessionId\":\"sessionId\",\"accountId\":\"accountId\"}"'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/verify/email:
    post:
      tags:
        - AccountVerify
      summary: Account - Verify - Email Address
      description: |-
        This endpoint is named "Account - Verify - Email Address". It is designed to verify an email address linked to an account. 

        It uses the `POST` method, which allows it to send data to the server to create a new entry in the database. The `POST` method is often used when submitting filled forms.

        The URL for this endpoint is `"http://localhost:3000/api/account/verify/email"`. This endpoint lies within your local server running on port 3000. Its path is `/api/account/verify/email`, whereby it's within the 'api', 'account', 'verify', then finally, 'email' subdirectory.

        Currently, it does not contain any custom `headers`. Headers are often used to provide information about the request body and the response, such as its MIME type, or to provide authentication information. If necessary, headers could be added accordingly.

        The `body` of the request is being sent in `raw` mode. Raw mode is used when you want to send information without any encoding. This is useful when you want to send JSON or XML data to the server.

        The raw data being sent consists of two key-value pairs:

        - `verificationToken`: The token used to verify the email. This would typically be a unique string that the server generates and sends to the email address for verification.
        - `email`: The email address to be verified. This must match the email address that the server has on record for the associated verification token.

        In normal usage, both `verificationToken` and `email` would need to be replaced with actual data.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"verificationToken\":\"verificationToken\",\"email\":\"email\"}"'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/verify/phone:
    post:
      tags:
        - AccountVerify
      summary: Account - Verify - Phone Number
      description: |-
        This endpoint is for the `Account - Verify - Phone Number` API.

        **Method**: POST
        The HTTP method used for this endpoint is a POST request. It's typically used to send data to a server to create a new resource.

        **URL**: `http://localhost:3000/api/account/verify/phone`
        This is the URL at which the API needs to be hit. Since we're in a local development environment, we're using `localhost`. The port we're using to access the local server is `3000`. The path of the API is `/api/account/verify/phone`, which is used to verify an account's phone number.

        **Headers**: []
        This field is empty, meaning we're not sending any additional metadata in the header of this HTTP request. Headers often include items like authorization tokens, content type etc. However, none of that is required by this endpoint.

        **Body**:
        The body of the HTTP request is sent in a `raw` format. This is the data that the API takes as input in order to verify a phone number.

        - `verificationCode`: This is the code that is used to verify a phone number. Typically, it's sent by an SMS to the phone number that needs to be verified. 

        - `phone`: This is the phone number that needs to be verified. It needs to be provided so the API knows which phone number it's supposed to verify.

        This endpoint requires both `verificationCode` and `phone` to be present in the raw JSON body of the HTTP request in order to work correctly.

        Example of the request body would be:
        ```
        {
          "verificationCode": "123456",
          "phone": "+1234567890"
        }
        ```

        Make sure to replace the values with the actual verification code received and the phone number to be verified.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"verificationCode\":\"verificationCode\",\"phone\":\"phone\"}"'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/verify/unlock:
    post:
      tags:
        - AccountVerify
      summary: Account - Verify - Security Code
      description: |-
        This endpoint is labeled as "Account - Verify - Security Code" and it represents an API operation for verifying a security code for a specific user account.

        1. Method: POST
           This endpoint uses the HTTP POST method, which is typically used to send (or create) data to the server.

        2. URL: `http://localhost:3000/api/account/verify/unlock`
           This is the endpoint's URL. The base URL is `http://localhost:3000`, which denotes your local server when the application is run locally. The path `/api/account/verify/unlock` is the specific route in your application where the data will be sent to be processed.

        3. Headers: []  
           The headers field is currently empty. This is where you'd usually provide additional information, like content type or authentication tokens.

        4. Body: 
             In body, we have the following fields:
           
           - `mode`: `raw`  
             The mode property specifies how the request data is being sent. The value `raw` means the data is being sent as a string in the body of the request.

           - `raw`:  
             This is the actual data payload in string format that's being sent in the request.
           
             It contains three fields:

             - `accountId`: The unique identifier of the account. This is a placeholder and should be replaced with actual account Id during the API request.
          
             - `sessionId`: Represents a session identifier, typically used for tracking or authenticating user sessions. Replace this placeholder with an actual session Id.
            
             - `unlockCode`: This is the security code that needs to be verified for the account. Replace the placeholder with the actual unlock code.

        This endpoint is used to verify a security code (unlockCode) pertaining to a user's session (sessionId) for a specific account (accountId). The payload should be formed by replacing the placeholders with real data and sent as a raw JSON string.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"accountId\":\"accountId\",\"sessionId\":\"sessionId\",\"unlockCode\":\"unlockCode\"}"'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/verify/link:
    post:
      tags:
        - AccountVerify
      summary: Account - Verify - Verification Link
      description: |-
        The endpoint is named "Account - Verify - Verification Link". It is used to validate a user account through a verification link. This endpoint uses the POST method, which is mainly for sending data.

        Endpoint URL: This is the URL where the request is sent. In this case, the URL is http://localhost:3000/api/account/verify/link. 

        The endpoint does not require any specific headers. Headers are often used to provide additional information that the server needs to process the request.

        Body of the request: Here, the body is provided in raw format and contains two data fields that you need to fill:

        1. verificationToken: This is the token that is unique to each user and is used to verify the user's identity.
         
        2. email: This is the email address of the user who is trying to verify their account. 

        Remember to replace "verificationToken" and "email" with the actual values before sending the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"verificationToken\":\"verificationToken\",\"email\":\"email\"}"'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/verify/code:
    post:
      tags:
        - AccountVerify
      summary: Account - Verify - Unlock Code
      description: |-
        This endpoint is labeled as `Account - Verify - Unlock Code`. The purpose of this endpoint is to verify and unlock a specific code for an account. 

        The method used for this API call is `POST`, indicating that this endpoint is used to send data to the server to create a resource.

        The URL or endpoint where the API call is made is `http://localhost:3000/api/account/verify/code`. This is the path in your API where resources related to verifying and unlocking the account code can be created.

        This endpoint does not use any predefined HTTP headers. Headers are often used to provide information about the request body or response, or about the server or client. Since there are no headers indicated here, the request doesn't carry any additional information in the headers.

        The `body` of the request consists of raw data sent to the server. It is in JSON format which is a standard data format with a diverse range of functionality. Two parameters are passed in this request body:

        1. `securityCode`: This is an alphanumeric code associated with the account that needs verification. This will be unique per individual account and must be supplied by the user.
          
        2. `email`: This is the email address associated with the user's account. It is used to identify the user's account that is being processed for the unlock code.

        Remember to replace `securityCode` and `email` placeholders with actual values when you are using this endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"securityCode\":\"securityCode\",\"email\":\"email\"}"'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/verify/username:
    post:
      tags:
        - AccountVerify
      summary: Account - Verify - Username
      description: |-
        The given endpoint is called "Account - Verify - Username". It is configured to make a POST request to the URL: http://localhost:3000/api/account/verify/username. 

        Here's a detailed description of each data it includes:

        1. "name": This is the title or name of the endpoint. You can think of this as a label to identify what the endpoint does. 

        2. "request": This is a complex object that includes all the information necessary for the request. It includes several child objects and data fields.

           a. "method": This denotes the HTTP method of the request. In this case, it's a POST request, which implies that this endpoint is used to send data to be processed to a specified resource.

           b. "url": This is the URL where the request will be made. Our requests get sent to "http://localhost:3000/api/account/verify/username". This is typically the location of the server that will process our request.

           c. "headers": This is an array that should include any HTTP headers we want to send with our request. However, in this case, it's empty, which means no additional headers are being sent with the request.

           d. "body": This contains the actual data that we're sending with our request. 

        3. "body": This is a complex object that includes the data we're sending and the format we're sending it in. 

           a. "mode": This describes the format of the data. The value "raw" tells us that the data in "raw" field is sent as is, and not in any specific format like form-data or x-www-form-urlencoded.

           b. "raw": This is the actual data we're sending for processing. In this case, we're sending a JSON object with three properties: 
              
               i. "username": The username of the account that needs verification.
              
              ii. "accountId": The ID related to the account that is currently being verified.
             
             iii. "sessionId": The session ID associated with the current user or current verification process.
          
        In a nutshell, this endpoint is used to verify a username for a given account ID and session ID in our system by making a POST request to the given URL.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"username\":\"fortunevieyra1\",\"accountId\":\"accountId\",\"sessionId\":\"sessionId\"}"'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/activate/create:
    post:
      tags:
        - ActionActivate
      summary: Action - Activate - Create
      description: |-
        ### Detailed Description of API Endpoint Data

        #### Endpoint Name:
        **Action - Activate - Create**  
        This indicates the purpose of the request, which is to activate an action by creating it via this endpoint.

        #### Request:

        - **Auth**:  
          - **Type**: `bearer`  
            This specifies that the authentication method used to access this endpoint is bearer token authentication.
          - **Bearer**:  
            - **Key**: `token`  
              This is the identifier for the bearer token parameter that is required for authentication.
            - **Value**: `BearerToken`  
              This is a placeholder for the actual bearer token that will be used for authentication. It must be replaced with a valid token before making the request.
            - **Type**: `string`  
              The data type of the token is a string.

        - **Method**: `POST`  
          This indicates that the request method to interact with the endpoint is POST, which is typically used to create new resources.

        - **URL**:  
          `http://localhost:3000/api/action/activate/create`  
          This is the endpoint URL where the request is sent. It indicates that the action will be activated by creating a new resource.

        - **Headers**:  
          - **Key**: (empty string)  
            No specific headers are needed for this request, as the header entry is disabled.
          - **Value**: (empty string)  
            Since the key is disabled, there is no associated value.

        #### Body:

        - **Mode**: `raw`  
          Indicates that the format of the body content being sent is raw data, specifically in JSON format.

        - **Raw**:  
        ```json
        {
            "sessionId": "sessionId",
            "accountId": "accountId",
            "path": "/live/channel/video123",
            "targetType": "streamer",
            "targetId": "videoId",
            "sourceType": "accountId",
            "sourceId": "accountId",
            "tokenAmount": 20,
            "name": "activate1",
            "description": "",
            "tags": ""
        }
        ```
          This JSON object contains the necessary data for creating and activating an action. 

          - **sessionId**: `sessionId`  
            Identifier for the current session. This is required to link the action to a specific session.

          - **accountId**: `accountId`  
            Represents the ID of the account associated with this action. This will associate the activated action with the user’s account.

          - **path**: `"/live/channel/video123"`  
            Specifies the path to the resource that is being activated. This typically points to a live channel or media stream.

          - **targetType**: `"streamer"`  
            Indicates the type of target for the action. In this case, it specifies that the target is a streamer.

          - **targetId**: `"videoId"`  
            This represents the identifier of the target, which could be a video ID related to the activation.

          - **sourceType**: `"accountId"`  
            This indicates the type of source from which the action originates. Here, it’s linked to the account.

          - **sourceId**: `"accountId"`  
            This corresponds to the source ID, which in this case is the same as the account ID.

          - **tokenAmount**: `20`  
            Represents the quantity of tokens involved in this action. This could be a currency or a unit of measure related to the activation.

          - **name**: `"activate1"`  
            A user-defined name for this activation action, useful for identification purposes.

          - **description**: `""`  
            An optional field for a description of the activation. Currently left empty.

          - **tags**: `""`  
            This is also an optional field for adding tags to the action, currently left empty.

        #### Options:
        - **Raw**:  
          - **Language**: `json`  
            This indicates that the raw body content is formatted in JSON.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: activate1
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/activate/update:
    put:
      tags:
        - ActionActivate
      summary: Action - Activate - Update
      description: |-
        ### Action - Activate - Update

        #### Request Details

        - **Auth (Authorization)**:
          - **Type**: This specifies that the authentication method is using a bearer token.
          - **Bearer**: This array contains the bearer token information.
            - **Key**: The key for authentication which is labeled as "token".
            - **Value**: The placeholder for the bearer token which should be replaced with the actual token (e.g., "BearerToken").
            - **Type**: The type is specified as a string, indicating that the token must be formatted as a string.

        - **Method**:
          - **PUT**: This denotes that the request method used to call this endpoint is PUT, which is typically used for updating resources.

        - **URL**:
          - **Endpoint**: The URL is set to `http://localhost:3000/api/action/activate/update`. This is the local endpoint where the API request will be sent.

        - **Headers**:
          - **Client-UUID**: 
            - **Key**: This is the name of the header which identifies the client making the request.
            - **Value**: This is a placeholder for the UUID value that should uniquely identify the client (e.g., "ClientUUID").
            - **Type**: The type is set as "default", which means it doesn't require special handling.

        #### Body Details

        - **Mode**:
          - **Raw**: The body of the request will be sent in raw format.

        - **Raw (Body Content)**: This is the content of the request body, structured in JSON format. Below are the details of each field within the JSON body:

          - **sessionId**: 
            - A string value representing the ID of the current session initiating the update.

          - **accountId**: 
            - A string value that refers to the ID of the account related to the action.

          - **activateId**: 
            - A string value that signifies the unique ID for the activation action being updated.

          - **path**: 
            - A string indicating the resource path which may relate to a specific video channel (e.g., "/live/channel/video123").

          - **targetType**: 
            - This field indicates the type of target that the action is aimed at (e.g., "streamer").

          - **targetId**: 
            - A string value that represents the unique identifier for the target, such as the ID of a video.

          - **sourceType**: 
            - This field details the type of source account from which the action is derived (e.g., "accountId").

          - **sourceId**: 
            - A string value that signifies the ID of the source account associated with the action.

          - **tokenAmount**: 
            - A numerical value that indicates the amount of tokens being processed or allocated for the action (e.g., 20).

          - **name**: 
            - A string field where the name associated with the action is recorded (e.g., "Farooq").

          - **description**: 
            - A string providing additional details regarding the action (e.g., "this is description").

          - **tags**: 
            - A string containing tags associated with the action, which may be used for categorization (e.g., "xyz").
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                activateId: activateId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: Farooq
                description: this is description
                tags: xyz
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/activate/get:
    get:
      tags:
        - ActionActivate
      summary: Action - Activate - Get
      description: |-
        ### Endpoint Description: Action - Activate - Get

        - **Name**: Action - Activate - Get
          - This represents the specific endpoint intended for retrieving activation details based on provided parameters.

        - **Request**:
          - **Auth**:
            - **Type**: Bearer
              - This specifies that Bearer token authentication is used for this request.
            - **Bearer**:
              - **Key**: token
                - This refers to the authentication key used to validate access permissions for the API.
              - **Value**: BearerToken
                - This is a placeholder value representing the authorization token required to access the endpoint; it should be replaced with a valid token when making real requests.
              - **Type**: string
                - This indicates that the value for the token should be a string format.

          - **Method**: GET
            - This signifies that the request method being used is GET, which is typically used to retrieve data from a server.

          - **URL**: `http://localhost:3000/api/action/activate/get/?activateId=activateId&sessionId=sessionId&accountId=accountId`
            - This is the endpoint URL where the GET request will be sent.
            - **Parameters**:
              - **activateId**: Represents the unique identifier for the activation process that you wish to retrieve.
              - **sessionId**: Represents the session identifier associated with the action.
              - **accountId**: Represents the account identifier for which the activation information is being requested.
            - All the parameters (`activateId`, `sessionId`, and `accountId`) should be substituted with actual values when making the request.

          - **Headers**:
            - **Key**: (Empty)
              - No specific header keys are required for this request as it currently stands.
            - **Value**: (Empty)
              - No specific header values are provided for this request.
            - **Type**: Default
              - Indicates that these headers are of the default type.
            - **Disabled**: True
              - This means that any headers listed are currently disabled and won't be sent with the request.

          - **Body**:
            - **Mode**: Raw
              - This indicates the format of the body being sent with the request.
            - **Raw**: ""
              - Represents that there is no body content to send with this GET request, as it is typically not required in a GET operation.
      security:
        - bearerAuth: []
      parameters:
        - name: activateId
          in: query
          schema:
            type: string
          example: activateId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/activate/all:
    get:
      tags:
        - ActionActivate
      summary: Action - Activate - Get All
      description: |-
        ### Endpoint Description: Action - Activate - Get All

        #### Request Overview
        This API endpoint is designed to retrieve all active actions associated with a specific session and account. The following details outline the request parameters and authentication methods required to successfully access this endpoint.

        #### Authentication
        - **Auth Type**: Bearer
          - **Token**: A string value that represents the authentication token. It must be prefixed with "Bearer" followed by the actual token value. This token is used to authenticate the request and verify the user's permission to access the resource.

        #### Request Method
        - **Method**: GET
          - This method is used to request data from the server without modifying any resources.

        #### URL Structure
        - **Base URL**: `http://localhost:3000/api/action/activate/all/`
          - This is the endpoint's main address where the request is sent.
          
        - **Query Parameters**: 
          - **sessionId**: This parameter is required to specify the session from which you want to retrieve actions. It should be replaced with the actual session identifier.
          - **accountId**: This parameter is required to specify the account associated with the session. It should be replaced with the actual account identifier.
          
          Example of the full URL incorporating the parameters could look like:
          ```
          http://localhost:3000/api/action/activate/all/?sessionId=12345&accountId=67890
          ```

        #### Headers
        - **Headers**: 
          - Currently, there are no additional headers needed for the request, as the headers section is left empty and disabled. In future implementations, if any custom headers are required, they can be added in this section.

        #### Body
        - **Body**:
          - The body of the request is not used in this GET request method, meaning no data is sent in the request body. It is indicated as empty, which is standard for GET requests.

        This description serves as a reference for users to understand how to utilize the "Action - Activate - Get All" endpoint effectively.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/activate/delete:
    post:
      tags:
        - ActionActivate
      summary: Action - Activate - Delete
      description: |-
        ### Description of Data in Endpoint "Action - Activate - Delete"

        - **Name**: This is the name of the request, indicating that it is related to activating a deletion action.

        - **Request Object**: This contains all the configurations needed to perform the API request.

          - **Auth**: This section outlines the authentication method used for the request.
            - **Type**: The authentication type is specified as "bearer", which means a token is required for authorization.
            - **Bearer**: This specifies the details of the bearer token.
              - **Key**: The key for the token is specified as "token".
              - **Value**: The value is set to "sessionId", indicating that a session ID will be used as the token.
              - **Type**: This denotes that the expected type of the token is a string.

          - **Method**: "POST" indicates that this request will send data to the server.

          - **URL**: This is the endpoint where the request will be sent. In this case, it is "http://localhost:3000/api/action/activate/delete".

          - **Headers**: This section contains any headers that might be needed for the request.
            - Here, both the key and value are empty, and the header is marked as disabled.

          - **Body**: This section holds the data that will be sent with the request.
            - **Mode**: The mode is set to "raw", indicating that the body is being sent in its raw format.
            - **Raw**: The actual data being sent is in JSON format. It includes:
              - **sessionId**: A placeholder for the user's session ID, which is used for authentication.
              - **accountId**: A placeholder for the account ID that will be affected by the activation deletion.
              - **activateId**: A placeholder for the specific ID of the activation that is to be deleted. 

        This structure allows users to understand how to properly format their request to activate and delete a particular action based on session and account information.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"activateId\":\"activateId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/announce/create:
    post:
      tags:
        - ActionAnnounce
      summary: Action - Announce - Create
      description: |-
        ### Endpoint Description: Action - Announce - Create

        **Endpoint Name**: Action - Announce - Create

        **Request Method**: POST

        **Request URL**: 
        - `http://localhost:3000/api/action/announce/create`

        #### Authentication
        - **Auth Type**: Bearer
          - **Bearer Token**: 
            - **Key**: `token` - This is the key used for authorization.
            - **Value**: `BearerToken` - Placeholder for the actual bearer token to authorize the request.
            - **Type**: string - Specifies the type of value for the token.

        #### Request Headers
        - **Headers**: Currently, there are no headers specified in this request, as the header key and value are both empty and the header is disabled.

        #### Request Body
        The body of the request is in raw JSON format and contains the following parameters:

        1. **sessionId**: 
           - Type: string
           - Description: A unique identifier for the session in which the announcement is being made. This could represent a specific user session or event.

        2. **accountId**: 
           - Type: string
           - Description: The unique identifier for the user account submitting the announcement. This helps in associating the announcement with a specific user.

        3. **title**: 
           - Type: string
           - Description: The title of the announcement. It provides a brief statement about the nature of the announcement, e.g., a birthday celebration.

        4. **description**: 
           - Type: string
           - Description: A detailed explanation of the announcement. This could include additional context or instructions related to the announcement.

        5. **tokenAmount**: 
           - Type: number
           - Description: The amount of tokens associated with the announcement. Tokens could represent a form of currency or points within the application.

        6. **category**: 
           - Type: string
           - Description: The category under which the announcement falls. This helps in organizing announcements, e.g., "Birthday", "Event", etc.

        7. **country**: 
           - Type: string
           - Description: The country associated with the announcement. This could define the geographical relevance of the announcement.

        8. **scheduleDate**: 
           - Type: string (date format)
           - Description: The date on which the announcement is scheduled to take place, formatted as YYYY-MM-DD.

        9. **scheduleTime**: 
           - Type: string (time format)
           - Description: The time at which the announcement is scheduled, formatted as HH:MM:SS.

        10. **duration**: 
            - Type: number
            - Description: The duration for which the announcement will be active. This is typically expressed in milliseconds.

        11. **path**: 
            - Type: string
            - Description: The path to the live channel or media where the announcement is to be displayed. This identifies the medium through which users can access the announcement.

        12. **targetType**: 
            - Type: string
            - Description: Indicates the type of target that the announcement applies to, e.g., "videoId".

        13. **targetId**: 
            - Type: string
            - Description: The unique identifier for the target item, such as a video or content piece related to the announcement.

        14. **sourceType**: 
            - Type: string
            - Description: This indicates the type of source from which the announcement is originating, for example, "accountId".

        15. **sourceId**: 
            - Type: string
            - Description: The unique identifier for the source of the announcement, generally matching the user account ID.

        16. **name**: 
            - Type: string
            - Description: Placeholder field; currently not specified. This could later be used to provide a custom name for the announcement.

        17. **tags**: 
            - Type: string
            - Description: Placeholder field; currently empty. This could be used to associate specific tags with the announcement for easier tracking or categorization.

        This information allows users to understand what data is required for creating an announcement through the API endpoint effectively.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                title: My birtday
                description: Please wish me a happy birthday. Today is my birthday
                tokenAmount: 100
                category: Birthday
                country: United States
                scheduleDate: '2024-05-15'
                scheduleTime: '13:00:00'
                duration: 15000
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                name: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/announce/update:
    put:
      tags:
        - ActionAnnounce
      summary: Action - Announce - Update
      description: |-
        ### Action - Announce - Update

        **Request Details:**

        - **Auth**: 
          - **Type**: Bearer token authentication is used.
          - **Bearer**: 
            - **Key**: `token` - This is the key used to send the bearer token.
            - **Value**: `BearerToken` - This represents the actual bearer token that authenticates the request.
            - **Type**: String - The token is expected to be in string format.

        - **Method**: 
          - **PUT** - The HTTP method used for the request; it updates existing data at the specified URL.

        - **URL**: 
          - **Endpoint**: `http://localhost:3000/api/action/announce/update` - This is the API endpoint where the update request is sent.

        - **Headers**: 
          - **Client-UUID**: 
            - **Key**: `Client-UUID` - Identifies a specific client making the request.
            - **Value**: `ClientUUID` - This is a placeholder for the unique identifier of the client.
            - **Type**: Default - Indicates this is a standard header key-value pair.

        - **Body**: 
          - **Mode**: 
            - **Raw** - The body of the request is sent as raw JSON data.
            
          - **Raw JSON**: 
            ```json
            {
                "announceId": "announceId",
                "sessionId": "sessionId",
                "accountId": "accountId",
                "title": "My birthday",
                "description": "Please wish me a happy birthday. Today is my birthday",
                "tokenAmount": 100,
                "category": "Birthday",
                "country": "United States",
                "scheduleDate": "2022-11-12",
                "scheduleTime": "13:00:00",
                "duration": 15000,
                "path": "/live/channel/video123",
                "targetType": "videoId",
                "targetId": "videoId",
                "sourceType": "accountId",
                "sourceId": "accountId",
                "name": "",
                "tags": ""
            }
            ```

        ### Detailed Descriptions of Body Parameters:

        - **announceId**: 
          - Unique identifier for the announcement being updated.

        - **sessionId**: 
          - Identifier for the session associated with the announcement.

        - **accountId**: 
          - Identifier for the user account associated with the announcement.

        - **title**: 
          - The title of the announcement, e.g., "My birthday".

        - **description**: 
          - A detailed message describing the announcement, e.g., "Please wish me a happy birthday. Today is my birthday".

        - **tokenAmount**: 
          - Number of tokens associated with the announcement; denotes the reward or incentive related to it.

        - **category**: 
          - The category assigned to the announcement, e.g., "Birthday".

        - **country**: 
          - The country from where the announcement is made, e.g., "United States".

        - **scheduleDate**: 
          - Date when the announcement is scheduled to occur, formatted as "YYYY-MM-DD".

        - **scheduleTime**: 
          - Time when the announcement is scheduled to occur, formatted as "HH:MM:SS".

        - **duration**: 
          - Duration of the announcement in milliseconds; e.g., 15000 milliseconds equals 15 seconds.

        - **path**: 
          - Path to the specific resource, e.g., a live video channel, represented as "/live/channel/video123".

        - **targetType**: 
          - Type of target being referenced, e.g., "videoId".

        - **targetId**: 
          - Identifier for the target of the announcement, e.g., "videoId".

        - **sourceType**: 
          - Type of source associated with the announcement, e.g., "accountId".

        - **sourceId**: 
          - Identifier for the source account, e.g., "accountId".

        - **name**: 
          - Placeholder for any additional name associated with the announcement; currently empty.

        - **tags**: 
          - Placeholder for any tags associated with the announcement; currently empty.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                announceId: announceId
                sessionId: sessionId
                accountId: accountId
                title: My birtday
                description: Please wish me a happy birthday. Today is my birthday
                tokenAmount: 100
                category: Birthday
                country: United States
                scheduleDate: '2022-11-12'
                scheduleTime: '13:00:00'
                duration: 15000
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                name: ''
                tags: ''
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/announce/get:
    get:
      tags:
        - ActionAnnounce
      summary: Action - Announce - Get
      description: |-
        ### Endpoint Description: Action - Announce - Get

        **Request Information:**
        - **Method:** GET  
          This specifies that the request is a GET request, which is typically used to retrieve data from the server.

        - **URL:**  
          `http://localhost:3000/api/action/announce/get/?announceId=announceId&sessionId=sessionId&accountId=accountId`  
          This is the endpoint where the request is sent. It includes query parameters for `announceId`, `sessionId`, and `accountId`, which are essential for retrieving specific announcement details.

        **Authorization:**
        - **Auth Type:** Bearer  
          This indicates that the request requires authorization using a bearer token.

        - **Bearer Token:**  
          - **Key:** token  
            This is the parameter name that holds the bearer token used for authentication.
          - **Value:** BearerToken  
            This is a placeholder value representing the actual token needed to authenticate the request.
          - **Type:** string  
            Indicates that the token is in string format.

        **Headers:**
        - **Key:** (empty)  
          No specific header key is defined in the request.  
        - **Value:** (empty)  
          No specific value is defined for headers.  
        - **Type:** default  
          Indicates that the header is of the default type.  
        - **Disabled:** true  
          This header is currently disabled and will not be sent with the request.

        **Body:**
        - **Mode:** raw  
          This indicates that the body data is sent in a raw format rather than a structured format like JSON or form data.

        - **Raw:**  
          The body is empty, meaning there is no additional data being sent with the request. 

        **Query Parameters:**  
        - **announceId:**  
          This parameter is used to identify the specific announcement to retrieve.
          
        - **sessionId:**  
          This parameter is used to identify the session associated with the announcement.

        - **accountId:**  
          This parameter is used to specify the account related to the announcement.

        Each of these components is crucial for successfully executing the API request to fetch the announcement details.
      security:
        - bearerAuth: []
      parameters:
        - name: announceId
          in: query
          schema:
            type: string
          example: announceId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/announce/all:
    get:
      tags:
        - ActionAnnounce
      summary: Action - Announce - Get All
      description: |-
        {
          "name": "Action - Announce - Get All",
          "description": {
            "request": {
              "auth": {
                "type": "bearer": "This specifies that the request uses Bearer token authentication, which is a common method for securing APIs. The user must provide a valid token to access the endpoint.",
                "bearer": [
                  {
                    "key": "token": "This represents the name of the authentication key that must be included in the header of the request.",
                    "value": "BearerToken": "This is a placeholder for the actual Bearer token that should be included in the request. It should be replaced with a valid token for authentication.",
                    "type": "string": "This indicates that the value of the token must be a string type."
                  }
                ]
              },
              "method": "GET": "This specifies that the request uses the HTTP GET method, which is typically used to retrieve data from a specified resource.",
              "url": "http://localhost:3000/api/action/announce/all/?sessionId=sessionId&accountId=accountId": "This is the endpoint URL where the GET request will be sent. The URL includes query parameters 'sessionId' and 'accountId', which are placeholders that must be replaced with actual session and account identifiers to successfully retrieve data from the server.",
              "headers": [
                {
                  "key": "": "This indicates that no specific headers are currently set for the request.",
                  "value": "": "This is empty as well, implying that no additional header values are being defined.",
                  "type": "default": "This denotes that the type of header is default, but since both key and value are empty, this header is effectively not in use.",
                  "disabled": true: "This indicates that this header is disabled and will not be included in the request."
                }
              ],
              "body": {
                "mode": "raw": "This specifies the format of the request body. In this case, it's set to 'raw', meaning that the body will contain raw text data.",
                "raw": "": "This indicates that no raw data is being sent in the request body, as it is currently empty."
              }
            }
          }
        }
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/announce/delete:
    post:
      tags:
        - ActionAnnounce
      summary: Action - Announce - Delete
      description: |-
        {
          "name": "Action - Announce - Delete",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "sessionId",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "url": "http://localhost:3000/api/action/announce/delete",
            "headers": [
              {
                "key": "",
                "value": "",
                "type": "default",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"announceId\":\"announceId\"}"
            }
          }
        }

        ### Description of Each Data

        - **name**: This represents the title of the request, indicating that it is an action to delete an announcement.

        - **request**: This is the primary object containing all the details needed to make the API call.

          - **auth**: This section specifies the type of authentication required for the request.
          
            - **type**: Indicates that the authentication method is bearer token based.
            
            - **bearer**: This includes an array of bearer authentication tokens.
              
              - **key**: A descriptive label for the token, here it's set to "token".
              
              - **value**: The variable representing the actual bearer token, denoted as "sessionId".
              
              - **type**: Specifies that the type of value is a string.

          - **method**: Indicates the HTTP method used for the request. In this case, it is a POST request.

          - **url**: The endpoint where the request is sent. It specifies the route to delete an announcement.

          - **headers**: This is an array of headers that might be included in the request.
          
            - **key**: The name of the header, which is empty in this case.
            
            - **value**: The value associated with the header, which is also empty here.
            
            - **type**: Specifies the type of header, which is set to default.
            
            - **disabled**: A boolean indicating if the header is inactive; it is true, meaning the header won't be sent.

          - **body**: This section contains the data to be sent with the request.
          
            - **mode**: Indicates how the body content is structured; here it is set to "raw".
            
            - **raw**: This holds the actual data being sent in JSON format. The keys here are:
            
              - **sessionId**: Represents the identifier for the user session.
              
              - **accountId**: Represents the unique identifier for the user's account.
              
              - **announceId**: Represents the unique identifier for the announcement to be deleted.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"announceId\":\"announceId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/attend/create:
    post:
      tags:
        - ActionAttend
      summary: Action - Attend - Create
      description: |-
        ### Endpoint: Action - Attend - Create

        This endpoint allows users to create an attendance action to a specific session or event.

        #### Request Overview
        - **Method**: POST
        - **URL**: `http://localhost:3000/api/action/attend/create`
        - **Authentication**: Requires a Bearer token for access.

        #### Authentication Details
        - **Type**: bearer
        - **Bearer Token**: A token must be provided in the header for authorization. The placeholder `"BearerToken"` should be replaced with a valid token value for access.

        #### Headers
        - Currently, no specific headers are required as the entry is disabled. If needed, custom headers can be added by specifying the key and value.

        #### Body Parameters
        This request requires a JSON body formatted as raw data. Below are the necessary fields:

        1. **sessionId**: (string) The unique identifier for the session you are attending.
        2. **accountId**: (string) Your unique account identifier that will be linked to the attendance record.
        3. **path**: (string) The URL path available for live content, where the attendance takes place (e.g., `/live/channel/video123`).
        4. **targetType**: (string) The type of target you are attending to, typically a label such as "videoId."
        5. **targetId**: (string) The unique identifier for the target, such as the specific video ID you are attending.
        6. **sourceType**: (string) The type of source from which the attendance originates, usually something like "accountId."
        7. **sourceId**: (string) The unique identifier of the source, which corresponds to your account ID.
        8. **tokenAmount**: (integer) A numerical value representing the amount of any tokens or credits associated with this action. It can be zero if no tokens apply.
        9. **name**: (string) An optional name for the attendance action being created.
        10. **description**: (string) An optional description of the attendance event or action.
        11. **tags**: (string) An optional field for any tags associated with the attendance action for categorization or search purposes.

        The body must be formatted in JSON, and an example is provided that outlines how to structure these parameters correctly. Make sure to replace placeholders with actual values when making a request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 0
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/attend/update:
    put:
      tags:
        - ActionAttend
      summary: Action - Attend - Update
      description: |-
        ### Endpoint Description: Action - Attend - Update

        **Request Type**: PUT

        **Request URL**: `http://localhost:3000/api/action/attend/update`

        #### Authentication
        - **Auth Type**: Bearer Token
          - **Key**: `token`
          - **Value**: `BearerToken` (This is a placeholder where the actual bearer token should be provided.)

        #### Headers
        - **Client-UUID**: `ClientUUID`
          - This header should contain a unique identifier for the client making the request.

        #### Request Body
        The body of the request is formatted in JSON and contains the following fields:

        1. **sessionId**:
           - Represents the unique identifier for the session. This is vital for tracking the session associated with the attendance update.

        2. **accountId**:
           - This field stores the unique identifier of the user's account that is making the update. It helps in identifying which user's attendance is being modified.

        3. **path**:
           - The path to the specific video or resource. In this case, it indicates the location of the video being referenced, e.g., `/live/channel/video123`.

        4. **targetType**:
           - Specifies the type of target associated with the attendance update. Here, it's indicated as `tournamentId`, which signifies that the target is related to a tournament.

        5. **targetId**:
           - Contains the unique identifier of the target entity (e.g., the tournament) that the update relates to.

        6. **sourceType**:
           - Indicates the type of source of the update. In this case, it is set to `accountId`, implying the source is the account ID.

        7. **sourceId**:
           - This is the unique identifier of the source (the user's account) that is linked to the update.

        8. **attendId**:
           - A unique identifier for the attendance entry that is being updated.

        9. **tokenAmount**:
           - Represents the amount of tokens associated with the attendance. Here, it is set to `0`, which may indicate that no tokens are being transferred or used in this update.

        10. **name**:
            - A descriptive name for the attendance update. In this context, it is set to `update`.

        11. **description**:
            - An optional field for providing additional details about the attendance update. Here, it is left empty.

        12. **tags**:
            - This optional field can be used to include tags related to the attendance update, aiding in categorization or searching. It is also empty in this instance.

        Overall, this endpoint allows users to update the attendance details associated with a specific session and account, linking it to a target tournament, while providing the flexibility to include metadata such as tokens, names, descriptions, and tags.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: tournamentId
                targetId: tournamentId
                sourceType: accountId
                sourceId: accountId
                attendId: attendId
                tokenAmount: 0
                name: update
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/attend/get:
    get:
      tags:
        - ActionAttend
      summary: Action - Attend - Get
      description: |-
        ### Endpoint Description: Action - Attend - Get

        - **Name**: Indicates the name of the endpoint, which is "Action - Attend - Get". This is used to identify the specific action being performed.

        - **Request**: This section contains all the details necessary to make the request to the server.

          - **Auth**: Specifies the authentication method required to access the endpoint.
          
            - **Type**: The type of authentication being used, which in this case is "bearer". This means that the request requires a bearer token for authorization.
            
            - **Bearer**: An array containing details about the bearer token being used for authentication.
            
              - **Key**: The key for the token which is labeled as "token".
              
              - **Value**: The actual token value that is being passed, represented here as "BearerToken". This should be replaced with the actual token when making the request.
              
              - **Type**: Specifies the type of the value, which is "string".

          - **Method**: The HTTP method used for the request, which is "GET". This indicates that the endpoint is used to retrieve data.

          - **URL**: The endpoint URL where the request is being sent. It includes the following parameters:
          
            - **attendId**: The identifier for the attendance record that you want to retrieve.
            
            - **sessionId**: The identifier for the session related to the attendance.
            
            - **accountId**: The identifier for the account associated with the attendance record.
            
            The example URL provided is: `http://localhost:3000/api/action/attend/get/?attendId=attendId&sessionId=sessionId&accountId=accountId`

          - **Headers**: Contains any additional headers to be sent with the request. In this case:
          
            - **Key**: There is no key specified for headers (empty string).
            
            - **Value**: There is no value specified (empty string).
            
            - **Type**: Marked as "default", but this header is currently disabled and will not be included in the request.

          - **Body**: Describes the body of the request, which in this instance:
          
            - **Mode**: The body mode is set to "raw".
            
            - **Raw**: There is no content in the body for this GET request, which is typical since GET requests usually do not send a body.
      security:
        - bearerAuth: []
      parameters:
        - name: attendId
          in: query
          schema:
            type: string
          example: attendId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/attend/all:
    get:
      tags:
        - ActionAttend
      summary: Action - Attend - Get All
      description: |-
        ### Endpoint Description: Action - Attend - Get All

        - **Name**: Action - Attend - Get All  
          This is the title of the API request, indicating its purpose to retrieve all attendance actions.

        - **Request**: This section outlines the configuration of the API request.

          - **Auth**: This specifies the authentication method required for the request.
            - **Type**: Bearer  
              Indicates that the request uses bearer token authentication.
            - **Bearer**: 
              - **Key**: "token"  
                This is the identifier for the authentication token.
              - **Value**: "BearerToken"  
                This represents the actual token value that must be used for authentication. Replace this placeholder with a valid bearer token.
              - **Type**: String  
                The data type for the token.

          - **Method**: GET  
            This indicates that the HTTP method used for the request is GET, which means the request is intended to retrieve data from the specified resource.

          - **URL**: `http://localhost:3000/api/action/attend/all/?sessionId=sessionId&accountId=accountId`  
            This is the endpoint where the GET request will be sent. It includes query parameters:
            - **sessionId**: This parameter is used to specify the session identifier. Replace "sessionId" with the actual session ID you wish to query.
            - **accountId**: This parameter indicates the account identifier. Replace "accountId" with the actual account ID you wish to query.

          - **Headers**: 
            This section lists any HTTP headers that need to be included in the request.
            - **Key**: (empty)  
              This indicates that there are no additional headers specified for this request.
            - **Value**: (empty)  
              No value is given since there are no headers to include.
            - **Type**: Default  
              Indicates that the header type is default.
            - **Disabled**: True  
              This indicates that the header is currently disabled and will not be included in the request.

          - **Body**: 
            This section defines the body content of the request.
            - **Mode**: Raw  
              Indicates that the request body is in raw format.
            - **Raw**: (empty)  
              This indicates that there is no body content provided for the request, which is typical for a GET request.

        ### Summary
        This API request is designed to get all attendance actions associated with a specific session and account. It requires bearer token authentication and uses query parameters to specify the session and account details. No additional headers or body content are needed for this GET request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/attend/delete:
    post:
      tags:
        - ActionAttend
      summary: Action - Attend - Delete
      description: |-
        **Endpoint Description: Action - Attend - Delete**

        - **Name**: Action - Attend - Delete  
          This is the identifier of the API request. It signifies that the operation is intended for deleting an attendance action.

        - **Request**: This section outlines the details required to make the API call.

          - **Auth**: This specifies the authentication method used for the request. In this case, it is a Bearer token authentication.
          
            - **Type**: Bearer  
              Indicates that the request requires a Bearer token for authentication, which is a common method for securing API endpoints.
            
            - **Bearer**: This array contains information regarding the authentication token that must be included in the request.
            
              - **Key**: "token"  
                This denotes the name of the token parameter.
              
              - **Value**: "sessionId"  
                This represents the actual token placeholder that should be replaced with a valid session ID during the request.
              
              - **Type**: string  
                Specifies that the token value should be a string.

          - **Method**: POST  
            This indicates the type of HTTP request method used when making the API call. Here, POST is used, which typically suggests that the request is intended to modify resources (in this case, deleting an attendance entry).

          - **URL**: "http://localhost:3000/api/action/attend/delete"  
            This is the endpoint URL where the request should be sent. It indicates that the action is to delete an attendance record in the system.

          - **Headers**: This section outlines any headers that need to be included with the request.
          
            - **Key**: "" (empty)  
              There are currently no specific headers included in this request, as the key field is empty.
            
            - **Value**: "" (empty)  
              Similarly, there is no value assigned since no headers are being used.
            
            - **Type**: default  
              Indicates the type of header, but here it does not apply as no headers are active (disabled: true).

          - **Body**: This section specifies the format and content of the data being sent with the POST request.
          
            - **Mode**: raw  
              This indicates that the body of the request will be in raw format, allowing for flexible content types like JSON.
            
            - **Raw**: "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"attendId\":\"attendId\"}"  
              This JSON structure defines the required parameters to be sent in the request body:
              
              - **sessionId**: "sessionId"  
                This is a placeholder that should be replaced with an actual session ID to identify the user's session.
              
              - **accountId**: "accountId"  
                This is a placeholder for the account ID associated with the attendance record that needs to be deleted.
              
              - **attendId**: "attendId"  
                This is a placeholder for the specific attendance ID that corresponds to the record intended for deletion.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"attendId\":\"attendId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/award/create:
    post:
      tags:
        - ActionAward
      summary: Action - Award - Create
      description: |-
        ### Action - Award - Create

        **Endpoint**: POST http://localhost:3000/api/action/award/create

        #### Request Authorization
        - **Auth Type**: Bearer
          - **Token**: This is a security token that allows access to the API. Replace `BearerToken` with the actual token needed for authentication.

        #### Request Method
        - **Method**: POST
          - This specifies that you are sending data to the server to create a new award action.

        #### Request Body
        - **Body Type**: Raw JSON
          - The body of the request should be formatted as raw JSON data. The following fields are required in the JSON body:

        1. **sessionId**: 
           - A unique identifier for the session in which the award is being created. This helps track the specific session for which the action is associated.

        2. **accountId**: 
           - The identifier for the account initiating the award creation. This should represent the user or entity that is responsible for the action.

        3. **path**: 
           - The path to the specific resource related to this action, such as a live video stream. In this case, it is formatted as `/live/channel/video123`.

        4. **targetType**: 
           - Specifies the type of target that will receive the award. In this example, it is set to `streamer`, indicating that the award is directed towards a streaming content creator.

        5. **targetId**: 
           - The identifier for the target entity receiving the award. Here, it should be replaced with the actual ID of the video or streamer.

        6. **sourceType**: 
           - Indicates the type of source from which the award is being issued. It is set to `accountId`, meaning that the award is coming from a user account.

        7. **sourceId**: 
           - Similar to `accountId`, this is the identifier for the source account issuing the award. It should match the `accountId` above to indicate the same entity.

        8. **tokenAmount**: 
           - The amount of tokens being awarded in this action. In this case, it is set to 20 tokens.

        9. **name**: 
           - The name of the award being created. This is a descriptive title for the award, which in this case is set to `award1`.

        10. **description**: 
            - A text field to provide an optional description of the award. This can be left blank or filled with additional information.

        11. **tags**: 
            - An optional field for including tags related to the award. This can help in categorizing or filtering awards based on different criteria. It can be left empty if no tags are needed.

        #### Headers
        - **Headers**: 
          - No specific headers are required as none are set. The default header type is disabled, indicating that no additional headers are necessary for this request.

        ### Summary
        This API endpoint is used to create an award action, allowing a user to award tokens to a streamer or content creator. Ensure all the required fields are filled out correctly and replace placeholder values with actual identifiers.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: award1
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/award/update:
    put:
      tags:
        - ActionAward
      summary: Action - Award - Update
      description: |-
        ### Description of Each Data in the Endpoint

        - **name**: This is the title of the API request. It indicates the action being performed, which in this case is to update an award.

        - **request**: This object contains all the necessary details to execute the request.

          - **auth**: This section specifies the authentication method required for the request.
            
            - **type**: Indicates the type of authentication being used. In this case, it is "bearer," which means a token is needed for access.
            
            - **bearer**: This array includes the details of the bearer token.
              
              - **key**: This defines the parameter name for the bearer token, which is "token."
              
              - **value**: This represents the actual bearer token that will be used for authentication. In this example, it is denoted as "BearerToken."
              
              - **type**: Specifies the data type of the token, which is a string.

          - **method**: This indicates the HTTP method used for the request. Here, it is "PUT," suggesting that this request will update an existing resource.

          - **url**: This is the endpoint URL where the request is sent. In this case, it is directed to "http://localhost:3000/api/action/award/update."

          - **headers**: This array contains any additional headers necessary for the request.
            
            - **key**: This defines the name of the header. It is set to "Client-UUID."
            
            - **value**: This represents the value associated with the header, which here is referred to as "ClientUUID."
            
            - **type**: Specifies the type of the header, labeled as "default."

          - **body**: This object describes the content sent with the request.

            - **mode**: Indicates the format of the body content. In this case, it is "raw," meaning the content is sent as a raw text string.
            
            - **raw**: This contains the actual data to be sent in the request body. It is formatted in JSON.
              
              - **sessionId**: This field holds the identifier for the session in which the action is taking place.
              
              - **accountId**: This represents the unique identifier for the user’s account involved in the action.
              
              - **awardId**: This indicates the unique identifier of the award that is being updated.
              
              - **path**: This specifies the path related to the action, likely indicating where the award action is relevant. Here, it is set to "/live/channel/video123."
              
              - **targetType**: This indicates the type of target for the award action. In this example, it is set to "streamer," denoting that the award is aimed at a streaming entity.
              
              - **targetId**: This is the unique identifier for the target of the action, in this case represented as "videoId."
              
              - **sourceType**: This denotes the type of source from which the action originates. Here, it is marked as "accountId."
              
              - **sourceId**: This provides the unique identifier for the source, which is the same as the accountId in this request.
              
              - **tokenAmount**: This indicates the number of tokens to be awarded in the action, specified as 20.
              
              - **name**: This field holds the name associated with the action, set to "Farooq" in this instance.
              
              - **description**: This provides additional details about the action being performed, here noted as "this is description."
              
              - **tags**: This field serves as a way to categorize the action, represented simply as "xyz."

            - **options**: This object includes settings for the body content.
              
              - **raw**: This specifies additional format details for the raw content.
                
                - **language**: Indicates the language of the raw content, which is "json" in this case.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                awardId: awardId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: Farooq
                description: this is description
                tags: xyz
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/award/get:
    get:
      tags:
        - ActionAward
      summary: Action - Award - Get
      description: |-
        ### Endpoint: Action - Award - Get

        #### Description of Data

        - **name**: This specifies the name of the API request. In this case, the request is titled "Action - Award - Get", which indicates that it is used for retrieving award-related information.

        - **request**: This section contains all the details related to the API request.

          - **auth**: This denotes the authentication method used for the request.
            - **type**: Specifies the type of authentication. In this instance, it is set to "bearer", indicating a bearer token authentication method.
            - **bearer**: This is an array that holds the authentication details.
              - **key**: This is a label for the value being sent, which is "token" in this situation.
              - **value**: This holds the actual bearer token. Here, it is labeled as "BearerToken", which should be replaced with a valid token when making the request.
              - **type**: The data type of the value provided, which is "string".

          - **method**: Specifies the HTTP method used for the request. This request uses the "GET" method, which is typically used to retrieve data from the server.

          - **url**: This is the endpoint URL that the request is sent to. In this instance, it is:
            ```
            http://localhost:3000/api/action/award/get/?awardId=awardId&sessionId=sessionId&accountId=accountId
            ```
            - The URL contains query parameters:
              - **awardId**: A placeholder for the ID of the award you want to retrieve. You must replace "awardId" with the actual award ID.
              - **sessionId**: A placeholder for the session ID associated with the request. Replace "sessionId" with the actual session ID.
              - **accountId**: A placeholder for the account ID associated with the request. Replace "accountId" with the actual account ID.

          - **headers**: This section is meant for including additional headers in the request.
            - **key**: This is left empty and does not contain any specific header information.
            - **value**: This is also empty, indicating no value is associated with any header.
            - **type**: This is labeled as "default".
            - **disabled**: This property is set to true, which means that this particular header setup is disabled and will not be included in the request.

          - **body**: This section describes the body of the request.
            - **mode**: Indicates the format of the request body. Here, it is "raw", suggesting that the body content is sent as raw data.
            - **raw**: This field is currently empty, which means there is no raw data being sent in the body of the request.

        This description provides a comprehensive overview of the components involved in the "Action - Award - Get" request, guiding users on how to properly utilize the API.
      security:
        - bearerAuth: []
      parameters:
        - name: awardId
          in: query
          schema:
            type: string
          example: awardId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/award/all:
    get:
      tags:
        - ActionAward
      summary: Action - Award - Get All
      description: |-
        ### Endpoint: Action - Award - Get All

        #### Overview
        This endpoint retrieves a list of all awards associated with a given session and account. 

        #### Detailed Description of Each Field

        - **name**: 
          - This is the name of the API request. It is labeled as "Action - Award - Get All," indicating that it fetches all the available awards.

        - **request**: 
          - This object contains all the details needed to perform the API request.

          - **auth**:
            - This specifies the authentication method for the API request.
            - **type**: 
              - The type of authentication being used. In this case, it is "bearer," which indicates that a token is required to authorize the request.
            - **bearer**: 
              - This array holds the details for the bearer token.
              - **key**: 
                - This represents the name of the token. Here, it's labeled as "token."
              - **value**: 
                - This is the actual token value you need to supply for authorization. This is presented as "BearerToken" but should be replaced with a real token.
              - **type**: 
                - Indicates the data type of the value provided for the bearer token. It is set to "string."

          - **method**: 
            - This indicates the HTTP method used for the request. It is set to "GET," which is used for retrieving data.

          - **url**: 
            - This is the endpoint URL where the API request is sent. 
            - The structure includes parameters for session ID and account ID: 
              - `sessionId=sessionId`: This placeholder should be replaced with the actual session ID for the query.
              - `accountId=accountId`: This placeholder should be replaced with the actual account ID for the query.
            - The full URL for the request is: `http://localhost:3000/api/action/award/all/?sessionId=sessionId&accountId=accountId`.

          - **headers**: 
            - This is an array that contains any additional headers that may be needed for the API request. In this case, the array contains an empty object, indicating that no custom headers are required, and the header is currently disabled.

          - **body**: 
            - This section holds the body of the request.
            - **mode**: 
              - Indicates the format of the body content. It is set to "raw," implying a raw data type is expected.
            - **raw**: 
              - This is where the raw data would be placed if necessary. Currently, it is empty since a GET request typically does not require a body.

        #### Usage 
        Use this endpoint to retrieve all awards for a specified session and account by supplying the required parameters and a valid bearer token for authentication. Be sure to replace the placeholders in the URL with actual values before making the request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/award/delete:
    post:
      tags:
        - ActionAward
      summary: Action - Award - Delete
      description: |-
        {
          "name": "Action - Award - Delete",
          "description": {
            "request": {
              "auth": {
                "type": "bearer": {
                  "description": "Authentication method requiring a bearer token to authorize the request. The token is typically provided in the header for authentication."
                },
                "bearer": [
                  {
                    "key": "token": {
                      "description": "Specifies the type of authorization token being used for this request."
                    },
                    "value": "sessionId": {
                      "description": "This is the actual session ID that identifies the user's active session and grants access to the API."
                    },
                    "type": "string": {
                      "description": "Indicates that the value of the token is expected to be a string."
                    }
                  }
                ]
              },
              "method": "POST": {
                "description": "The HTTP method used for this request. POST is typically used to submit data to be processed to a specified resource."
              },
              "url": "http://localhost:3000/api/action/award/delete": {
                "description": "The endpoint URL where the request is sent. This URL points to the API function responsible for deleting an award."
              },
              "headers": [
                {
                  "key": "": {
                    "description": "This normally indicates a header key that can be defined for sending additional information with the request, but it is not specified here."
                  },
                  "value": "": {
                    "description": "The corresponding value for the header key, which is also not specified here."
                  },
                  "type": "default": {
                    "description": "Indicates the type of the header. However, since the key and value fields are empty, no additional headers are being sent."
                  },
                  "disabled": true: {
                    "description": "This indicates that the header is currently disabled and will not be included in the request."
                  }
                }
              ],
              "body": {
                "mode": "raw": {
                  "description": "The body of the request is formatted as raw data. This means it is not structured as form data or JSON automatically."
                },
                "raw": "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"awardId\":\"awardId\"}": {
                  "description": "This is the raw JSON payload sent in the body of the request. It includes three parameters: sessionId, accountId, and awardId. These values are placeholders and should be replaced with actual data when making the request."
                }
              }
            }
          }
        }
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"awardId\":\"awardId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/balance/create:
    post:
      tags:
        - ActionBalance
      summary: Action - Balance - Create
      description: |-
        ### Action - Balance - Create Endpoint Description

        This API endpoint is used to create a new balance action in the system. Below is a detailed description of each component in the request.

        #### Request Authentication
        - **Type**: Indicates that the authentication method used is a bearer token.
        - **Bearer**: Contains the token used for authorization.
          - **Key**: Represents the name of the token parameter, which is standardized to "token" in this context.
          - **Value**: Placeholder for the actual bearer token (e.g., "BearerToken") that grants access to the API.
          - **Type**: Specifies that the value is of type string.

        #### HTTP Method
        - **Method**: The request uses the HTTP POST method, indicating that it is intended to submit data to be processed.

        #### Endpoint URL
        - **URL**: The endpoint for making the POST request, which is set to `http://localhost:3000/api/action/balance/create`. This is the local server address where the API is hosted.

        #### Request Headers
        - **Headers**: This section can include additional metadata sent with the request. It's currently shown as empty and disabled, which means no custom headers are set.

        #### Request Body
        - **Mode**: The request body is set to "raw", which means that the data is sent as plain text.
        - **Raw**: Contains the JSON formatted data that is submitted in the request body. Below is the breakdown of each field included in the JSON:
          - **sessionId**: A unique identifier for the user session (e.g., "sessionId") being referenced.
          - **accountId**: The ID of the account for which the balance action is being created (e.g., "accountId").
          - **path**: A string that specifies the path associated with the action (e.g., "/live/channel/video123").
          - **targetType**: Indicates who or what the action is targeted at, which in this case is "streamer".
          - **targetId**: The ID of the target for the action, such as a video ID (e.g., "videoId").
          - **sourceType**: Specifies the type of source to draw from, noted as "accountId".
          - **sourceId**: The ID of the source used in the action, which is also the account ID (e.g., "accountId").
          - **tokenAmount**: The amount of tokens involved in the balance action, set here to 20.
          - **name**: A name assigned to the balance action for identification purposes (e.g., "balance1").
          - **description**: An optional field that can document more information about the action (currently left empty).
          - **tags**: An optional field for adding tags to categorize the balance action (currently left empty).

        #### Body Options
        - **Options**: Specifies settings for interpreting the raw body.
          - **Raw**: Indicates that the body content is in JSON format.

        This endpoint is useful for users looking to manage user balances within a specific context like streaming, providing a streamlined way to create balance actions programmatically.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: balance1
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/balance/update:
    put:
      tags:
        - ActionBalance
      summary: Action - Balance - Update
      description: |-
        ### Action - Balance - Update

        #### Request Details:
        - **Auth**: This section outlines the authentication method used for the request.
          - **Type**: The type of authentication being used is bearer token.
          - **Bearer Token**: A key-value pair where:
            - **Key**: The name for the token, labeled as "token".
            - **Value**: The actual bearer token placeholder, noted as "BearerToken". This token must be replaced with a valid token for authorization.

        - **Method**: The HTTP method used for this request is PUT, which indicates that this request is intended to update an existing resource.

        - **URL**: The endpoint for making the request is:
          - `http://localhost:3000/api/action/balance/update`
          - This is the designated path for updating balance information.

        - **Headers**: Custom headers to be sent with the request.
          - **Client-UUID**: A key-value pair where:
            - **Key**: The header's name is "Client-UUID".
            - **Value**: The placeholder "ClientUUID" must be replaced with the actual client UUID for identification purposes.

        #### Body:
        - The body of the request contains a raw JSON object that specifies the details necessary for the balance update.
          - **SessionId**: A unique identifier for the session, replace "sessionId" with the actual session ID.
          - **AccountId**: Identifier for the account in question, to be replaced with the actual account ID.
          - **BalanceId**: Unique identifier for the balance record to be updated, must replace "balanceId" with the correct value.
          - **Path**: A string representing the path where the action is being executed, for example, "/live/channel/video123".
          - **TargetType**: Specifies the type of target for the operation, here it is set to "streamer".
          - **TargetId**: Identifier for the target object, replace "videoId" with the actual ID.
          - **SourceType**: Type of source for the operation, to be set as "accountId".
          - **SourceId**: Identifier for the source account, will also be "accountId" in this case.
          - **TokenAmount**: The quantity of tokens being updated, currently set to 20.
          - **Name**: A string representing the name associated with the action, currently set as "Farooq".
          - **Description**: A brief string description for the action, currently set to "this is description".
          - **Tags**: Comma-separated tags that describe the action, currently set to "xyz".

        This information is structured in JSON format and is necessary for executing the balance update action in the API.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                balanceId: balanceId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: Farooq
                description: this is description
                tags: xyz
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/balance/get:
    get:
      tags:
        - ActionBalance
      summary: Action - Balance - Get
      description: |-
        ### Action - Balance - Get Endpoint Description

        - **name**: Represents the name of the API action being performed. In this case, it is "Action - Balance - Get", indicating that this endpoint is used to retrieve balance details.

        - **request**: This section outlines the details of the HTTP request that will be made to the server.

          - **auth**: This part specifies the authentication method used for the request.
          
            - **type**: Indicates the authentication mechanism. Here, it is "bearer", meaning the request requires a bearer token for authorization.
            
            - **bearer**: This is an array that contains the parameters for the bearer token.
            
              - **key**: A label for the token, in this instance, it is "token".
              
              - **value**: Represents the actual bearer token to be sent with the request. It is currently marked as "BearerToken", which should be replaced with an actual token when making the request.
              
              - **type**: Indicates the data type of the token value, which is specified as "string".

          - **method**: The HTTP method used for this request. It is a "GET" request, which means the endpoint is used to retrieve information rather than modify it.

          - **url**: The endpoint URL where the request will be sent. This includes:
          
            - The base URL: `http://localhost:3000`
            
            - The API path: `/api/action/balance/get/`
            
            - Query parameters:
              - **balanceId**: A parameter that should be replaced with the actual balance ID to specify which balance to retrieve.
              - **sessionId**: A parameter that should be replaced with the actual session ID, used to identify the user session.
              - **accountId**: A parameter that should be replaced with the actual account ID to retrieve the relevant balance for the specified account.

          - **headers**: This section lists HTTP headers to be included in the request.
          
            - The current header is empty, meaning no additional headers are sent. The header is marked as "disabled", which implies it is not active and will not be included in the request.

          - **body**: The body of the request.
          
            - **mode**: Indicates the format of the body. For a GET request, this is generally not used, but here it is set to "raw".
            
            - **raw**: Contains the request body data, which is currently empty, as GET requests typically do not include a body.

        This detailed description provides a comprehensive overview of the components involved in the "Action - Balance - Get" endpoint for effective usage by other users.
      security:
        - bearerAuth: []
      parameters:
        - name: balanceId
          in: query
          schema:
            type: string
          example: balanceId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/balance/all:
    get:
      tags:
        - ActionBalance
      summary: Action - Balance - Get All
      description: |-
        ### Endpoint Description: Action - Balance - Get All

        - **Name**: Action - Balance - Get All
          - This identifies the purpose of the API call. It is used to retrieve all balance-related information for actions.

        - **Request**: 
          - This section details how the request should be formed to interact with the API.

          - **Auth**:
            - **Type**: bearer
              - The authentication method used for this endpoint is OAuth 2.0 Bearer Token.
              
            - **Bearer**:
              - This is an array that contains the details required for bearer authentication.
              
              - **Key**: token
                - This represents the authorization key used to authenticate the request.
                
              - **Value**: BearerToken
                - This should contain the actual token value to grant access. Replace "BearerToken" with the actual token obtained during user authentication.
                
              - **Type**: string
                - Indicates that the value of the token is a string.

          - **Method**: GET
            - Specifies that this endpoint uses the HTTP GET method to retrieve data.

          - **URL**: 
            - The endpoint for the API call.
            - **http://localhost:3000/api/action/balance/all/?sessionId=sessionId&accountId=accountId**
              - This is the base URL used to access the API. 
              - **sessionId**: This query parameter is used to identify the current user session. Replace "sessionId" with the actual session identifier.
              - **accountId**: This query parameter specifies the account for which the balance data will be fetched. Replace "accountId" with the actual account identifier.

          - **Headers**: 
            - This provides additional information about the request.
            
            - **Key**: (Empty)
              - Represents a placeholder for any headers that might be needed, but currently is empty.
            
            - **Value**: (Empty)
              - The corresponding value for the header is also currently empty.
              
            - **Type**: default
              - Indicates the default type for the header.

            - **Disabled**: true
              - This means that the header is currently not active and will not be sent with the request.

          - **Body**:
            - This section describes the body of the request.
            
            - **Mode**: raw
              - Indicates that the body could contain raw data.
            
            - **Raw**: ""
              - Currently, this field is empty, meaning no data is sent in the body of the request.

        This endpoint is designed to gather all balance related actions for a specific session and account, using bearer token authentication to ensure secure access. Users interacting with this API should provide the necessary session and account identifiers in the URL.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/balance/delete:
    post:
      tags:
        - ActionBalance
      summary: Action - Balance - Delete
      description: |-
        ### Action - Balance - Delete

        This endpoint is designed to delete a specific balance associated with a particular account in the system. Below is a detailed description of each part of the request:

        - **Name**: This identifies the endpoint and its purpose. In this case, it is called "Action - Balance - Delete," indicating that it performs a deletion operation on balance records.

        - **Request**: This section outlines the specifications for making the API request.

          - **Auth**: This indicates the method of authentication required to access the endpoint. 
            - **Type**: The authentication type is 'bearer,' which means it requires a token for authorization.
            - **Bearer**: This is an array containing the required token information.
              - **Key**: Here it is labeled as "token," which represents the authentication token needed for the request.
              - **Value**: The value of this field is "sessionId," which should be replaced with the actual session ID of the user making the request.
              - **Type**: The type is set as "string," indicating that the value should be a string.

          - **Method**: The HTTP method used for this request is "POST." This means that you are sending data to the server to perform an action.

          - **URL**: The endpoint URL is specified as "http://localhost:3000/api/action/balance/delete." This is the path where the request will be sent.

          - **Headers**: This section is for any additional information sent with the request, but in this case, there are no headers configured (both the key and value are empty, and it is marked as disabled).

          - **Body**: This part includes the data being sent to the server.
            - **Mode**: The body mode is set to "raw," indicating that the data is being sent in its raw format (not using a form).
            - **Raw**: The actual data being sent in the body is a JSON string. It contains the following fields:
              - **sessionId**: This is the session ID required to authenticate the request. Replace "sessionId" with the actual session ID.
              - **accountId**: This field contains the ID of the account from which the balance is to be deleted. Replace "accountId" with the actual ID of the account.
              - **balanceId**: This specifies the ID of the balance you want to delete. Replace "balanceId" with the actual ID of the balance record.

        In summary, this endpoint allows users to remove a specific balance for a given account by providing necessary authentication and the relevant identifiers in the request body.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"balanceId\":\"balanceId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/block/create:
    post:
      tags:
        - ActionBlock
      summary: Action - Block - Create
      description: |-
        ### Action - Block - Create

        #### Request

        - **Authorization**
          - **Type**: Bearer
            - **Key**: `token`
              - **Value**: A string that represents the bearer token required for authorization. This token is used to authenticate the request to ensure that the user has the necessary permissions to perform the action.

        - **Method**: 
          - **POST**: This HTTP method is used to send data to the server for creating a new resource.

        - **URL**: 
          - `http://localhost:3000/api/action/block/create`: This is the endpoint where the request is sent. It is the local server address which handles the blocking action creation.

        - **Headers**: 
          - Currently, there are no specific headers being set since the provided key-value pair is disabled. Typically, headers can be used to provide additional context to the request, such as content-type or any necessary custom headers.

        #### Body
        - **Mode**: 
          - **Raw**: The body of the request is formatted as raw JSON.

        - **Raw Content**: 
        ```json
        {
            "sessionId": "sessionId",
            "accountId": "accountId",
            "path": "/live/channel/video123",
            "targetType": "videoId",
            "targetId": "videoId",
            "sourceType": "accountId",
            "sourceId": "accountId",
            "name": "",
            "description": "",
            "tags": ""
        }
        ```

        - **JSON Fields**:
          - **sessionId**: A unique identifier for the session during which the block action is being created. This helps in associating the action with a particular user session.
          
          - **accountId**: The ID of the account requesting to block content. This connects the block action to a specific user.

          - **path**: A string that specifies the route of the content that is being blocked. In this example, it refers to a live channel and includes the identifier for the video.

          - **targetType**: Indicates the type of the target being blocked, in this instance, it is specified as a `videoId`.

          - **targetId**: The unique identifier for the content (such as a video) that is being targeted for blocking.

          - **sourceType**: Defines the type of account that is initiating the block action. It is represented here as `accountId`.

          - **sourceId**: Refers to the ID of the account from which the block action is initiated. It should correspond to the `accountId`.

          - **name**: An optional field where the user can provide a name for the block action. This could be used to label the action for easier identification.

          - **description**: An optional field for a brief explanation or notes about the block action being created.

          - **tags**: This field can be used to include keywords or tags associated with the block action, assisting in categorization or retrieval of information later.

        These details should help users understand the requirements and structure of the request when creating a block action through the specified API endpoint.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/block/update:
    put:
      tags:
        - ActionBlock
      summary: Action - Block - Update
      description: |-
        ### Action - Block - Update

        #### Request Authentication
        - **Auth Type:** Bearer
          - A token is required to authenticate the request. This is provided in the format of a Bearer token.

        #### HTTP Method
        - **Method:** PUT
          - This request utilizes the PUT method, typically used for updating resources on a server.

        #### URL
        - **Endpoint URL:** `http://localhost:3000/api/action/block/update`
          - This is the URL to which the PUT request is sent for updating a block action.

        #### Headers
        - **Client-UUID:** 
          - This header should contain a unique identifier for the client making the request. It's used to distinguish requests from different clients.

        #### Body
        - **Body Mode:** Raw
          - The body content is sent in raw format, specifically as a JSON object.

        ##### JSON Body Content
        - **sessionId:** 
          - This is the identifier for the current session. It should be a unique value related to the user's session.

        - **accountId:** 
          - This is the identifier for the user's account. It signifies which account is relevant for the block update.

        - **path:** 
          - This specifies the path to the resource that is being updated. For example, it may indicate the location of a video being blocked.

        - **targetType:** 
          - This indicates the type of the target for the action being taken. In this case, it specifies that the target is identified by a video ID.

        - **targetId:** 
          - This is the identifier for the target resource, particularly the ID of the video that is being updated.

        - **sourceType:** 
          - This specifies the type of the source related to the action. Here, it indicates that the source references an account ID.

        - **sourceId:** 
          - This is the identifier for the source, corresponding to the account that is executing the action.

        - **blockId:** 
          - This is the unique identifier for the block action being updated.

        - **name:** 
          - A name or title for the update action. This can be used to identify the purpose of the block update.

        - **description:** 
          - An optional field where additional details about the block update can be provided. It can be left empty if not applicable.

        - **tags:** 
          - This field can be used to associate tags with the update for better categorization and identification. It may also be left empty if no tags are necessary. 

        This describes how to construct a PUT request for updating a block action in the given API, with each component of the request clearly defined.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                blockId: blockId
                name: update
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/block/get:
    get:
      tags:
        - ActionBlock
      summary: Action - Block - Get
      description: |-
        ### Action - Block - Get

        This endpoint is used to retrieve information about a specific block action. Below is a detailed explanation of each component involved in this request.

        #### Request Information

        - **Auth**: The request requires bearer token authentication.
          - **Type**: Specifies the type of authentication used, which is "bearer" in this case.
          - **Bearer**: This section contains the authentication details.
            - **Key**: The key for the token, labeled as "token".
            - **Value**: This should be replaced with the actual bearer token when making the request. It uses the placeholder "BearerToken".
            - **Type**: The expected data type for the token, which is "string".

        - **Method**: The HTTP method used for this request is "GET", indicating that the client is requesting data from the server.

        - **URL**: The endpoint URL to be accessed, which includes query parameters for the request. The format is as follows:
          - `http://localhost:3000/api/action/block/get/?blockId=blockId&sessionId=sessionId&accountId=accountId`
            - **blockId**: This is a placeholder for the unique identifier of the block you are querying. Replace with the actual block ID.
            - **sessionId**: A placeholder for the session ID related to the request. This should be replaced with the actual session ID.
            - **accountId**: This is a placeholder for the account ID associated with the block. Replace with the actual account ID.

        - **Headers**: This section is for any additional headers that might be necessary for the request. In this case:
          - **Key**: The header key is empty, which means no specific header is required.
          - **Value**: The corresponding value is also empty.
          - **Type**: Marked as "default", indicating a standard header is used.
          - **Disabled**: This header is currently disabled, meaning it will not be sent with the request.

        - **Body**: The request body details.
          - **Mode**: The body mode is set to "raw", indicating that it's expected to contain raw data in the request.
          - **Raw**: The body is currently empty, which means no data will be sent in the body of the request.

        This endpoint is typically used to get the status or details of a specific action block, and proper values should be provided for each query parameter to ensure accurate results.
      security:
        - bearerAuth: []
      parameters:
        - name: blockId
          in: query
          schema:
            type: string
          example: blockId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/block/all:
    get:
      tags:
        - ActionBlock
      summary: Action - Block - Get All
      description: |-
        ### Endpoint Description: Action - Block - Get All

        - **Name**: Action - Block - Get All
          - This is the title of the API request that indicates its purpose, which is to retrieve all blocked actions.

        - **Request Method**: GET
          - This specifies that the HTTP method used for the request is GET, meaning it is intended to fetch data from the server.

        - **Request URL**: 
          - `http://localhost:3000/api/action/block/all/?sessionId=sessionId&accountId=accountId`
          - This URL points to the API endpoint that is called to get a list of all blocked actions. It includes two query parameters:
            - **sessionId**: This parameter should be replaced with the actual session ID, which is used to identify the session when retrieving the blocked actions.
            - **accountId**: This parameter should be replaced with the actual account ID, used to specify which account's blocked actions you want to retrieve.

        - **Authentication**: 
          - This request uses bearer token authentication. A token is required to authorize the request and must be included in the headers.
          
          - **Auth Type**: Bearer
            - This indicates that the authentication mechanism being used is a bearer token, which is typically a string that grants access to the API resources.
          
          - **Bearer Token**: 
            - **Key**: token
              - The key used to reference the token in the authentication process.
            - **Value**: BearerToken
              - This is a placeholder for the actual bearer token needed for authorization. Users must replace "BearerToken" with their valid token to access the endpoint.
            - **Type**: string
              - The datatype of the token, which is a string.

        - **Headers**: 
          - The request contains an empty headers array, indicating that no additional headers are needed for this request. There is a potentially disabled header entry, signifying that it could be used if required in the future.

        - **Body**: 
          - **Mode**: raw
            - This signifies that no body data is sent with the request, as it is a simple GET request.
          - **Raw**: ""
            - This indicates that there is no raw body content to include in the request.

        This endpoint is designed to retrieve a collection of blocked actions based on the provided session and account identifiers, requiring appropriate authentication to function correctly.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/block/delete:
    post:
      tags:
        - ActionBlock
      summary: Action - Block - Delete
      description: |-
        ### Description of Data for Endpoint: Action - Block - Delete

        - **name**: This is the title of the endpoint, indicating that this action is intended to delete a block in the system.

        - **request**: This section defines the details of the HTTP request that will be made to the endpoint.

          - **auth**: This section specifies the type of authentication required to access the endpoint. In this case, it uses bearer token authentication.

            - **type**: Indicates the kind of authentication used (bearer token in this case).
            
            - **bearer**: This is an array that contains the details for the bearer token authentication.

              - **key**: Refers to the parameter name for the bearer token (in this case, it is labeled "token").
              
              - **value**: This indicates the value that is expected in the token field (set as "sessionId" for this specific request).
              
              - **type**: Represents the data type of the value (which is a string here).

          - **method**: Specifies the HTTP method used for this request. This is a POST request, which means data is being sent to the server to perform a specific action.

          - **url**: This is the endpoint's URL where the request will be sent. Here, the request will be sent to "http://localhost:3000/api/action/block/delete".

          - **headers**: This section could include any additional headers that need to be sent with the request.

            - **key**: This field is intended to specify the name of the header but is currently empty.
            
            - **value**: Corresponds to the header's value and is also empty.

            - **type**: Indicates the type of header, but since no header is specified, it is marked as "default".

            - **disabled**: This indicates whether this particular header is enabled or disabled for the request. In this case, it is disabled.

          - **body**: This section contains the actual data being sent in the request body.

            - **mode**: Specifies the format of the request body; in this case, it is set to "raw", meaning it will contain raw JSON data.

            - **raw**: This field contains the actual JSON string that will be sent in the body of the request. It includes the following parameters:
            
              - **sessionId**: This is a parameter representing the session identifier for the user/application making the request.
              
              - **accountId**: This represents the unique identifier for the user's account that owns the block.
              
              - **blockId**: This indicates the unique identifier for the block that is to be deleted.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"blockId\":\"blockId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/boost/create:
    post:
      tags:
        - ActionBoost
      summary: Action - Boost - Create
      description: |-
        ### Action - Boost - Create

        #### Request Details

        - **Auth**: 
          - **Type**: Bearer
            - This indicates that the request uses Bearer Token authentication.
          - **Bearer Token**: 
            - **Key**: token
            - **Value**: BearerToken
            - **Type**: string
            - This is the actual authentication token used to authorize the request, which should be replaced with a valid Bearer token.

        - **Method**: 
          - **POST**
            - This defines the HTTP method to be used for the request. POST is typically used to create new resources.

        - **URL**: 
          - **http://localhost:3000/api/action/boost/create**
            - This is the endpoint where the request is sent. Ensure the server is running locally at the specified port.

        - **Headers**: 
          - There are no headers defined in this request. The existing header entry is disabled and does not need to be used.

        #### Body Details

        - **Mode**: 
          - **raw**
            - This indicates that the payload content is sent as raw data, specifically formatted in JSON.

        - **Raw**: 
          - This is the actual data being sent in the body of the request, formatted as JSON:
          
        ```json
        {
            "sessionId": "sessionId",
            "accountId": "accountId",
            "path": "/live/channel/video123",
            "targetType": "videoId",
            "targetId": "videoId",
            "sourceType": "accountId",
            "sourceId": "accountId",
            "tokenAmount": 10,
            "name": "",
            "description": "",
            "tags": ""
        }
        ```
          
          - **Fields**:
            - **sessionId**: 
              - Represents the unique identifier for the session. This should be replaced with a valid session ID.
              
            - **accountId**: 
              - Identifier for the user's account. Must be replaced with the actual account ID.

            - **path**: 
              - The API path or URL for the specific channel or resource the action is targeting. Example given is a path to a live channel.

            - **targetType**: 
              - Specifies the type of target for the action, in this case, it's indicating that the target is a video ID.

            - **targetId**: 
              - The unique identifier for the target resource, which in this scenario is a specific video.

            - **sourceType**: 
              - Indicates the type of source for the action, which here is an account ID.

            - **sourceId**: 
              - The unique identifier for the source resource, similar to the account ID.

            - **tokenAmount**: 
              - Specifies the amount of tokens to be used in the action, set to 10 in this example.

            - **name**: 
              - A placeholder for naming the action. This can be customized according to user preference.

            - **description**: 
              - A placeholder for describing the action. Users can provide additional context here.

            - **tags**: 
              - A placeholder for any tags associated with the action, which can help in categorizing or identifying the request.

        This endpoint is designed to create a boost action that targets a specific video, allowing users to interact with their account resources effectively.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 10
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/boost/update:
    put:
      tags:
        - ActionBoost
      summary: Action - Boost - Update
      description: |-
        ### Endpoint Description: Action - Boost - Update

        **Request**

        - **Auth**: 
          - **Type**: Indicates that authentication is done using a bearer token.
          - **Bearer**:
            - **Key**: Specifies that the authentication token will be provided under the key "token".
            - **Value**: This is the placeholder for the actual bearer token, which should be replaced with a valid token string to access the endpoint.
            - **Type**: Denotes that the value is of string type.

        - **Method**: 
          - The HTTP method used for the request is PUT. This indicates that the request is meant to update existing data.

        - **URL**: 
          - This is the endpoint where the update action will be sent. The specified URL is `http://localhost:3000/api/action/boost/update`, which indicates that this might be intended for a local environment.

        - **Headers**: 
          - **Key**: `Client-UUID`
            - **Value**: This is a placeholder for the unique identifier for the client. It should be replaced with the actual Client UUID to associate the request with the correct client session.
            - **Type**: This indicates that the header value is of default type.

        - **Body**: 
          - **Mode**: The body is sent in "raw" format, meaning the user will manually provide the content.
          - **Raw**: Contains a JSON object with the following fields:
            - **sessionId**: This field should contain the unique identifier for the session. It is required to identify which session the boost action is associated with.
            - **accountId**: This is the unique identifier for the account that is performing the action. It is essential for tracking the source of the action.
            - **path**: Represents the specific path to the target resource, in this case, a media channel with a video identifier (e.g., `/live/channel/video123`).
            - **targetType**: Specifies the type of target being boosted; here it is indicated as `videoId`, meaning the operation pertains to a specific video.
            - **targetId**: The unique identifier of the target (the video) that is subject to the boost operation.
            - **sourceType**: Indicates the origin of the action; it is set to `accountId`, meaning the source is the user's account.
            - **sourceId**: The identifier of the source, which, like the accountId, ties back to the user’s account.
            - **tokenAmount**: The number of boost tokens being used for the operation. For this request, it is set to `10`, meaning ten tokens are dedicated to the action.
            - **boostId**: This is the unique identifier for the specific boost action being issued.
            - **name**: Descriptive identifier for this update operation, set as `update`.
            - **description**: Placeholder for any additional information or description about the update; it’s currently left empty.
            - **tags**: Placeholder for tags related to the operation; like description, it is currently blank.

        The described structure allows users to effectively understand how to fill in the request parameters to perform an update on a boost action via the provided API.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 10
                boostId: boostId
                name: update
                desription: ''
                tags: ''
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/boost/get:
    get:
      tags:
        - ActionBoost
      summary: Action - Boost - Get
      description: |-
        ### Description of Endpoint Data

        - **name**: Defines the name of the API request, which is "Action - Boost - Get."

        - **request**: This object contains all details related to the API request.

          - **auth**: Specifies the authentication type required for the request.
          
            - **type**: Indicates the authentication method is using a bearer token.
            
            - **bearer**: This array holds the details of the bearer token.
            
              - **key**: Represents the name of the attribute for the token, which is "token."
              
              - **value**: Contains the actual bearer token value placeholder as "BearerToken." This should be replaced with the actual token when making the request.
              
              - **type**: Defines the data type of the token, which is "string."
          
          - **method**: Specifies the HTTP method used for the request, which is "GET."

          - **url**: The endpoint URL that will be accessed. It includes the following query parameters:
          
            - **boostId**: Placeholder for the unique identifier of the boost action.
            
            - **sessionId**: Placeholder for the identifier of the user session.
            
            - **accountId**: Placeholder for the identifier of the user account.

            The URL structure is: `http://localhost:3000/api/action/boost/get/?boostId=boostId&sessionId=sessionId&accountId=accountId`.

          - **headers**: This array can hold any additional headers needed for the request.
          
            - **key**: Currently, this is an empty string, indicating no additional custom headers are set.
            
            - **value**: Also empty, since no values for custom headers are provided.
            
            - **type**: Indicates the header type as "default."
            
            - **disabled**: Set to true, which means this header is currently not being used or is inactive.
          
          - **body**: Contains details about the body of the request.
          
            - **mode**: Indicates the body content type, which is set to "raw."
            
            - **raw**: This field is currently empty, meaning there is no body content to send with the request.
      security:
        - bearerAuth: []
      parameters:
        - name: boostId
          in: query
          schema:
            type: string
          example: boostId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/boost/all:
    get:
      tags:
        - ActionBoost
      summary: Action - Boost - Get All
      description: |-
        ### Endpoint Description: Action - Boost - Get All

        - **Name**: This is the identifier for the API request. It indicates that the endpoint is related to retrieving all boost actions.

        - **Request**: This section contains details about how the API request should be executed.

          - **Auth**: This specifies the authentication method used to access the endpoint.
          
            - **Type**: Indicates the type of authentication. In this case, it is set to "bearer", which is commonly used for token-based authentication.
            
            - **Bearer**: This is a list containing the authentication token required for the request.
            
              - **Key**: This represents the parameter name for the bearer token, which is labeled as "token".
              
              - **Value**: This is where the actual bearer token should be placed, indicated in the placeholder as "BearerToken". Users need to replace this with their actual token.
              
              - **Type**: This specifies the data type of the token, which is set as "string".

          - **Method**: This indicates the HTTP method used for the request. In this case, it is "GET", which means the action is fetching data from the server.

          - **URL**: This is the endpoint where the request will be sent. It's a combination of the base URL and the specific path to the resource being accessed. The URL contains query parameters:
          
            - **sessionId**: This is the ID of the session for which the boost actions are being retrieved. It needs to be replaced with an actual session identifier.
            
            - **accountId**: This is the ID of the account associated with the boost actions. It also requires a real account identifier to be functional.

          - **Headers**: This specifies any additional headers that may be needed for the request. In this case, there is an empty header entry that is marked as disabled, indicating that no extra headers are currently required.

          - **Body**: This is the content of the request body.
          
            - **Mode**: This indicates the type of content in the body. Here, it is set to "raw", implying that the body will contain raw data.
            
            - **Raw**: This is where the actual body content would go. It is currently empty, indicating that no body data needs to be sent with the GET request.

        This endpoint can be utilized to fetch all boost actions associated with a specific session and account by providing the required authentication and query parameters.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/boost/delete:
    post:
      tags:
        - ActionBoost
      summary: Action - Boost - Delete
      description: |-
        {
          "name": "Action - Boost - Delete",
          "description": {
            "request": {
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "sessionId",
                    "type": "string"
                  }
                ]
              },
              "method": "POST",
              "url": "http://localhost:3000/api/action/boost/delete",
              "headers": [
                {
                  "key": "",
                  "value": "",
                  "type": "default",
                  "disabled": true
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"boostId\":\"boostId\"}"
              }
            },
            "details": {
              "auth": {
                "type": "bearer": "The authentication method used for this API request, requiring a bearer token for authorization.",
                "bearer": [
                  {
                    "key": "token": "The specific key indicating that a token is being used for authentication.",
                    "value": "sessionId": "This is a placeholder for the actual token value that will be used in the API request, which should represent the current user's session ID.",
                    "type": "string": "Indicates that the value is a string data type."
                  }
                ]
              },
              "method": "POST": "The HTTP method used for the request, indicating that data is being sent to the server to perform an action.",
              "url": "http://localhost:3000/api/action/boost/delete": "The endpoint URL that the request is targeting, in this case for deleting a boost action.",
              "headers": [
                {
                  "key": "": "The header key, which is empty in this case and therefore not used.",
                  "value": "": "The value for the header key, which is also empty here.",
                  "type": "default": "Indicates the type of header; however, it's not applicable since no headers are provided.",
                  "disabled": true: "This indicates that the header is currently disabled and will not be included in the request."
                }
              ],
              "body": {
                "mode": "raw": "The mode of the request body, indicating that the body will contain raw JSON data.",
                "raw": "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"boostId\":\"boostId\"}": "This is the actual content of the request body, containing placeholders for the session ID, account ID, and boost ID. These need to be replaced with actual values when making the request."
              }
            }
          }
        }
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"boostId\":\"boostId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/buy/create:
    post:
      tags:
        - ActionBuy
      summary: Action - Buy - Create
      description: |-
        ### Endpoint Description: Action - Buy - Create

        #### Request Overview
        This request is used to create a new buy action in the system. It utilizes a POST method to send data to the specified URL.

        #### Authentication
        - **Auth Type**: Bearer
          - **Token**: A string token is required for authentication. This token should be included in the authorization header as "BearerToken".

        #### Request Method
        - **Method**: POST
          - The request is sent using the POST HTTP method.

        #### Request URL
        - **URL**: `http://localhost:3000/api/action/buy/create`
          - This is the endpoint where the request is sent to create a new buy action.

        #### Request Headers
        - **Headers**: Currently, there are no custom headers specified. The header field is disabled, meaning it will not be sent with the request.

        #### Request Body
        - **Body Mode**: Raw
          - The data is sent in the raw format, specifically as a JSON string.

        - **JSON Payload**:
          - **sessionId**: A unique identifier for the user session. This helps in tracking the action related to a specific user experience.
          
          - **accountId**: The identifier for the user's account involved in the action. This is necessary to associate the buy action with the correct account.
          
          - **path**: The specific path indicating the location of the resource, such as a video channel.
          
          - **targetType**: Specifies the type of target action. In this case, it indicates that the target is identified by "videoId".
          
          - **targetId**: The unique identifier of the target item (e.g., the video that is being bought).
          
          - **sourceType**: Represents the source type of the action, which is linked to the user account (denoted as "accountId").
          
          - **sourceId**: This is the identifier for the source linked to the buy action, also using "accountId".
          
          - **name**: A descriptive name for the buy action. In this instance, it is set to "sand".
          
          - **description**: A detailed description of the buy action, providing context about what is being purchased. Here, it notes "sand for building".
          
          - **tags**: Contains keywords related to the buy action. In this example, it is simply "sand", which may help with categorization or searching.

        #### Additional Information
        - **Body Options**: The body is set to use JSON language to ensure proper formatting. 

        This request structure allows users to submit a buy action and provide necessary details required for processing the action in the system.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                name: sand
                description: sand for building
                tags: sand
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/buy/update:
    put:
      tags:
        - ActionBuy
      summary: Action - Buy - Update
      description: |-
        **Description of each data in the "Action - Buy - Update" endpoint:**

        1. **Request Name**: 
           - The name given to this request is "Action - Buy - Update". This describes the purpose of the request, which is to update a purchase action.

        2. **Authorization**:
           - **Type**: "bearer"
             - This specifies the type of authentication being used.
           - **Bearer Token**:
             - **Key**: "token"
               - This is the key for the bearer token required for authentication.
             - **Value**: "BearerToken"
               - This is a placeholder for the actual token that is needed to authorize the request.
             - **Type**: "string"
               - This indicates that the value of the token is a string.

        3. **HTTP Method**:
           - **PUT**: 
             - This indicates that the request is using the PUT method, which is employed to update an existing resource.

        4. **Request URL**:
           - **URL**: "http://localhost:3000/api/action/buy/update"
             - This is the endpoint where the request will be sent. It points to the local server where the update action will be processed.

        5. **Headers**:
           - **Key**: "Client-UUID"
             - This header is expected to be sent with the request. It identifies the client making the request.
           - **Value**: "ClientUUID"
             - A placeholder for the actual UUID value that should represent the client.

        6. **Body**:
           - **Mode**: "raw"
             - The body of the request is sent in raw format.
           - **Raw Content**: 
             - This is the JSON formatted data that will be included in the body of the request:
               - **sessionId**: 
                 - Identifies the user session. Placeholder is "sessionId" for the actual session identifier.
               - **accountId**: 
                 - Represents the account associated with the action. Placeholder is "accountId".
               - **path**: 
                 - Specifies the path to the resource being accessed, e.g., a video channel. Example provided is "/live/channel/video123".
               - **targetType**: 
                 - Indicates the type of target for the action. In this case, it's set to "videoId".
               - **targetId**: 
                 - Specifies the ID of the target resource. Placeholder is "videoId".
               - **sourceType**: 
                 - Indicates the type of the source of the action. This is set to "accountId".
               - **sourceId**: 
                 - Specifies the ID of the source, here also a placeholder for "accountId".
               - **buyId**: 
                 - Represents the ID of the purchase to be updated. Placeholder is "buyId".
               - **name**: 
                 - A placeholder string "update" for the name of the update action.
               - **description**: 
                 - Currently left blank, it can be used to provide additional details about the update.
               - **tags**: 
                 - Currently left blank, it can be used to categorize the update with tags.

        7. **Body Options**:
           - **Language**: "json"
             - Indicates that the body content is formatted as JSON, which is the standard format for APIs. 

        This overview outlines the purpose and structure of the "Action - Buy - Update" endpoint request, including the required fields for making a successful API call.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                buyId: buyId
                name: update
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/buy/get:
    get:
      tags:
        - ActionBuy
      summary: Action - Buy - Get
      description: |-
        **Endpoint Description: Action - Buy - Get**

        - **Name**: This identifies the action as "Action - Buy - Get."

        - **Request**: This section contains details about the request that will be made to the API.

          - **Auth**: This details the authentication method required for the API request.
            - **Type**: Specifies that the authentication method is "bearer."
            - **Bearer**: A list that contains details about the bearer token needed for authentication.
              - **Key**: Identifies the type of data being sent, which is "token."
              - **Value**: This is a placeholder for the actual bearer token, represented as "BearerToken." This value needs to be replaced with an actual token.
              - **Type**: Indicates that the value is a string.

          - **Method**: The HTTP method used for this request is "GET." This means that the request is intended to retrieve data.

          - **URL**: The endpoint URL for the request. It includes placeholders for parameters:
            - `buyId`: This should be replaced with the unique identifier for the buying action.
            - `sessionId`: This should be replaced with the identifier for the user session.
            - `accountId`: This should be replaced with the identifier for the user account.
            - The full URL template is `http://localhost:3000/api/action/buy/get/?buyId=buyId&sessionId=sessionId&accountId=accountId`.

          - **Headers**: This section usually contains additional information sent with the request.
            - In this case, there is a placeholder for a header key and value, but it is currently empty and marked as disabled. This means no additional headers will be sent with the request.

          - **Body**: This section typically contains data sent with the request.
            - **Mode**: Indicates the mode of the body content, which is set to "raw," meaning that raw data will be sent.
            - **Raw**: There is no actual data to send in the body for this GET request, so it is left empty.
      security:
        - bearerAuth: []
      parameters:
        - name: buyId
          in: query
          schema:
            type: string
          example: buyId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/buy/all:
    get:
      tags:
        - ActionBuy
      summary: Action - Buy - Get All
      description: |-
        {
          "name": "Action - Buy - Get All",
          "description": {
            "request": {
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "BearerToken",
                    "type": "string"
                  }
                ]
              },
              "method": "GET",
              "url": "http://localhost:3000/api/action/buy/all/?sessionId=sessionId&accountId=accountId",
              "headers": [
                {
                  "key": "",
                  "value": "",
                  "type": "default",
                  "disabled": true
                }
              ],
              "body": {
                "mode": "raw",
                "raw": ""
              }
            },
            "details": {
              "auth": {
                "type": "bearer": 
                  "Indicates that the request uses Bearer token authentication. Users must include a valid token to access the endpoint.",
                "bearer": [
                  {
                    "key": "token":
                      "This is the identifier for the Bearer token. It is required for the authentication process.",
                    "value": "BearerToken":
                      "Placeholder for the actual token needed to authenticate the request.",
                    "type": "string":
                      "The type indicates that the token is a string value."
                  }
                ],
              },
              "method":
                "This indicates that the request method is GET, meaning it retrieves data from the server.",
              "url":
                "The endpoint to access the action buy resources. It includes query parameters for sessionId and accountId which are required to filter results according to user sessions and specific accounts.",
              "headers":
                "An array of headers to be sent with the request. Currently, there are no custom headers defined and the entry is disabled.",
              "body":
                {
                  "mode": "raw":
                    "The mode specifies the body format; in this case, it's raw, which means no data is being sent in the request body.",
                   "raw": 
                    "Empty string indicating that there is no request body content for this GET request."
                }
            }
          }
        }
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/buy/delete:
    post:
      tags:
        - ActionBuy
      summary: Action - Buy - Delete
      description: |-
        ### Action - Buy - Delete Endpoint Description

        This endpoint is designed to delete a specific buy action associated with a user account.

        1. **Request Method**: 
           - **POST**: This method is used to send data to the server to perform the delete action.

        2. **URL**: 
           - **http://localhost:3000/api/action/buy/delete**: This is the local server URL where the delete request is sent. The path indicates that it’s related to actions for buying.

        3. **Authentication**: 
           - **Type**: Bearer Token.
           - **Token**: The user must provide a session token identified by the key “token”. This token is essential for verifying the user’s identity and permission to perform the delete action.

        4. **Headers**: 
           - Currently, there are no additional headers included in the request, which means default behavior will apply. The header field is marked as disabled.

        5. **Body**: 
           - **Mode**: Raw.
           - **Content**: The body of the request is sent in JSON format and contains three fields:
             - **sessionId**: Represents the user's session ID to authenticate the request. This should match the token provided in the authentication step.
             - **accountId**: This field specifies the account related to the buy action that needs to be deleted. It identifies whose action is being targeted.
             - **buyId**: This uniquely identifies the specific buy action that is to be deleted from the system.

        Ensure you replace the placeholders such as "sessionId", "accountId", and "buyId" with actual values when making a request to this endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"buyId\":\"buyId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/cancel/create:
    post:
      tags:
        - ActionCancel
      summary: Action - Cancel - Create
      description: |-
        ### Action - Cancel - Create Endpoint

        #### Request Details

        - **Authorization**:
          - **Type**: Bearer
            - **Key**: `token`
              - This field contains the authentication token required to access the endpoint. The token should be prefixed with the word "Bearer".

        - **Method**: 
          - **POST**
            - This indicates that the endpoint is used to create new data, specifically to cancel an action.

        - **URL**: 
          - `http://localhost:3000/api/action/cancel/create`
            - The endpoint where the request is sent. It is set to the local server, so it is not accessible publicly.

        - **Headers**:
          - There is an empty header entry included by default. This has been disabled and does not contribute any information for the request. In practice, you may need to add relevant headers depending on your API requirements.

        #### Body Parameters (JSON Format)

        The request body needs to be formatted as JSON and includes the following parameters:

        - **sessionId**: 
          - This is a unique identifier for the session related to the action being canceled. It helps in tracking the ongoing activities or requests.

        - **accountId**: 
          - This represents the identifier for the user account initiating the cancellation. It is crucial for linking the request to the correct user.

        - **path**: 
          - The path specifies the resource to which the cancellation action applies, such as the location of the live stream or video.

        - **targetType**: 
          - Indicates the type of target for the cancellation action. In this case, it specifies that the target is a "streamer".

        - **targetId**: 
          - This is the specific identifier for the target, such as the video ID of the livestream that is to be canceled.

        - **sourceType**: 
          - Designates the type of source from which the action is initiated. Here it is marked as "accountId", emphasizing that the source is an account.

        - **sourceId**: 
          - This is another identifier for the source, and it shares the same value as the accountId. This ensures that the source is clearly linked to the proper account.

        - **tokenAmount**: 
          - This integer value represents the amount of tokens involved in the cancellation action. It can refer to any kind of currency or virtual tokens specific to the application's context.

        - **name**: 
          - A string value providing a name for the cancellation action. This can serve as an identifier for later reference.

        - **description**: 
          - This field is currently empty and can be utilized for providing additional information about the cancellation action.

        - **tags**: 
          - Also currently empty, this field can be used to add tags for categorization or filtering purposes related to the cancellation action.

        The body of the request supports raw JSON format and must adhere to the structure outlined for it to be processed correctly.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: cancel1
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/cancel/update:
    put:
      tags:
        - ActionCancel
      summary: Action - Cancel - Update
      description: |-
        ### Endpoint Description for Action - Cancel - Update

        This endpoint is used to update a cancellation action. Below is a detailed description of the data involved in this request.

        1. **Authentication:**
           - **Type:** Bearer
           - **Token:** Used for authorization to access the endpoint. This should be a valid bearer token.

        2. **Request Method:**
           - **Method:** PUT
           - The HTTP method used to update the resource.

        3. **URL:**
           - **URL:** `http://localhost:3000/api/action/cancel/update`
           - The endpoint where the request is sent for updating the cancellation action.

        4. **Headers:**
           - **Client-UUID:**
             - Key: `Client-UUID`
             - Value: `ClientUUID`
             - This header is used to identify the client making the request uniquely.

        5. **Body:**
           - The body of the request is in raw JSON format and contains the following fields:

           - **sessionId:** 
             - A unique identifier for a user session. This is used to track the session during which the cancellation action is taking place.

           - **accountId:**
             - The identifier for the account involved in the cancellation. It helps link the action to a specific user account.

           - **cancelId:**
             - The identifier for the specific cancel action that is being updated. This is used to identify which cancellation is being modified.

           - **path:**
             - A string representing the path to the resource, such as a live channel or video. For example, `/live/channel/video123`.

           - **targetType:**
             - The type of target that is being affected by the cancellation (such as `streamer`).

           - **targetId:**
             - The identifier for the target being canceled, which could represent a video or streamer.

           - **sourceType:**
             - Indicates the type of source from which the cancellation request is originating (e.g., `accountId`).

           - **sourceId:**
             - The source identifier that corresponds to the `sourceType`, typically representing the user's account ID.

           - **tokenAmount:**
             - The amount of tokens involved in the cancellation action, which could represent a monetary value or other quantifiable measure (20 in this case).

           - **name:**
             - A string representing the name associated with the cancellation. For instance, `Farooq`.

           - **description:**
             - A brief description of the cancellation action, providing additional context (e.g., "this is description").

           - **tags:**
             - A string used for tagging or categorizing the cancellation action, which could be useful for filtering or searching (e.g., "xyz"). 

        This information will help users understand the purpose and requirements of the API request when using the Postman collection.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                cancelId: cancelId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: Farooq
                description: this is description
                tags: xyz
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/cancel/get:
    get:
      tags:
        - ActionCancel
      summary: Action - Cancel - Get
      description: |-
        ### Endpoint: Action - Cancel - Get

        **Description**: This endpoint is designed to retrieve information related to a cancellation action based on provided identifiers. 

        #### Request Components:

        - **Authorization**:
          - **Type**: Bearer Token
          - **Key**: `token`
          - **Value**: `BearerToken` - This token should be replaced with a valid bearer token to authenticate the request.

        - **Method**: 
          - **GET** - This indicates that the endpoint is accessed using the HTTP GET method, which is typically used to retrieve data from the server.

        - **URL**: 
          - `http://localhost:3000/api/action/cancel/get/?cancelId=cancelId&sessionId=sessionId&accountId=accountId`
            - This is the endpoint URL where the request is sent. 
            - **Query Parameters**:
              - `cancelId`: This parameter should be replaced with the unique identifier of the cancellation you wish to retrieve.
              - `sessionId`: This parameter should be replaced with the session identifier relevant to the cancellation action.
              - `accountId`: This parameter represents the account identifier associated with the cancellation.

        - **Headers**:
          - The headers section currently has an entry that is disabled and empty. This generally means there are no additional headers required for this request. If any headers are needed in the future, they should be added here.

        - **Body**:
          - **Mode**: Raw
          - **Content**: The body of the request is empty, which is typical for a GET request as it generally does not require a body for retrieval of data.

        ### Summary:
        This API call allows users to fetch detailed information about a cancellation action by supplying the necessary identifiers through URL parameters. It requires authentication via a bearer token, and no additional headers or body content are necessary for the request.
      security:
        - bearerAuth: []
      parameters:
        - name: cancelId
          in: query
          schema:
            type: string
          example: cancelId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/cancel/all:
    get:
      tags:
        - ActionCancel
      summary: Action - Cancel - Get All
      description: |-
        ### Action - Cancel - Get All Endpoint Description

        - **Name**: Action - Cancel - Get All
          - This is the name of the API call that retrieves all cancel actions.

        - **Request**:
          - This section outlines the details of the HTTP request that will be made to the server.

          - **Auth**:
            - **Type**: Bearer
              - This indicates that the request uses bearer token authentication. The token must be included in the request to access secure endpoints.
            - **Bearer**:
              - This is an array that contains the authentication details required for the request.
              - **Key**: token
                - This specifies the name of the authentication parameter.
              - **Value**: BearerToken
                - This is a placeholder for the user's actual bearer token that will be used to authenticate the request.
              - **Type**: string
                - This indicates that the value of the token is a string.

          - **Method**: GET
            - This specifies that the HTTP method for the request is a GET, which is used to retrieve data from the specified resource.

          - **URL**: http://localhost:3000/api/action/cancel/all/?sessionId=sessionId&accountId=accountId
            - This is the endpoint URL to which the GET request will be sent. 
            - **Base URL**: http://localhost:3000/api/action/cancel/all/
            - **Query Parameters**:
              - **sessionId**: sessionId
                - A placeholder for the session ID that may be required to filter or retrieve specific session-related data.
              - **accountId**: accountId
                - A placeholder for the account ID that may be required to filter or retrieve specific account-related data.

          - **Headers**:
            - This section can include additional HTTP headers for the request.
            - **Key**: (empty)
              - This indicates that there is currently no additional header key included in the request.
            - **Value**: (empty)
              - This indicates that there is currently no corresponding value for the header key included in the request.
            - **Type**: default
              - This represents the default type for the header (though none are currently specified).
            - **Disabled**: true
              - This indicates that any headers defined in this list are disabled and will not be sent with the request.

          - **Body**:
            - This section contains the body of the request.
            - **Mode**: raw
              - This indicates that the body format is raw, meaning that it can accept any string format.
            - **Raw**: ""
              - This indicates that there is no body data to be sent with the GET request, as GET requests typically do not have a body.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/cancel/delete:
    post:
      tags:
        - ActionCancel
      summary: Action - Cancel - Delete
      description: |-
        ### Endpoint Description: Action - Cancel - Delete

        - **Name**: Action - Cancel - Delete
          - This operation is used to cancel an action or request by deleting it from the system.

        - **Request**:
          - Contains all the necessary details for making a request to the API endpoint.

          - **Auth**:
            - **Type**: Bearer
              - This indicates that the request requires a bearer token for authentication.
            - **Bearer**:
              - A list containing authentication details.
              - **Key**: token
                - This field represents the type of authentication being used.
              - **Value**: sessionId
                - This is a placeholder for the actual session ID that authenticates the user making the request.
              - **Type**: string
                - Indicates that the value of the key is expected to be a string.

          - **Method**: POST
            - The HTTP method used for the request. In this case, it is a POST request, which is typically used to send data to the server.

          - **URL**: 
            - `http://localhost:3000/api/action/cancel/delete`
              - This is the endpoint URL where the request should be sent.

          - **Headers**:
            - A collection of key-value pairs sent with the request to provide additional context.
            - **Key**: (empty)
              - There are no specific headers being applied in this request as this field is left empty.
            - **Value**: (empty)
              - Correspondingly, there is no value provided for the header.
            - **Type**: default
              - The type indicates that this header is a default type.
            - **Disabled**: true
              - This indicates that the header is currently not active and will not be sent with the request.

          - **Body**:
            - Contains the data that will be sent in the request. 
            - **Mode**: raw
              - This signifies that the request body is provided as raw JSON data.
            - **Raw**: 
              - The actual content being sent in the body formatted as a JSON string:
              ```json
              {
                "sessionId": "sessionId",
                "accountId": "accountId",
                "cancelId": "cancelId"
              }
              ```
              - **sessionId**: Placeholder for the session ID, which identifies the user's current session.
              - **accountId**: Placeholder for the account ID related to the action being canceled.
              - **cancelId**: Placeholder for the specific ID of the action or request that is being canceled. 

        This information outlines how to set up and use this specific API endpoint to cancel an action by making a POST request with the necessary authentication and data.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"cancelId\":\"cancelId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/challenge/create:
    post:
      tags:
        - ActionChallenge
      summary: Action - Challenge - Create
      description: |-
        ### Endpoint Description: Action - Challenge - Create

        **Endpoint**: `POST http://localhost:3000/api/action/challenge/create`

        This endpoint is used to create a challenge action in the system. Below is a detailed description of each data point used in the request.

        #### Request Authentication
        - **Auth Type**: Bearer
          - This endpoint requires authentication using a bearer token.
          - **Key**: `"token"`
            - Represents the authorization token needed to access the endpoint.
          - **Value**: `"BearerToken"`
            - The actual token that grants access to secure the API.

        #### Request Method
        - **Method**: `POST`
          - This indicates that data is being sent to the server to create a new resource.

        #### Request URL
        - **URL**: `http://localhost:3000/api/action/challenge/create`
          - The endpoint URL where the request is sent to create a new challenge.

        #### Request Headers
        - **Headers**: 
          - Currently includes an empty header that is disabled. 
          - This may be left for future use or customization.

        #### Request Body
        - **Body Mode**: `raw`
          - The body of the request is sent in raw format.
          
        - **Raw Data**:
          ```json
          {
              "sessionId": "sessionId",
              "accountId": "accountId",
              "path": "/live/channel/video123",
              "targetType": "videoId",
              "targetId": "videoId",
              "sourceType": "accountId",
              "sourceId": "accountId",
              "name": "Tournament 1",
              "targetText": "lets play a cricket match",
              "description": "",
              "tags": ""
          }
          ```
          
          - **sessionId**: 
            - A unique identifier for the session related to the challenge.
            
          - **accountId**: 
            - The identifier for the account that is creating the challenge.
            
          - **path**: 
            - The path where the challenge is located, such as a link to a live channel or video.
            
          - **targetType**: 
            - Specifies the type of target for the challenge. In this case, it is set to `"videoId"`.
            
          - **targetId**: 
            - The specific ID of the target (video) for the challenge.
            
          - **sourceType**: 
            - Defines the source type, which is `"accountId"` here, indicating the source is an account.
            
          - **sourceId**: 
            - The ID of the source account creating the challenge.
            
          - **name**: 
            - The name of the challenge; for example, "Tournament 1".
            
          - **targetText**: 
            - Text associated with the challenge, like "lets play a cricket match", which provides context or description of the challenge.
            
          - **description**: 
            - An optional field that can be used to provide a more detailed description of the challenge. It is currently empty.
            
          - **tags**: 
            - An optional field for categorizing the challenge with tags. It is currently empty.

        This endpoint allows users to create challenges with specific parameters and authentication requirements, making it easier to manage and track challenges within the platform.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                name: Tournament 1
                targetText: lets play a cricket match
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/challenge/update:
    put:
      tags:
        - ActionChallenge
      summary: Action - Challenge - Update
      description: |-
        ### Action - Challenge - Update

        This endpoint is used to update an action challenge with the specified details.

        #### Request Details

        - **Auth**: 
          - **Type**: Bearer authentication.
          - **Bearer**: 
            - **Key**: `token`
              - **Value**: `BearerToken` - This should be replaced with a valid token to authorize the request.

        - **Method**: 
          - **PUT** - This indicates that the request is intended to update existing data.

        - **URL**: 
          - `http://localhost:3000/api/action/challenge/update` - This is the endpoint where the request is sent for updating the challenge.

        - **Headers**: 
          - **Client-UUID**: `ClientUUID` - This should be replaced with the unique identifier for the client making the request.

        #### Body Parameters

        The body of the request is expected to be in JSON format and contains the following fields:

        - **sessionId**: 
          - Type: string
          - Description: The identifier for the session associated with the challenge.

        - **accountId**: 
          - Type: string
          - Description: The unique identifier for the account involved in the challenge.

        - **path**: 
          - Type: string
          - Description: The path to the resource related to the challenge, for example, a URL to a live channel or video.

        - **targetType**: 
          - Type: string
          - Description: Specifies the type of target entity being updated, e.g., `videoId`.

        - **targetId**: 
          - Type: string
          - Description: The unique identifier for the target entity to be updated.

        - **sourceType**: 
          - Type: string
          - Description: Specifies how the source entity is identified, for example, by `accountId`.

        - **sourceId**: 
          - Type: string
          - Description: The unique identifier for the source entity.

        - **challengeId**: 
          - Type: string
          - Description: The identifier for the specific challenge that is being updated.

        - **isConfirm**: 
          - Type: boolean
          - Description: Indicates whether the challenge is confirmed. Set to `true` or `false`.

        - **isReject**: 
          - Type: boolean
          - Description: Indicates whether the challenge is rejected. Set to `true` or `false`.

        - **isDismiss**: 
          - Type: boolean
          - Description: Indicates whether the challenge is dismissed. Set to `true` or `false`.

        - **isIgnore**: 
          - Type: boolean
          - Description: Indicates whether the challenge is ignored. Set to `true` or `false`.

        - **name**: 
          - Type: string
          - Description: The updated name for the challenge.

        - **targetText**: 
          - Type: string
          - Description: The text associated with the target, used for identifying the context of the challenge.

        - **description**: 
          - Type: string
          - Description: A brief description of the challenge. Can be left empty.

        - **tags**: 
          - Type: string
          - Description: Tags associated with the challenge for categorization. Can be left empty. 

        This data structure provides a comprehensive way to specify the details needed to update an action challenge, ensuring all relevant information is captured in the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                challengeId: challengeId
                isConfirm: false
                isReject: false
                isDismiss: false
                isIgnore: false
                name: this is updated name
                targetText: this is target text
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/challenge/get:
    get:
      tags:
        - ActionChallenge
      summary: Action - Challenge - Get
      description: |-
        ### Endpoint Description: Action - Challenge - Get

        - **Name**: The name of the API request is "Action - Challenge - Get". This signifies that the request is related to getting a specific challenge action.

        - **Request**: This section outlines the details of the HTTP request being made.

          - **Auth**: 
            - **Type**: The type of authentication used for the API request is "bearer". This typically means that access to the endpoint is secured and requires a token.
            - **Bearer**: 
              - **Key**: Indicates the key for the bearer token, which is labeled "token".
              - **Value**: Here, it is represented as "BearerToken". This should be replaced with the actual token that grants access to the API.
              - **Type**: The format of the token is categorized as "string", denoting that it should be a text value.

          - **Method**: The HTTP method being used for this request is "GET". This method is used to retrieve data from the specified resource.

          - **URL**: The endpoint URL to which the GET request is sent is "http://localhost:3000/api/action/challenge/get/". Additional query parameters are included:
            - **challengeId**: This parameter is intended to specify the ID of the challenge you wish to retrieve.
            - **sessionId**: This parameter represents the ID of the session associated with the challenge.
            - **accountId**: This parameter identifies the account related to the request.

          - **Headers**: This section defines the HTTP headers to be sent with the request. Currently, no additional headers are specified, and it is indicated as "disabled", meaning it will not be sent with the request.

          - **Body**: 
            - **Mode**: The body mode for this request is set to "raw". This implies that the body, if present, would not have any specific formatting like JSON or form-data.
            - **Raw**: The raw body content is currently empty, which means that there is no data being sent in the body of the request, as it is not needed for a GET request.

        This endpoint is designed for retrieving information about a specific challenge action based on provided identifiers in the query string. Be sure to replace the placeholders for `challengeId`, `sessionId`, and `accountId` with actual values when making a request.
      security:
        - bearerAuth: []
      parameters:
        - name: challengeId
          in: query
          schema:
            type: string
          example: challengeId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/challenge/all:
    get:
      tags:
        - ActionChallenge
      summary: Action - Challenge - Get All
      description: |-
        ### Endpoint Description for "Action - Challenge - Get All"

        - **name**: This is the title of the API request. It identifies the action as fetching all challenges related to actions.

        - **request**: This section contains all the details pertaining to the API request.

          - **auth**: This indicates the authentication type required to access the endpoint.
          
            - **type**: Specifies the type of authentication being used. In this case, it is set to "bearer."
          
            - **bearer**: This is an array that holds the credentials needed for bearer token authentication.
            
              - **key**: This identifies the type of credential, which is "token" in this case.
              
              - **value**: The actual token used for authentication. It is represented as "BearerToken" which serves as a placeholder for the actual token value.
              
              - **type**: Indicates the data type of the token, which is "string."

          - **method**: This specifies the HTTP method used for the request. Here, it is a "GET" request, which means the endpoint is intended to retrieve data.

          - **url**: This is the endpoint URL where the request is sent. It includes:
          
            - **Base URL**: `http://localhost:3000` indicates a local server is being used.
            
            - **Path**: `/api/action/challenge/all/` identifies the specific API route for retrieving all challenges.
            
            - **Query Parameters**:
            
              - **sessionId**: A parameter that is passed in the URL to specify the session for which challenges are being retrieved. It acts as a placeholder and is meant to be replaced with an actual session ID.
              
              - **accountId**: Another query parameter used to specify the account associated with the challenges. This is also a placeholder intended for substitution with an actual account ID.

          - **headers**: This section is meant for any HTTP headers that may need to be included in the request.

            - **key**: A placeholder for header keys, which is currently empty.
            
            - **value**: A placeholder for header values, which is also currently empty.
            
            - **type**: Indicates the type of header, marked as "default."
            
            - **disabled**: This flag indicates whether this header is active or not. It is set to true, meaning this header will not be sent in the request.

          - **body**: This section contains the body of the request.

            - **mode**: This defines the format of the request body. Here it is set to "raw," indicating raw data input expected.
            
            - **raw**: This field contains the actual body content that will be sent with the request. In this case, it is empty, meaning no additional payload is being sent with the request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/challenge/delete:
    post:
      tags:
        - ActionChallenge
      summary: Action - Challenge - Delete
      description: |-
        ### Action - Challenge - Delete

        This endpoint is used to delete a challenge associated with a user's account. Below is the detailed description of each component involved in the request.

        #### Request Authentication
        - **Auth Type**: Bearer
          - This indicates that the request requires bearer token authentication.
        - **Bearer Token**:
          - This consists of:
            - **Key**: "token"
              - The parameter that identifies the bearer token type for authorization.
            - **Value**: "sessionId"
              - The session identifier used to authenticate the request. This value must be replaced with a valid session token.
            - **Type**: String
              - Denotes that the value of the token must be in string format.

        #### Request Method
        - **Method**: POST
          - This specifies that the request should be made using the HTTP POST method.

        #### Request URL
        - **URL**: `http://localhost:3000/api/action/challenge/delete`
          - The endpoint where the request is sent. This URL is hosted on the local server at port 3000 and is designed to handle the challenge deletion process.

        #### Request Headers
        - **Headers**:
          - Currently, there are no custom headers specified for this request.
          - The placeholder is kept disabled, indicating that no headers are necessary unless specifically required for additional functionality or routing.

        #### Request Body
        - **Body Mode**: Raw
          - The body of the request is sent in a raw format, which allows for custom JSON data.
        - **Raw Data**: 
        ```json
        {
          "sessionId": "sessionId",
          "accountId": "accountId",
          "challengeId": "challengeId"
        }
        ```
          - This is the JSON structure that must be included in the body of the request:
            - **sessionId**: This field must be populated with the user's session identifier.
            - **accountId**: This field should contain the ID of the user’s account which owns the challenge.
            - **challengeId**: This is the unique identifier of the challenge that is to be deleted.

        ### Summary
        This API endpoint allows the deletion of a specified challenge for a user by sending a POST request with the necessary authentication and identifying details in the body. Make sure to replace the placeholders with actual values before making a request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"challengeId\":\"challengeId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/close/create:
    post:
      tags:
        - ActionClose
      summary: Action - Close - Create
      description: |-
        ### Action - Close - Create

        This API endpoint is used to create a close action in the system. Below is a detailed description of each data point utilized in this request:

        #### Request Details

        - **Authentication**: 
          - **Type**: Bearer
            - This endpoint requires bearer token authentication. You must provide a token in the request header to be authorized.

        - **Method**: POST
          - The request method used for this API call is POST, which means you are sending data to the server to create a new resource.

        - **URL**: 
          - `http://localhost:3000/api/action/close/create`
            - This is the endpoint where the request is sent. It is hosted on the local server.

        #### Request Body

        This API expects a JSON body that contains several key-value pairs:

        - **sessionId**: 
          - A unique identifier for the session. This helps in tracking the session related to the close action.
          
        - **accountId**: 
          - The identifier for the user's account that is associated with this request. It specifies which user's data is being manipulated.

        - **path**: 
          - A string that signifies the location of the resource involved in the action. In this case, it is a path to a channel/video on the platform (e.g., `/live/channel/video123`).

        - **targetType**: 
          - This denotes the type of target for the close action. It can specify categories like 'streamer', which identifies the target as a streamer in this context.

        - **targetId**: 
          - The unique identifier for the target resource, such as the specific video that is involved in this request (e.g., `videoId`).

        - **sourceType**: 
          - This field indicates the type of source that is generating this request; in this case, it is tied to the `accountId`.

        - **sourceId**: 
          - Similar to `accountId`, this serves as the unique identifier for the source related to the close action, which in this case is also the `accountId`.

        - **tokenAmount**: 
          - An integer representing the amount of tokens involved in this action. It could refer to a currency or point system where the value is set to 20.

        - **name**: 
          - A string that provides a name for the close action. It is useful for identification purposes (e.g., `close1`).

        - **description**: 
          - A string for adding a description of the close action. This field can be left empty if there is no additional information to provide.

        - **tags**: 
          - A string for any tags that may be relevant to the close action. This can help in categorizing or filtering actions but can also be left empty.

        ### Summary
        This endpoint is designed for creating a close action with specific parameters related to users, sessions, and resources. Proper authentication and correctly structured JSON data are required to successfully make a request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: close1
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/close/update:
    put:
      tags:
        - ActionClose
      summary: Action - Close - Update
      description: |-
        ### Endpoint: Action - Close - Update

        #### Request Details:
        - **Method**: PUT
          - This endpoint uses the PUT method for updating existing resources.

        - **URL**: `http://localhost:3000/api/action/close/update`
          - This is the endpoint where the request will be sent to perform the update action.

        #### Authentication:
        - **Auth Type**: Bearer
          - Requires a bearer token for authentication. The token is included in the request to validate the user.

        - **Bearer Token**: 
          - **Key**: `token`
            - This identifies the type of authentication being used.
          - **Value**: `BearerToken`
            - This is where the actual token value should be inserted for authentication. It should be of string type.

        #### Headers:
        - **Header**: Client-UUID
          - **Key**: `Client-UUID`
            - Uniquely identifies the client making the request.
          - **Value**: `ClientUUID`
            - This is a placeholder for the unique client identifier. It should be replaced with the actual UUID of the client.

        #### Body:
        - **Body Mode**: Raw
          - The request body is in raw format.

        - **Content**: 
        ```json
        {
            "sessionId": "sessionId",
            "accountId": "accountId",
            "closeId": "closeId",
            "path": "/live/channel/video123",
            "targetType": "streamer",
            "targetId": "videoId",
            "sourceType": "accountId",
            "sourceId": "accountId",
            "tokenAmount": 20,
            "name": "Farooq",
            "description": "this is description",
            "tags": "xyz"
        }
        ```
        - **Fields**:
          - **sessionId**: 
            - A unique identifier for the session related to the action.
          - **accountId**: 
            - Identifies the account associated with the action being taken.
          - **closeId**: 
            - This ID refers to the specific close action that is being updated.
          - **path**: 
            - The path associated with the video channel, specified here as `/live/channel/video123`.
          - **targetType**: 
            - Indicates the type of target being addressed, which in this case is a streamer.
          - **targetId**: 
            - The identifier for the target, represented as `videoId`.
          - **sourceType**: 
            - This indicates the type of source involved in the action, which is an account in this case.
          - **sourceId**: 
            - The identifier for the source, mirrored as `accountId`.
          - **tokenAmount**: 
            - Specifies the amount of tokens to be involved in the action, set to 20.
          - **name**: 
            - This is a name associated with the action, currently set to "Farooq".
          - **description**: 
            - A brief description of the action, mentioned here as "this is description".
          - **tags**: 
            - Tags associated with the action for categorization, specified as "xyz". 

        ### Summary:
        This endpoint serves to update an existing close action, utilizing authentication, specific headers, and a structured body to relay necessary information. Users must ensure that all placeholder values are replaced with actual data prior to making a request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                closeId: closeId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: Farooq
                description: this is description
                tags: xyz
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/close/get:
    get:
      tags:
        - ActionClose
      summary: Action - Close - Get
      description: |-
        ### Endpoint Description: Action - Close - Get

        - **Name**: Action - Close - Get
          - This is the name of the API endpoint that is designed to retrieve details related to a 'close' action.

        - **Request**: This section describes the details of the API request.

          - **Auth**: This part outlines the authentication method used to access the endpoint.
            - **Type**: "bearer"
              - Indicates that bearer token authentication is used.
            - **Bearer**: This is an array containing the authentication data.
              - **Key**: "token"
                - This is the identifier for the authentication token.
              - **Value**: "BearerToken"
                - This is a placeholder value for the actual bearer token that will be used in the request for authentication.
              - **Type**: "string"
                - Specifies that the token is a string data type.

          - **Method**: "GET"
            - This indicates that the HTTP method used for this request is GET, which is typically used to retrieve data from the server.

          - **URL**: 
            - "http://localhost:3000/api/action/close/get/?closeId=closeId&sessionId=sessionId&accountId=accountId"
              - This is the full URL for the API endpoint.
              - The URL includes query parameters:
                - **closeId**: A placeholder for the unique identifier of the close action being fetched.
                - **sessionId**: A placeholder for the session identifier related to the request.
                - **accountId**: A placeholder for the account identifier associated with the close action.

          - **Headers**: This section is for any HTTP headers that may need to be sent with the request.
            - **Key**: (empty)
              - Indicates that there are currently no custom headers specified for this request.
            - **Value**: (empty)
              - As with the key, there is currently no value provided.
            - **Type**: "default"
              - Specifies the default type for header handling.
            - **Disabled**: true
              - This indicates that this header is currently disabled and will not be sent with the request.

          - **Body**: This section provides information about the body of the request.
            - **Mode**: "raw"
              - This indicates that the body is being sent in raw format.
            - **Raw**: ""
              - There is no data included in the body for this GET request, as GET requests typically do not require a body.
      security:
        - bearerAuth: []
      parameters:
        - name: closeId
          in: query
          schema:
            type: string
          example: closeId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/close/all:
    get:
      tags:
        - ActionClose
      summary: Action - Close - Get All
      description: |-
        ### Action - Close - Get All Endpoint Description

        - **Name**: This is the name of the API request, indicating that it pertains to retrieving all records associated with closing actions.

        - **Request**: This section contains the details needed to make the API call.

          - **Auth**: Specifies the authentication method used for the request.
            - **Type**: The authentication method is "bearer," meaning it uses a token to verify the identity of the user.
            - **Bearer**: Contains the token information needed for authentication.
              - **Key**: This specifies what the bearer contains; in this case, it is labeled as "token."
              - **Value**: Placeholder value represented as "BearerToken." This should be replaced with an actual bearer token in real use to authenticate the request.
              - **Type**: Indicates that the token is of string type.

          - **Method**: The HTTP method used for this request, which is "GET." This means the request is retrieving data from the server without modifying it.

          - **URL**: The endpoint being accessed. It consists of:
            - **Base URL**: `http://localhost:3000/api/action/close/all/` which points to the local server.
            - **Query Parameters**:
              - `sessionId=sessionId`: Replace `sessionId` with the actual session identifier for which the closing actions are being retrieved.
              - `accountId=accountId`: Replace `accountId` with the actual account identifier relating to the actions being fetched.

          - **Headers**: Additional information sent with the request to provide context or metadata.
            - **Key**: An empty string indicates no specific header key is being utilized.
            - **Value**: An empty string indicates no specific header value is being utilized.
            - **Type**: Marked as "default," indicating a standard header type.
            - **Disabled**: Set to true, which means that this header will not be sent in the request.

          - **Body**: Contains the data sent with the request.
            - **Mode**: Set to "raw," indicating that the body is raw text or data.
            - **Raw**: Empty, meaning there is no body content included in the request.

        This description provides a clear understanding of the various components involved in using this API request to obtain all closing actions for specified session and account identifiers.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/close/delete:
    post:
      tags:
        - ActionClose
      summary: Action - Close - Delete
      description: |-
        ### Action - Close - Delete Endpoint Description

        - **Name**: Action - Close - Delete
          - This is the identifier for the API endpoint, indicating the purpose of the action being performed, which is to delete a close action.

        - **Request**: This section outlines the details of the HTTP request that will be made to the API.

          - **Auth**: Authentication mechanism to access the endpoint.
            - **Type**: Bearer
              - Indicates that the request will use token-based authentication.
            - **Bearer**: Provides the token needed for authentication.
              - **Key**: token
                - The identifier for the authentication token.
              - **Value**: sessionId
                - A placeholder representing the session ID that will be used for authentication.
              - **Type**: string
                - Specifies that the value should be treated as a string.

          - **Method**: POST
            - This indicates that the API request will use the POST HTTP method, typically used to send data to the server.

          - **URL**: http://localhost:3000/api/action/close/delete
            - The endpoint to which the request will be sent. In this case, it's a local server address indicating that the action of closing and deleting will occur.

          - **Headers**: Additional information sent with the request.
            - **Key**: (empty)
              - No specific header key is provided in this configuration.
            - **Value**: (empty)
              - No specific header value is provided in this configuration.
            - **Type**: default
              - Indicates the default type for the header, but since the header is disabled, it will not be sent with the request.
            - **Disabled**: true
              - The header is currently turned off and will not be included in the API request.

          - **Body**: The content of the request.
            - **Mode**: raw
              - Indicates that the body content will be sent in raw format.
            - **Raw**: 
              ```json
              {
                "sessionId": "sessionId",
                "accountId": "accountId",
                "closeId": "closeId"
              }
              ```
              - This is a JSON object containing the details required for the delete action:
                - **sessionId**: Represents the session ID for authentication and context.
                - **accountId**: Represents the ID of the account which is associated with the action being closed.
                - **closeId**: Indicates the specific ID of the close action that you wish to delete.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"closeId\":\"closeId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/compete/create:
    post:
      tags:
        - ActionCompete
      summary: Action - Compete - Create
      description: |-
        {
          "description": "This endpoint is used to create a competition action. Below is a detailed description of each data point included in the request body:\n\n- **sessionId**: A unique identifier for the session in which the action is being created. This helps to associate the action with a specific user session.\n\n- **accountId**: This represents the unique identifier for the account associated with the action being created. It is important to link the action to the correct user or account.\n\n- **path**: This indicates the path to the content that is being targeted within the application's structure. In this case, it points to a specific video channel.\n\n- **targetType**: Specifies the type of the target for the action. The value \"videoId\" indicates that the action is related to a video.\n\n- **targetId**: The unique identifier for the target content. In this scenario, it corresponds to the specific video involved in the competition action.\n\n- **sourceType**: Describes the type of the source from which the action is initiated. Here it is set to \"accountId\", relating to the user's account.\n\n- **sourceId**: The unique identifier for the source that is initiating the competition action. Similar to accountId, it links back to the user's account.\n\n- **name**: The name given to the tournament or competition. In this example, it is \"Tournament 1\", which provides a label for the action.\n\n- **targetText**: A textual description or message associated with the target action. In this case, it encourages participation in a cricket match by stating \"lets play a cricket match\".\n\n- **description**: An optional field for adding a more detailed description of the action. Currently, it is left empty.\n\n- **tags**: This allows for tagging the action with specific keywords or categories. This field is also currently empty and can be utilized for better classification or searchability."
        }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                name: Tournament 1
                targetText: lets play a cricket match
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/compete/update:
    put:
      tags:
        - ActionCompete
      summary: Action - Compete - Update
      description: |-
        ### Action - Compete - Update

        #### Request Details:
        - **Auth**: This section describes the authentication method.
          - **Type**: Bearer token is used for authorization.
          - **Bearer**: 
            - **Key**: The key identifier for the token. In this case, it's "token".
            - **Value**: This represents the actual token used for authentication, in this case, "BearerToken". Replace this with the actual bearer token.
            - **Type**: Indicates that the token is of string type.

        - **Method**: 
          - **PUT**: This indicates that the request is a PUT operation. PUT is used to update existing resources.

        - **URL**: 
          - **Endpoint**: `http://localhost:3000/api/action/compete/update` is the endpoint where the request will be sent. This URL is the local server address for updating contest details.

        - **Headers**: 
          - **Client-UUID**: This is a custom header that identifies the client making the request.
            - **Key**: "Client-UUID" is the name of the header.
            - **Value**: Represents the unique identifier for the client, denoted as "ClientUUID". This should be replaced with the actual UUID.
            - **Type**: This is a default header type.

        #### Body: (Payload Details)
        - **Mode**: 
          - **Raw**: Indicates that the body of the request is sent as raw data.

        - **Raw**: 
          - The body must be a valid JSON object with the following fields:
          
          ```json
          {
              "sessionId": "sessionId",
              "accountId": "accountId",
              "path": "/live/channel/video123",
              "targetType": "videoId",
              "targetId": "videoId",
              "sourceType": "accountId",
              "sourceId": "accountId",
              "name": "Tournament s",
              "targetText": "lets play a sss match",
              "competeId": "competeId",
              "description": "",
              "tags": ""
          }
          ```

        - **Fields in the JSON body**:
          - **sessionId**: Unique identifier for the session related to the competition.
          - **accountId**: Identification number for the account associated with the user.
          - **path**: The URL path of the resource related to the competition, such as a video or stream path.
          - **targetType**: Specifies the type of target being competed against, here it indicates a video ID.
          - **targetId**: The specific ID of the target item (video) that participants will compete against.
          - **sourceType**: Type indicating the source from which the competition starts, in this case, it is based on account ID.
          - **sourceId**: The specific ID of the source account related to the competition.
          - **name**: The name assigned to the competition or tournament.
          - **targetText**: Text description or prompt for the competition, in this case, an invitation to play a match.
          - **competeId**: Unique identifier for the competition being updated.
          - **description**: Additional descriptive text for the competition. Currently set as empty.
          - **tags**: Keywords associated with the competition for categorization. Currently set as empty.

        This endpoint is designed for updating competition details, including session, account, and competition specifics, via a PUT request with appropriate authentication and headers.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                name: Tournament s
                targetText: lets play a sss match
                competeId: competeId
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/compete/get:
    get:
      tags:
        - ActionCompete
      summary: Action - Compete - Get
      description: |-
        ### Endpoint Description

        **Endpoint Name:** Action - Compete - Get  
        This endpoint is utilized to retrieve details for a specific "compete" action.

        **Request Details:**

        - **Authentication:**
          - **Type:** Bearer Token
            - A Bearer Token is required for authentication to access this endpoint. The token allows secure access to protected resources.
              - **Key:** `token` - The key used to send the bearer token in the request.
              - **Value:** `BearerToken` - Replace this placeholder with the actual token value received during authentication.
              - **Type:** string - Indicates that the value should be a string format.

        - **HTTP Method:** GET  
          This method is used to request data from the specified resource.

        - **URL:**  
          `http://localhost:3000/api/action/compete/get/?competeId=competeId&sessionId=sessionId&accountId=accountId`  
          This is the target URL where the request will be sent to retrieve compete details. The URL includes the following query parameters:
          - **competeId:** This parameter should be replaced with the specific ID of the compete for which data is being requested.
          - **sessionId:** This parameter should be replaced with the relevant session identifier to provide context to the compete action.
          - **accountId:** This parameter is intended to identify the account associated with the compete action.

        - **Headers:**
          - **Key:** (empty) - No specific headers are defined in this request. The header is disabled by default.
          - **Value:** (empty) - No value defined for the key, indicating none are needed at this point.

        - **Body:**
          - **Mode:** Raw  
            Indicates that the body format of the request is raw text.
          - **Raw:** (empty) - The body is empty for this GET request, as no payload is sent with this type of request.

        ### Summary
        This endpoint allows you to retrieve details about a competition using specific identifiers like competeId, sessionId, and accountId through a GET request with appropriate authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: competeId
          in: query
          schema:
            type: string
          example: competeId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/compete/all:
    get:
      tags:
        - ActionCompete
      summary: Action - Compete - Get All
      description: |-
        {
          "name": "Action - Compete - Get All",
          "description": {
            "request": {
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "BearerToken",
                    "type": "string"
                  }
                ]
              },
              "description": {
                "auth": "Authentication method used is Bearer Token. This requires a token to be provided in the request header for authorization.",
                "method": "GET",
                "description": "This is a GET request which is used to retrieve data from the server.",
                "url": "The endpoint URL is 'http://localhost:3000/api/action/compete/all/?sessionId=sessionId&accountId=accountId'. This URL is used to get all compete actions.",
                "sessionId": "Session ID is a required parameter that identifies the session for which compete actions are being requested.",
                "accountId": "Account ID is another required parameter that specifies the account related to the compete actions.",
                "headers": [
                  {
                    "key": "",
                    "value": "",
                    "type": "default",
                    "disabled": true
                  }
                ],
                "description": "Currently, there are no custom headers being used in this request as the default header is disabled.",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "description": "The body of the request is empty as this is a GET request which typically does not require a request body."
                }
              }
            }
          }
        }
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/compete/delete:
    post:
      tags:
        - ActionCompete
      summary: Action - Compete - Delete
      description: |-
        ### Endpoint Description: Action - Compete - Delete

        - **Name**: This is the identifier for the endpoint, specifically for deleting an action related to the competition.

        - **Request**:
          - **Auth**:
            - **Type**: The authentication method used is Bearer Token. This is a common method for securing API endpoints.
            - **Bearer**: 
              - **Key**: This is the identifier for the token in the request.
              - **Value**: This represents the session ID that is required for authentication.
              - **Type**: The type of data being passed for the token, which is a string.

          - **Method**: The HTTP method used for this request is POST, which is typically used to send data to the server.

          - **URL**: The endpoint that the request is being sent to. In this case, it is `"http://localhost:3000/api/action/compete/delete"`, which indicates it is running on a local server.

          - **Headers**: 
            - This section is currently empty and disabled. Typically, headers can provide additional context for the request, such as content type, but none are necessary for this specific call.

          - **Body**:
            - **Mode**: The body is configured in raw mode, meaning it directly accepts the text format.
            - **Raw**: The body must contain a JSON object structured as follows:
              - **sessionId**: Represents the unique identifier for the user's session.
              - **accountId**: Refers to the unique identifier for the user’s account.
              - **competeId**: Indicates the unique identifier for the competition that is to be deleted.

        This API is intended to remove a specific competition action associated with a user's account, utilizing the provided identifiers for proper authentication and targeting.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"competeId\":\"competeId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/confirm/create:
    post:
      tags:
        - ActionConfirm
      summary: Action - Confirm - Create
      description: |-
        ### Action - Confirm - Create Endpoint

        **Request Method:** POST  
        **Request URL:** http://localhost:3000/api/action/confirm/create

        #### Authentication
        - **Type:** Bearer Token
          - **Token Key:** `token`: This represents the bearer token required for authentication.
          - **Value:** `BearerToken`: Placeholder for the actual bearer token to be used.

        #### Headers
        - **Key:** (No specific key provided) 
          - **Value:** (No specific value provided)
          - **Type:** Default (this header is currently disabled)

        #### Request Body
        The body of the request is expected to be in raw JSON format, containing the following fields:

        1. **sessionId**
           - **Description:** A unique identifier for the session during which this action is taking place. It helps in tracking user sessions effectively.

        2. **accountId**
           - **Description:** The unique identifier associated with the account that is performing this action. This is essential for identifying the user or entity corresponding to the action.

        3. **path**
           - **Description:** The specific path or URL indicating where the action is targeting, such as a link to a video or resource.

        4. **targetType**
           - **Description:** Specifies the type of target the action is aimed at. For example, it could be a `videoId`, signifying that the action relates to a specific video resource.

        5. **targetId**
           - **Description:** A unique identifier for the target resource, such as a specific video ID, that is being acted upon.

        6. **sourceType**
           - **Description:** This indicates the type of source from which the action originates. For instance, it could be `accountId`, reflecting the user account initiating the process.

        7. **sourceId**
           - **Description:** A unique identifier for the source that initiated the action, such as the account ID from which the request is issued.

        8. **isUndo**
           - **Description:** A boolean value that determines whether the action is intended to undo a previous action. If true, it signifies that the user wishes to reverse the last action taken.

        9. **isIgnore**
           - **Description:** A boolean value indicating whether the action should be ignored for any reason. If true, the action may not be processed or might be disregarded.

        10. **name**
            - **Description:** A user-defined name for the action being created. This helps in identifying the action in future references or logs.

        11. **description**
            - **Description:** A field for additional information about the action. This can provide context or details that assist others in understanding the purpose of the action.

        12. **tags**
            - **Description:** A field to include tags associated with the action for better categorization and retrieval purposes in the application.

        This JSON structure provides all necessary data for creating a new action confirmation and should be adapted to specific requirements during implementation.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                isUndo: false
                isIgnore: false
                name: this is name
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/confirm/update:
    put:
      tags:
        - ActionConfirm
      summary: Action - Confirm - Update
      description: |-
        ### Description of Each Data in the Endpoint

        - **name**: 
          - "Action - Confirm - Update" 
          - This is the name of the API request, indicating its purpose is to confirm and update an action.

        - **request**: 
          - This object contains all the details needed to make the API request.

          - **auth**: 
            - Defines the authentication method used for the request.
            
            - **type**: 
              - "bearer"
              - Indicates that bearer token authentication is being used.

            - **bearer**: 
              - This is an array that contains the bearer token for authentication.
              
              - **key**: 
                - "token"
                - This is the identifier for the bearer token field.

              - **value**: 
                - "BearerToken"
                - Placeholder for the actual bearer token required for authorization.

              - **type**: 
                - "string"
                - Specifies that the value for the bearer token is of string type.

          - **method**: 
            - "PUT"
            - This indicates that the HTTP method used for the request is PUT, which is typically used for updating resource data.

          - **url**: 
            - "http://localhost:3000/api/action/confirm/update"
            - This is the endpoint URL where the request will be sent, pointing to the local server for action confirmation and updates.

          - **headers**: 
            - An array containing the required request headers.
            
            - **key**: 
              - "Client-UUID"
              - This is the identifier for the client-specific unique identifier in the request headers.

            - **value**: 
              - "ClientUUID"
              - Placeholder for the actual UUID value associated with the client.

            - **type**: 
              - "default"
              - Indicates that this header follows the default type and structure.

          - **body**: 
            - This part contains the main content of the request, structured in JSON format.

            - **mode**: 
              - "raw"
              - Specifies that the request body is sent in raw format.

            - **raw**: 
              - The actual content being sent in the body of the request.
              
              - It contains the following key-value pairs:
              
                - **sessionId**: 
                  - "sessionId"
                  - Represents the ID for the session related to the action being confirmed.

                - **accountId**: 
                  - "accountId"
                  - Identifies the account associated with the action.

                - **path**: 
                  - "/live/channel/video123"
                  - This is the URL path to the live channel or resource being targeted in the update.

                - **targetType**: 
                  - "videoId"
                  - Specifies the type of target resource, which in this case is a video.

                - **targetId**: 
                  - "videoId"
                  - This indicates the specific ID of the video being targeted for the update.

                - **sourceType**: 
                  - "accountId"
                  - This indicates that the source of the action is the account ID.

                - **sourceId**: 
                  - "accountId"
                  - Specifies the ID of the source account related to the action.

                - **confirmId**: 
                  - "confirmId"
                  - Represents the ID used to confirm the action.

                - **isUndo**: 
                  - true
                  - A boolean indicating whether the action should be undone or not.

                - **isIgnore**: 
                  - true
                  - A boolean signaling whether to ignore the action or not.

                - **name**: 
                  - "this is updated name"
                  - Represents the updated name for the action or resource.

                - **description**: 
                  - ""
                  - A field for providing a description of the action, currently empty.

                - **tags**: 
                  - ""
                  - A field for any associated tags with the action, currently empty.

            - **options**: 
              - This object defines additional settings for the request body.
              
              - **raw**: 
                - This indicates that the content is in raw format.
                
                - **language**: 
                  - "json"
                  - Specifies that the raw body content is formatted as JSON.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                confirmId: confirmId
                isUndo: true
                isIgnore: true
                name: this is updated name
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/confirm/get:
    get:
      tags:
        - ActionConfirm
      summary: Action - Confirm - Get
      description: |-
        ### Action - Confirm - Get

        This endpoint is used to retrieve confirmation details based on specific identifiers. Below is a detailed description of each component of the request:

        - **Name**: This defines the endpoint's name as "Action - Confirm - Get".

        - **Request**: This section outlines the specifics of the API request.

          - **Auth**: This part specifies the authentication method used for the request.
            
            - **Type**: Indicates that bearer token authentication is used.

            - **Bearer**: Contains details about the token required for authentication.
              
              - **Key**: The identifier for the bearer token. Here it is labeled as "token".
              
              - **Value**: The actual bearer token string needed for authorization, represented as "BearerToken".
              
              - **Type**: Indicates that this value is a string.

          - **Method**: Specifies the HTTP method for the request. In this case, it is set to "GET", meaning the request is meant to retrieve data.

          - **URL**: The endpoint URL for the request. It includes the base URL followed by the route to the action confirmation. The URL structure indicates three query parameters:
            
            - **confirmId**: A required identifier for the confirmation process.
            
            - **sessionId**: A required identifier for the session related to the action.
            
            - **accountId**: A required identifier for the account associated with the action.

          - **Headers**: This section contains any headers that might be sent with the request. In this example:
            
            - **Key**: Currently empty, indicating no specific headers are included.
            
            - **Value**: Also empty, confirming no specific value is set for headers.
            
            - **Type**: Set to "default", indicating it's a standard header.
            
            - **Disabled**: This is set to `true`, meaning the header is not currently active and will not be sent with the request.

          - **Body**: This section describes the body of the request.
            
            - **Mode**: This indicates the format of the body content. In this case, it is set to "raw", indicating that the body content can be sent in a raw format.
            
            - **Raw**: The field is left empty, meaning there is no body content being sent in the request.

        Overall, this endpoint retrieves confirmation data based on the supplied identifiers with the necessary authorization through a bearer token.
      security:
        - bearerAuth: []
      parameters:
        - name: confirmId
          in: query
          schema:
            type: string
          example: confirmId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/confirm/all:
    get:
      tags:
        - ActionConfirm
      summary: Action - Confirm - Get All
      description: |-
        ### Endpoint Description

        **Name:** Action - Confirm - Get All

        **Request Details:**

        - **Auth:**  
          This section specifies the type of authentication required to access the endpoint. It uses bearer token authentication.
          - **Type:** The method of authentication is 'bearer'.
          - **Bearer:** This array contains authentication token details.
            - **Key:** The name of the token parameter.
            - **Value:** A placeholder for the bearer token value. This will be replaced with the actual token when making the request.
            - **Type:** Indicates the data type of the token, which is a string.

        - **Method:**  
          The HTTP method used for this request is 'GET'. This method retrieves data from the specified resource without modifying it.

        - **URL:**  
          This is the endpoint's URL where the request will be sent.
          - **Base URL:** `http://localhost:3000/` - This means the server is running locally on port 3000.
          - **Path:** `/api/action/confirm/all/` - This indicates that we are accessing the 'confirm' action under the 'action' API.
          - **Query Parameters:** 
            - `sessionId=sessionId` - A placeholder for the session ID, which identifies the user session.
            - `accountId=accountId` - A placeholder for the account ID, which identifies the user's account.

        - **Headers:**  
          This section lists any additional headers that may be sent along with the request.
          - **Key:** Indicates the name of the header.
          - **Value:** Specifies the value of the header.
          - **Type:** Specifies the type of the header (default).
          - **Disabled:** This header is currently disabled and will not be sent with the request.

        - **Body:**  
          This part defines the body of the request.
          - **Mode:** The body mode is set to 'raw', indicating that the body is intended to be sent as-is without any formatting.
          - **Raw:** There is no raw body content for this GET request, as typically GET requests do not have a body.

        This endpoint is designed to retrieve all confirmation actions based on the provided session ID and account ID. Users will need to replace the placeholder values in the URL and the bearer token with actual values to successfully make a request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/confirm/delete:
    post:
      tags:
        - ActionConfirm
      summary: Action - Confirm - Delete
      description: |-
        ### API Endpoint Description: Action - Confirm - Delete

        - **Name**: Action - Confirm - Delete
          - This is the name of the API endpoint that is used for confirming and deleting an action.

        - **Request**:
          - The entire request structure for the API call, which includes authentication, HTTP method, URL, headers, and the body of the request.

          - **Auth**:
            - **Type**: Bearer
              - This specifies that bearer token authentication is used to authorize the request, which is a common method for API security.

            - **Bearer**:
              - An array containing the authentication details.
              
              - **Key**: token
                - This signifies the type of token being used for authentication.

              - **Value**: sessionId
                - This represents the actual value of the token, which is the session ID required for the current user session.

              - **Type**: string
                - Indicates that the value provided is a string type.

          - **Method**: POST
            - This indicates that the request method being used is POST, which is typically used to send data to the server.

          - **URL**: 
            - `http://localhost:3000/api/action/confirm/delete`
              - This is the endpoint URL where the request is being sent. It points to a local server running on port 3000.

          - **Headers**:
            - An array that would typically contain additional metadata for the request.
            
            - Currently, the header is empty with a disabled state:
              - **Key**: (empty)
              - **Value**: (empty)
              - **Type**: default
              - **Disabled**: true
                - This means that no additional headers are set, and the header section is currently inactive.

          - **Body**:
            - **Mode**: Raw
              - Indicates that the request body is in a raw format rather than using form or file uploads.

            - **Raw**: 
              - This is the actual data being sent in the body of the request, represented in JSON format:
              ```json
              {
                "sessionId": "sessionId",
                "accountId": "accountId",
                "confirmId": "confirmId"
              }
              ```
              - **sessionId**: Represents the user's current session ID to maintain state during the operation.
              - **accountId**: Represents the identifier for the account associated with the action to be deleted.
              - **confirmId**: Represents the unique identifier confirming the action that is meant to be deleted. 

        This description should assist other users in understanding how to appropriately use this API endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"confirmId\":\"confirmId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/copy/create:
    post:
      tags:
        - ActionCopy
      summary: Action - Copy - Create
      description: |-
        ### Action - Copy - Create

        #### Request Details:
        - **Auth**: 
          - **Type**: This specifies the authentication method used for the request. It is set to "bearer".
          - **Bearer**: This section contains details for bearer token authentication.
            - **Key**: Indicates the type of authentication used, labeled as "token".
            - **Value**: Contains the bearer token which is used to authenticate the request. Placeholder value provided as "BearerToken".
            - **Type**: Specifies the data type for the token, which is a "string".

        - **Method**: 
          - The HTTP method used for the request is "POST". This indicates that data will be sent to the server to create a new resource.

        - **URL**: 
          - The endpoint URL where the request is sent. In this case, it is `http://localhost:3000/api/action/copy/create`, which suggests that the API is being tested locally.

        - **Headers**: 
          - An array that can contain header key-value pairs for the request. Currently, no specific headers are provided (keys and values are blank) and this entry is marked as disabled.

        - **Body**:
          - **Mode**: Indicates the body format used in the request, which is set to "raw". This implies the payload is sent in its raw form.
          - **Raw**: This is where the actual data sent in the body of the request is defined. The following JSON structure is provided:
            - **sessionId**: A unique identifier for the session during which the copy action is performed.
            - **accountId**: The ID of the account from which the content is being copied.
            - **path**: The path of the resource that is being copied, in this example it references a video.
            - **targetType**: Defines the type of target for the copy operation. In this case, it is set to "videoId".
            - **targetId**: The specific identifier of the target video where the content is being copied.
            - **sourceType**: Defines the type of source from which the content is copied, currently set as "accountId".
            - **sourceId**: The unique identifier of the source account being referenced.
            - **didCopy**: A boolean indicating whether the copy operation has been completed, set to `true` in this instance.
            - **text**: A text field to provide any additional description or remarks regarding the copied content, with a placeholder message "this is copied text".
            - **name**: A field to specify a name for the copied content, left blank as it currently stands.
            - **description**: A field for providing a description of the copied content, also left blank.
            - **tags**: A field for including any tags related to the copied resource, currently left empty.

        This postman request is designed to copy resources within a specified account and to define the specifics of the copy operation being performed.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didCopy: true
                text: this is copied text
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/copy/update:
    put:
      tags:
        - ActionCopy
      summary: Action - Copy - Update
      description: |-
        ### Description of Endpoint Data

        #### Request Details
        - **Request Type**: PUT
          - This endpoint uses the HTTP PUT method, which is typically used to update existing resources.

        - **URL**: `http://localhost:3000/api/action/copy/update`
          - This is the endpoint where the request will be sent. It points to a local server running on port 3000 and accesses the `api/action/copy/update` path.

        #### Authentication
        - **Auth Type**: Bearer Token
          - This request requires authentication using a bearer token. You must include this token in the request to access the endpoint securely.

        - **Bearer Token**:
          - **Key**: `token`
            - This is the key used to specify the authentication token.
          - **Value**: `BearerToken`
            - The actual token you will use for authentication. Replace `BearerToken` with the valid token.
          - **Type**: string
            - The datatype of the token is a string.

        #### Headers
        - **Header Key**: `Client-UUID`
          - This header is required to identify the client making the request.
          
        - **Header Value**: `ClientUUID`
          - Replace `ClientUUID` with the actual UUID of the client.

        - **Header Type**: default
          - Indicates this is a standard header type.

        #### Request Body
        - **Body Mode**: raw
          - The request body is sent as raw data instead of form-encoded or other types.

        - **Content**: 
          - The body must be in JSON format, structured as follows:

        ```json
        {
            "sessionId": "sessionId",
            "accountId": "accountId",
            "path": "/live/channel/video123",
            "targetType": "videoId",
            "targetId": "videoId",
            "sourceType": "accountId",
            "sourceId": "accountId",
            "didCopy": true,
            "text": "this is updated text",
            "copyId": "copyId",
            "name": "update",
            "description": "",
            "tags": ""
        }
        ```

        - **Field Descriptions**:
            - **sessionId**: Identifier for the session. Replace with the actual session ID.
            - **accountId**: Identifier for the account. Replace with the actual account ID.
            - **path**: The path where the video is located. For example, `/live/channel/video123`.
            - **targetType**: Specifies the type of target. In this case, it is a `videoId`.
            - **targetId**: The ID of the item being targeted. Should be replaced with the actual video ID.
            - **sourceType**: Indicates the type of source, which is `accountId` here.
            - **sourceId**: The ID of the source account. Replace with the actual source account ID.
            - **didCopy**: A boolean value indicating whether the copy was successful (`true` means it was copied).
            - **text**: This field contains the text to be updated. Replace with the desired updated text.
            - **copyId**: Identifier for the copy action. Replace with the actual copy ID.
            - **name**: A string to name the update; in this case, it is set as `update`.
            - **description**: A field for an optional description; currently empty.
            - **tags**: A field for optional tags; currently empty.

        #### Summary
        This request updates an existing copy action on a specified video. Ensure that all placeholders are replaced with actual values when making the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didCopy: true
                text: this is updated text
                copyId: copyId
                name: update
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/copy/get:
    get:
      tags:
        - ActionCopy
      summary: Action - Copy - Get
      description: |-
        ### Endpoint: Action - Copy - Get

        **Description:** This endpoint is used to retrieve details about a specific copy action based on the provided identifiers. 

        #### Request Details:

        - **Authentication:**
          - **Type:** Bearer Token
            - This method requires authentication through a bearer token, which must be included in the request for access to the resource.

        - **Method:** 
          - **GET:** This HTTP method is used to request data from the specified resource.

        - **URL:** 
          - `http://localhost:3000/api/action/copy/get/?copyId=copyId&sessionId=sessionId&accountId=accountId`
            - This is the endpoint URL for the API. It contains placeholders that need to be replaced with actual values before making the request:
              - `copyId`: The unique identifier for the copy action you want to retrieve.
              - `sessionId`: The identifier for the session related to the copy action.
              - `accountId`: The identifier for the account associated with the copy action.
              
        - **Headers:**
          - **Key:** *(Not specified)*
            - Currently, no headers are included in the request. You can add additional headers if necessary. The entry is disabled and does not influence the request.

        - **Body:**
          - **Mode:** Raw
            - This indicates the body of the request is not being used since it's a GET method. 
          - **Raw:** *(Empty)*
            - There are no raw body data elements included since a GET request does not require body content.

        **Note for Users:** Ensure to replace the placeholders in the URL with actual values when making the request. Authentication is mandatory, and you must obtain a valid bearer token to access this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - name: copyId
          in: query
          schema:
            type: string
          example: copyId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/copy/all:
    get:
      tags:
        - ActionCopy
      summary: Action - Copy - Get All
      description: |-
        ### API Endpoint: Action - Copy - Get All

        #### Method
        - **GET**: This endpoint uses the GET HTTP method to retrieve data.

        #### URL
        - **http://localhost:3000/api/action/copy/all/?sessionId=sessionId&accountId=accountId**
          - **Base URL**: `http://localhost:3000/api/action/copy/all/`
          - **Query Parameters**:
            - **sessionId**: This parameter is used to identify the user session for which data is being requested.
            - **accountId**: This parameter specifies the account from which data is being retrieved.

        #### Authentication
        - **Auth Type**: Bearer Token
          - **Key**: `token`: This is the key identifier for the authentication token.
          - **Value**: `BearerToken`: This should be replaced with the actual bearer token used for authentication.
          - **Type**: string: Indicates that the token value is of string type.

        #### Headers
        - **Headers**: No custom headers are specified in this request. The default header entry is present but is disabled, meaning it will not be included in the request.

        #### Body
        - **Body Mode**: Raw
          - **Raw Content**: There is no body content for this GET request, as it retrieves data without needing to send additional information to the server. The raw section is empty.

        This endpoint is designed for retrieving all instances of "copy" actions associated with a specific session and account, providing a way to view data relevant to that particular context.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/copy/delete:
    post:
      tags:
        - ActionCopy
      summary: Action - Copy - Delete
      description: |-
        {
          "name": "Action - Copy - Delete",
          "description": {
            "request": {
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "sessionId",
                    "type": "string"
                  }
                ],
                "description": "This section defines the authentication method required to access the endpoint. A bearer token, which is a type of access token, is used for authentication. The 'token' key represents the key for the authentication token, and 'sessionId' is a placeholder for the actual session token value that should be used."
              },
              "method": "POST",
              "description": "This specifies the HTTP method to be used when making the request. In this case, the POST method indicates that data will be sent to the server to create or modify resources."
              "url": "http://localhost:3000/api/action/copy/delete",
              "description": "This is the endpoint URL where the request is sent. It is the API route for performing the delete action on a copy. The localhost indicates that the API is likely being tested on a local server running on port 3000."
              "headers": [
                {
                  "key": "",
                  "value": "",
                  "type": "default",
                  "disabled": true
                }
              ],
              "description": "This section contains the headers to be sent with the request. In this case, the header fields are empty and marked as disabled, indicating that no additional headers are being sent with this request."
              "body": {
                "mode": "raw",
                "description": "This specifies the format of the request body being sent. The 'raw' mode indicates that the body is a raw JSON string rather than form data or other formats.",
                "raw": "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"copyId\":\"copyId\"}",
                "description": "This is the content of the request body in raw JSON format. It includes three fields: 'sessionId', which is needed for user session identification; 'accountId', which uniquely identifies the account being accessed; and 'copyId', which identifies the specific copy to delete. Each of these fields must be populated with their respective values when making the request."
              }
            }
          }
        }
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"copyId\":\"copyId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/credit/create:
    post:
      tags:
        - ActionCredit
      summary: Action - Credit - Create
      description: |-
        ### Endpoint Description: Action - Credit - Create

        This API endpoint is used to create a credit action related to a specific video. Below is a detailed description of each data parameter used in the request body.

        #### Request Body Parameters:

        - **sessionId**: 
          - Type: String
          - Description: A unique identifier for the session during which the credit action is initiated.

        - **accountId**: 
          - Type: String
          - Description: Represents the identifier of the account that is involved in the credit action.

        - **path**: 
          - Type: String
          - Description: The endpoint path to the video resource, which is typically in the format of `/live/channel/{videoId}`.

        - **targetType**: 
          - Type: String
          - Description: Indicates the type of target for the credit action. In this case, it's set to "videoId", identifying that the target is a specific video.

        - **targetId**: 
          - Type: String
          - Description: The unique identifier for the target video that is receiving the credit.

        - **sourceType**: 
          - Type: String
          - Description: The type of source from which the credit is being drawn. This is labeled as "accountId", indicating that the credit is sourced from a user account.

        - **sourceId**: 
          - Type: String
          - Description: The unique identifier of the source account that is providing the credit.

        - **isAccepted**: 
          - Type: Boolean
          - Description: A flag that indicates whether the credit action has been accepted. Set to `true` means acceptance.

        - **isCredited**: 
          - Type: Boolean
          - Description: A flag that indicates whether the credit has been successfully applied. Set to `false` means it has not yet been credited.

        - **isReversed**: 
          - Type: Boolean
          - Description: A flag that indicates whether the credit action has been reversed. Set to `false` means there has been no reversal.

        - **reverseStatus**: 
          - Type: String
          - Description: This parameter describes the status of any potential reversal action. Set to "pending" indicates that a reversal is awaited.

        - **utilityType**: 
          - Type: String
          - Description: Specifies the type of utility being awarded through the credit. In this instance, it is set to "token".

        - **name**: 
          - Type: String
          - Description: The name of the video to which the credit is associated.

        - **description**: 
          - Type: String
          - Description: A description of the video associated with the credit. This provides more context or information about the video.

        - **tags**: 
          - Type: String
          - Description: A field intended for tags related to the video. This can be used for categorization or searching but is left empty in this instance.

        - **tokenAmount**: 
          - Type: Number
          - Description: The amount of tokens assigned to the credit action. In this case, the value is set to 20.

        ### Authentication:

        - **Auth Type**: Bearer Token
          - Description: The request requires authentication via a bearer token where valid credentials must be provided for the action to be processed. The token value should replace "BearerToken" in actual requests. 

        ### HTTP Method:

        - **Method**: POST
          - Description: The HTTP method used for this request is POST, indicating that this request is intended to create a new resource (in this case, a credit action). 

        ### URL:

        - **Endpoint URL**: 
          - Description: `http://localhost:3000/api/action/credit/create`
          - This is the URL where the request is sent to create the credit action. Adjust the base URL as needed for the production environment. 

        ### Headers:

        - **Headers**: 
          - Description: No headers are specified in the request template, but additional custom headers may be added as needed (though the default header shown is disabled). 

        This comprehensive description should aid users in understanding the requirements and parameters needed for the Action - Credit - Create API request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                isAccepted: true
                isCredited: false
                isReversed: false
                reverseStatus: pending
                utilityType: token
                name: Sample Video Name
                description: Sample video description.
                tags: ''
                tokenAmount: 20
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/credit/update:
    put:
      tags:
        - ActionCredit
      summary: Action - Credit - Update
      description: |-
        ### Endpoint: Action - Credit - Update

        #### Request

        - **Auth**: 
          - **Type**: Bearer 
            - This indicates that the request uses bearer token authentication.
            - **Key**: `token`
            - **Value**: This is a placeholder for the actual bearer token used in authentication, represented as `BearerToken`. It should be replaced with a valid token for real requests.

        - **Method**: PUT 
          - This HTTP method indicates that the request is used for updating existing resources.

        - **URL**: 
          - This is the endpoint for updating credit actions. The specified URL is `http://localhost:3000/api/action/credit/update`.

        - **Headers**:
          - **Key**: `Client-UUID` 
            - This header is used to identify the client making the request.
            - **Value**: `ClientUUID` is a placeholder for the actual UUID of the client that should be used in real requests.

        #### Body

        - **Mode**: Raw 
          - This specifies that the body of the request is in raw format.

        - **Raw Content**: 
          - This is a JSON formatted string which contains the data for updating a credit action. Each field is detailed below:
          - **sessionId**:  
            - This refers to the unique identifier for the user session during which the credit action is being performed. It should be replaced with the actual session ID.
            
          - **accountId**: 
            - This is the unique identifier for the account related to the credit action. It should also be replaced with the actual account ID.

          - **path**: 
            - This represents the specific path or location for the relevant content. In this case, it appears to be the path to a video resource, in this example, `"/live/channel/video123"`.

          - **targetType**: 
            - This indicates the type of target being affected by the credit action. For this request, it is set to `videoId`, suggesting that the action is related to a video.

          - **targetId**: 
            - This is the unique identifier for the target resource, which in this case should be replaced with the actual identifier of the video to be credited.

          - **sourceType**: 
            - This indicates the type of source of the credit. Here, it is set to `accountId`, which signifies that the source of the credit action relates to an account.

          - **sourceId**: 
            - Similar to `accountId`, this is the unique identifier for the account used as the source of the credit. It should be replaced with the actual account ID.

          - **isAccepted**: 
            - This boolean field indicates whether the credit action has been accepted, set to `true` in this case.

          - **isCredited**: 
            - This boolean field indicates whether the credit has actually been applied, set to `false` in this case.

          - **isReversed**: 
            - This boolean field indicates whether the credit action has been reversed, set to `false` in this case as well.

          - **reverseStatus**: 
            - This field indicates the current status of any reversal action related to the credit, set to `"pending"` in this case.

          - **utilityType**: 
            - This indicates the type of utility being used for the credit action, here it is set to `"token"`.

          - **name**: 
            - This is the name of the video related to the credit action. The example name provided is `"Sample Video Name update"`.

          - **description**: 
            - This field provides a brief description of the video linked to the action. The example text is `"Sample video description."`.

          - **tags**: 
            - This field is intended for any associated tags related to the video. It's currently empty but can be filled with relevant tags.

          - **tokenAmount**: 
            - This indicates the amount of tokens that are being credited or involved in the action. In this case, it is set to 50.

          - **creditId**: 
            - This field provides the unique identifier for the credit action being updated. The placeholder value is `"creditId"` which should be replaced with the actual credit ID in real use cases.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                isAccepted: true
                isCredited: false
                isReversed: false
                reverseStatus: pending
                utilityType: token
                name: Sample Video Name update
                description: Sample video description.
                tags: ''
                tokenAmount: 50
                creditId: creditId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/credit/get:
    get:
      tags:
        - ActionCredit
      summary: Action - Credit - Get
      description: |-
        ### Description of the Endpoint Data

        - **name**: The name of the API request is "Action - Credit - Get". This indicates it is concerned with retrieving credit-related information.

        - **request**: This section contains all the details needed to make the API call.

          - **auth**: This indicates the type of authentication used for the request.
            - **type**: Specifies that bearer token authentication is being used.
            - **bearer**: This array contains the authentication details.
              - **key**: The name of the token parameter; in this case, it is "token".
              - **value**: The value that should be used for the token, which is represented as "BearerToken". This should be replaced with an actual token when making the request.
              - **type**: Indicates that the type of value is a string.

          - **method**: The HTTP method for the request. Here, it is a "GET" request, which is used to retrieve data from the specified resource.

          - **url**: The endpoint URL where the API request will be sent. It consists of the base URL `http://localhost:3000/api/action/credit/get/`, followed by query parameters that include:
            - **creditId**: A parameter representing the ID of the credit record to be retrieved. It should be replaced with an actual credit ID when making the request.
            - **sessionId**: A parameter representing the session ID associated with the request. This should be substituted with an actual session ID.
            - **accountId**: A parameter representing the account ID for which the credit information is being requested. This needs to be replaced with an actual account ID.

          - **headers**: This section is for custom HTTP headers that are sent with the request.
            - The current header is empty, indicating no additional headers are being used in this request.
            - The **disabled** flag is set to true, meaning this header is not currently active.

          - **body**: This section defines the body of the request.
            - **mode**: Indicates the format of the body content. Here, it is set to "raw", which means the body is a direct string input.
            - **raw**: The body of the request does not contain any data, as it is empty.

        These details provide a complete picture of how to use this API endpoint to retrieve credit information by supplying the appropriate parameters and authentication token.
      security:
        - bearerAuth: []
      parameters:
        - name: creditId
          in: query
          schema:
            type: string
          example: creditId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/credit/all:
    get:
      tags:
        - ActionCredit
      summary: Action - Credit - Get All
      description: |-
        ### Endpoint Description: Action - Credit - Get All

        - **Name**: Action - Credit - Get All  
          This is the identifier for the API call, indicating that it retrieves all credit-related actions.

        - **Request**:  
          The details of the HTTP request necessary to access this endpoint.

          - **Auth**:  
            This specifies the authentication method used for the request.
            
            - **Type**: Bearer  
              Indicates that Bearer token authentication is being used.

            - **Bearer**:  
              An array that contains the information required for bearer token authentication.
              
              - **Key**: token  
                This key describes the type of token that will be used for authentication.
                
              - **Value**: BearerToken  
                Replace "BearerToken" with an actual token to authenticate the request.

              - **Type**: string  
                Specifies that the value for the token is a string.

          - **Method**: GET  
            This indicates that the request will retrieve data from the server.

          - **URL**:  
            The endpoint URL where the request will be sent.
            - `http://localhost:3000/api/action/credit/all/` is the base URL.
            - **Query Parameters**:
              - **sessionId**: A unique identifier for the user session. This should be provided as a parameter in the URL.
              - **accountId**: The identifier for the user’s account. This should also be included as a parameter in the URL.

          - **Headers**:  
            Each header includes specific information about the request.
            
            - **Key**: (empty)  
              Currently, there are no headers added for this request. This means the default headers will be used.
              
            - **Value**: (empty)  
              No specific value is set for the header key.
              
            - **Type**: default  
              Indicates that this header is a standard header type.

            - **Disabled**: true  
              Shows that the header is not active and will not be sent with the request.

          - **Body**:  
            No request body is needed for this GET request.

            - **Mode**: raw  
              Indicates that the body, if there were to be any, would be in raw format. 

            - **Raw**: ""  
              This field is empty, confirming that no additional data needs to be sent in the body of the request.

        This endpoint is designed to fetch all credit actions related to a specific account within a user's active session. Make sure to provide valid session and account IDs to retrieve the correct data.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/credit/delete:
    post:
      tags:
        - ActionCredit
      summary: Action - Credit - Delete
      description: |-
        ### Action - Credit - Delete

        **Request Type**: POST  
        **Endpoint**: `http://localhost:3000/api/action/credit/delete`  

        **Authentication**:  
        - **Type**: Bearer Token  
          - **Token**: This is a string that represents the user's session ID, used for authenticating the request. 

        **Headers**:  
        - Currently, there are no headers specified. The default header configuration is disabled.

        **Request Body**:  
        - The body of the request is in raw JSON format. It contains the following key-value pairs:
          - **sessionId**: A string parameter that represents the user's active session, which is required for authentication.
          - **accountId**: A string parameter that identifies the account associated with the credit that needs to be deleted.
          - **creditId**: A string parameter that uniquely identifies the credit entry to be deleted from the account. 

        This endpoint is designed to delete a specific credit entry from a user's account, requiring proper authentication and identification of the credit to be removed.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"creditId\":\"creditId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/delete/create:
    post:
      tags:
        - ActionDelete
      summary: Action - Delete - Create
      description: |-
        ### Endpoint Description: Action - Delete - Create

        This endpoint is used to initiate a delete action for a particular target based on specific parameters. Below is a detailed description of each piece of data included in the request.

        #### Authentication
        - **auth**: This section specifies the authentication type required to access the endpoint.
          - **type**: The type of authentication being used, which is a bearer token in this case.
          - **bearer**: An array containing authentication details.
            - **key**: The name of the authentication field, which is "token".
            - **value**: The actual bearer token. Replace "BearerToken" with an actual token for authentication.
            - **type**: Specifies that the value type is a string.

        #### HTTP Method
        - **method**: The HTTP method used for the request. This is set to "POST", indicating that the request is meant to create or execute an action.

        #### Request URL
        - **url**: The endpoint URL where the request is sent. In this case, it is "http://localhost:3000/api/action/delete/create".

        #### Request Headers
        - **headers**: This includes any additional headers that may be required, though in this instance, no specific headers are provided as indicated by the empty key and value.
          - **disabled**: This property indicates that the header is currently not active (true).

        #### Request Body
        - **body**: This section contains the details of the request body, which is formatted as raw JSON data.
          - **mode**: Set to "raw" indicating that the body content is in raw format.
          - **raw**: The actual JSON data being sent in the request. The following parameters are included:
            - **sessionId**: A unique identifier for the session. Use the appropriate session ID.
            - **accountId**: The ID of the account associated with the action. Replace "accountId" with the relevant account ID.
            - **path**: The path of the target resource that is being deleted. For example, this could be a path to a video or stream.
            - **targetType**: Specifies the type of target that is being deleted. In this case, the target type is "streamer".
            - **targetId**: The unique identifier of the target being deleted, typically the ID of the video or stream.
            - **sourceType**: Indicates the type of source account, which again is set to "accountId" in this request.
            - **sourceId**: The ID of the source account. Often this will match the "accountId" provided above.
            - **tokenAmount**: The number of tokens involved in this action. For this request, it is set to 20.
            - **name**: A label for this delete action. This request has it set to "delete1".
            - **description**: A field to provide extra details about the action being taken. Currently, it is empty.
            - **tags**: Indicates any tags associated with the action. This is also currently left blank.

        #### Options
        - **options**: This specifies additional options for the request body format.
          - **raw**: This nested section indicates that the content type is set to JSON. The language is specified as "json".

        This detailed breakdown should help users understand each parameter required for this API call, enabling them to make requests to delete specified resources effectively.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: delete1
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/delete/update:
    put:
      tags:
        - ActionDelete
      summary: Action - Delete - Update
      description: |-
        ## Description of API Endpoint Data

        ### Name
        - **Action - Delete - Update**: This is the name of the API action that indicates its purpose, which is to delete or update an entry in the system.

        ### Request
        - **Auth**: The authentication method used for this request.
          - **Type**: `bearer`: This specifies that bearer token authentication is used.
          - **Bearer**: Contains the details for the bearer token.
            - **Key**: `token`: Specifies that the key for the bearer is labeled as 'token'.
            - **Value**: `BearerToken`: This is a placeholder for the actual bearer token that should be included for authentication.
            - **Type**: `string`: Indicates that the value of the token is a string.

        ### Method
        - **PUT**: This specifies the HTTP method used for the request, indicating that it will modify or update existing data.

        ### URL
        - **http://localhost:3000/api/action/delete/update**: This is the endpoint where the request is being sent. It includes the base URL and the specific path for the delete/update action.

        ### Headers
        - **Headers**: Additional information sent with the request to define the context of the request.
          - **Key**: `Client-UUID`: A unique identifier for the client making the request, allowing the server to identify and track different clients.
          - **Value**: `ClientUUID`: This is a placeholder for the actual UUID that should be provided.
          - **Type**: `default`: Indicates that this header is of a standard type.

        ### Body
        - **Mode**: `raw`: This indicates that the body of the request is being sent as raw data.
        - **Raw**: The actual content of the request body, formatted as JSON.
          ```json
          {
              "sessionId": "sessionId",    // Unique identifier for the user session.
              "accountId": "accountId",    // Unique identifier for the account related to the action.
              "deleteId": "deleteId",      // Identifier for the item that is to be deleted.
              "path": "/live/channel/video123", // Path to the resource, in this case, a specific video.
              "targetType": "streamer",     // Type of target entity (e.g., streamer, channel).
              "targetId": "videoId",        // Identifier for the target entity, which can be a video ID.
              "sourceType": "accountId",    // The type of source, typically referring to account IDs.
              "sourceId": "accountId",      // Identifier of the source related to the action.
              "tokenAmount": 20,            // Amount of tokens to be adjusted or modified.
              "name": "Farooq",             // Name associated with this action or entity.
              "description": "this is description", // A brief description of the action or resource.
              "tags": "xyz"                 // Tags associated with the action for categorization.
          }
          ```

        ### Options
        - **Raw**: Specifies how the body content is structured.
          - **Language**: `json`: Indicates that the raw data is formatted in JSON language.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                deleteId: deleteId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: Farooq
                description: this is description
                tags: xyz
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/delete/get:
    get:
      tags:
        - ActionDelete
      summary: Action - Delete - Get
      description: |-
        ### Endpoint Description

        #### Name: 
        Action - Delete - Get

        #### Request:

        **Authorization:**
        - **Type:** Specifies that the request will be authenticated using a bearer token.
        - **Bearer:**
          - **Key:** "token" - Indicates the parameter name for the token.
          - **Value:** "BearerToken" - Placeholder for the actual bearer token that needs to be provided for authorization.
          - **Type:** "string" - Indicates that the token value should be a string.

        **Method:**
        - **Type:** GET - This indicates that the request is of type GET, which is typically used to retrieve data from the server.

        **URL:**
        - The endpoint URL is: `http://localhost:3000/api/action/delete/get/`
          - **Query Parameters:**
            - **deleteId:** Represents the ID of the item you want to delete. Replace `deleteId` with the actual ID of the item.
            - **sessionId:** Represents the session ID associated with the request. Replace `sessionId` with the actual session ID.
            - **accountId:** Represents the ID of the account involved in the operation. Replace `accountId` with the actual account ID.

        **Headers:**
        - **Key:** (Not specified) - No additional headers are included in the request.
        - **Value:** (Not specified) - No additional values are provided.
        - **Type:** default - Indicates standard headers.
        - **Disabled:** true - This header is disabled and will not be sent with the request.

        **Body:**
        - **Mode:** raw - Specifies the body type for the request.
        - **Raw:** (Empty) - No body content is included in the request, as GET requests typically do not require a body.
      security:
        - bearerAuth: []
      parameters:
        - name: deleteId
          in: query
          schema:
            type: string
          example: deleteId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/delete/all:
    get:
      tags:
        - ActionDelete
      summary: Action - Delete - Get All
      description: |-
        ### Action - Delete - Get All Endpoint Details

        **Endpoint Name:**  
        Action - Delete - Get All

        **Request Method:**  
        GET  
        This indicates that the endpoint is designed to retrieve data without making any modifications to the server's resources.

        **URL:**  
        `http://localhost:3000/api/action/delete/all/?sessionId=sessionId&accountId=accountId`  
        This is the endpoint's address, where `sessionId` and `accountId` are query parameters. These parameters are required to identify the specific session and account for which the action deletion is being requested.

        **Authentication:**  
        - **Type:** Bearer Token  
          This method of authentication requires a token to verify the identity of the user making the request.
        - **Token:**  
          - **Key:** token  
          This represents the name of the bearer token required for the request.  
          - **Value:** BearerToken  
          This placeholder indicates that a valid bearer token should replace "BearerToken" when making a request. The token grants access to the API based on the user's permissions.
          - **Type:** string  
          This specifies that the token should be provided as a string format.

        **Headers:**  
        - **Key:** (empty)  
          Indicates that there are no additional headers required for this request at the moment.  
        - **Value:** (empty)  
          Since no value is provided, it further confirms that no extra header information is necessary.  
        - **Disabled:** true  
          This shows that the header is not active and will not be included in the request.

        **Body:**  
        - **Mode:** raw  
          Identifies the format of the request body being sent, which in this case is raw text.  
        - **Raw:** ""  
          This indicates that there is no content being sent in the body of the request. There are no parameters or data to provide in the body for this GET request, as all necessary information is passed through the URL.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/delete/delete:
    post:
      tags:
        - ActionDelete
      summary: Action - Delete - Delete
      description: |-
        Here’s a detailed description of each data point in the provided endpoint for the Postman API collection:

        - **name**: This is the title of the API request. It describes the action that is being taken, in this case, it indicates that it is an action to delete an item, specifically labeled as "Delete".

        - **request**: This is the container for the details of the API request, including authentication, method, URL, headers, and body content.

          - **auth**: This section specifies the authentication method used for the request.
            
            - **type**: Indicates the type of authentication. In this case, it is a "bearer" type.
            
            - **bearer**: This is an array that contains the authentication details for the bearer token.

              - **key**: This represents the name of the token. Here, it is labeled as "token".
              
              - **value**: This is the placeholder for the actual session ID that will be used for authentication, denoted as "sessionId".
              
              - **type**: Specifies the data type of the value, which is "string".

          - **method**: This indicates the HTTP method used for the request. It is set to "POST", meaning that data will be sent to the server to perform the delete action.

          - **url**: This is the endpoint where the request is directed. It is set to "http://localhost:3000/api/action/delete/delete", which suggests that it is a local server API for performing delete actions.

          - **headers**: This section includes any HTTP headers that should be sent with the request.

            - **key**: The name of the header. It is currently empty, meaning no specific headers are being set.
            
            - **value**: The value corresponding to the header. This is also empty.
            
            - **type**: Indicates the header type, which is set to "default".
            
            - **disabled**: This flag shows whether the header is currently active. It is set to true, indicating that this header is not being used.

          - **body**: This part includes the data that will be sent in the POST request.

            - **mode**: This specifies the format of the body data. It is set to "raw", indicating that the data will be sent as raw text rather than form-encoded.
            
            - **raw**: This contains the actual data payload sent with the request. It is formatted as a JSON string, which includes three properties:
              
              - **sessionId**: A placeholder for the session identifier, which is necessary for tracking the session of the user making the request.
              
              - **accountId**: A placeholder for the account identifier, which indicates which account is being affected by the delete action.
              
              - **deleteId**: A placeholder for the identifier of the item that is to be deleted from the system.

        This structured overview provides clarity on each component of the API endpoint, ensuring that users understand the purpose and requirements when working with this request in the Postman collection.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"deleteId\":\"deleteId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/dislike/create:
    post:
      tags:
        - ActionDislike
      summary: Action - Dislike - Create
      description: |-
        ### Action - Dislike - Create

        #### Request Details:
        - **Request Type**: This endpoint is for a POST request, used for creating a new "dislike" action.

        - **Authentication**: The request uses bearer token authentication. This requires the user to provide a valid token in the request header for authorization to access the resource.

        #### URL:
        - **Endpoint**: The endpoint to access this action is `http://localhost:3000/api/action/dislike/create`. This should be changed to the appropriate server URL in production.

        #### Headers:
        - **Headers**: There are no specific headers set in the request at this time. The default headers are disabled and not in use.

        #### Body:
        The body of the request is sent in raw JSON format and contains the following key-value pairs:

        1. **sessionId**: This is a string that identifies the session in which the dislike action is being recorded. It helps in tracking the user's current state or interaction session.

        2. **accountId**: This represents the unique identifier for the user account making the dislike action. It is essential for associating the dislike with the correct user.

        3. **path**: This is a string that indicates the path of the content being disliked. For example, it points to the location of the video, such as `/live/channel/video123`.

        4. **targetType**: Specifies the type of target that the dislike is directed toward. In this case, it is set to `videoId`, indicating that the action pertains to a video.

        5. **targetId**: This is the unique identifier of the content that is being disliked. In this example, it is labeled `videoId`, representing the specific video the user is interacting with.

        6. **sourceType**: Denotes the type of the source from which the dislike action is being made. It is set to `accountId`, indicating that the action originates from a user account.

        7. **sourceId**: This is the unique identifier associated with the source. It is also set to `accountId`, signifying the identity of the user making the dislike action.

        8. **didDislike**: A boolean value that indicates whether the user disliked the content or not. Here, it is set to `false`, suggesting that the action is intended to indicate a dislike (i.e., changing from a non-dislike state).

        9. **isUndo**: This is another boolean value. If it is set to `true`, it means the user is undoing a previous dislike action. It is set to `false`, indicating that this is a fresh dislike action rather than an undoing of a previous one.

        10. **name**: This is an optional field that can hold a name or title related to the dislike action. Currently, it is an empty string, awaiting user-defined input if necessary.

        11. **description**: Another optional field, intended for additional information or notes regarding the dislike action. It is currently left empty.

        12. **tags**: This optional field allows for additional tagging related to the dislike action. It is also an empty string and can be used to categorize or provide more context if needed.

        This endpoint is designed to create a dislike action against a specific piece of content, capturing relevant information about the user and the disliked item.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didDislike: false
                isUndo: false
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/dislike/update:
    put:
      tags:
        - ActionDislike
      summary: Action - Dislike - Update
      description: |-
        ### Action - Dislike - Update Endpoint Description

        - **name**: Indicates the name of the API action. In this case, it is "Action - Dislike - Update", which signifies that this endpoint is used to update a dislike action.

        - **request**: This section details the specifics of the API request.

          - **auth**: Describes the authentication method utilized for this request.
          
            - **type**: Specifies the type of authentication being used. Here, it is "bearer".
            
            - **bearer**: Contains an array of bearer token objects, which is used to authorize the request.
            
              - **key**: The name of the authentication token parameter. In this case, it is "token".
              
              - **value**: The actual bearer token used for authentication represented as "BearerToken".
              
              - **type**: Specifies the data type of the token, which is a string.

          - **method**: Refers to the type of HTTP method used for this API call. The method here is "PUT", indicating that the request is intended to update existing data.

          - **url**: Provides the endpoint URL where the request is made. The current URL is "http://localhost:3000/api/action/dislike/update".

          - **headers**: Lists additional metadata sent with the request.

            - **key**: Represents the name of a specific header, which is "Client-UUID". This header usually carries a unique identifier for the client making the request.
            
            - **value**: Displays the value assigned to the "Client-UUID" header, represented as "ClientUUID".

            - **type**: Indicates the type of header. Here it is denoted as "default".

          - **body**: Contains the main data sent with the request, specified in JSON format.

            - **mode**: Indicates the format of the body, which is "raw". This signifies that the body is sent as raw data rather than as form fields.

            - **raw**: This section consists of the JSON structure representing the data being sent.

              - **sessionId**: A unique identifier for the current user session. Placeholder value is "sessionId".
              
              - **accountId**: Identifies the account of the user making the request. Placeholder value is "accountId".
              
              - **path**: The path or URL of the resource being disliked, represented as "/live/channel/video123".
              
              - **targetType**: Specifies the type of target for the dislike action. In this case, it is set as "videoId".
              
              - **targetId**: The specific identifier for the target item (e.g., a video) being disliked. Placeholder value is "videoId".
              
              - **sourceType**: Indicates the type of the source from which the dislike request originates; here it is "accountId".
              
              - **sourceId**: Identifies the source account initiating the dislike, which is indicated as "accountId".
              
              - **didDislike**: A boolean value indicating whether the dislike action was successfully performed. It is set to true in this context.
              
              - **isUndo**: A boolean indicating whether this request is intended to undo a previous dislike action. It is currently set to false.
              
              - **dislikeId**: A unique identifier for the dislike action. The placeholder value is "dislikeId".
              
              - **name**: An optional field for the name associated with this request, currently left empty.
              
              - **description**: An optional field for additional details about the request, currently also left empty.
              
              - **tags**: Specifies any relevant tags associated with the dislike, in this case set to "tags,sad".

            - **options**: Contains configurations for the body content.
            
              - **raw**: Indicates the properties of the raw body data.
              
                - **language**: Specifies the language format for the raw content. Here it is "json".
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didDislike: true
                isUndo: false
                dislikeId: dislikeId
                name: ''
                description: ''
                tags: tags,sad
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/dislike/get:
    get:
      tags:
        - ActionDislike
      summary: Action - Dislike - Get
      description: |-
        {
          "name": "Action - Dislike - Get",
          "description": {
            "request": {
              "auth": {
                "type": "bearer",
                "description": "This section defines the authentication method used for the request. A bearer token is required for accessing the API."
              },
              "method": {
                "description": "This indicates the HTTP method to be used for the request. In this case, it is a GET request, which is typically used to retrieve data."
              },
              "url": {
                "description": "This is the endpoint URL for the API call. It includes query parameters like dislikeId, sessionId, and accountId, which are necessary for identifying what data to retrieve. Replace dislikeId, sessionId, and accountId with actual values to make a successful request."
              },
              "headers": {
                "description": "This section is for specifying additional HTTP headers for the request. Currently, it contains an empty key-value pair and is marked as disabled, which means no additional headers are being sent."
              },
              "body": {
                "description": "This section indicates the body of the request. Since this is a GET request, the body is not used. It is set to 'raw' mode but is left empty."
              }
            }
          }
        }
      security:
        - bearerAuth: []
      parameters:
        - name: dislikeId
          in: query
          schema:
            type: string
          example: dislikeId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/dislike/all:
    get:
      tags:
        - ActionDislike
      summary: Action - Dislike - Get All
      description: |-
        ### Action - Dislike - Get All

        **Request Overview:**
        This endpoint retrieves all records of dislikes associated with a specific user session and account.

        **Endpoint Details:**

        - **Request Method:** 
          - **GET**: This method is used to request data from the specified resource.

        - **URL:**
          - `http://localhost:3000/api/action/dislike/all/?sessionId=sessionId&accountId=accountId`
            - The URL is where the API is hosted.
            - It includes query parameters:
              - **sessionId**: This parameter represents the unique identifier for the user session.
              - **accountId**: This parameter indicates the unique identifier of the user's account.

        **Authentication:**
        - **Auth Type:**
          - **Bearer Token**: This is a token-based authentication method.
            - **Token Structure:**
              - **Key**: "token" - This is the identifier for the token being passed.
              - **Value**: "BearerToken" - This will be replaced with the actual bearer token that authorizes the request.
              - **Type**: "string" - Indicates that the token is a string value.

        **Headers:**
        - There are currently no custom headers provided for this request. 
        - The header entry is disabled and can be enabled or modified if needed.

        **Request Body:**
        - **Body Mode:** 
          - **raw**: Indicates that the body of the request is sent as raw data.
        - **Raw Data:** 
          - The body is empty in this request and does not contain any data. This is typical for GET requests, as they do not usually require a body.

        This endpoint is primarily used to gather all dislike actions tied to a specific user session and account, ensuring the request is properly authenticated using the bearer token provided.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/dislike/delete:
    post:
      tags:
        - ActionDislike
      summary: Action - Dislike - Delete
      description: |-
        {
          "name": "Action - Dislike - Delete",
          "description": {
            "request": {
              "auth": {
                "type": "bearer": "This specifies that the request requires bearer authentication, in which a token is sent to verify the identity of the user making the API call.",
                "bearer": [
                  {
                    "key": "token": "The key used to identify the authentication token.",
                    "value": "sessionId": "This is the variable placeholder representing the actual session ID for authentication, needed to identify the user session.",
                    "type": "string": "This indicates the type of value for the token, which is a string."
                  }
                ]
              },
              "method": "POST": "This indicates that the HTTP method used for the request is POST, typically used for sending data to the server.",
              "url": "http://localhost:3000/api/action/dislike/delete": "This is the endpoint URL where the request is sent to, targeting the specific action of deleting a dislike.",
              "headers": [
                {
                  "key": "": "Currently, there are no specific headers defined apart from the default settings.",
                  "value": "": "No value is assigned to the header key.",
                  "type": "default": "This indicates that these are default headers and any custom headers are disabled.",
                  "disabled": true: "The header settings are disabled and will not be sent with the request."
                }
              ],
              "body": {
                "mode": "raw": "The body of the request is sent in raw format, which means it contains JSON formatted string data.",
                "raw": "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"dislikeId\":\"dislikeId\"}": "This is the actual JSON payload sent with the request, containing three fields: sessionId (for identifying the user session), accountId (for identifying the user's account), and dislikeId (for identifying the specific dislike action to be deleted)."
              }
            }
          }
        }
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"dislikeId\":\"dislikeId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/dismiss/create:
    post:
      tags:
        - ActionDismiss
      summary: Action - Dismiss - Create
      description: |-
        ### Endpoint Description

        **Name:** Action - Dismiss - Create  
        This API call is designed to create a dismiss action for a specific video or content based on provided parameters.

        #### Request Details

        - **Auth:**
          - **Type:** Bearer
            - This specifies that the request uses Bearer Token authentication. 
          - **Bearer:**
            - **Key:** token
              - This is the key used for the authentication token.
            - **Value:** BearerToken
              - This placeholder should be replaced with an actual Bearer token that authorizes the request.
            - **Type:** string
              - Indicates that the token should be sent as a string.

        - **Method:** 
          - **POST**
            - This indicates that the request is a POST request, which is typically used to create new resources on the server.

        - **URL:** 
          - `http://localhost:3000/api/action/dismiss/create`
            - This is the endpoint where the request is sent. In this case, it is a local server URL.

        - **Headers:**
          - An empty headers array is provided, which indicates that no additional headers are included in the request. The entry is marked as disabled.

        #### Body Details

        - **Mode:** 
          - **raw**
            - The body of the request is in raw format, meaning it will be sent as plain text and interpreted as JSON.

        - **Raw Content:**
          - The raw body being sent with the request is a JSON object that contains the following fields:
          
          - **sessionId:** 
            - `"sessionId"`
              - A unique identifier for the session in which the dismiss action is taking place. Should be replaced with the actual session ID.

          - **accountId:**
            - `"accountId"`
              - The identifier for the account that is associated with this action. Should be replaced with the actual account ID.
          
          - **path:** 
            - `"/live/channel/video123"`
              - The path to the video or content being dismissed. This is typically a URL path format and should point to the specific resource.

          - **targetType:**
            - `"videoId"`
              - Indicates the type of the target resource being dismissed. In this case, it refers to a video ID.

          - **targetId:** 
            - `"videoId"`
              - The unique identifier for the target resource (the video) being dismissed. Should be replaced with the actual video ID.

          - **sourceType:** 
            - `"accountId"`
              - Specifies the type that identifies the source of the action. Here it refers back to the account ID.

          - **sourceId:** 
            - `"accountId"`
              - The unique identifier for the source account from which the dismiss action originates. Should be replaced with the actual account ID.

          - **didDismiss:** 
            - `true`
              - A boolean value that indicates whether the dismiss action was performed. In this case, it is set to true.

          - **name:** 
            - `"this is name"`
              - A string representing the name of the action or context for the dismissal. Should be replaced with a descriptive name.

          - **description:** 
            - `""`
              - A string for additional description about the action. Currently empty but can be used to provide more context.

          - **tags:** 
            - `""`
              - A string for any tags associated with the action. Currently empty, but can be utilized for categorization or identification purposes. 

        ### Summary
        This POST request creates a dismiss action for a specified video source based on the supplied parameters. It requires a valid Bearer token for authorization and expects certain details such as session ID, account IDs, target IDs, and additional metadata in the request body.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didDismiss: true
                name: this is name
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/dismiss/update:
    put:
      tags:
        - ActionDismiss
      summary: Action - Dismiss - Update
      description: |-
        ### Endpoint: Action - Dismiss - Update

        #### Request Overview
        This endpoint is used to update a dismissal action for a specific video. It requires authentication via a Bearer token and expects a PUT request with specific parameters in the request body.

        #### Authentication
        - **Auth Type**: Bearer
          - **Token**: This is a security token required for authorization. It should be provided in the header of the request in the format `Bearer your_token_here`.

        #### Request Method
        - **Method**: PUT
          - This indicates that the request is used to update an existing resource.

        #### URL
        - **Endpoint URL**: `http://localhost:3000/api/action/dismiss/update`
          - This is the endpoint where the update request is sent.

        #### Headers
        - **Client-UUID**: 
          - This header should contain a unique identifier for the client making the request. It is essential for tracking and managing client-specific operations.

        #### Request Body
        The body of the request should be structured as a JSON object with the following properties:

        - **sessionId**: 
          - A unique identifier for the user session. It helps track the actions performed during that specific session.

        - **accountId**: 
          - This represents the unique identifier of the account that is being updated or referenced in this action.

        - **path**: 
          - The specific path for the resource, typically a URL that points to the video being dismissed. In this case, it might look like `/live/channel/video123`.

        - **targetType**:
          - This indicates the type of the target resource being acted upon. In this instance, it is specified as `videoId`.

        - **targetId**: 
          - The unique identifier for the target resource (video) that is being dismissed, referred to as `videoId`.

        - **sourceType**: 
          - This field indicates the type of the source resource. It is set as `accountId` in this case.

        - **sourceId**: 
          - The unique identifier for the source resource. Here it refers to the account ID of the source.

        - **dismissId**: 
          - This field contains the unique identifier for the dismissal action. It helps in tracking and referencing the specific dismissal event.

        - **didDismiss**: 
          - A boolean value indicating whether the action of dismissal has occurred. It can be set to `true` or `false`.

        - **name**: 
          - A descriptive name for the update action, which can help in identifying or categorizing the update.

        - **description**: 
          - An optional field where additional details about the update can be provided. It can be left empty if not necessary.

        - **tags**: 
          - A field for including any relevant tags that could aid in categorization or retrieval of the update. It can also be left empty if not applicable.

        This endpoint is critical for updating the state of video dismissal in a user session, requiring careful attention to the identifiers and boolean flags presented in the request body.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                dismissId: dismissId
                didDismiss: false
                name: this update
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/dismiss/get:
    get:
      tags:
        - ActionDismiss
      summary: Action - Dismiss - Get
      description: |-
        ### Action - Dismiss - Get

        This endpoint is designed to retrieve information related to a specific dismissal action.

        #### Request Details:

        - **Auth Type**: 
          - The authentication method used is Bearer Token. This means that access to this endpoint requires a valid token to be provided in the request header.
          
          - **Bearer Token**: 
            - A string that contains the token, represented here as "BearerToken." This token should be replaced with an actual token for authentication.

        - **HTTP Method**: 
          - The method used to make the request is GET. This implies that the endpoint is utilized to retrieve data without affecting the state of any resources.

        - **URL**: 
          - The endpoint's URL is structured as follows:
            ```
            http://localhost:3000/api/action/dismiss/get/?dismissId=dismissId&sessionId=sessionId&accountId=accountId
            ```
            - **Base URL**: `http://localhost:3000/api/action/dismiss/get/`
            - **Query Parameters**:
              - `dismissId`: This is a placeholder for the unique identifier of the dismissal you wish to retrieve information about.
              - `sessionId`: This is a placeholder for the identifier associated with the session during which the dismissal action occurred.
              - `accountId`: This is a placeholder for the identifier associated with the account related to the dismissal.

        - **Headers**: 
          - There is a header section included in the request, but it appears to be disabled and empty. Typically, here you would add any additional headers required by the API, like custom content types or security headers.

        - **Body**:
          - The body of the request is set to "raw" mode but is left empty. Since this is a GET request, a body is generally not included. Thus, no data needs to be sent in the body.

        This endpoint, with the correct parameters and a valid bearer token, will return details about the dismissal action specified by the `dismissId`.
      security:
        - bearerAuth: []
      parameters:
        - name: dismissId
          in: query
          schema:
            type: string
          example: dismissId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/dismiss/all:
    get:
      tags:
        - ActionDismiss
      summary: Action - Dismiss - Get All
      description: |-
        ### Endpoint: Action - Dismiss - Get All

        **Description:**
        This endpoint is used to retrieve all dismissal actions for a specific session and account. The request is made using the GET method, and it requires a valid bearer token for authentication.

        ---

        **Request Details:**

        1. **Auth:**
           - **Type:** Bearer
             - This indicates the authentication method used. The bearer token will be included in the request to validate the user's identity and permissions.
           - **Bearer Token:**
             - **Key:** token
             - **Value:** BearerToken
               - This is a placeholder for the actual bearer token that should be used for authenticating the request.
             - **Type:** string
               - The token is represented as a string.

        2. **Method:**
           - **Type:** GET
             - This specifies that the request is a GET request, which is used to retrieve data from the server.

        3. **URL:**
           - **URL:** `http://localhost:3000/api/action/dismiss/all/?sessionId=sessionId&accountId=accountId`
             - This is the URL endpoint where the request is sent. It includes two query parameters:
               - **sessionId:** This is a placeholder for the session identifier for which the dismissals are to be fetched.
               - **accountId:** This is a placeholder for the account identifier associated with the dismissals.

        4. **Headers:**
           - **Key:** (No key specified)
           - **Value:** (No value specified)
           - **Type:** default
           - **Disabled:** true
             - This indicates that there are currently no additional headers being sent with the request, and the header section is disabled. Users can enable and modify this section if necessary.

        5. **Body:**
           - **Mode:** raw
           - **Raw:** (Empty)
             - The body is set to raw mode but currently has no content. Since this is a GET request, the body is typically not used in this context and can remain empty.

        ---

        This endpoint is primarily used to fetch all dismissal actions related to a specific session and account using the necessary authentication methods.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/dismiss/delete:
    post:
      tags:
        - ActionDismiss
      summary: Action - Dismiss - Delete
      description: |-
        {
          "name": "Action - Dismiss - Delete",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "sessionId",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "url": "http://localhost:3000/api/action/dismiss/delete",
            "headers": [
              {
                "key": "",
                "value": "",
                "type": "default",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"dismissId\":\"dismissId\"}"
            }
          }
        }

        ### Endpoint Description

        - **Name**: The name of the endpoint is "Action - Dismiss - Delete". This signifies that the function of this endpoint is related to dismissing or deleting some action.

        - **Request**: This section contains details about how to make the API request.

          - **Auth**: 
            - **Type**: The authorization method used is a bearer token. This is a standard way of ensuring that the request is coming from a verified user.
            - **Bearer**: A list containing authentication details. In this case, it involves a key for the token called "sessionId". The value associated with the key should be replaced with an actual session ID when making the request.

          - **Method**: The HTTP method used for this request is POST. This indicates that data is being sent to the server to perform an action, rather than retrieving data.

          - **URL**: The endpoint URL is "http://localhost:3000/api/action/dismiss/delete". This is the address on the server where the request will be sent. It is currently set to a local server, which means it is intended for testing or development purposes.

          - **Headers**: 
            - There is a placeholder for request headers, but currently, no specific headers are defined or enabled in the request. This section is marked as disabled, meaning that no headers are being sent along with this request.

          - **Body**: 
            - **Mode**: The body of the request is indicated to be in "raw" mode, which means that the data is sent as a raw JSON string.
            - **Raw**: The content of the body is a JSON string containing three fields:
              - **sessionId**: This should contain the user’s session ID, making it necessary for validation purposes.
              - **accountId**: This field is to be populated with the account ID that is associated with the action being dismissed or deleted.
              - **dismissId**: This field should contain the ID of the specific action or item that needs to be dismissed or deleted. 

        Each of these fields is crucial for the server to process the request properly and execute the intended action.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"dismissId\":\"dismissId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/donate/create:
    post:
      tags:
        - ActionDonate
      summary: Action - Donate - Create
      description: |-
        ### Description of Each Data in the Endpoint: Action - Donate - Create

        #### Request Authentication
        - **Auth Type**: Specifies that the request uses Bearer token for authorization.
        - **Bearer Token**: 
          - **Key**: "token" - Identifies the authorization token.
          - **Value**: "BearerToken" - The actual token that authorizes the request, typically a string representing the user's session.
          - **Type**: "string" - Indicates that the value of the token is a string.

        #### Request Method
        - **Method**: "POST" - Indicates that this request will create a new resource on the server.

        #### Request URL
        - **URL**: "http://localhost:3000/api/action/donate/create" - The endpoint where the request will be sent to create a donation action.

        #### Request Headers
        - **Headers**: 
          - **Key**: An empty string - Indicates that no additional custom headers are set.
          - **Value**: An empty string - There is no associated value for the header.
          - **Type**: "default" - The default type for the header.
          - **Disabled**: true - This header is currently disabled and will not be sent with the request.

        #### Request Body
        - **Body Mode**: "raw" - Indicates that the body of the request will contain raw data.
        - **Raw Data**:
          - A JSON object containing the following fields:
            - **sessionId**: "sessionId" - Represents the unique identifier for the user session.
            - **accountId**: "accountId" - The ID of the user account making the donation.
            - **path**: "/live/channel/video123" - The URL path to the content associated with the donation, such as a live stream.
            - **targetType**: "videoId" - Specifies the type of target for the donation, which in this case is a video ID.
            - **targetId**: "videoId" - The unique ID of the target video receiving the donation.
            - **sourceType**: "accountId" - Indicates that the source of the donation is an account ID.
            - **sourceId**: "accountId" - The unique ID of the source account from which the donation originates.
            - **utilityType**: "token" - Specifies the type of utility used for the donation, which is a token.
            - **name**: "My chairity" - The name of the charity or cause associated with the donation.
            - **didDonate**: true - A boolean indicating whether the donation was successfully made.
            - **isAccepted**: true - A boolean indicating whether the donation has been accepted.
            - **isRejected**: false - A boolean indicating whether the donation has been rejected.
            - **description**: "" - A field for additional comments or notes about the donation, currently empty.
            - **tags**: "" - A field for tags or labels associated with the donation, currently empty.

        #### Options
        - **Raw Data Options**: 
          - **Language**: "json" - Specifies that the format of the raw data is JSON.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                utilityType: token
                name: My chairity
                didDonate: true
                isAccepted: true
                isRejected: false
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/donate/update:
    put:
      tags:
        - ActionDonate
      summary: Action - Donate - Update
      description: |-
        ### Action - Donate - Update

        **Request Overview**  
        This request is designed to update the donation information associated with a particular action within the API. The request method is PUT, which implies that it modifies an existing resource.

        **Authorization**  
        - **Type:** Bearer  
          - This type of authorization requires a token for access.  
        - **Token:** "BearerToken"  
          - This placeholder represents the actual bearer token that is necessary for authenticating the request.

        **URL**  
        - **Endpoint:** `http://localhost:3000/api/action/donate/update`  
          - The endpoint for updating the donation action, typically it should point to the live server once development is completed.

        **Headers**  
        - **Client-UUID:** "ClientUUID"  
          - This header uniquely identifies the client making the request. Replace `ClientUUID` with the actual UUID for your client application.

        **Body**  
        The body of the request is in raw JSON format and contains the following fields:

        - **sessionId**  
          - Represents the unique identifier for the session during which the donation action is being updated.

        - **accountId**  
          - The unique identifier for the account making the donation. This helps in attributing the donation to the correct user.

        - **path**  
          - Indicates the specific path or reference to the resource, in this case, a video path like `/live/channel/video123`.

        - **targetType**  
          - Specifies the type of resource that is being targeted for this action. Here, it is set to `videoId`, indicating that the action is linked to a video.

        - **targetId**  
          - The unique identifier for the target resource (in this case, the video) that the donation is associated with.

        - **sourceType**  
          - Refers to the type of source from which the donation is being made. This is set to `accountId`, meaning the source is another account.

        - **sourceId**  
          - The unique identifier for the source account, indicating where the donation is originating from.

        - **utilityType**  
          - Specifies the type of utility used for the donation. In this case, it is set to `token`, which may suggest that donations are conducted via token transactions.

        - **name**  
          - Represents the updated name of the charity or purpose for which the donation is being made. The example value is "My charity updated name".

        - **didDonate**  
          - A boolean value indicating whether the user actually made a donation. Set to `true` in this case.

        - **isAccepted**  
          - A boolean value indicating whether the donation action has been accepted by the receiving party. This example is set to `true`.

        - **isRejected**  
          - A boolean flag that shows if the donation action was rejected. It is set to `false`, meaning the action has not been rejected.

        - **donateId**  
          - The unique identifier of the donation record being updated.

        - **description**  
          - A textual description related to the donation action. In this case, it is set to "this is description".

        - **tags**  
          - A field meant for categorizing or tagging the donation with relevant keywords. The example provided is empty, indicating no tags have been assigned.

        This structure provides all the necessary information to update a donation action in the API effectively. Make sure to replace placeholder values with actual data while making requests.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                utilityType: token
                name: My chairity updated name
                didDonate: true
                isAccepted: true
                isRejected: false
                donateId: donateId
                description: this is description
                tags: ''
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/donate/get:
    get:
      tags:
        - ActionDonate
      summary: Action - Donate - Get
      description: |-
        ### Action - Donate - Get

        This API request is designed to retrieve information regarding a specific donation action. Below are the details of the components involved in this endpoint.

        #### Request Components

        - **auth**:
          - **type**: Specifies the type of authentication required. In this case, it uses Bearer token authentication.
          - **bearer**: This array contains the authentication token used to authorize the request. 
            - **key**: Represents the name of the token attribute. Here, it's labeled as "token".
            - **value**: This is where the actual token is supplied. It is indicated as "BearerToken", which should be replaced with a valid token for authentication.
            - **type**: Specifies the type of the value, which is a string.

        - **method**:
          - Represents the HTTP method used for the request. The method specified is "GET", indicating that this request is used to retrieve data.

        - **url**:
          - The endpoint URL for the API call. 
          - The structure includes query parameters that need to be provided:
            - **donateId**: An identifier for the specific donation action you are querying.
            - **sessionId**: An identifier for the session associated with the donation action.
            - **accountId**: An identifier for the account related to the donation.
          
          The complete URL format appears as:
          `http://localhost:3000/api/action/donate/get/?donateId=donateId&sessionId=sessionId&accountId=accountId`.

        - **headers**:
          - This section is for any additional HTTP headers that may be required for the request. In this case, it is currently empty, with no headers being passed.
          - **disabled**: This field indicates the status of the header. It is set to `true`, meaning this header section is not actively used in the request.

        - **body**:
          - The body of the request is meant to contain any payload data if needed. It currently has a mode set to "raw", indicating that raw data would be used if there were any. However, it is empty here, implying that no body data is required for this GET request.

        ### Summary
        This endpoint allows users to retrieve donation information based on specified identifiers. Proper authentication via a Bearer token is required, and the request will include the necessary URL parameters for successful retrieval of the desired data.
      security:
        - bearerAuth: []
      parameters:
        - name: donateId
          in: query
          schema:
            type: string
          example: donateId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/donate/all:
    get:
      tags:
        - ActionDonate
      summary: Action - Donate - Get All
      description: |-
        ### Endpoint: Action - Donate - Get All

        #### Request Details

        - **Name**: Action - Donate - Get All  
          This is the name of the API endpoint used for retrieving all donation actions.

        - **Method**: GET  
          This specifies the HTTP method used for the request, which is GET in this case. This method is typically used to retrieve data from a server.

        - **URL**: `http://localhost:3000/api/action/donate/all/?sessionId=sessionId&accountId=accountId`  
          This is the endpoint's URL. It points to the local server and includes query parameters:
          - **sessionId**: Represents the unique identifier for the session.
          - **accountId**: Refers to the unique identifier for the account.

        #### Authentication

        - **Auth Type**: Bearer  
          This indicates that the request requires bearer token authentication.

        - **Bearer Token**:  
          - **Key**: token  
            This is the key that identifies the authorization token in the request.
          - **Value**: BearerToken  
            This is a placeholder for the actual bearer token that must be included in the authorization header. Replace "BearerToken" with a valid token.
          - **Type**: string  
            This indicates that the token value should be provided as a string.

        #### Headers

        - **Headers**:  
          There are currently no custom headers defined for this request. The header entry is disabled and can be configured if needed.

        #### Body

        - **Body Mode**: raw  
          The body of the request is set to raw, indicating that no form data or JSON object is being sent in the request.

        - **Raw**:  
          The body is empty in this case, as this GET request typically does not require a body.

        ### Summary
        This endpoint is designed to retrieve all donation actions for a given account and session. The user needs to provide valid session and account identifiers, as well as a valid bearer token for authentication. The request does not include any additional headers or body content.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/donate/delete:
    post:
      tags:
        - ActionDonate
      summary: Action - Donate - Delete
      description: |-
        **Action - Donate - Delete Endpoint Description**

        - **Name**: Action - Donate - Delete
          - This is the name of the API action that is responsible for deleting a donation record.

        - **Request**: Contains all the necessary details to make a request to the endpoint.
          
          - **Auth**: Defines the authentication details required for this request.
            - **Type**: "bearer"
              - Specifies that bearer token authentication is used.
            - **Bearer**: Contains information about the bearer token.
              - **Key**: "token"
                - This is the identifier for the authentication token.
              - **Value**: "sessionId"
                - This represents the actual session ID that must be used for authentication. Replace this with the actual session ID when making a request.
              - **Type**: "string"
                - Indicates that the value type for the token is a string.

          - **Method**: "POST"
            - This specifies that the request method to be used is POST, which is commonly used for creating or deleting resources.

          - **URL**: "http://localhost:3000/api/action/donate/delete"
            - This is the endpoint which the request will be sent to. It indicates that the action is related to deleting a donation resource.

          - **Headers**: A list of HTTP headers to be sent with the request.
            - **Key**: ""
              - Currently an empty key, which means no specific header is set.
            - **Value**: ""
              - The corresponding value is also empty.
            - **Type**: "default"
              - Indicates that this is a default type header.
            - **Disabled**: true
              - This header is disabled and will not be included in the request.

          - **Body**: Contains the payload that will be sent with the request.
            - **Mode**: "raw"
              - Indicates that the body of the request will be provided as raw data rather than a form or a specific format.
            - **Raw**: "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"donateId\":\"donateId\"}"
              - This is the raw JSON data that must be sent in the body of the request. It includes:
                - **sessionId**: "sessionId"
                  - Identify the session for which the delete action is being performed. Replace with the actual session ID.
                - **accountId**: "accountId"
                  - The ID of the account associated with the donation to be deleted. Replace with the actual account ID.
                - **donateId**: "donateId"
                  - The ID of the specific donation record that you intend to delete. Replace with the actual donation ID.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"donateId\":\"donateId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/draft/create:
    post:
      tags:
        - ActionDraft
      summary: Action - Draft - Create
      description: |-
        ### Action - Draft - Create API Endpoint Description

        - **Auth**: 
          - **Type**: This specifies the authentication method used for the request.
            - **Bearer**: Indicates that a bearer token is used for authorization.
              - **Token**: A string that represents the bearer token used to authenticate the request. Replace "BearerToken" with your actual token.

        - **Method**: 
          - **POST**: This specifies that the HTTP method used for this request is POST, typically used to send data to the server.

        - **URL**: 
          - **Endpoint**: The URL where the API request is made. In this case, it's `http://localhost:3000/api/action/draft/create`. This indicates that the action for creating a draft is available at this location.

        - **Headers**: 
          - **Key**: The header key is currently empty and not set to be used (`disabled: true`). Generally, headers can contain information such as content type or custom parameters for the request but are not required in this case.

        - **Body**:
          - **Mode**: 
            - **Raw**: Indicates that the data is sent in raw format.
          - **Raw**: This is the payload sent with the request.
            - **sessionId**: A string representing the unique identifier for the session.
            - **accountId**: A string representing the unique identifier for the user account.
            - **path**: A string indicating the path or location of the video resource, for example, `/live/channel/video123`.
            - **targetType**: Specifies the type of target. Here, it uses "videoId" to indicate that the target is a video.
            - **targetId**: The unique identifier for the target item, in this case, the video ID.
            - **sourceType**: Indicates the type of source; it uses "accountId" to signify that the source is the user account.
            - **sourceId**: The unique identifier for the source, matching the account ID.
            - **isDrafted**: A boolean indicating whether the item is in draft status. Set to true for a draft.
            - **draftType**: Specifies the category of the draft. Here, it's labeled as "streamer".
            - **isAccepted**: A boolean indicating whether the draft has been accepted. Set to false.
            - **isRejected**: A boolean indicating whether the draft has been rejected. Set to true.
            - **isIgnored**: A boolean indicating whether the draft has been ignored. Set to false.
            - **name**: A string providing the name or title of the draft.
            - **description**: A string detailing the contents or purpose of the draft.
            - **tags**: A string for any tags associated with the draft. It is currently empty and can be filled as needed. 

        This endpoint is designed to create a draft of a video resource in the system, allowing various attributes to be specified for further management.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                isDrafted: true
                draftType: streamer
                isAccepted: false
                isRejected: true
                isIgnored: false
                name: this is name of draft
                description: this is description of draft
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/draft/update:
    put:
      tags:
        - ActionDraft
      summary: Action - Draft - Update
      description: |-
        ### Description of Each Data in the Endpoint

        - **name**:
          - Describes the purpose of the request, specifically updating a draft action.

        - **request**:
          - Contains all necessary information to perform the API request.

        - **auth**:
          - Specifies the authentication method used for this request.
          - **type**: Indicates that bearer token authentication is required.
          - **bearer**: Provides the bearer token needed for authorization.
            - **key**: The identifier for the token type.
            - **value**: The string value of the bearer token, which should be replaced with the actual token.
            - **type**: Specifies that the token is a string.

        - **method**:
          - The HTTP method used for the request, which in this case is PUT, indicating that this request is used to update an existing resource.

        - **url**:
          - The endpoint URL to which the request is sent. Here it is directed to update a draft at the specified localhost server.

        - **headers**:
          - Contains key information that is sent along with the request.
          - **key**: The name of the header which is "Client-UUID".
          - **value**: The actual UUID of the client, which should be replaced with the client's unique identifier.
          - **type**: Indicates that the header is of a standard type.

        - **body**:
          - This section contains the data being sent with the request.
          - **mode**: Indicates that the body is in raw format.
          - **raw**: Contains the JSON data that represents the draft details to be updated. The fields within the JSON are as follows:
            - **sessionId**: The unique identifier for the session related to this action.
            - **accountId**: The unique identifier for the user account associated with the draft.
            - **path**: The path to the resource that the draft relates to, in this case, a video.
            - **targetType**: Specifies the type of target for the action; here it is designated as "videoId".
            - **targetId**: The unique identifier of the target resource, which would be a video ID.
            - **sourceType**: Indicates the type of the source, which is "accountId" in this case.
            - **sourceId**: The unique identifier for the source, corresponding to the account ID.
            - **isDrafted**: A boolean value indicating whether the draft has been created or marked.
            - **draftType**: Specifies the type of draft; here it is labeled as "streamer".
            - **isAccepted**: A boolean value indicating if the draft has been accepted.
            - **isRejected**: A boolean value indicating if the draft has been rejected.
            - **isIgnored**: A boolean value stating if the draft action should be ignored.
            - **name**: A string that indicates the title or name of the draft.
            - **description**: A string that provides additional details about the draft.
            - **tags**: A comma-separated list of tags that can be associated with the draft for categorization.
            - **draftId**: The unique identifier for the draft being updated. 

        - **options**:
          - Provides formatting details for the raw body.
          - **raw**: Specifies the language format of the body content, which is JSON in this case.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                isDrafted: true
                draftType: streamer
                isAccepted: false
                isRejected: true
                isIgnored: false
                name: this is name of draft
                description: this is description of draft
                tags: tag1,tag2,tag3
                draftId: draftId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/draft/get:
    get:
      tags:
        - ActionDraft
      summary: Action - Draft - Get
      description: |-
        ### Description of Endpoint Data

        - **name**: This field specifies the name of the API endpoint. In this case, it is labeled "Action - Draft - Get," which signifies that this endpoint retrieves draft actions.

        - **request**: This section contains all the details for making a request to the API.

          - **auth**: This specifies the authentication method used for the request.
            - **type**: Indicates the type of authentication. Here, it is set to "bearer," which means the request requires a bearer token for authorization.
            - **bearer**: This is an array containing the details of the bearer token.
              - **key**: This indicates the name of the parameter being sent, which is "token." 
              - **value**: This is where the actual bearer token would be placed. Currently, it is represented as "BearerToken," indicating that a real token should be inserted here.
              - **type**: This indicates the data type, which is "string" in this case.

          - **method**: This indicates the HTTP method to be used when making the request. Here, it is set to "GET," which is typically used for retrieving data from a server.

          - **url**: This is the endpoint URL where the request is sent. It includes query parameters for `draftId`, `sessionId`, and `accountId`, which should be replaced with actual values when making the request.
            - **Base URL**: `http://localhost:3000/api/action/draft/get/`
            - **Query Parameters**: 
              - `draftId`: This represents the unique identifier for the draft.
              - `sessionId`: This represents the unique identifier for the session.
              - `accountId`: This signifies the unique identifier for the account.

          - **headers**: This section can include additional headers sent with the request. 
            - In this example, the header object is present but is not populated with any key or value. It is currently disabled, meaning it is not actively being used in the request.

          - **body**: This defines the body of the request. 
            - **mode**: This specifies the format of the body content. Here, it is set to "raw," which allows for custom content to be sent in the request.
            - **raw**: This is where the actual content of the request body would be placed. It is currently empty, indicating that no body content is required for this GET request.

        Users should replace the placeholders for the token and the query parameters with actual values when using this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - name: draftId
          in: query
          schema:
            type: string
          example: draftId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/draft/all:
    get:
      tags:
        - ActionDraft
      summary: Action - Draft - Get All
      description: |-
        ### Action - Draft - Get All Endpoint Description

        #### Name
        - **Action - Draft - Get All**
          - This is the name of the API endpoint designed to retrieve all draft actions.

        #### Request
        - **Auth**
          - This section outlines the authentication method required to access the endpoint.
          - **Type**: Bearer
            - Indicates that bearer token authentication is used.
          - **Bearer**: 
            - Contains the following details:
              - **Key**: token
                - This specifies the type of authentication parameter being used.
              - **Value**: BearerToken
                - Placeholder for the actual bearer token, which is required for authorization.
              - **Type**: string
                - Indicates that the value for the token is in string format.

        - **Method**
          - **GET**
            - This HTTP method is used to request data from the specified resource.

        - **URL**
          - **http://localhost:3000/api/action/draft/all/?sessionId=sessionId&accountId=accountId**
            - The endpoint URL for making the GET request to obtain all draft actions.
            - **Parameters**:
              - **sessionId**: sessionId
                - This query parameter is used to identify the user's session.
              - **accountId**: accountId
                - This query parameter is used to specify the user’s account from which drafts are being retrieved.

        - **Headers**
          - This section contains any additional metadata that may be required when making the request.
          - **Key**: (empty)
            - There are currently no custom headers being specified.
          - **Value**: (empty)
            - Corresponding value for the key, not specified.
          - **Type**: default
            - Indicates the default type for headers.
          - **Disabled**: true
            - This means that the header is currently not in use (disabled).

        - **Body**
          - **Mode**: raw
            - Indicates the content type of the body being sent.
          - **Raw**: (empty)
            - The request body is empty because no additional data is being sent with the GET request. 

        This endpoint allows users to fetch all draft actions associated with a specific session and account, requiring a valid bearer token for authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/draft/delete:
    post:
      tags:
        - ActionDraft
      summary: Action - Draft - Delete
      description: |-
        **Endpoint Description:**

        - **Name**: Action - Draft - Delete
          - This is the name of the API endpoint used for deleting a draft action.

        - **Request**: This section contains the details about how to send the request to the server.

          - **Auth**: This specifies the authentication method required to access the endpoint.
            - **Type**: Bearer
              - Indicates that a bearer token is used for authorization.
            - **Bearer**: Contains the details of the token.
              - **Key**: token
                - The key for the authentication token.
              - **Value**: sessionId
                - The placeholder for the session ID that provides access and verification for the user session.
              - **Type**: string
                - Specifies that the value should be a string.

          - **Method**: POST
            - The HTTP method used to send data to the server. In this case, it is a POST request, indicating that data is being sent to the server to delete a draft.

          - **URL**: http://localhost:3000/api/action/draft/delete
            - The URL endpoint where the request is directed. This is the local address indicating that the server is running on the local machine.

          - **Headers**: This section outlines the request headers.
            - An empty header is included, marked as disabled, indicating that it is currently not being used in the request.

          - **Body**: This part contains the data being sent in the request.
            - **Mode**: raw
              - Indicates that the body content is sent in its raw format, typically as JSON.
            - **Raw**: "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"draftId\":\"draftId\"}"
              - This is the actual content of the request body in JSON format.
              - **sessionId**: A placeholder for the session ID, used to verify the user's session.
              - **accountId**: A placeholder for the account ID, which identifies the user’s account.
              - **draftId**: A placeholder for the draft ID, which specifies the draft that needs to be deleted.

        Overall, this endpoint is set up to accept a request that includes authentication and a body containing session, account, and draft identifiers to delete an existing draft.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"draftId\":\"draftId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/earn/create:
    post:
      tags:
        - ActionEarn
      summary: Action - Earn - Create
      description: |-
        ### Endpoint Description: Action - Earn - Create

        #### Request Details
        - **Method**: `POST`
          - This request method is used to submit data to the specified endpoint for creating an action related to earning. 

        - **URL**: `http://localhost:3000/api/action/earn/create`
          - The endpoint URL that the request is sent to. This is where the action creation request will be processed.

        - **Authentication**: 
          - **Type**: `bearer`
            - Indicates that the request uses bearer token authentication, which requires a token to access the API.
          - **Bearer Token**:
            - **Key**: `token`
              - Represents the identifier for the token being sent.
            - **Value**: `BearerToken`
              - A placeholder for the actual bearer token required for authentication. This token should be replaced with a valid one to authorize the request.
            - **Type**: `string`
              - Specifies that the value is of string type.

        #### Headers
        - **Headers**: 
          - In this request, there are no custom headers set (keys and values are empty), and the header feature is currently disabled. Headers can provide additional context or authentication but are not utilized here.

        #### Body
        - **Body Mode**: `raw`
          - Indicates that the body of the request is being sent in a raw format. 
        - **Body Content**:
          - This section contains the data that will be sent in the request body, formatted as JSON.

        ##### Body Parameters
        - **sessionId**: `"sessionId"`
          - A unique identifier for the session during which the action is being created. This helps track the user's current operation.

        - **accountId**: `"accountId"`
          - The identifier for the account that is associated with the action being created. This is used to link the action to a specific user or entity.

        - **path**: `"/live/channel/video123"`
          - The path indicating the live channel or resource associated with this action. This helps relate the action to a specific content resource.

        - **targetType**: `"videoId"`
          - Specifies the type of target for the earning action. In this case, it's a video, denoting that the action is related to video content.

        - **targetId**: `"videoId"`
          - The identifier of the target resource (in this case, a specific video) that the action is associated with.

        - **sourceType**: `"accountId"`
          - Indicates the type of source that is generating the action. This entry suggests that the source is related to the account.

        - **sourceId**: `"accountId"`
          - The identifier of the source entity that is earning points. This typically would match or relate to the accountId.

        - **didEarn**: `false`
          - A boolean field indicating whether the action resulted in earning rewards or points. In this case, it is set to false, meaning no points were earned from this action.

        - **utilityType**: `"points"`
          - Specifies the type of utility being earned. Here, it indicates that the rewards are in the form of points.

        - **tokenAmount**: `10`
          - The amount of tokens (or points) being associated with this action. This number represents the quantity of points being accountable for the operation.

        - **name**: `""`
          - A placeholder for a name to describe the action further. Currently, it is not filled out and can be provided based on specific use cases.

        - **description**: `""`
          - A placeholder for an optional description of the action. This can be used to provide additional context or information about the purpose of the action being created.

        - **tags**: `""`
          - A placeholder for any tags associated with this action. Tags can help categorize or identify the action but are not specified in this request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didEarn: false
                utilityType: points
                tokenAmount: 10
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/earn/update:
    put:
      tags:
        - ActionEarn
      summary: Action - Earn - Update
      description: |-
        ### Action - Earn - Update Endpoint Description

        - **Method**: PUT
          - This specifies that the request is a PUT method, commonly used to update existing resources.

        - **URL**: `http://localhost:3000/api/action/earn/update`
          - This is the endpoint URL where the update request will be sent. It points to the local server and targets the action to earn updates.

        - **Authentication**:
          - **Type**: Bearer Token
            - This method of authentication uses a bearer token that must be included in the request to access the API securely.
          - **Bearer Token Structure**:
            - **Key**: `token`
              - This is the identifier for the token parameter.
            - **Value**: `BearerToken`
              - This is where the actual bearer token value should be placed for authentication purposes.
            - **Type**: string
              - Indicates that the token value should be of string type.

        - **Headers**:
          - **Key**: `Client-UUID`
            - This is a unique identifier for the client making the request.
          - **Value**: `ClientUUID`
            - This is the placeholder for the actual Client UUID value that should be used.
          - **Type**: default
            - Specifies the default type for the header.

        - **Body**:
          - **Mode**: raw
            - Indicates that the body of the request will be in raw format, allowing for custom formatting.
          - **Raw Content**: 
            - The following JSON structure should be sent in the body of the request:

            ```json
            {
                "sessionId": "sessionId",
                "accountId": "accountId",
                "path": "/live/channel/video123",
                "targetType": "videoId",
                "targetId": "videoId",
                "sourceType": "accountId",
                "sourceId": "accountId",
                "didEarn": false,
                "utilityType": "points",
                "tokenAmount": 20,
                "name": "update",
                "description": "",
                "tags": "",
                "earnId": "earnId"
            }
            ```

            - **sessionId**: Represents the identifier for the session associated with the action.
            - **accountId**: The unique ID for the account that is initiating the earn action.
            - **path**: The path to the resource, in this case, a live channel video.
            - **targetType**: Defines the type of target; here it is set as `videoId`.
            - **targetId**: The specific ID of the target video to update.
            - **sourceType**: Indicates the type of source being used, which is `accountId`.
            - **sourceId**: The ID of the source account.
            - **didEarn**: A boolean indicating whether the earning action has occurred, set to false here.
            - **utilityType**: Describes the type of utility being used, in this case, it is `points`.
            - **tokenAmount**: The amount of tokens to be updated, set to 20.
            - **name**: A label for the update action, which is set as "update".
            - **description**: A field for additional text; currently left empty.
            - **tags**: A field for categorizing the update; currently left empty.
            - **earnId**: An identifier for the earning action being updated.

        This endpoint is used for updating earning information related to an account and its associated actions. Ensure all provided values are replaced with actual data before making a request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didEarn: false
                utilityType: points
                tokenAmount: 20
                name: update
                description: ''
                tags: ''
                earnId: earnId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/earn/get:
    get:
      tags:
        - ActionEarn
      summary: Action - Earn - Get
      description: |-
        ### Endpoint Description: Action - Earn - Get

        #### Name:
        - **Action - Earn - Get**: This is the name of the API action being performed.

        #### Request Details:
        - **Auth**: The authentication type used for this request is bearer token authentication.
          - **Type**: Refers to the method of authentication being used, which in this case is "bearer".
          - **Bearer**: This section holds the details about the bearer token required for authorization.
            - **Key**: The key for the bearer token, labeled as "token".
            - **Value**: This is where the actual bearer token is placed, here it is represented as "BearerToken".
            - **Type**: Indicates the datatype of the value, which is "string".

        - **Method**: The HTTP method used for this request is "GET", which is used to retrieve data from the server.

        - **URL**: This is the endpoint URL where the request is sent.
          - Structure: `http://localhost:3000/api/action/earn/get/?earnId=earnId&sessionId=sessionId&accountId=accountId`
          - **earnId**: A query parameter used to identify the specific earning action to retrieve.
          - **sessionId**: This query parameter represents the session identifier associated with the earning action.
          - **accountId**: This query parameter is used to specify the account from which the earning action is being retrieved.

        - **Headers**: This section includes any headers to be sent with the request.
          - **Key**: Currently, there are no specific headers being sent, indicated by the empty key.
          - **Value**: The header value is also left empty.
          - **Type**: The type is set to "default", meaning standard header behavior is used.
          - **Disabled**: This header is disabled, indicating it will not be included in the request.

        - **Body**: This part pertains to the body of the request.
          - **Mode**: The body mode is set to "raw", which allows users to send unformatted data.
          - **Raw**: In this case, there is no data being sent in the body of the request, as it is left empty.

        ### Summary:
        This API action allows users to retrieve earning information based on specific identifiers: earnId, sessionId, and accountId. It requires bearer token authentication to access the data, sends a GET request to the defined URL, and does not utilize additional headers or a request body.
      security:
        - bearerAuth: []
      parameters:
        - name: earnId
          in: query
          schema:
            type: string
          example: earnId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/earn/all:
    get:
      tags:
        - ActionEarn
      summary: Action - Earn - Get All
      description: |-
        ### Endpoint Description: Action - Earn - Get All

        - **Name**: Action - Earn - Get All
          - This is the designation of the API endpoint which indicates that it is used to retrieve all earned actions.

        - **Request**: This section outlines the details of the API request.

          - **Auth**: 
            - **Type**: bearer
              - Authenticates the request using a bearer token.
            - **Bearer**: 
              - **Key**: token
                - The name of the authentication token parameter.
              - **Value**: BearerToken
                - Placeholder for the actual bearer token required for authentication to access the endpoint.
              - **Type**: string
                - Indicates that the value of the bearer token should be a string type.

          - **Method**: GET
            - Specifies that this request will use the HTTP GET method, which is primarily used for retrieving data from the server.

          - **URL**: http://localhost:3000/api/action/earn/all/?sessionId=sessionId&accountId=accountId
            - The complete URL to access the API.
            - **Base URL**: http://localhost:3000/api/action/earn/all/
              - The main endpoint to get all earned actions.
            - **Query Parameters**:
              - **sessionId**: sessionId
                - A placeholder for the session ID, used to track user sessions for authentication or state management.
              - **accountId**: accountId
                - A placeholder for the account ID, representing the specific user account for which actions are being fetched.

          - **Headers**: 
            - An array of headers to be sent with the request.
              - **Key**: (empty)
                - Currently no headers are specified.
              - **Value**: (empty)
                - Current lack of a specific value.
              - **Type**: default
                - Indicates the standard type of header.
              - **Disabled**: true
                - This header is not currently enabled, and thus will not be sent with the request.

          - **Body**: 
            - **Mode**: raw
              - Indicates that the body of the request is in raw format.
            - **Raw**: ""
              - Currently, there is no body content being sent with the GET request, as it is typically not required when fetching data.

        This endpoint is designed for fetching all earned actions associated with a particular session and account. It requires proper authentication via a bearer token and appropriate session and account identifiers in the query parameters.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/earn/delete:
    post:
      tags:
        - ActionEarn
      summary: Action - Earn - Delete
      description: |-
        ### Action - Earn - Delete 

        This endpoint is used to delete an earnings record associated with an account. Below is a detailed description of each component of the request.

        #### Request Components:

        - **Authorization:**
          - **Type:** Bearer
          - **Bearer Token:** 
            - **Key:** token
            - **Value:** sessionId
            - **Type:** string  
            This section requires a bearer token for authentication. The token should be provided in the header of the request, representing the user's session.

        - **Method:** 
          - **HTTP Method:** POST  
          This endpoint uses the POST method to send data to the server for processing.

        - **URL:** 
          - **Endpoint URL:** `http://localhost:3000/api/action/earn/delete`  
          This URL is the endpoint where the delete request will be sent. It is currently configured to point to a local server.

        - **Headers:**
          - **Key:** (none specified)
          - **Value:** (none specified)
          - **Type:** default
          - **Disabled:** true  
          Currently, there are no custom headers specified for this request. This section is configured but not active.

        - **Body:**
          - **Mode:** raw  
          The body of the request is sent in raw format containing JSON data.
          - **Raw Payload:** 
            ```json
            {
              "sessionId": "sessionId",
              "accountId": "accountId",
              "earnId": "earnId"
            }
            ```  
            - **sessionId:** Represents the session identifier for the user. It is required to authenticate the request.
            - **accountId:** This is the unique identifier for the account from which the earnings record will be deleted.
            - **earnId:** This is the unique identifier of the earnings record that is to be deleted. 

        ### Summary:
        This request is designed to facilitate the deletion of a specific earnings record by sending the necessary identifiers in the request body while authenticating the user session with a bearer token.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"earnId\":\"earnId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/feedback/create:
    post:
      tags:
        - ActionFeedback
      summary: Action - Feedback - Create
      description: |-
        ### Action - Feedback - Create Endpoint

        **Request Details:**

        - **Authentication**: The request requires bearer token authentication. The token should be provided in the authorization header.
          - **Key**: `token`
          - **Value**: `BearerToken` (this should be replaced with a valid token)
          - **Type**: The type of authentication being used, which is a string.

        - **HTTP Method**: This request uses the POST method to send data to the server.

        - **URL**: The endpoint for creating feedback is `http://localhost:3000/api/action/feedback/create`. Make sure the server is running on localhost and the correct port is specified.

        - **Headers**: There are no specific headers required except for the bearer token. One default header is present but disabled, which means it won’t be sent.

        **Body Parameters**: The body of the request contains the following fields in JSON format:

        - **sessionId**: A unique identifier for the session during which the feedback is being submitted.
          
        - **accountId**: The identifier associated with the user account providing the feedback.

        - **path**: The path representation of the resource that the feedback is related to. For example, it could reference the location of a video.

        - **targetType**: Specifies the type of target the feedback is directed towards, in this case, it is set to "videoId".

        - **targetId**: The identifier of the video that the feedback is about.

        - **sourceType**: Indicates the type of source the feedback is coming from, which is also set to "accountId" in this case.

        - **sourceId**: This is the identifier for the source account that is providing the feedback.

        - **didFeedback**: A boolean value indicating whether the user has previously provided feedback. Defaults to false.

        - **category**: Specifies the main category of the feedback, such as "Entertainment".

        - **subCategory**: A more specific classification under the main category, in this case it's "Music".

        - **subject**: The subject of the feedback. For example, this could be a description of what the feedback pertains to, set to "Video Feedback".

        - **title**: A short title or summary of the feedback provided, in this case "Great Performance".

        - **name**: The name of the user who is providing the feedback, in this instance "John Doe".

        - **description**: A detailed description of the feedback. For example, "The video was amazing, the performance was top-notch!".

        - **tags**: Keywords associated with the feedback that help categorize it, such as "music, live performance, trending".

        - **didReply**: A boolean flag that indicates whether a reply has been provided in response to the feedback. Initially set to false.

        - **didReview**: A boolean value indicating if the feedback included a review. This is set to true in this case.

        - **replyText**: If applicable, this field would contain the text of any reply provided. It's currently set to an empty string, indicating no reply has been given.

        - **reviewStars**: A numeric rating given in stars (out of a possible maximum, typically 5 stars). In this case, the rating is set to 5.

        ### Summary
        This endpoint allows users to submit feedback related to videos, including categorization, detailed descriptions, and ratings. Users need to provide a valid bearer token for authentication, and all data must be formatted in JSON.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didFeedback: false
                category: Entertainment
                subCategory: Music
                subject: Video Feedback
                title: Great Performance
                name: John Doe
                description: The video was amazing, the performance was top-notch!
                tags: music, live performance, trending
                didReply: false
                didReview: true
                replyText: ''
                reviewStars: 5
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/feedback/update:
    put:
      tags:
        - ActionFeedback
      summary: Action - Feedback - Update
      description: |-
        ### Action - Feedback - Update Endpoint Description

        This endpoint allows users to update feedback related to a specific action. Below are the details of each data field included in the request.

        #### Request Method
        - **Method**: PUT
          - This indicates that the operation is intended to update an existing resource.

        #### Request URL
        - **URL**: `http://localhost:3000/api/action/feedback/update`
          - This is the endpoint where the feedback update request is sent.

        #### Request Authentication
        - **Auth Type**: Bearer Token
          - **Key**: `token`
            - This is the authentication key used to securely identify the user making the request.
          - **Value**: `BearerToken`
            - This value should be replaced with an actual bearer token for authorization.

        #### Request Headers
        - **Header Key**: `Client-UUID`
          - This is a unique identifier for the client making the request.
        - **Value**: `ClientUUID`
          - This should be replaced with the actual UUID of the client.

        #### Request Body
        - **Body Mode**: Raw
          - The body of the request is sent in a raw format as JSON.

        ##### Body Fields:
        - **sessionId**: `sessionId`
          - An identifier for the session during which the feedback was given. This should be replaced with the actual session identifier.

        - **accountId**: `accountId`
          - The unique identifier associated with the user account giving the feedback.

        - **path**: `/live/channel/video123`
          - The path to the resource for which feedback is being provided. This typically includes the context for the feedback, such as a URL to a video.

        - **targetType**: `videoId`
          - Specifies the type of resource the feedback is targeting. In this case, it refers to a video.

        - **targetId**: `videoId`
          - The unique identifier of the target resource that is receiving the feedback.

        - **sourceType**: `accountId`
          - Defines the type of source providing the feedback. It’s usually associated with user accounts.

        - **sourceId**: `accountId`
          - The unique identifier of the feedback source.

        - **didFeedback**: `false`
          - A boolean indicating whether the user has provided feedback. Default is false.

        - **category**: `Entertainment`
          - The primary category under which the feedback falls.

        - **subCategory**: `Music`
          - A more specific categorization of the content related to the feedback.

        - **subject**: `Video Feedback`
          - A brief title summarizing the purpose of the feedback.

        - **title**: `Great Performance`
          - The title of the feedback, summarizing the user's experience or sentiment.

        - **name**: `John Doe`
          - The name of the user providing the feedback.

        - **description**: `The video was amazing, the performance was top-notch!`
          - A detailed description of the feedback, explaining the user's reaction or thoughts regarding the content.

        - **tags**: `music, live performance, trending`
          - A set of keywords related to the feedback, used for categorization and search purposes.

        - **didReply**: `true`
          - A boolean indicating whether there was a response to the original feedback.

        - **didReview**: `true`
          - A boolean indicating whether the user has left a review for the video.

        - **replyText**: `this is updated reply`
          - Text of the reply provided to the feedback, which can be updated as needed.

        - **reviewStars**: `2`
          - A rating given by the user, typically on a scale, indicating their level of satisfaction.

        - **feedbackId**: `feedbackId`
          - A unique identifier for the feedback that is being updated.

        This structure allows for comprehensive updating of feedback for a particular action, providing an efficient way to manage user interactions with content.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didFeedback: false
                category: Entertainment
                subCategory: Music
                subject: Video Feedback
                title: Great Performance
                name: John Doe
                description: The video was amazing, the performance was top-notch!
                tags: music, live performance, trending
                didReply: true
                didReview: true
                replyText: this is updated reply
                reviewStars: 2
                feedbackId: feedbackId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/feedback/get:
    get:
      tags:
        - ActionFeedback
      summary: Action - Feedback - Get
      description: |-
        ### Description of the Endpoint Data

        **Name:**  
        - This identifies the operation as "Action - Feedback - Get," indicating that it retrieves feedback data.

        **Request:**  
        This section contains all the details required to make the API request.

        - **Auth:**  
          - **Type:** Bearer - This means that the request uses bearer token authentication, which is a common method for securing APIs.
          - **Bearer:**  
            - **Key:** Token - This specifies that the key used for the bearer authentication is "token."
            - **Value:** BearerToken - This is a placeholder for the actual token needed to authorize the request. It should be replaced with a valid token before making the request.
            - **Type:** String - Indicates that the value of the token is a string.

        - **Method:**  
          - This specifies the HTTP method to be used for the API request. In this case, it is set to "GET," which means the request is for retrieving data.

        - **URL:**  
          - This is the endpoint to which the request is sent. It consists of:
            - Base URL: `http://localhost:3000/api/action/feedback/get/` - This is the server address and endpoint.
            - Query Parameters:
              - **feedbackId:** This parameter should be provided to specify the ID of the feedback you want to retrieve.
              - **sessionId:** This parameter should be provided to specify the session ID related to the feedback.
              - **accountId:** This parameter should be provided to specify the account ID associated with the feedback.
          
        - **Headers:**  
          - An array of headers that can be sent along with the request. 
            - Currently, there is an empty header entry with default type. It is marked as disabled, meaning it will not be sent with the request.

        - **Body:**  
          - **Mode:** Raw - This indicates the format of the body, which is set to raw text input.
          - **Raw:** This section is currently empty, which means no additional data needs to be sent in the body of the GET request. 

        This endpoint is designed to fetch feedback data based on the provided parameters and requires a valid bearer token for authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: feedbackId
          in: query
          schema:
            type: string
          example: feedbackId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/feedback/all:
    get:
      tags:
        - ActionFeedback
      summary: Action - Feedback - Get All
      description: |-
        ### Action - Feedback - Get All

        **Request Authorization**
        - **Auth Type**: Bearer
          - **Key**: `"token"` - This is the authorization token required for accessing the endpoint. It should be prefixed with "Bearer " followed by the actual token value to ensure proper authentication.

        **Request Method**
        - **Method**: `GET` - This indicates that the HTTP method used for this request is GET. This is typically used to request data from a specified resource.

        **Request URL**
        - **URL**: `http://localhost:3000/api/action/feedback/all/?sessionId=sessionId&accountId=accountId` 
          - This is the endpoint where the request is sent. It includes two query parameters:
            - `sessionId`: This parameter should be replaced with the actual session identifier to specify which session the feedback relates to.
            - `accountId`: This parameter should be replaced with the actual account identifier to specify which account’s feedback is being requested.

        **Request Headers**
        - **Headers**: An array of header objects.
          - Currently, there are no headers specified for this request. However, this section is ready for any additional headers you might need to include in the future.

        **Request Body**
        - **Body Mode**: `raw` - This indicates the format of the request body.
        - **Raw Body**: Empty - There is no body content required for this GET request, as it is used solely to retrieve data.

        This endpoint allows users to fetch all feedback records associated with a specific session and account. The required parameters must be included in the query string for the request to be processed successfully.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/feedback/delete:
    post:
      tags:
        - ActionFeedback
      summary: Action - Feedback - Delete
      description: |-
        {
          "name": "Action - Feedback - Delete",
          "description": {
            "request": {
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "sessionId",
                    "type": "string"
                  }
                ]
              },
              "method": "POST",
              "url": "http://localhost:3000/api/action/feedback/delete",
              "headers": [
                {
                  "key": "",
                  "value": "",
                  "type": "default",
                  "disabled": true
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"feedbackId\":\"feedbackId\"}"
              }
            },
            "details": {
              "method": "POST": "This indicates that the API endpoint expects a POST request, which is commonly used for sending data to the server.",
              "url": "http://localhost:3000/api/action/feedback/delete": "This is the URL of the API endpoint where the feedback deletion request is sent. It's set to a local server address.",
              "auth": "Authentication is done using a bearer token. The token needs to be included in the request to verify the user's identity.",
              "token": "A token labeled 'sessionId' is used as part of the authentication process to grant access to the deletion functionality.",
              "headers": [
                {
                  "key": "": "This placeholder is meant for any additional headers that may be required for the request. Currently, it is empty and disabled."
                }
              ],
              "body": {
                "mode": "raw": "The body of the request is sent as raw JSON data.",
                "raw": "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"feedbackId\":\"feedbackId\"}": "This raw JSON structure contains three fields: 'sessionId' for the user's session, 'accountId' for the specific account associated with the feedback, and 'feedbackId' for the feedback entry that is to be deleted. These must be replaced with actual values when making the request."
              }
            }
          }
        }
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"feedbackId\":\"feedbackId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/flag/create:
    post:
      tags:
        - ActionFlag
      summary: Action - Flag - Create
      description: |-
        **Action - Flag - Create**

        This endpoint is designed to create a flag for a specific content item, typically utilized within a streaming or content management application.

        - **Auth**:
          - **Type**: Bearer
            - This section requires a bearer token for authentication. The bearer token should be passed in the header of the request. 
            - The token format is a string that grants access to the API endpoint.

        - **Method**: 
          - **POST**
            - This method is used to send data to the server for creating a new flag.

        - **URL**: 
          - **http://localhost:3000/api/action/flag/create**
            - This is the endpoint address where the POST request is sent to create a flag.

        - **Headers**: 
          - This section is currently set up but not in use, as both key and value fields are empty and the header is marked as disabled. Generally, headers can convey additional information such as content type or custom parameters.

        - **Body**: 
          - **Mode**: Raw
            - The request body is sent in raw format, which allows for direct input of JSON data.

          - **Raw**:
            - This section contains the JSON data being sent in the body of the request. This includes several fields:
            
            - **sessionId**: 
              - This is a unique identifier for a session, which helps to track user interactions or activities during that session.
              
            - **accountId**: 
              - This represents the user or entity account that is sending the request, typically linked to their profile within the application.

            - **path**: 
              - This indicates the specific path or location of the content, such as the video or streaming channel being flagged. 
              - Example: `/live/channel/video123`.
            
            - **targetType**: 
              - This parameter specifies the type of target being flagged, which in this case is set to `streamer`, indicating that a streamer is the subject of the flagging action.

            - **targetId**: 
              - The unique identifier of the content item or streamer being flagged, providing a way to reference that specific entity.
              - Example: `videoId`.
            
            - **sourceType**: 
              - This defines the type of source initiating the flagging request, which is set to `accountId`, indicating that the account specified is the source.

            - **sourceId**: 
              - This is the identifier for the source, which is expected to match the `accountId` provided earlier.

            - **tokenAmount**: 
              - This denotes the amount of tokens being used or impacted by this action. A value of `20` indicates the number of tokens exchanged, spent, or credited in this operation.

            - **name**: 
              - A label for the flag being created. In this example, it is referred to as `flag1`, which serves as an identifier for the flag in potential later operations or queries.

            - **description**: 
              - This field is currently empty, but it is intended for additional details regarding the nature or purpose of the flag being created.

            - **tags**: 
              - Similar to the description, this field is also empty and can be used to categorize or label the flag with keywords for easier management and retrieval.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: flag1
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/flag/update:
    put:
      tags:
        - ActionFlag
      summary: Action - Flag - Update
      description: |-
        **Action - Flag - Update Endpoint Description**

        - **name**: Indicates the name of the API action, which in this case is "Action - Flag - Update". This name should help users quickly identify the purpose of the request.

        - **request**: This section outlines the details of the HTTP request that will be sent to the API.

          - **auth**: Defines the authentication method used for the request.
          
            - **type**: Specifies the type of authentication; here, it is "bearer", indicating that a bearer token will be used.
            
            - **bearer**: A list containing details about the bearer token required for authentication.
            
              - **key**: The name of the token parameter which is "token".
              
              - **value**: The actual value of the token that needs to be passed; it is labeled as "BearerToken".
              
              - **type**: The data type of the token value, which is "string".

          - **method**: Indicates the HTTP method to be used for the request; it is "PUT", which is typically used to update existing resources.

          - **url**: The endpoint URL to which the request will be sent. In this case, it is "http://localhost:3000/api/action/flag/update".

          - **headers**: A list of HTTP headers to be included with the request.

            - **key**: The name of the header, in this case, "Client-UUID".
            
            - **value**: The value for the header, labeled as "ClientUUID", which is a unique identifier for the client.
            
            - **type**: The type of the header; here it is marked as "default".

          - **body**: Contains the data to be sent with the request.

            - **mode**: Specifies the format of the body content. Here, it is set to "raw", meaning the data will be sent as raw text.
            
            - **raw**: The actual data being sent with the request, formatted as a JSON object. The structure of this JSON is as follows:

              - **sessionId**: A unique identifier for the current session.
              
              - **accountId**: The unique identifier for the account associated with the request.
              
              - **flagId**: The unique identifier for the specific flag being updated.
              
              - **path**: Specifies the location of the resource; in this case, it is "/live/channel/video123".
              
              - **targetType**: Indicates the type of target being updated; here, it specifies "streamer".
              
              - **targetId**: The unique identifier for the target; labeled as "videoId".
              
              - **sourceType**: The type of source of the request; it is labeled as "accountId".
              
              - **sourceId**: The unique identifier for the source, which is also set to "accountId".
              
              - **tokenAmount**: Represents the amount of tokens being adjusted; here, it is set to 20.
              
              - **name**: A label or identifier for the action, in this case, it is "Farooq".
              
              - **description**: A detailed description of the action being taken; stated as "this is description".
              
              - **tags**: Additional tags associated with the action; specified as "xyz".

            - **options**: Additional settings related to the request body format.

              - **raw**: An object specifying the language format of the raw data; it is set to "json", indicating that the body content is formatted as JSON.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                flagId: flagId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: Farooq
                description: this is description
                tags: xyz
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/flag/get:
    get:
      tags:
        - ActionFlag
      summary: Action - Flag - Get
      description: |-
        ### Action - Flag - Get Endpoint Description

        **Name:** Action - Flag - Get
        - This is the identifier for the API request.

        **Request:**
        - This section outlines the details needed to make the API call.

        **Auth:**
        - **Type:** bearer
          - This indicates that the authentication type used for this request is a Bearer token.
          
        - **Bearer:**
          - This section contains details about the token required for authentication.
          - **Key:** token
            - This specifies that the name of the parameter being sent is `token`.
          - **Value:** BearerToken
            - This placeholder is used to represent the actual Bearer token string that must be included for authentication. 
          - **Type:** string
            - This indicates that the value for the token should be of type string.

        **Method:**
        - **GET**
          - This defines the HTTP method used for the request as GET, which is typically used to retrieve data from the specified resource.

        **URL:**
        - `http://localhost:3000/api/action/flag/get/?flagId=flagId&sessionId=sessionId&accountId=accountId`
          - This is the endpoint where the GET request will be sent. It includes query parameters:
            - **flagId:** A parameter expected in the URL to specify the ID of the flag being requested.
            - **sessionId:** A parameter to identify the session associated with the request.
            - **accountId:** A parameter to identify the account related to the action being queried.

        **Headers:**
        - This section normally includes additional metadata, but in this case:
          - **Key:** (empty)
            - There are no specific headers provided in this request.
          - **Value:** (empty)
            - There is no associated value for any headers.
          - **Type:** default
            - Indicates the default type for headers.
          - **Disabled:** true
            - This indicates that any headers listed are currently disabled and will not be sent with the request.

        **Body:**
        - **Mode:** raw
          - This specifies the format for the request body. Since this request is a GET request, typically, a body is not included.
        - **Raw:**
          - It's empty in this case, meaning no data is being sent in the body of the request.

        This endpoint is intended to retrieve information about a specific flag using the provided identifiers while requiring a valid Bearer token for authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: flagId
          in: query
          schema:
            type: string
          example: flagId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/flag/all:
    get:
      tags:
        - ActionFlag
      summary: Action - Flag - Get All
      description: |-
        ### Action - Flag - Get All Endpoint

        #### Request Method
        - **Method**: GET
          - The request uses the HTTP GET method, which is typically used to retrieve data from a specified resource.

        #### Request URL
        - **URL**: `http://localhost:3000/api/action/flag/all/?sessionId=sessionId&accountId=accountId`
          - This is the endpoint to access the action flags. 
          - The URL contains two query parameters:
            - **sessionId**: Identifier for a particular session, used to track the context of a user's session.
            - **accountId**: Identifier for the user account, which specifies which account's data to retrieve.

        #### Authentication
        - **Auth Type**: Bearer
          - The endpoint requires authentication via a Bearer Token. This type of authentication allows access to the resource only if the token is valid.
          
        - **Bearer Token**:
          - **Key**: token
            - This is the identifier for the token in use.
          - **Value**: BearerToken
            - This placeholder represents the actual token that must be provided for authentication. Users should replace "BearerToken" with their valid token.
          - **Type**: string
            - The token is provided as a string.

        #### Request Headers
        - **Headers**: 
          - An empty header object is included but is currently set to disabled. This means no additional headers are being sent with the request.
          
        #### Request Body
        - **Body**: 
          - **Mode**: raw
            - The request does not require a body; it has been specified as 'raw' to indicate that no data is being sent.
          - **Raw**: 
            - The raw body is empty, indicating that there is no data included in the request body for this GET method.

        This endpoint is used for fetching all action flags associated with a particular session and account, ensuring that the request is authenticated with a bearer token.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/flag/delete:
    post:
      tags:
        - ActionFlag
      summary: Action - Flag - Delete
      description: |-
        ### Endpoint Description: Action - Flag - Delete

        #### General Information
        This endpoint is used to delete a flag associated with a specific account within the system. It requires authentication via a bearer token and expects a POST request containing relevant identifiers in the request body.

        #### Request Details

        - **Auth:** 
          - **Type:** Bearer 
            - This indicates that the endpoint requires a bearer token for authentication. The token must be provided in the request to authorize the action.

        - **Bearer Token:** 
          - **Key:** `token`
            - This is the identifier for the token being used.
          - **Value:** `sessionId`
            - This represents the actual token that is needed for authentication. It should be replaced with a valid session identifier.

        - **Method:**
          - **Type:** POST
            - This specifies that the request should be made using the HTTP POST method, which is typically used to send data to the server.

        - **URL:**
          - **Endpoint:** `http://localhost:3000/api/action/flag/delete`
            - This is the address where the request will be sent for flag deletion. Ensure that the base URL changes to the appropriate environment or production URL as needed.

        - **Headers:**
          - **Key:** (Empty)
          - **Value:** (Empty)
          - **Type:** Default
          - **Disabled:** True
            - Currently, no custom headers are specified or required for this request. This section is disabled, indicating it doesn't add any headers to the request.

        - **Body:**
          - **Mode:** Raw
            - Indicates that the body of the request is in raw format, meaning that it contains a direct JSON string.
          - **Raw Content:** 
            ```json
            {
              "sessionId": "sessionId",
              "accountId": "accountId",
              "flagId": "flagId"
            }
            ```
            - This is the JSON structure that must be sent in the request body. It contains the following fields:
              - **sessionId:** This should be replaced with the actual session identifier relevant to the user making the request.
              - **accountId:** This field represents the unique identifier for the account associated with the flag that is being deleted.
              - **flagId:** This is the unique identifier for the flag that needs to be deleted.

        #### Summary
        This endpoint allows users to delete a specified flag for a given account. Proper authentication is required via a bearer token, and it is imperative that the correct session, account, and flag IDs are provided in the body of the request to successfully execute the deletion operation.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"flagId\":\"flagId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/follow/create:
    post:
      tags:
        - ActionFollow
      summary: Action - Follow - Create
      description: |-
        ### Action - Follow - Create Endpoint Description

        **Endpoint Name:** Action - Follow - Create

        **Request Details:**
        - **Authentication:** 
          - The request uses Bearer Token authentication.
          - **Token:** A string value representing the authorization token required to access this endpoint.

        - **HTTP Method:** 
          - This endpoint uses the POST method to send data.

        - **URL:** 
          - The endpoint can be accessed at `http://localhost:3000/api/action/follow/create`.

        - **Headers:**
          - There are no custom headers set, and the default header is disabled.

        - **Body:**
          - The request body is in raw JSON format and includes the following fields:
            - **sessionId:**
              - A unique identifier for the user's session.
            - **accountId:**
              - The identifier of the account that is performing the follow action.
            - **path:**
              - This specifies the path related to the follow action, typically indicating the specific resource being referred to.
            - **targetType:**
              - A string that indicates the type of target associated with the follow action (in this case, a videoId).
            - **targetId:**
              - The identifier for the target resource that is being followed (e.g., a specific video).
            - **sourceType:**
              - This indicates the type associated with the source of the follow action, which is accountId in this case.
            - **sourceId:**
              - An identifier for the source account from which the follow action originates.
            - **didFollow:**
              - A boolean value indicating whether the follow action was successfully completed (true) or not (false).
            - **isUndo:**
              - A boolean value that signifies whether the action is being undone (true for undo; false if it's a new follow).
            - **name:**
              - A string representing a name or title associated with the action.
            - **description:**
              - A string for additional descriptive information about the action (currently empty).
            - **tags:**
              - A field for adding tags related to the follow action (currently empty). 

        This detailed description outlines the purpose and requirements for each data element in the request for the Action - Follow - Create endpoint.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didFollow: true
                isUndo: false
                name: this is name
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/follow/update:
    put:
      tags:
        - ActionFollow
      summary: Action - Follow - Update
      description: |-
        ### Action - Follow - Update Endpoint Description

        #### Request Method
        - **Method**: PUT
            - This request method is used to update an existing resource.

        #### URL
        - **Endpoint URL**: `http://localhost:3000/api/action/follow/update`
            - This is the URL to which the request is sent for updating follow actions.

        #### Authorization
        - **Authorization Type**: Bearer Token
            - This indicates that the request requires a bearer token for authentication.
        - **Token**: 
            - **Key**: `token`
            - **Value**: `BearerToken`
                - This is a placeholder for the actual bearer token that provides authentication.

        #### Headers
        - **Header**: Client-UUID
            - **Key**: `Client-UUID`
            - **Value**: `ClientUUID`
                - This header typically contains the unique identifier for the client making the request.

        #### Body
        - **Body Mode**: Raw
            - This indicates that the request body is sent as raw data.
        - **Raw Data**:
            ```json
            {
                "sessionId": "sessionId",
                "accountId": "accountId",
                "path": "/live/channel/video123",
                "targetType": "videoId",
                "targetId": "videoId",
                "sourceType": "accountId",
                "sourceId": "accountId",
                "didFollow": true,
                "isUndo": false,
                "name": "this is name",
                "description": "",
                "tags": "",
                "followId": "followId"
            }
            ```
            - **sessionId**: This represents the unique identifier for the session in which the follow action is being taken.
            - **accountId**: This is the identifier for the user account associated with the follow action being updated.
            - **path**: Indicates the path or URL where the related content (e.g., live channel) is located.
            - **targetType**: Specifies the type of target being acted upon, in this case, it is a video identifier.
            - **targetId**: The specific identifier of the target (video) that is being followed.
            - **sourceType**: This notes the type of source that is initiating the follow action, here it refers to the account ID.
            - **sourceId**: The unique identifier of the source (account) that is following the target.
            - **didFollow**: A boolean value indicating whether the follow action has been taken (true) or not (false).
            - **isUndo**: A boolean flag indicating if the follow action is being undone (true) or not (false).
            - **name**: An optional field providing a name or title for the action.
            - **description**: An optional field to add any descriptions related to the follow action.
            - **tags**: This field is for adding any relevant tags associated with the follow action, which is currently empty.
            - **followId**: This represents the unique identifier of the follow action being updated.

        ### Summary
        This endpoint is used to update the details of a follow action for a particular video or content, including session and account information, target details, and the action's state. All provided fields must be filled out appropriately to ensure the update is processed correctly.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didFollow: true
                isUndo: false
                name: this is name
                description: ''
                tags: ''
                followId: followId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/follow/get:
    get:
      tags:
        - ActionFollow
      summary: Action - Follow - Get
      description: |-
        ### Description of Each Data in the Endpoint

        - **name**: This represents the name of the API request. In this case, it is "Action - Follow - Get", indicating that this request is related to retrieving follow actions.

        - **request**: This section contains details about the HTTP request being made.

          - **auth**: Specifies the authentication method for the request.
            - **type**: Indicates the type of authentication used. Here, it is "bearer", which typically involves a token-based system.
            - **bearer**: An array that contains bearer token details needed for authentication.
              - **key**: This is the name of the token provided in the authorization header. Here, it is "token".
              - **value**: The actual token used for authentication. It is prefixed with "Bearer" to signify that it is a bearer token. In this case, the value is "BearerToken" (this should be replaced with a real token in implementation).
              - **type**: Defines the data type of the token, which is "string".

          - **method**: This defines the HTTP method used for the request. It is "GET", which indicates that the request is intended to retrieve data from the server.

          - **url**: The endpoint URL where the request is to be sent. The URL is structured as follows:
            - **Base URL**: `http://localhost:3000/api/action/follow/get/`
            - **Query Parameters**:
              - **followId**: This parameter (value should be replaced with actual follow ID) is used to specify which follow action to retrieve.
              - **sessionId**: This parameter (value should be replaced with actual session ID) indicates the current user session.
              - **accountId**: This parameter (value should be replaced with actual account ID) identifies the account from which the follow action information is being fetched.

          - **headers**: This section is meant for HTTP headers that might be required for the request.
            - **key**: The name of the header. In this case, it is left empty.
            - **value**: The value associated with the header. It is also empty.
            - **type**: Indicates the type of header being defined. Here, it is set to "default".
            - **disabled**: This boolean value indicates whether the header is active or not. It is set to true, meaning the header will be ignored in the request.

          - **body**: This section represents the body of the request.
            - **mode**: Indicates the type of body being sent. It is set to "raw".
            - **raw**: This field contains the actual payload to be sent in the request. In this case, it is empty, signifying that no body content is sent with the GET request.
      security:
        - bearerAuth: []
      parameters:
        - name: followId
          in: query
          schema:
            type: string
          example: followId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/follow/all:
    get:
      tags:
        - ActionFollow
      summary: Action - Follow - Get All
      description: |-
        **Endpoint Description**

        **Name**: Action - Follow - Get All  
        This endpoint is used to retrieve all follow actions associated with a specific session and account.

        **Request Details**:

        1. **Authorization**: 
           - **Type**: Bearer
             - This indicates that the API uses bearer token authentication. 
           - **Bearer Token**: 
             - **Key**: token
             - **Value**: BearerToken
             - **Type**: string
             - The value 'BearerToken' should be replaced with an actual token that authenticates the user making the request. The token grants access to the API.

        2. **Method**: 
           - **GET**: 
             - This HTTP method is used to request data from the server. In this case, it fetches data related to follow actions.

        3. **URL**: 
           - **Endpoint**: http://localhost:3000/api/action/follow/all/
             - This is the base URL that directs the request to the API endpoint responsible for handling follow actions.
           - **Query Parameters**: 
             - **sessionId**: sessionId
               - Replace this with the actual session ID to specify which user's session data to retrieve.
             - **accountId**: accountId
               - Replace this with the actual account ID to identify which account's follow actions you want to fetch.

        4. **Headers**: 
           - An array that could contain custom headers, but in this case, it is currently empty.
           - The provided header configuration is disabled, meaning no additional headers will be sent with this request.

        5. **Body**: 
           - **Mode**: raw
             - This indicates that there is no body content required for this GET request.
           - **Raw**: An empty string, as the GET method typically does not send a body.

        This endpoint will return all follow actions linked to the specified session and account, given the correct authentication and parameter values.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/follow/delete:
    post:
      tags:
        - ActionFollow
      summary: Action - Follow - Delete
      description: |-
        ### Action - Follow - Delete Endpoint Description

        - **Name**: Action - Follow - Delete
          - This is the name of the endpoint which clearly indicates that it is used to delete a follow action.

        - **Request**: 
          - This section details the characteristics of the HTTP request to be made to the endpoint.

          - **Auth**:
            - **Type**: Bearer
              - This indicates that the request requires bearer token authentication, which typically involves including a token as part of the request headers.
              
            - **Bearer**:
              - **Key**: token
                - This specifies the name of the authentication token being used.
                
              - **Value**: sessionId
                - This indicates the placeholder value for the session ID, which should be replaced with the actual session ID when making a request.
              
              - **Type**: string
                - This designates that the value of the token is in string format.

          - **Method**: POST
            - This indicates that the HTTP method being used for the request is POST. It implies that the request is intended to send data to the server.

          - **URL**: http://localhost:3000/api/action/follow/delete
            - This is the endpoint's URL where the request will be sent. It is structured to point to the local server for action follow deletion.

          - **Headers**:
            - This section contains any additional header information for the request. 
              - **Key**: (Empty)
                - Indicates that there are currently no additional headers set for this request.
              
              - **Value**: (Empty)
                - Indicates that there is no value associated with the empty key.
              
              - **Type**: default
                - Specifies the default type of the header.
              
              - **Disabled**: true
                - Indicates that any current headers are disabled (not sent with the request).

          - **Body**:
            - This section defines the body of the request, which contains the data being sent to the server.
            
            - **Mode**: raw
              - Specifies that the body content is sent in raw format, meaning it won't be encoded or serialized in a certain way.
              
            - **Raw**: 
              - `{"sessionId":"sessionId","accountId":"accountId","followId":"followId"}`
                - This is the actual payload of the POST request. It is in JSON format and contains three properties:
                  - **sessionId**: A placeholder for the session identifier that the user will need to provide.
                  - **accountId**: A placeholder for the account ID that identifies the user whose follow action is to be deleted.
                  - **followId**: A placeholder for the follow ID that represents the following action to be deleted. 

        Ensure to replace the placeholders with actual values when making a request to delete a follow action.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"followId\":\"followId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/gift/create:
    post:
      tags:
        - ActionGift
      summary: Action - Gift - Create
      description: |-
        ### Action - Gift - Create Endpoint Description

        **Endpoint**: This endpoint is used to create a gift action within the application. 

        **HTTP Method**: POST

        **URL**: `http://localhost:3000/api/action/gift/create`

        #### Authentication:
        - **Type**: Bearer authentication
        - **Bearer Token**: Include a valid token for authentication purposes. The token should be prefixed with `Bearer ` followed by the actual token string.

        #### Request Body Parameters:
        - **sessionId**: A unique identifier for the user session. This helps in managing user interactions during their session.
        - **accountId**: The identifier for the user’s account. It represents the user who is sending the gift.
        - **path**: The resource path where the action is being directed, typically a URL representing the content (e.g., a live stream).
        - **targetType**: Specifies the type of target for the gift. In this case, it is identified as `videoId`, indicating that the gift is directed towards a specific video.
        - **targetId**: The unique identifier for the target, which corresponds to the `videoId` being gifted to.
        - **sourceType**: Indicates the type of source for the gift, which is identified as `accountId`, showing that the gift's origin is from an account.
        - **sourceId**: The unique identifier for the source, matching the `accountId` from which the gift is sent.
        - **giftType**: Defines the type of gift being sent. For this request, it is a `sticker`.
        - **UtilityType**: Indicates the type of utility that the gift action uses, in this case, it is `token`, suggesting that tokens are being spent to send the gift.
        - **didGift**: A boolean value (true/false) that indicates whether the gift action has been successfully executed.
        - **tokenAmount**: Represents the number of tokens being used to send the gift. This is a numerical value indicating the cost of the gift.
        - **name**: A name or title for the gift action. This could be a descriptive label or the name of the gift.
        - **description**: An optional field to provide additional details about the gift. If not needed, this can be left empty.
        - **tags**: Optional field for any tags associated with the gift. This can help in categorizing or labeling the gift for easy identification.

        ### Headers:
        - No custom headers are defined for this request, and the default header has been disabled.

        This endpoint allows users to send gifts within the application by providing necessary parameters related to the session, account, and gift specifications. Be sure to replace the placeholder values with actual data for successful requests.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                giftType: sticker
                UtilityType: token
                didGift: true
                tokenAmount: 20
                name: name
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/gift/update:
    put:
      tags:
        - ActionGift
      summary: Action - Gift - Update
      description: |-
        {
          "description": {
            "name": "Action - Gift - Update",
            "request": {
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "BearerToken",
                    "type": "string"
                  }
                ]
              },
              "method": "PUT",
              "url": "http://localhost:3000/api/action/gift/update",
              "headers": [
                {
                  "key": "Client-UUID",
                  "value": "ClientUUID",
                  "type": "default"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n    \"sessionId\": \"sessionId\",\n    \"accountId\": \"accountId\",\n    \"path\": \"/live/channel/video123\",\n    \"targetType\": \"videoId\",\n    \"targetId\": \"videoId\",\n    \"sourceType\": \"accountId\",\n    \"sourceId\": \"accountId\",\n    \"giftType\": \"sticker\",\n    \"UtilityType\": \"token\",\n    \"didGift\": true,\n    \"tokenAmount\": 20,\n    \"name\": \"updated name\",\n    \"description\": \"\",\n    \"tags\": \"\",\n    \"giftId\":\"giftId\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            }
          },
          "details": {
            "sessionId": "Unique identifier for the session during which the gift action is being updated.",
            "accountId": "Identifier for the account associated with the gift transaction.",
            "path": "The specific path or URL related to the content or channel where the gift is being sent, formatted as a string.",
            "targetType": "Indicates the type of target receiving the gift, in this case, a video ID.",
            "targetId": "Identifier for the target entity (like a video) that is receiving the gift.",
            "sourceType": "Type of source making the gift, noted here as an account ID.",
            "sourceId": "Identifier for the source entity (like an account) sending the gift.",
            "giftType": "Specifies the type of gift being sent, which is a sticker in this case.",
            "UtilityType": "Defines the type of utility used for the gift transaction, denoted as token.",
            "didGift": "Boolean value indicating whether the gift action was successfully processed (true) or not (false).",
            "tokenAmount": "Number of tokens involved in the gift action, set to 20.",
            "name": "Updated name or label for the gift being processed.",
            "description": "A field for further details or description of the gift; currently left empty.",
            "tags": "Optional tags for categorizing or describing the gift; currently left empty.",
            "giftId": "Unique identifier for the gift being updated."
          }
        }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                giftType: sticker
                UtilityType: token
                didGift: true
                tokenAmount: 20
                name: updated name
                description: ''
                tags: ''
                giftId: giftId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/gift/get:
    get:
      tags:
        - ActionGift
      summary: Action - Gift - Get
      description: |-
        **Endpoint Name: Action - Gift - Get**

        **Request Information:**
        - **Auth:** This section specifies that the request requires bearer token authentication. A bearer token is a type of access token used to authorize API requests, indicating that the client has the appropriate permissions to access the requested resource.
          - **Type:** The authentication type is "bearer."
          - **Bearer:** This array contains details for the bearer token.
            - **Key:** This indicates that the token is identified by the string "token."
            - **Value:** This placeholder "BearerToken" denotes where the actual token should be placed for authentication.
            - **Type:** This specifies the type of value expected for the token, which is a string.

        - **Method:** The HTTP request method used is "GET." This method is typically used to retrieve data from a specified resource.

        - **URL:** This is the endpoint's URL where the request is sent. It follows the structure:
          - `http://localhost:3000/api/action/gift/get/?giftId=giftId&sessionId=sessionId&accountId=accountId`
            - **localhost:** This indicates that the API is hosted locally on the machine being used.
            - **api/action/gift/get/:** This part describes the specific resource being accessed, in this case, to get a gift action.
            - **Query Parameters:**
              - `giftId`: This parameter represents the unique identifier for the gift being requested.
              - `sessionId`: This parameter refers to the unique identifier for the session associated with the request.
              - `accountId`: This parameter indicates the unique identifier for the account making the request.

        - **Headers:** This section includes HTTP headers that can be sent with the request. 
          - **Key:** There is a key placeholder that is empty, which implies no specific custom headers are needed.
          - **Value:** The value is also empty.
          - **Type:** The type is marked as "default."
          - **Disabled:** This setting is true, indicating that this header is currently inactive and will not be sent with the request.

        - **Body:** This section configures the body of the request.
          - **Mode:** The mode is set to "raw," which means that the body of the request is a raw string and not one of the predefined formats like JSON or form data.
          - **Raw:** The raw body is empty, suggesting that no data is sent with the body of the GET request, aligning with the typical usage of GET methods where body data is not generally included. 

        In summary, this endpoint retrieves gift information using specified identifiers for the gift, session, and account, authenticated via a bearer token.
      security:
        - bearerAuth: []
      parameters:
        - name: giftId
          in: query
          schema:
            type: string
          example: giftId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/gift/all:
    get:
      tags:
        - ActionGift
      summary: Action - Gift - Get All
      description: |-
        ### Description of the API Endpoint "Action - Gift - Get All"

        #### Name
        - **Action - Gift - Get All**: This is the name of the API endpoint, indicating its purpose to retrieve all gift actions.

        #### Request
        - **Auth**: Defines the authentication required to access the endpoint.
          - **Type**: Indicates the type of authentication. Set to `bearer`, meaning a bearer token is required for authorization.
          - **Bearer**: An array that contains the token information.
            - **Key**: This specifies the type of authentication token being used, labeled as `token`.
            - **Value**: The actual token value which is used to authenticate the request, currently set as `BearerToken`, which should be replaced with an actual token.
            - **Type**: This indicates the data type of the token, specified as `string`.

        - **Method**: 
          - **GET**: This specifies the HTTP method used for the request, which is `GET`. This method is typically used to retrieve data from a specified resource.

        - **URL**: 
          - This is the endpoint URL where the request is sent. It comprises several parameters:
            - `http://localhost:3000/api/action/gift/all/`: The base URL for accessing all gift actions.
            - `?sessionId=sessionId`: A query parameter where `sessionId` should be replaced with an actual session ID that relates to the user's session.
            - `&accountId=accountId`: Another query parameter where `accountId` should be substituted with the actual account ID of the user making the request.

        - **Headers**: 
          - This section captures any header information that should be included with the request.
            - **Key**: Currently empty, which means no specific header key is being sent.
            - **Value**: Also empty, indicating no corresponding header value is being sent.
            - **Type**: Default, which means the header type is standard.
            - **Disabled**: Set to true, which means that this header will not be sent with the request.

        - **Body**: 
          - **Mode**: 
            - **Raw**: Indicates that the body format for the request is raw text.
          - **Raw**: 
            - The body is currently empty, indicating that no additional data needs to be sent with the GET request. 

        This endpoint is designed to fetch all available gift actions for the user specified by the session and account ID.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/gift/delete:
    post:
      tags:
        - ActionGift
      summary: Action - Gift - Delete
      description: |-
        ### Action - Gift - Delete Description

        - **Name**: This is the name of the API action, which indicates that it pertains to deleting a gift. 

        - **Request**: This section outlines the specifications needed for the API call.

          - **Auth**: Details the type of authentication required for this request.
            - **Type**: Specifies that the authentication type is "bearer".
            - **Bearer**: An array that contains the authentication details.
              - **Key**: The key for the bearer token, which is "token".
              - **Value**: Represents the session ID used for authentication. Replace "sessionId" with the actual session ID string when making the request.
              - **Type**: Indicates the type of value being passed, which is "string".

          - **Method**: This indicates the HTTP method used for the request. In this case, it is "POST", meaning this action will send data to the server to delete a gift.

          - **URL**: The endpoint this request targets. The URL is `http://localhost:3000/api/action/gift/delete`, which denotes that the request will be sent to a local server to delete a gift.

          - **Headers**: This section contains any custom headers needed for the request.
            - **Key**: There is no key provided in this example.
            - **Value**: There is no value provided in this example.
            - **Type**: Setting is "default", and this header is currently disabled, meaning it will not be sent with the request.

          - **Body**: This section describes the data you need to send with the request.
            - **Mode**: Indicates that the body is sent in "raw" format.
            - **Raw**: Contains the JSON string that includes the necessary information to delete a gift. The body must include:
              - **sessionId**: The ID used for the user session, replace "sessionId" with the actual session ID.
              - **accountId**: The ID of the account that owns the gift, replace "accountId" with the actual account ID.
              - **giftId**: The ID of the gift that is to be deleted, replace "giftId" with the actual gift ID. 

        Make sure to swap out placeholder values with actual data when performing this API call.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"giftId\":\"giftId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/hold/create:
    post:
      tags:
        - ActionHold
      summary: Action - Hold - Create
      description: |-
        {
          "name": "Action - Hold - Create",
          "description": "This API endpoint is designed to create a hold action for a specific target, typically in a streaming context. Users can specify various parameters for the hold action, allowing for customization based on the session and account details.",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "BearerToken",
                  "type": "string"
                }
              ],
              "description": "This is a bearer token authentication mechanism. Users need to provide a valid bearer token to authorize the request. Ensure that 'BearerToken' is replaced with an actual valid token."
            },
            "method": "POST",
            "description": "This API uses the POST method, indicating that data is being sent to the server to create a new hold action.",
            "url": "http://localhost:3000/api/action/hold/create",
            "description": "This is the endpoint URL where the hold action request is sent. It is hosted locally on port 3000.",
            "headers": [
              {
                "key": "",
                "value": "",
                "type": "default",
                "disabled": true
              }
            ],
            "description": "Currently, there are no additional headers specified for this request. However, if required, users can add relevant headers such as Content-Type or Accept, depending on their needs.",
            "body": {
              "mode": "raw",
              "description": "The body of the request is in raw format, structured as a JSON object. It contains the necessary information to create the hold action.",
              "raw": "{\n    \"sessionId\": \"sessionId\",\n    \"accountId\": \"accountId\",\n    \"path\": \"/live/channel/video123\",\n    \"targetType\": \"streamer\",\n    \"targetId\": \"videoId\",\n    \"sourceType\": \"accountId\",\n    \"sourceId\": \"accountId\",\n    \"tokenAmount\": 20,\n    \"name\": \"hold1\",\n    \"description\": \"\",\n    \"tags\": \"\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              },
              "description": {
                "sessionId": {
                  "description": "Unique identifier for the current session. This helps in tracking the hold action within that session."
                },
                "accountId": {
                  "description": "Identifier for the account that is initiating the hold action. This is used to associate the hold with the correct user account."
                },
                "path": {
                  "description": "The path of the live channel related to the hold action. It generally indicates where the content is being streamed, e.g., '/live/channel/video123'."
                },
                "targetType": {
                  "description": "Specifies the type of target for the hold action. For instance, 'streamer' indicates that the hold is placed on a streamer."
                },
                "targetId": {
                  "description": "Unique identifier for the target of the hold action, typically the video ID of the content that the user is holding."
                },
                "sourceType": {
                  "description": "Defines the source type for the hold. In this case, it is set to 'accountId'."
                },
                "sourceId": {
                  "description": "Identifier of the source from which the hold is initiated. It is usually the same as accountId."
                },
                "tokenAmount": {
                  "description": "Represents the amount of tokens assigned to the hold action. In this case, it is set to 20 tokens."
                },
                "name": {
                  "description": "A given name for the hold action, in this example, it is 'hold1'. This helps to identify the action easily."
                },
                "description": {
                  "description": "An optional field for providing additional details about the hold action. Currently, it is left empty."
                },
                "tags": {
                  "description": "An optional field for adding tags to the hold action. This field is also currently empty."
                }
              }
            }
          }
        }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: hold1
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/hold/update:
    put:
      tags:
        - ActionHold
      summary: Action - Hold - Update
      description: |-
        #### Action - Hold - Update

        **Request Authentication**
        - **Type:** Bearer
          - **Token:** The authorization token provided for accessing this API endpoint. This should be in the format "Bearer <token>", where "<token>" is the actual bearer token you have received for authentication.

        **HTTP Method**
        - **Method:** PUT 
          - This indicates that the request is meant to update existing resources at the specified URL.

        **URL**
        - **Endpoint URL:** `http://localhost:3000/api/action/hold/update` 
          - This is the endpoint where the update request will be sent. It manages actions related to a "hold" update.

        **Headers**
        - **Client-UUID:** 
          - A unique identifier for the client making the request. It is used to identify and authorize the client in the system.

        **Request Body**
        - **Mode:** Raw
          - The request body is being sent in raw format, specifically as JSON.

        - **Raw JSON Body:**
          - This contains the following fields:
          
          1. **sessionId:** 
             - A unique identifier for the session. It helps in tracking the current user's session.
          
          2. **accountId:** 
             - The unique identifier for the account associated with the hold. This indicates which user's account is being updated.
          
          3. **holdId:** 
             - The identifier for the specific hold that is being updated. It points to the current hold in the system.
          
          4. **path:** 
             - The path or URL where the resource is located. In this case, it is pointing to a live channel, "/live/channel/video123".
          
          5. **targetType:** 
             - Indicates the type of target impacted by the hold action. In this case, it specifies that the target is a "streamer".
          
          6. **targetId:** 
             - The unique identifier for the target, which in this context is the video ID (e.g., "videoId") associated with the hold.
          
          7. **sourceType:** 
             - The type of the source associated with the hold. Here, it refers to an "accountId".
          
          8. **sourceId:** 
             - The unique identifier for the source, specifically linking back to the account ID involved in this action.
          
          9. **tokenAmount:** 
             - The number of tokens associated with this hold action. In this case, it is set to 20.
          
          10. **name:** 
              - A descriptive name for the hold or action. For instance, "Farooq" is likely a user or hold name.
          
          11. **description:** 
              - A textual description providing more context about the hold. Here it's marked as "this is description".
          
          12. **tags:** 
              - Tags related to this hold action. Here it is marked as "xyz" which could be used for categorization or filtering.

        **Body Options**
        - **Options:**
          - **Raw Language:** JSON
            - Specifies the format of the raw body content being sent which is JSON.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                holdId: holdId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: Farooq
                description: this is description
                tags: xyz
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/hold/get:
    get:
      tags:
        - ActionHold
      summary: Action - Hold - Get
      description: |-
        {
          "name": "Action - Hold - Get",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "BearerToken",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "url": "http://localhost:3000/api/action/hold/get/?holdId=holdId&sessionId=sessionId&accountId=accountId",
            "headers": [
              {
                "key": "",
                "value": "",
                "type": "default",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            }
          }
        }

        ### Description of Each Data

        - **name**: This specifies the name of the API request. In this case, it is "Action - Hold - Get", indicating that this request is intended to retrieve information related to an action hold.

        - **request**: This object contains all the details of the API request being made.

          - **auth**: This is the authentication method used for the request.
            
            - **type**: Indicates the type of authentication being used; in this instance, it is "bearer", which means that a bearer token is required to authorize the request.

            - **bearer**: This is an array that contains authentication token details.

              - **key**: Represents the name of the token, which is "token" in this case.

              - **value**: This holds the actual bearer token value, represented here as "BearerToken". This token is required to authenticate the user making the request.

              - **type**: Defines the data type of the token, which is "string" in this instance.

          - **method**: Specifies the HTTP method to be used for the request. Here, "GET" indicates that this request is retrieving data from the server.

          - **url**: This is the endpoint URL where the request is being sent. The URL includes query parameters:
            
            - **holdId**: Represents the ID of the hold that is being queried. It is marked here as a placeholder "holdId".

            - **sessionId**: Represents the session's ID, which helps identify the session associated with this action. It is shown as a placeholder "sessionId".

            - **accountId**: This indicates the account ID to be used in the request. It is labeled as a placeholder "accountId".

          - **headers**: This array allows the inclusion of HTTP headers for the request.
            
            - **key**: The name of the header is currently empty, indicating that no custom headers are added.

            - **value**: The value of the header is also empty.

            - **type**: Specifies the type of the header; here it's set as "default".

            - **disabled**: A boolean value indicating whether this header is disabled for this request. Currently set to true, meaning this header will not be sent.

          - **body**: This describes the body of the request.

            - **mode**: Indicates the body format being used. In this case, it is "raw", meaning the body is expected to be sent as raw data rather than as form data or other formats.

            - **raw**: This field holds the actual content of the body. It is empty here, meaning no body content is required for this GET request.
      security:
        - bearerAuth: []
      parameters:
        - name: holdId
          in: query
          schema:
            type: string
          example: holdId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/hold/all:
    get:
      tags:
        - ActionHold
      summary: Action - Hold - Get All
      description: |-
        ### Action - Hold - Get All

        This endpoint is used to retrieve a list of all actions that are currently on hold. Below are the details of each component in the endpoint:

        - **name**: 
          - "Action - Hold - Get All"
          - This is the identifier for the API request, indicating the purpose of the request.

        - **request**: 
          - This section contains all the necessary information to make the API call.

          - **auth**: 
            - This field specifies the authentication method required to access the endpoint.
            
            - **type**: 
              - "bearer"
              - Indicates that bearer token authentication is used.

            - **bearer**: 
              - This is an array that contains details about the authorization token.
              
              - **key**: 
                - "token"
                - The name of the property in the array that holds the token.
                
              - **value**: 
                - "BearerToken"
                - Placeholder for the actual token required for authentication. Users need to replace this with their valid bearer token.
                
              - **type**: 
                - "string"
                - Specifies that the value of the token is a string.

          - **method**: 
            - "GET"
            - This indicates that the request method is GET, meaning it will retrieve data from the server without modifying any resources.

          - **url**: 
            - "http://localhost:3000/api/action/hold/all/?sessionId=sessionId&accountId=accountId"
            - The endpoint URL where the request will be sent. 
            - It includes query parameters:
              - **sessionId**: A placeholder for the session identifier. Users must provide a valid session ID.
              - **accountId**: A placeholder for the account identifier. Users must provide a valid account ID.

          - **headers**: 
            - This section is for any additional headers that may be required in the request.
            
            - **key**: 
              - An empty string indicates that no custom headers are specified.
              
            - **value**: 
              - An empty string indicates that no value is associated with a custom header.
              
            - **type**: 
              - "default"
              - Indicates that this is a default header type.
              
            - **disabled**: 
              - true
              - This signifies that the header is currently disabled and will not be sent with the request.

          - **body**: 
            - This part is used to define the body of the request.

            - **mode**: 
              - "raw"
              - Indicates that the body of the request is in raw format.

            - **raw**: 
              - An empty string indicates that no raw body content is being sent with the request.

        This structure should help users understand how to utilize the "Action - Hold - Get All" endpoint effectively.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/hold/delete:
    post:
      tags:
        - ActionHold
      summary: Action - Hold - Delete
      description: |
        ### Endpoint: Action - Hold - Delete

        **Name:** Action - Hold - Delete  
        This describes a request designed to delete a hold action in the system.

        **Request Details:**

        - **Auth:**  
          - **Type:** Bearer  
            This indicates that the request uses bearer token authentication. This method requires a token to be sent along with the request to prove its authenticity.

          - **Bearer:**  
            - **Key:** token  
              This is the name of the authentication key that will carry the session identifier.  
            - **Value:** sessionId  
              This placeholder represents the actual session ID that must be provided to authenticate the request.  
            - **Type:** string  
              The type indicates that the value for the token must be a string.

        - **Method:** POST  
          This indicates that the request uses the POST method, which is typically used for sending data to a server to create or update a resource.

        - **URL:** `http://localhost:3000/api/action/hold/delete`  
          This is the endpoint where the request is sent. It is hosted on localhost and specifies the delete action for a hold.

        - **Headers:**  
          This section is currently empty, meaning no specific headers are set for the request.  
          - **Key:** ""  
            No header key is provided.  
          - **Value:** ""  
            No header value is provided.  
          - **Type:** default  
            This indicates that the header type is default but no additional header is actively being used.  
          - **Disabled:** true  
            This means that this particular header is not active or in use.

        - **Body:**  
          The body of the request contains data necessary to perform the delete action.  
          - **Mode:** raw  
            Indicates that the body content is sent in raw, unformatted JSON.  
          - **Raw:**  
            The actual content being sent is:  
            `{"sessionId":"sessionId","accountId":"accountId","holdId":"holdId"}`  
            This JSON object needs to be populated with real values:
            - **sessionId:** the session identifier for the user making the request.
            - **accountId:** the identifier for the account associated with the hold to be deleted.
            - **holdId:** the identifier for the specific hold that is being deleted.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"holdId\":\"holdId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/ignore/create:
    post:
      tags:
        - ActionIgnore
      summary: Action - Ignore - Create
      description: |-
        ### Description of Data for the Endpoint: Action - Ignore - Create

        - **name**: "Action - Ignore - Create"
          - This is the name of the API request. It indicates that this particular request is used for creating an action that involves ignoring something.

        - **request**: 
          - This section describes the details of the API request being made.

          - **auth**: 
            - This specifies the authentication method used for the request.
            
            - **type**: "bearer"
              - Indicates that the bearer token authentication method is used to authorize requests.

            - **bearer**: 
              - This array holds objects with token details.

              - **key**: "token"
                - This is the label for the bearer token.

              - **value**: "BearerToken"
                - This is where the actual bearer token string should be placed to authorize the API request.

              - **type**: "string"
                - Specifies the data type for the bearer token value.

          - **method**: "POST"
            - This indicates that the request uses the POST HTTP method to send data to the server.

          - **url**: "http://localhost:3000/api/action/ignore/create"
            - This is the URL endpoint to which the request is sent. It points to the local server at port 3000 and specifies the action to create an ignore action.

          - **headers**: 
            - This section is for any headers to be included in the request.

            - **key**: ""
              - Currently, this header does not have a specified key, meaning it is not being utilized.

            - **value**: ""
              - Corresponding value for the header is also not set.

            - **type**: "default"
              - This indicates that the header type is standard.

            - **disabled**: true
              - This indicates that the header is disabled and will not be sent with the request.

          - **body**: 
            - This section contains the data that will be sent with the POST request.

            - **mode**: "raw"
              - The body mode indicates that the raw data will be sent in the request.

            - **raw**: 
              - This is the actual raw data being sent, formatted as JSON:

                ```json
                {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "path": "/live/channel/video123",
                  "targetType": "videoId",
                  "targetId": "videoId",
                  "sourceType": "accountId",
                  "sourceId": "accountId",
                  "didIgnore": false,
                  "name": "sss",
                  "description": "",
                  "tags": ""
                }
                ```

              - **sessionId**: "sessionId"
                - This represents the unique identifier for the current session.

              - **accountId**: "accountId"
                - This specifies the account's unique identifier that is associated with the action.

              - **path**: "/live/channel/video123"
                - This indicates the specific path for the resource related to the action.

              - **targetType**: "videoId"
                - This defines the type of target that the action will focus on. In this case, it's a video identified by `videoId`.

              - **targetId**: "videoId"
                - This is the unique identifier for the target resource (video) that is being ignored.

              - **sourceType**: "accountId"
                - This specifies that the source type is based on the account's identifier.

              - **sourceId**: "accountId"
                - This indicates the identifier of the source, which is the account related to this action.

              - **didIgnore**: false
                - This boolean value indicates whether the action of ignoring has been performed. Here, it is set to false, meaning it has not been ignored yet.

              - **name**: "sss"
                - This field holds a name associated with the ignore action. 

              - **description**: ""
                - This field is a placeholder for a description of the ignore action. It is currently empty.

              - **tags**: ""
                - This is a placeholder for any tags related to the ignore action. It is currently empty.

            - **options**: 
              - This section specifies additional options for the body.

              - **raw**: 
                - This specifies the format of the raw data.

                - **language**: "json"
                  - Indicates that the raw body is formatted in JSON.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didIgnore: false
                name: sss
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/ignore/update:
    put:
      tags:
        - ActionIgnore
      summary: Action - Ignore - Update
      description: |-
        ### POSTMAN API Collection Description

        #### Endpoint Name: Action - Ignore - Update

        This endpoint is designed to update the ignored status of specific actions in the system. Below is a detailed breakdown of each data field within the request.

        ##### Request Method
        - **Method**: `PUT`
            - This method is used to update existing resources in the server.

        ##### Request URL
        - **URL**: `http://localhost:3000/api/action/ignore/update`
            - This is the endpoint where the request will be sent to update the ignore action.

        ##### Authorization
        - **Auth**:
            - **Type**: `Bearer`
                - This specification indicates that the request requires a Bearer Token for authorization.
            - **Bearer Token**:
                - **Key**: `token`
                    - The key for passing the token in the authorization header.
                - **Value**: `BearerToken`
                    - The actual token used for authorization. Replace `BearerToken` with your real token before making a request.
                - **Type**: `string`
                    - Indicates that the value should be treated as a string.

        ##### Headers
        - **Headers**:
            - **Key**: `Client-UUID`
                - This is a custom header required to uniquely identify the client making the request.
            - **Value**: `ClientUUID`
                - Replace `ClientUUID` with the actual UUID of your client for proper identification.

        ##### Body
        - **Body**:
            - **Mode**: `raw`
                - Indicates that the body content is to be sent as raw data.
            - **Raw Content**: 
                - The content of the body should be in JSON format. Below is a breakdown of each attribute within the JSON body:
                ```json
                {
                    "sessionId": "sessionId",       // Unique identifier for the session related to the action.
                    "accountId": "accountId",       // The ID of the account that the action is associated with.
                    "path": "/live/channel/video123", // The specific path to the resource that is being updated.
                    "targetType": "videoId",        // The type of target being referenced, here it is a video ID.
                    "targetId": "videoId",          // The unique identifier of the target resource (e.g., video).
                    "sourceType": "accountId",      // The type of source being referenced, typically an account ID.
                    "sourceId": "accountId",        // The unique identifier of the source resource (e.g., account).
                    "didIgnore": false,             // A boolean indicating whether the action has been ignored or not.
                    "name": "",                     // An optional name for the action, if applicable.
                    "description": "",              // An optional description providing more details about the action.
                    "tags": "",                     // Tags associated with the action for categorization; can be empty.
                    "ignoreId": "ignoreId"         // Unique identifier for the ignoring action; needed for updates.
                }
                ```
            - **Options**: 
                - **Raw**: 
                    - **Language**: `json`
                        - Specifies that the format of the raw data is JSON.

        This endpoint is essential for managing ignore actions within the system, allowing users to update the ignore status as necessary. Make sure to fill in the placeholders with real data before making the API call.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didIgnore: false
                name: ''
                description: ''
                tags: ''
                ignoreId: ignoreId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/ignore/get:
    get:
      tags:
        - ActionIgnore
      summary: Action - Ignore - Get
      description: |-
        ### Endpoint Description: Action - Ignore - Get

        - **Name**: Action - Ignore - Get
          - This is the title of the request, indicating that this endpoint is for retrieving information related to the action of ignoring something.

        - **Request**: This section contains the details of how to make the API request.
          
          - **Auth**: 
            - **Type**: bearer
              - This specifies that the authentication method used for this request is Bearer Token authentication.
            - **Bearer**: 
              - A list containing an object that stores the bearer token for authentication. 
                - **Key**: token 
                  - This is the identifier for the token.
                - **Value**: BearerToken
                  - This is a placeholder value for the actual bearer token that the user needs to provide to access the endpoint.
                - **Type**: string
                  - Indicates that the value for the token is of type string.

          - **Method**: GET
            - This indicates that the HTTP method being used for this request is GET, which is typically used to retrieve data from the server.

          - **URL**: 
            - `http://localhost:3000/api/action/ignore/get/?ignoreId=ignoreId&sessionId=sessionId&accountId=accountId`
              - This is the endpoint URL for the GET request. It includes query parameters for `ignoreId`, `sessionId`, and `accountId` which need to be provided to filter or specify the data being retrieved.
                - **ignoreId**: a parameter representing the unique identifier for the item to be ignored.
                - **sessionId**: a parameter that indicates the session context in which the ignore action is being performed.
                - **accountId**: a parameter that identifies the account related to the request.

          - **Headers**: 
            - This is an array that can hold any additional headers required for the request. In this case:
              - **Key**: "" 
                - The key is currently empty, indicating that no extra headers are being used in this request.
              - **Value**: "" 
                - The value is also empty for the same reason.
              - **Type**: default
                - This refers to the default type for the header.
              - **Disabled**: true
                - This indicates that the header is currently disabled and will not be included in the request.

          - **Body**: 
            - **Mode**: raw
              - Indicates that the body of the request will contain raw data, but in this case, it is not being used.
            - **Raw**: ""
              - The raw data field is currently empty, suggesting that no data needs to be sent in the body of this GET request.

        This endpoint is designed to retrieve information based on the provided identifiers without needing to send any additional data in the body of the request.
      security:
        - bearerAuth: []
      parameters:
        - name: ignoreId
          in: query
          schema:
            type: string
          example: ignoreId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/ignore/all:
    get:
      tags:
        - ActionIgnore
      summary: Action - Ignore - Get All
      description: |-
        ### Detailed Description of the Endpoint Data

        - **name**: Represents the label for the API call. In this case, it is "Action - Ignore - Get All", indicating the purpose of the request.

        - **request**: This object contains all the components needed to make the API request.

          - **auth**: Defines the authentication method used for the API call.
            - **type**: Specifies the type of authentication. Here, it is set to "bearer", indicating that the request uses a Bearer Token for authorization.
            - **bearer**: An array that holds the details of the bearer token used for authentication.
              - **key**: This specifies the name of the token parameter. It is named "token".
              - **value**: The actual bearer token or the placeholder in this case, "BearerToken", which should be replaced with a valid token during the request.
              - **type**: Indicates the data type for the token, which is "string".

          - **method**: Indicates the HTTP method used for the request. Here, "GET" implies that the request is meant to retrieve data from the server.

          - **url**: The endpoint URL where the request will be sent. It consists of:
            - The base URL: `http://localhost:3000`
            - The path: `/api/action/ignore/all/`
            - Query parameters, which include:
              - **sessionId**: A placeholder named "sessionId" that should be replaced with an actual session ID when making the request.
              - **accountId**: A placeholder named "accountId" that should be replaced with a valid account ID.

          - **headers**: This defines any headers that should be included in the request.
            - The current header indicates an empty key and value, and it is marked as disabled, meaning it will not be included in the request.

          - **body**: Specifies the body of the request.
            - **mode**: Indicates the format of the body; it is set to "raw" in this instance.
            - **raw**: This is where the body content would be specified. In this case, it is empty, indicating that there is no additional data sent with the request.

        This endpoint is designed to retrieve information related to ignored actions for a specified session and account. Users need to provide valid session and account IDs and a valid bearer token to authenticate the request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/ignore/delete:
    post:
      tags:
        - ActionIgnore
      summary: Action - Ignore - Delete
      description: |-
        ### Endpoint: Action - Ignore - Delete

        #### Request Details

        - **Authentication**: 
          - **Type**: Bearer
            - This indicates that the request requires a bearer token for authentication.
            - **Token**: A placeholder value `sessionId` is specified here. In practice, this should be replaced with an actual session token that is required to authenticate the user making the request.

        - **Method**: 
          - **POST**: This request uses the POST method to send data to the server. It is typically used for submitting data or making changes to the server.

        - **URL**: 
          - `http://localhost:3000/api/action/ignore/delete`: This is the endpoint where the request is sent. It is hosted locally on port 3000 and pertains to the action of ignoring or deleting an entry.

        - **Headers**: 
          - The headers section is currently empty with a disabled entry. You can add any necessary HTTP headers (like Content-Type) here if needed, but as it stands, there are no headers in use.

        #### Request Body

        - **Mode**: 
          - **Raw**: The body format being used is raw data. This means the data is sent as plain text.

        - **Raw Data**: 
          - The body of the request contains JSON formatted data that includes:
            - **sessionId**: A placeholder string `sessionId`. This should contain the actual session identifier for the user.
            - **accountId**: A placeholder string `accountId`. This should represent the unique identifier for the user’s account that is being referenced in the operation.
            - **ignoreId**: A placeholder string `ignoreId`. This should be replaced with the identifier of the specific ignore action that the user wishes to delete.

        This endpoint is designed to delete an ignore action based on the provided IDs, requiring proper authentication and the specific identifiers.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"ignoreId\":\"ignoreId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/invite/create:
    post:
      tags:
        - ActionInvite
      summary: Action - Invite - Create
      description: |-
        ### Detailed Description of Each Data in the Endpoint - Action - Invite - Create

        #### Request Details

        - **name**: Indicates the name of the API request, "Action - Invite - Create".

        - **request**: Contains all the details required to make the API request.

          - **auth**: Specifies the authentication method needed to access the API.
            
            - **type**: The type of authentication used, which in this case is "bearer".
              
            - **bearer**: An array that holds the necessary authentication information.
              
              - **key**: The specific identifier for the token, labeled as "token".
              
              - **value**: The actual bearer token value to be used for authentication, represented as "BearerToken".
              
              - **type**: Specifies that the type of value is a string.

          - **method**: The HTTP method used for the API request. Here, it is set to "POST", indicating that data is being sent to the server.

          - **url**: The endpoint URL to which the request is sent. In this case, it is "http://localhost:3000/api/action/invite/create".

          - **headers**: An array for including any request headers. Currently, there is one header entry which is set to be disabled.
            
            - **key**: Represents the name of the header, which is empty in this case.
            
            - **value**: The value for the header, which is also empty.
            
            - **type**: The type of header, listed as "default".
            
            - **disabled**: Indicates that this header is disabled.

          - **body**: Contains the data that is sent along with the request.
            
            - **mode**: The mode of data being sent. This is set to "raw", indicating that the body contains raw data.
            
            - **raw**: The actual raw data being sent in JSON format, detailed below:
              
              - **sessionId**: A unique identifier for the session, represented as "sessionId".
              
              - **accountId**: The identifier for the user's account, marked as "accountId".
              
              - **path**: The specific path related to the invite, formatted as a string, such as "/live/channel/video123".
              
              - **targetType**: The type of target for the invitation, which could refer to a video or user, set here as "videoId".
              
              - **targetId**: The unique identifier of the target item, listed as "videoId".
              
              - **sourceType**: Indicates the type of source for the invitation, marked as "accountId", which may refer back to the user's account.
              
              - **sourceId**: The unique identifier of the source item, also shown as "accountId".
              
              - **didInvite**: A boolean field indicating whether the invite has been sent already, defaulting to `false`.
              
              - **inviteType**: Represents the type of invite being sent, such as to a "friend".
              
              - **isAccepted**: A boolean that shows whether the invite has been accepted or not, defaulting to `false`.
              
              - **isRejected**: A boolean indicating if the invite has been rejected, defaulting to `false`.
              
              - **isIgnored**: A boolean indicating if the invite has been ignored, defaulting to `false`.
              
              - **name**: A placeholder for the name associated with the invite, currently empty.
              
              - **description**: A placeholder for a description of the invite, currently empty.
              
              - **tags**: A field for any tags related to the invite, currently empty.

            - **options**: Additional configuration options for the raw data format. 

              - **raw**: Indicates the settings for raw data.
                
                - **language**: Specifies the programming or data language being used, in this case, it is "json".
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didInvite: false
                inviteType: freind
                isAccepted: false
                isRejected: false
                isIgnored: false
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/invite/update:
    put:
      tags:
        - ActionInvite
      summary: Action - Invite - Update
      description: |-
        ### Description of Each Data in the Endpoint

        - **name**: This describes the endpoint and its purpose. In this case, it is for updating an invite action.

        - **request**: This section contains all the details necessary to make the HTTP request.

          - **auth**: Specifies the authentication method used for the request.
            - **type**: Indicates that the authentication type is a bearer token.
            - **bearer**: Contains the details of the bearer token used for authentication.
              - **key**: The key under which the token is provided ("token").
              - **value**: The actual bearer token value, which identifies the user making the request.
              - **type**: Indicates the type of the bearer token as a string.

          - **method**: The HTTP method used for this request. Here, it is set to "PUT," indicating that this request will be used to update existing resources.

          - **url**: The endpoint URL where the request will be sent. In this case, it points to a local server at `http://localhost:3000/api/action/invite/update`.

          - **headers**: This section includes any custom headers that need to be sent with the request.
            - **key**: The name of the header ("Client-UUID").
            - **value**: The value for the header, which is a unique identifier for the client making the request.
            - **type**: Specifies that this is a default type header.

          - **body**: The body of the request contains the data being sent to the server in raw format.
            - **mode**: Indicates the formatting of the body, which is set to "raw."
            - **raw**: Here is the actual JSON data being sent in the request body.
              - **sessionId**: A unique identifier for the session related to the invite action.
              - **accountId**: The account identifier for the user making the invitation.
              - **path**: The path to the resource, indicating where the invite is directed (e.g., a specific video).
              - **targetType**: The type of entity being targeted by the invite (in this case, a video).
              - **targetId**: The identifier for the target entity (e.g., videoId).
              - **sourceType**: The type of source for the invite, usually corresponding to the account type (e.g., accountId).
              - **sourceId**: The identifier for the source of the invitation (e.g., accountId).
              - **didInvite**: A boolean flag indicating whether the invite has been sent.
              - **inviteType**: The type of invite being sent (e.g., "friend").
              - **isAccepted**: A boolean flag indicating whether the invite has been accepted.
              - **isRejected**: A boolean flag indicating whether the invite has been rejected.
              - **isIgnored**: A boolean flag indicating whether the invite has been ignored.
              - **name**: A descriptive name for this invite update action.
              - **description**: A text field intended for additional details about the invite (currently empty).
              - **tags**: A field for associated tags (currently empty).
              - **inviteId**: The unique identifier for this specific invite, used for reference in the update.

          - **options**: Additional options for the request body.
            - **raw**: Specifies the format of the raw body.
              - **language**: Indicates that the language of the raw data is JSON.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didInvite: false
                inviteType: freind
                isAccepted: false
                isRejected: false
                isIgnored: false
                name: update
                description: ''
                tags: ''
                inviteId: inviteId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/invite/get:
    get:
      tags:
        - ActionInvite
      summary: Action - Invite - Get
      description: |-
        This is an API request for retrieving an invitation based on specific identifiers. Below is a detailed description of each piece of data in this request:

        - **name**: "Action - Invite - Get"
          - This is the name of the API request, indicating that it is intended to retrieve (get) an invite action.

        - **request**: This section contains all the details required to make the API call.
          
          - **auth**: Specifies the type of authentication required to access the API.
            
            - **type**: "bearer"
              - Indicates that bearer token authentication will be used.
            
            - **bearer**: An array containing authentication details.
              
              - **key**: "token"
                - Represents the key used for the bearer token in the authentication process.
                
              - **value**: "BearerToken"
                - This is a placeholder for the actual token that will be used to authenticate requests to the API. Users need to replace this with a valid token.
                
              - **type**: "string"
                - Specifies that the value of the token is a string.

          - **method**: "GET"
            - Indicates the HTTP method to be used for the request. In this case, it is a GET request, which is used to retrieve data from the server.

          - **url**: "http://localhost:3000/api/action/invite/get/?inviteId=inviteId&sessionId=sessionId&accountId=accountId"
            - This is the endpoint URL for the API request. It contains placeholders for query parameters that must be replaced with actual values when making the request:
            
              - **inviteId**: A unique identifier for the invitation that you want to retrieve.
                
              - **sessionId**: A unique identifier for the session associated with the invite. 

              - **accountId**: The account identifier to specify the account related to the invitation.

          - **headers**: A collection of HTTP headers to be sent with the request.
            
            - **key**: " " (empty)
              - This field is reserved for specifying a header key but is currently empty.
                
            - **value**: " " (empty)
              - This field is reserved for specifying a header value but is currently empty.
             
            - **type**: "default"
              - Indicates that this is a standard header type.
              
            - **disabled**: true
              - This indicates that the header is currently disabled and will not be included in the request.

          - **body**: Contains information about the request body.
            
            - **mode**: "raw"
              - Indicates that the body of the request is in raw format.
                
            - **raw**: ""
              - The raw body currently has no content. For this GET request, a body is generally not required.

        This description outlines the structure and purpose of the data in this API request, providing clarity for users on how to utilize the collection in Postman.
      security:
        - bearerAuth: []
      parameters:
        - name: inviteId
          in: query
          schema:
            type: string
          example: inviteId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/invite/all:
    get:
      tags:
        - ActionInvite
      summary: Action - Invite - Get All
      description: |-
        ### API Endpoint: Action - Invite - Get All

        **Description of Request Data:**

        - **Auth**: This section describes the authentication method required to access the API. The request uses a bearer token for security.
          - **Type**: The authentication type is set to "bearer", indicating that a token is needed for access.
          - **Bearer**: Contains an array with a single object that defines the token.
            - **Key**: The key is labeled as "token", this is the identifier for the token.
            - **Value**: The value is set to "BearerToken", this should be replaced with an actual token string that grants access to the API.
            - **Type**: The type is specified as "string", indicating that the value should be a string format.

        - **Method**: This defines the HTTP method used for the request, which is "GET". This method is used to retrieve information from the server.

        - **URL**: This specifies the endpoint where the request is sent. 
          - **Base URL**: "http://localhost:3000/api/action/invite/all/" is the root of the endpoint.
          - **Query Parameters**: 
            - **sessionId**: This parameter is used to specify the current session identifier, to filter results relevant to that session.
            - **accountId**: This parameter denotes the account identifier, it helps in retrieving invites related to a specific account.

        - **Headers**: This section allows for additional header fields to be sent with the request. 
          - **Key**: Currently left empty which means no additional headers are set.
          - **Value**: Matches the key, indicating no value is provided.
          - **Type**: Default values are assigned, which means it is a standard header type.
          - **Disabled**: Set to true, meaning this header is currently inactive and won’t be included in the request.

        - **Body**: This defines the data to be sent along with the request.
          - **Mode**: Set to "raw", indicating that the body data format is unprocessed and sent as plain text.
          - **Raw**: The raw data section is empty since a GET request typically does not have a body. 

        This endpoint is used to fetch all invite actions based on the provided session ID and account ID while requiring a valid token for access.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/invite/delete:
    post:
      tags:
        - ActionInvite
      summary: Action - Invite - Delete
      description: |-
        Here is a detailed description of each data element in the provided API endpoint:

        - **name**: This is the name of the API action being described. It is labeled "Action - Invite - Delete," indicating that the endpoint is used to delete an invitation.

        - **request**: This object contains all the details necessary to make the API request.

          - **auth**: This section specifies the authentication method used for the request.
            - **type**: Indicates the type of authentication required, which is "bearer" in this case.
            - **bearer**: This array holds the specific details for the bearer token used for authentication.
              - **key**: The identifier for the bearer token, set as "token."
              - **value**: The placeholder for the actual session ID, represented as "sessionId."
              - **type**: Indicates the data type of the value, which is "string."

          - **method**: This is the HTTP method used for the request. It is set to "POST," meaning data will be sent to the server.

          - **url**: This is the endpoint URL where the API request is sent. It is specified as "http://localhost:3000/api/action/invite/delete," indicating that it targets the delete action for invitations on a local server.

          - **headers**: This section contains any HTTP headers that may be necessary for the request.
            - This entry contains an empty key and value, and is marked as "disabled," meaning it won't be included in the request.

          - **body**: This section includes the data sent in the body of the request.
            - **mode**: Indicates the format of the request body. It is set to "raw," which means the body is sent as plain text.
            - **raw**: This is the actual content being sent in the body of the request. The JSON structure includes:
              - **sessionId**: The ID of the current session, which is necessary for identifying the user's session.
              - **accountId**: The ID of the account associated with the invitation, represented here as "accountId."
              - **inviteId**: The ID of the specific invitation to be deleted, represented as "inviteId."

        This detailed description should help users understand the purpose and structure of the API request for deleting an invitation.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"inviteId\":\"inviteId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/join/create:
    post:
      tags:
        - ActionJoin
      summary: Action - Join - Create
      description: |
        ### Action - Join - Create Endpoint Description

        This endpoint is used to create a join action for a specific session in the application. Below is a detailed description of each data field required in the request:

        #### Authentication
        - **Type**: `bearer`
          - This indicates that the request requires bearer token authentication. 
        - **Token**: 
          - **Key**: `token`
          - **Value**: `BearerToken`
          - This is where the user's authentication token should be placed for accessing the API.

        #### Request Method
        - **Method**: `POST`
          - This specifies that the request to this endpoint should be made using the POST HTTP method.

        #### Endpoint URL
        - **URL**: `http://localhost:3000/api/action/join/create`
          - This is the endpoint where the request is sent to create a join action in the application.

        #### Headers
        - **Headers**: 
          - An empty header object is present but disabled in this request. It can be modified or removed as needed.

        #### Request Body
        The body of the request is in JSON format and contains several fields:

        - **sessionId**: 
          - This should contain the unique identifier for the session that the user is attempting to join.
          
        - **accountId**: 
          - This is the unique identifier for the user’s account.

        - **path**: 
          - This field specifies the location of the content (e.g., video channel path) that the user wants to join.
          
        - **targetType**: 
          - This indicates the type of target the action is directed towards, such as `videoId`.

        - **targetId**: 
          - This is the unique identifier of the target that the user is joining (usually corresponds to a video).

        - **sourceType**: 
          - Similar to `targetType`, this indicates the origin type of the action. In this case, it should generally be `accountId`.

        - **sourceId**: 
          - This is the unique identifier of the source from which the join action is initiated. 

        - **didJoin**: 
          - A boolean that indicates whether the user has successfully joined the session (`true` if joined).

        - **isUndo**: 
          - A boolean that indicates whether this action is an undo of a previous join action. (`true` if it is an undo).

        - **groupType**: 
          - This indicates the type of group the user is joining, such as `team`.

        - **name**: 
          - This field can be used to provide an optional name for this join action. If not needed, it can be left empty.

        - **description**: 
          - An optional field to provide a description of the join action. This can also be left empty if not needed.

        - **tags**: 
          - This field allows for optional tags to categorize or label the join action for better identification.

        Make sure to fill in the appropriate values for each field as required by your specific application context when using this endpoint.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didJoin: true
                isUndo: false
                groupType: team
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/join/update:
    put:
      tags:
        - ActionJoin
      summary: Action - Join - Update
      description: |-
        ### Action - Join - Update Endpoint Description

        **Request Method:** PUT  
        **Request URL:** `http://localhost:3000/api/action/join/update`

        **Authentication:**
        - **Type:** Bearer Token  
          - **Key:** `token`  
          - **Value:** `BearerToken` (Replace with actual token)  
          - **Type:** string

        **Headers:**
        - **Key:** `Client-UUID`  
          - **Value:** `ClientUUID` (Replace with actual client UUID)  
          - **Type:** default

        **Request Body:**
        The body of the request is in JSON format. Here is a breakdown of each field:

        - **sessionId:**  
          Identifies the session associated with the join action. (String)

        - **accountId:**  
          Represents the account that is performing the join operation. (String)

        - **path:**  
          Specifies the path to the resource, in this case, a live video channel. It indicates where the join action is taking place. Example: `/live/channel/video123`.

        - **targetType:**  
          Indicates the type of resource being targeted for the join action. In this example, it is set to `videoId`, meaning the join is related to a specific video.

        - **targetId:**  
          Refers to the unique identifier of the target resource, which is presumably the video being joined. (String)

        - **sourceType:**  
          Specifies the type of source account that is initiating the join action. In this case, it is set to `accountId`.

        - **sourceId:**  
          Specifies the identifier of the source account, which is initiating the action. (String)

        - **didJoin:**  
          A boolean indicating whether the action of joining was successful. It is set to `true` if the join was successful.

        - **isUndo:**  
          A boolean to specify if the join action is being undone. It is set to `false` indicating that this is not an undo action.

        - **groupType:**  
          Defines the type of group related to the join action. In this example, it is set to `team`, indicating that the joining action is associated with a team.

        - **name:**  
          A string that describes the action being performed. In this example, it is labeled as `update`.

        - **description:**  
          This field is for additional details about the join action. It can be left empty or filled with relevant information.

        - **tags:**  
          Allows for tagging the join action for categorization or identification purposes. This field can also be left blank.

        - **joinId:**  
          A unique identifier for the join action, which can be used for tracking or reference purposes. (String)

        ### Usage
        This endpoint is used when a client wants to update the action of joining a specific resource, such as a video, in a particular session. Ensure to replace placeholder values with actual data before making the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didJoin: true
                isUndo: false
                groupType: team
                name: update
                description: ''
                tags: ''
                joinId: joinId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/join/get:
    get:
      tags:
        - ActionJoin
      summary: Action - Join - Get
      description: |-
        ### Action - Join - Get

        **Request Method:**  
        This endpoint uses the HTTP GET method to retrieve information.

        **URL:**  
        The request is made to `http://localhost:3000/api/action/join/get/`. The URL includes three query parameters:
        - `joinId`: This parameter is used to specify the unique identifier for the join action.
        - `sessionId`: This parameter is used to indicate the session associated with the join action.
        - `accountId`: This parameter is used to identify the account related to the join action.

        **Authentication:**  
        The request requires Bearer token authentication. The authentication details are as follows:
        - **Type:** bearer
        - **Token:** A string value which is a placeholder for the actual token required to access this endpoint. Replace "BearerToken" with the actual token.

        **Headers:**  
        There are currently no headers specified for this request since the key and value fields are empty and the header is disabled. If needed, headers can be added based on requirements.

        **Body:**  
        The body of the request is set to raw mode but is currently empty. Since this is a GET request, no body content is typically necessary. 

        ### Summary
        Use this endpoint to retrieve join action details based on the provided joinId, sessionId, and accountId, ensuring to include a valid bearer token for authentication. Adjust the query parameters as necessary to fetch the desired information.
      security:
        - bearerAuth: []
      parameters:
        - name: joinId
          in: query
          schema:
            type: string
          example: joinId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/join/all:
    get:
      tags:
        - ActionJoin
      summary: Action - Join - Get All
      description: |-
        {
          "name": "Action - Join - Get All",
          "description": {
            "request": {
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "BearerToken",
                    "type": "string"
                  }
                ],
                "description": "Authentication method using a bearer token which is required to access this endpoint. The 'BearerToken' should be replaced with a valid token for authorization."
              },
              "method": "GET",
              "description": "This indicates that the request method is GET, which is used to retrieve data from the server."
              "url": "http://localhost:3000/api/action/join/all/?sessionId=sessionId&accountId=accountId",
              "description": "The endpoint URL to access the 'Get All' action. It requires two query parameters: 'sessionId' which identifies the session, and 'accountId' which identifies the user's account. Both should be replaced with actual values."
              "headers": [
                {
                  "key": "",
                  "value": "",
                  "type": "default",
                  "disabled": true
                }
              ],
              "description": "This is reserved for potential additional headers, but currently no headers are required for this request. The entry is disabled."
              "body": {
                "mode": "raw",
                "raw": "",
                "description": "This part of the request body is empty as GET requests do not typically send a body. This indicates that no additional data needs to be sent with the request."
              }
            }
          }
        }
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/join/delete:
    post:
      tags:
        - ActionJoin
      summary: Action - Join - Delete
      description: |-
        {
          "name": "Action - Join - Delete",
          "description": {
            "request": {
              "auth": {
                "type": "bearer": "Indicates that the API request requires a bearer token for authentication. The token should be provided in the authorization header.",
                "bearer": [
                  {
                    "key": "token": "This is the key for the token being used. It should be 'token' for this request.",
                    "value": "sessionId": "This represents the actual session identifier that will be used for authentication. It needs to be replaced with the actual session ID.",
                    "type": "string": "Specifies that the value for the token should be a string."
                  }
                ]
              },
              "method": "POST": "Specifies the HTTP method to be used for this request, which is POST. This indicates that data will be sent to the server.",
              "url": "http://localhost:3000/api/action/join/delete": "This is the endpoint URL where the API request will be sent. In this case, it points to a local server.",
              "headers": [
                {
                  "key": "": "Currently, there are no additional headers being set for this request, as the key is empty.",
                  "value": "": "The value for any additional headers is also empty.",
                  "type": "default": "The type of the header, but it is unnecessary since no headers are being used.",
                  "disabled": true: "Indicates that this header is disabled and will not be included in the request."
                }
              ],
              "body": {
                "mode": "raw": "The body of the request contains raw data that is being sent in the request.",
                "raw": "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"joinId\":\"joinId\"}": "This is the JSON structure that holds the data being sent in the body of the request. It includes placeholders for three parameters: sessionId, accountId, and joinId. These should be replaced with actual values before sending the request."
              }
            }
          }
        }
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"joinId\":\"joinId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/learn/create:
    post:
      tags:
        - ActionLearn
      summary: Action - Learn - Create
      description: |-
        ### Description of Data in the API Endpoint

        **Endpoint Name**: Action - Learn - Create

        **Request Details**:
        - **Auth**:
          - **Type**: Bearer
            - **Bearer Token**: This is a security token that must be included in the request to authenticate the user. Replace "BearerToken" with your actual bearer token.
          
        - **Method**: POST
          - This specifies that the request is intended to create a new resource or perform an action.

        - **URL**: 
          - `http://localhost:3000/api/action/learn/create`
            - This is the endpoint where the request is sent. It is running on a local server on port 3000 and is intended for creating learning actions.

        - **Headers**:
          - The headers section currently does not contain any active headers, as it is marked as disabled. You may add necessary headers as needed for your API request.

        **Body**:
        - **Mode**: Raw
          - The request body is sent in raw format.

        - **Raw Content**:
          ```json
          {
            "sessionId": "sessionId",
            "accountId": "accountId",
            "path": "/live/channel/video123",
            "targetType": "videoId",
            "targetId": "videoId",
            "sourceType": "accountId",
            "sourceId": "accountId",
            "didLearn": true,
            "name": "",
            "description": "",
            "tags": ""
          }
          ```

          - **sessionId**: 
            - Unique identifier for the current session. This helps in tracking user sessions.

          - **accountId**: 
            - Unique identifier for the user's account. This identifies which user's action is being recorded.

          - **path**: 
            - The specific path to the content that is being referred to, such as a video or a channel. Here, it points to a live channel for a specific video.

          - **targetType**: 
            - Specifies the type of the target item being learned. In this case, it indicates that the target is a video identified by a video ID.

          - **targetId**: 
            - Unique identifier for the targeted video. This is the ID of the video that the user has interacted with.

          - **sourceType**: 
            - Specifies the type of the source item. Here, it is set to 'accountId', indicating that the action is associated with the user's account.

          - **sourceId**: 
            - Unique identifier for the source, which corresponds to the user’s account ID. This links the action back to the user's account.

          - **didLearn**: 
            - A boolean value indicating whether learning has taken place (true or false). This marks the action as a learning experience.

          - **name**: 
            - A field for naming the action or experience. Currently, it is blank and can be filled as needed.

          - **description**: 
            - A field for providing additional details about the action. It is currently empty and can be elaborated on as needed.

          - **tags**: 
            - A field for adding relevant tags to the action. This is also currently blank and can be populated with relevant keywords or phrases.

        ### Summary
        This endpoint is designed for recording learning actions associated with a user's account. It requires a bearer token for authentication and accepts specific parameters in the request body. Users can track sessions and interactions with content using the provided identifiers.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didLearn: true
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/learn/update:
    put:
      tags:
        - ActionLearn
      summary: Action - Learn - Update
      description: |-
        ### Endpoint Description: Action - Learn - Update

        This endpoint allows users to update learning actions associated with a specific session and account. Below is a detailed description of each piece of data involved in this request.

        #### Request Method:
        - **PUT**: This method is used to update existing resources on the server.

        #### URL:
        - **http://localhost:3000/api/action/learn/update**: This is the endpoint where the update request is sent.

        #### Authentication:
        - **Auth Type**: Bearer
          - **Token**: A bearer token is used for authentication, which ensures that the request is made by a verified user. The value "BearerToken" should be replaced with a valid token.

        #### Headers:
        - **Client-UUID**: A unique identifier for the client making the request. It helps in identifying the source of the API call. The value "ClientUUID" should be replaced with the actual client UUID.

        #### Body:
        The body of the request is sent in JSON format and contains the following fields:

        1. **sessionId**: 
           - Type: String
           - Description: A unique identifier for the current session. This helps to associate the learning action with a specific session.

        2. **accountId**: 
           - Type: String
           - Description: A unique identifier for the account associated with the learning action. This indicates which account the action belongs to.

        3. **path**: 
           - Type: String
           - Description: The path or URL of the resource that is being interacted with. In this case, it indicates the location of the video (e.g., "/live/channel/video123").

        4. **targetType**: 
           - Type: String
           - Description: The type of target that is being learned from. For example, it could be a video ID.

        5. **targetId**: 
           - Type: String
           - Description: The unique identifier for the target resource (e.g., the ID of the video being updated).

        6. **sourceType**: 
           - Type: String
           - Description: The type of source from where the learning action is initiated, which is likely an account ID.

        7. **sourceId**: 
           - Type: String
           - Description: The unique identifier for the source account that is initiating the action.

        8. **didLearn**: 
           - Type: Boolean
           - Description: A flag that indicates whether the learning action was successfully completed or not. It takes a value of `true` or `false`.

        9. **name**: 
           - Type: String
           - Description: An optional field to provide a name for the learning action. This can be left empty if not needed.

        10. **description**: 
            - Type: String
            - Description: An optional field to give a description of the learning action. This can also be left empty if not applicable.

        11. **tags**: 
            - Type: String
            - Description: An optional field for tags associated with the learning action. This helps in categorizing or filtering actions based on certain keywords.

        12. **learnId**: 
            - Type: String
            - Description: A unique identifier for the learning record being updated. This ensures the correct record is modified.

        This structured request allows for comprehensive updates to the learning action data, ensuring proper identification of sessions, accounts, and resources.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didLearn: false
                name: ''
                description: ''
                tags: ''
                learnId: learnId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/learn/get:
    get:
      tags:
        - ActionLearn
      summary: Action - Learn - Get
      description: |-
        ### Description of Each Data in the Endpoint

        - **name**: This represents the name of the API request. In this case, it is labeled "Action - Learn - Get," indicating that this request is related to retrieving information about a learning action.

        - **request**: This object contains all the details required to make the API request.

          - **auth**: This specifies the type of authentication that is being used for this request.

            - **type**: Indicates the type of authentication. Here, it is set to "bearer," which means that a bearer token is needed to authorize the request.

            - **bearer**: This array holds the information required for the bearer token.

              - **key**: Identifies the parameter being sent. In this case, it is labeled "token."

              - **value**: This is the actual authentication token required to access the API. It is displayed as "BearerToken," a placeholder indicating where the user's actual token should go.

              - **type**: Indicates the data type of the token, which is set to "string."

          - **method**: This specifies the HTTP method to be used for the request. Here, it is "GET," indicating that this request will retrieve data from the server.

          - **url**: This is the endpoint's URL to which the request will be sent. The URL contains query parameters for `learnId`, `sessionId`, and `accountId`. These parameters need to be replaced with actual values when making the request.

          - **headers**: This array would typically include any additional HTTP headers that need to be sent with the request.

            - **key**: This field is currently empty, meaning no custom headers are being sent.

            - **value**: As with the key, this is empty, indicating that no specific value for headers is provided.

            - **type**: Indicates the type of header being used. It is marked as "default."

            - **disabled**: This boolean indicates whether the header is currently active or not. Here, it is set to true, meaning that it is disabled and will not be sent with the request.

          - **body**: This object specifies the content to be sent with the request. 

            - **mode**: This indicates the format of the body content. It is set to "raw," meaning the content is provided as raw text.

            - **raw**: This is where the actual body content would be placed if it were being sent. The field is currently empty, indicating that no body content is necessary for this GET request.
      security:
        - bearerAuth: []
      parameters:
        - name: learnId
          in: query
          schema:
            type: string
          example: learnId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/learn/all:
    get:
      tags:
        - ActionLearn
      summary: Action - Learn - Get All
      description: |-
        {
          "name": "Action - Learn - Get All",
          "description": "This API endpoint is designed to retrieve a list of all learning actions available. It requires authentication via a bearer token and does not include any additional headers or a request body. The endpoint accepts two query parameters: sessionId and accountId, which are necessary to specify the session and account context for the request. This is a GET request, meaning it is primarily used to retrieve data rather than modify it.",
          "request": {
            "auth": {
              "type": "bearer",
              "description": "The authentication type used for the request. This specifies that a bearer token is required to access this endpoint.",
              "bearer": [
                {
                  "key": "token",
                  "value": "BearerToken",
                  "type": "string",
                  "description": "The actual bearer token that must be included in the authorization header to authenticate the request."
                }
              ]
            },
            "method": "GET",
            "description": "The HTTP method used for the request. This indicates that the operation will retrieve data from the server.",
            "url": "http://localhost:3000/api/action/learn/all/?sessionId=sessionId&accountId=accountId",
            "description": "The URL for the API endpoint. It is structured to include query parameters for sessionId and accountId, which should be replaced with actual values when making a request.",
            "headers": [
              {
                "key": "",
                "value": "",
                "type": "default",
                "disabled": true,
                "description": "This section allows for additional headers to be specified. In this case, no headers are provided and the feature is disabled."
              }
            ],
            "body": {
              "mode": "raw",
              "description": "The body of the request. Since this is a GET request, no body is required or included.",
              "raw": "",
              "description": "The raw representation of the request body. It remains empty for this endpoint as no data is being sent."
            }
          }
        }
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/learn/delete:
    post:
      tags:
        - ActionLearn
      summary: Action - Learn - Delete
      description: |-
        ### Description of Each Data in the Endpoint

        - **name**: Action - Learn - Delete  
          This is the name of the request, indicating that it is related to deleting a learning action.

        - **request**:  
          This section contains various details about the request being made to the API.

          - **auth**:  
            This specifies the type of authentication used for the request.
            
            - **type**: bearer  
              This indicates that the request uses Bearer Token authentication.

            - **bearer**:  
              This array contains the details of the bearer token used for authentication.
              
              - **key**: token  
                This is the name of the key used for the authentication token.

              - **value**: sessionId  
                This indicates the placeholder for the session ID that should be used as the value for the token.

              - **type**: string  
                This describes the data type of the token value, which is a string.

          - **method**: POST  
            This specifies the HTTP method used for the request. In this case, it is a POST request.

          - **url**: http://localhost:3000/api/action/learn/delete  
            This is the endpoint URL where the request is sent. It indicates that the delete action for learning is being accessed at this location.

          - **headers**:  
            This section is used for specifying any additional headers for the request.

            - **key**: (empty)  
              The key for the header is empty, indicating that no custom headers are being sent.

            - **value**: (empty)  
              The value for the header is also empty, confirming that there are no custom headers in this request.

            - **type**: default  
              This indicates that the header type is set as default.

            - **disabled**: true  
              This indicates that this header is currently disabled and will not be sent with the request.

          - **body**:  
            This section contains the data that is sent with the request.

            - **mode**: raw  
              This indicates that the body data is in raw format, allowing for plain text input.

            - **raw**:  
              This is the actual raw JSON data sent in the body of the request. It contains placeholders for the following keys:
              
              - **sessionId**: "sessionId"  
                This is a placeholder for the session ID. It must be replaced with an actual session ID for the request to be valid.

              - **accountId**: "accountId"  
                This is a placeholder for the account ID. This value should be replaced with the actual account ID relevant to the deletion.

              - **learnId**: "learnId"  
                This is a placeholder for the learning ID. It must be replaced with the actual ID of the learn action that is to be deleted.  

        This detailed description provides clarity on each component of the endpoint request for users who will utilize the Postman API collection.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"learnId\":\"learnId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/like/create:
    post:
      tags:
        - ActionLike
      summary: Action - Like - Create
      description: |-
        ### Action - Like - Create Endpoint Description

        #### Request Details

        - **Auth Type**: Bearer Token
          - **Token**: A security token that authorizes access to the endpoint. Replace `BearerToken` with your actual bearer token.

        - **HTTP Method**: POST
          - This method is used to send data to the server to create a new resource. In this case, it is used to express a "like" action.

        - **URL**: 
          - The endpoint for the request is `http://localhost:3000/api/action/like/create`. This is where the request will be sent.

        #### Headers

        - **Headers**: Currently, there are no headers specified and any default headers are disabled.

        #### Request Body

        - **Mode**: Raw
          - This mode allows you to send the request body in raw format. The body is specified in JSON format.

        - **Raw Body**: 
          ```json
          {
              "sessionId": "sessionId",
              "accountId": "accountId",
              "path": "/live/channel/video123",
              "targetType": "videoId",
              "targetId": "videoId",
              "sourceType": "accountId",
              "sourceId": "accountId",
              "didLike": true,
              "isUndo": false,
              "name": "",
              "description": "",
              "tags": ""
          }
          ```

          #### Body Fields Description

          - **sessionId**: Identifies the current session. Replace `sessionId` with the actual session identifier for tracking user interactions.
          
          - **accountId**: The unique identifier for the user account acting in this request. Replace `accountId` with the specific account ID of the user.
          
          - **path**: Specifies the path to the resource being interacted with, such as a video or channel. It indicates where the action is taking place (e.g., `/live/channel/video123`).
          
          - **targetType**: Defines the type of the target that is being liked. In this case, it is set to `videoId`, indicating that the target of the like is a video.
          
          - **targetId**: The unique identifier for the target resource that is being liked. Replace `videoId` with the actual ID of the video.
          
          - **sourceType**: Specifies the type for the source of the like action. It is set to `accountId`, indicating that the like comes from a user account.
          
          - **sourceId**: The unique identifier for the source of the like action. It should be the same as `accountId` in this context.

          - **didLike**: A boolean value indicating whether the like action was performed. Set to `true` to denote that the user has liked the resource.
          
          - **isUndo**: A boolean value indicating whether this action is intended to undo a previous like. Set to `false` if it is a new like action rather than an undo.
          
          - **name**: Optional field for a name related to the like action. It can be left blank if not used.

          - **description**: Optional field for a description related to the like action. It can be left blank if not applicable.

          - **tags**: Optional field for any associated tags. It can be left blank if no tags are necessary. 

        Ensure to replace the placeholder values in the request body with actual data before sending the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didLike: true
                isUndo: false
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/like/update:
    put:
      tags:
        - ActionLike
      summary: Action - Like - Update
      description: |-
        ### Action - Like - Update Endpoint Description

        This documentation outlines the details of the "Action - Like - Update" endpoint, which is used to update the like status of a specific video. The request method is PUT and requires authentication via a bearer token.

        #### Request Details

        - **Auth Type:**
          - The request uses bearer token authentication.
          - The token is passed in the authorization header using the format: `Bearer BearerToken`.

        - **HTTP Method:**
          - PUT: This method is used to update existing resources.

        - **URL:**
          - `http://localhost:3000/api/action/like/update`: This is the endpoint used to update the like action for a specific video.

        - **Headers:**
          - **Client-UUID:** 
            - This header contains the unique identifier for the client making the request, which is used for tracking and analytics. It should be replaced with the actual UUID of the client.

        #### Request Body

        The body of the request is in JSON format and contains the following fields:

        - **sessionId:**
          - A unique identifier for the user session, used to track the user's current interaction.

        - **accountId:**
          - The unique identifier for the user's account. This indicates which user's like action is being updated.

        - **path:**
          - The path to the specific video resource being affected, in this case, it follows the format `/live/channel/video123`, where `video123` should be replaced with the actual video's identifier.

        - **targetType:**
          - Indicates the type of target being liked. In this case, it specifies that the target is identified by `videoId`.

        - **targetId:**
          - The unique identifier for the video that is being liked or unliked.

        - **sourceType:**
          - This field indicates the type of source of the like action. Here it uses `accountId` to specify that the source is based on the user account.

        - **sourceId:**
          - This is the same as the `accountId` and represents the source account performing the action.

        - **didLike:**
          - A boolean value indicating whether the user liked the video (`true` for liked, `false` for unliked).

        - **isUndo:**
          - A boolean value indicating whether the action is intended to undo a previous like status. Setting this to `true` will remove a like if it exists.

        - **name:**
          - A string field reserved for a name associated with the like action. It can be left empty if not needed.

        - **description:**
          - A string field reserved for a description associated with the like action. It can be left empty if not needed.

        - **tags:**
          - A field for any tags related to the like action. It is optional and can be left empty.

        - **likeId:**
          - A unique identifier for the specific like action being updated. This is necessary to reference the previous like status.

        Overall, this endpoint effectively allows the user to update whether they like or dislike a specific video while providing all necessary identifiers and information.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didLike: false
                isUndo: true
                name: ''
                description: ''
                tags: ''
                likeId: likeId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/like/get:
    get:
      tags:
        - ActionLike
      summary: Action - Like - Get
      description: |-
        ### Action - Like - Get Endpoint Description

        - **Endpoint Name**: Action - Like - Get  
          This is the name of the API endpoint that is used to retrieve the details of a like action.

        - **Request Type**:  
          `GET`  
          Specifies that this request is a GET request, which is used to fetch data from the server.

        - **Authorization**:  
          - **Type**: `bearer`  
            This indicates that bearer token authentication is used for this request.
          - **Bearer Token**:  
            - **Key**: `token`  
              The name of the authentication parameter.
            - **Value**: `BearerToken`  
              A placeholder for the actual bearer token which is required for authentication.
            - **Type**: `string`  
              This denotes that the value of the token should be a string.

        - **URL**:  
          `http://localhost:3000/api/action/like/get/?likeId=likeId&sessionId=sessionId&accountId=accountId`  
          The address of the API endpoint that will be called. It includes query parameters:
          - **likeId**: Specifies the ID of the like action to retrieve.
          - **sessionId**: Indicates the ID of the user session.
          - **accountId**: Refers to the user account ID associated with the like.

        - **Headers**:  
          - **Key**: (empty)  
            No headers are specified, which means the request will not carry any additional header information.
          - **Value**: (empty)  
            No corresponding value for the header as it is disabled.
          - **Type**: `default`  
            Indicates the default type of the header.
          - **Disabled**: `true`  
            This means that the header has been disabled and will not be sent with the request.

        - **Body**:  
          - **Mode**: `raw`  
            Indicates that the body of the request is in a raw format.
          - **Raw**: (empty)  
            The body of the request is empty, meaning no data is sent with this GET request. 

        This endpoint is designed to retrieve information about a specific like action based on the parameters provided in the URL. It requires a valid bearer token for authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: likeId
          in: query
          schema:
            type: string
          example: likeId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/like/all:
    get:
      tags:
        - ActionLike
      summary: Action - Like - Get All
      description: |-
        ### Endpoint: Action - Like - Get All

        #### Request Details:

        - **Auth**: 
          - **Type**: Bearer
            - This type of authentication requires a valid bearer token to access the endpoint. 
          - **Bearer Token**:
            - **Key**: `token`
              - This is the key used to access the bearer token.
            - **Value**: `BearerToken`
              - This represents the actual bearer token that needs to be included in the request for authentication purposes.
            - **Type**: `string`
              - Indicates that the token value is a string data type.

        - **Method**: 
          - **GET**
            - This specifies that the request method is GET, which is used to retrieve data from the server.

        - **URL**: 
          - `http://localhost:3000/api/action/like/all/?sessionId=sessionId&accountId=accountId`
            - This is the endpoint URL where the request will be sent.
            - **sessionId**: This is a query parameter representing the unique identifier for the user’s current session.
            - **accountId**: This is another query parameter that corresponds to the unique identifier of the user’s account for which the likes are being retrieved.

        - **Headers**: 
          - An array of headers that can be included in the request.
            - **Key**: An empty string, which means no specific key is provided.
            - **Value**: An empty string, indicating no particular value is supplied.
            - **Type**: `default`
              - This shows the default type for the header entry.
            - **Disabled**: `true`
              - This means that the header is currently disabled and will not be sent with the request.

        - **Body**:
          - **Mode**: `raw`
            - This indicates that the body of the request is sent in raw format.
          - **Raw**: 
            - An empty string, meaning no data is being sent in the body of the request. The GET method typically does not require a body.

        ### Summary:
        This request is used to retrieve all "like" actions for a specific account based on the session identifier provided. Authentication is achieved using a bearer token in the request. The generated URL includes query parameters to specify which session and account to target, but no additional headers or body content is needed.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/like/delete:
    post:
      tags:
        - ActionLike
      summary: Action - Like - Delete
      description: |-
        ### Description of Endpoint Data

        #### Name
        - **Action - Like - Delete**: This is the identifier for the API endpoint that handles the deletion of a like action.

        #### Request
        - This section outlines the details of the API request.

        ##### Authentication
        - **Auth Type**: The authentication method used is Bearer token.
        - **Bearer**: A token is required to authenticate the request.
          - **Key**: Refers to the name of the token which in this case is "token".
          - **Value**: The value for the token parameter is set to "sessionId". This should be replaced with an actual session identifier when making the request.
          - **Type**: The type of the token is indicated as a string, which specifies the format of the value.

        ##### Method
        - **Method**: The HTTP method used for this request is POST. This indicates that the request will submit data to the server for processing.

        ##### URL
        - **URL**: This points to the endpoint where the request is directed. In this case, it is "http://localhost:3000/api/action/like/delete", which is the local server address for deleting a like.

        ##### Headers
        - **Headers**: This section can include additional metadata for the request.
          - **Key**: An empty key indicates that there are no custom headers added for this request.
          - **Value**: The associated value is also empty.
          - **Type**: The default type is noted, but it is currently disabled, implying that it will not be included in the request.

        ##### Body
        - **Body**: Contains the actual data being sent with the request.
          - **Mode**: The body is configured in "raw" mode, meaning that the data is sent as plain text rather than a form-encoded string.
          - **Raw**: The raw data being sent is in JSON format:
            - **sessionId**: This should be replaced with the actual session identifier of the user making the request.
            - **accountId**: This field represents the identifier for the user's account associated with the like action.
            - **likeId**: This is the identifier of the like that is to be deleted. 

        Make sure to replace the placeholders with the appropriate values when making a request to this endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"likeId\":\"likeId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/message/create:
    post:
      tags:
        - ActionMessage
      summary: Action - Message - Create
      description: |-
        ### Action - Message - Create Endpoint Description

        This endpoint allows users to create a message action within a specified context. Below is a detailed description of each data field used in the request:

        - **auth**: This section includes authentication details required to access the endpoint.
          - **type**: Specifies the type of authentication used. In this case, it is "bearer" authentication.
          - **bearer**: Contains the information about the bearer token used for authorization.
            - **key**: This defines the name of the token field. It is usually "token".
            - **value**: This field contains the actual token value, which should be formatted as "BearerToken".
            - **type**: Denotes the format of the value, which is a "string".

        - **method**: Indicates the HTTP method to be used for the request. In this case, it is "POST", which means data will be sent to the server to create a new resource.

        - **url**: The endpoint's URL where the request will be sent. The provided URL is "http://localhost:3000/api/action/message/create". This implies the API is hosted locally on port 3000.

        - **headers**: This field is used to include any additional information in the request headers.
          - **key**: This is the name of the header. In this case, it is left empty.
          - **value**: This holds the value for the corresponding header, which is also empty here.
          - **type**: Indicates the type of header, which is "default".
          - **disabled**: A boolean that indicates whether this header is active or inactive. Here, it is set to true, meaning this header is currently disabled.

        - **body**: This contains the content of the request that will be sent to the server.
          - **mode**: The format of the data being sent. It is set to "raw", meaning the data will be sent as plain text.
          - **raw**: This is the actual JSON data that will be sent in the request body. It includes several fields:
            - **sessionId**: This is a unique identifier for the session associated with the message. Replace "sessionId" with the actual session identifier.
            - **accountId**: This field refers to the unique identifier of the account on which the action is being performed. Replace "accountId" with the actual account identifier.
            - **path**: This indicates the path to the resource that the message is associated with, such as a video channel, formatted as "/live/channel/video123'.
            - **targetType**: Specifies the type of target for the message; in this case, it is set to "videoId".
            - **targetId**: This is the unique identifier for the target resource. Replace "videoId" with the appropriate video identifier.
            - **sourceType**: Indicates the type of source from which the message originates. Here it is set to "accountId".
            - **sourceId**: This field identifies the source resource, typically the account's ID, which should match the actual account identifier.
            - **didMessage**: A boolean field that indicates whether a message was sent. Here, it's set to true.
            - **text**: This is the content of the message being sent. The example provided is "Hello".
            - **priority**: Indicates the priority level of the message. Possible values could include "high", "medium", or "low". In this case, it is set to "high".
            - **name**: An optional field that can hold a name related to the message. It is left empty in this example.
            - **description**: An optional field intended for further description of the message. It is also left empty.
            - **tags**: An optional field for any tags associated with the message, left empty here.

        - **options**: This contains additional settings for the raw data.
          - **raw**: Specifies the language format of the raw data. It is set to "json", indicating that the body content is in JSON format.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didMessage: true
                text: Hello
                priority: high
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/message/update:
    put:
      tags:
        - ActionMessage
      summary: Action - Message - Update
      description: |-
        ### Action - Message - Update Endpoint Description

        #### Request Details:
        - **Method**:  
          Specifies the HTTP method for the request. In this case, it is a `PUT`, which is typically used to update existing resources.

        - **URL**:  
          The endpoint for the request is `http://localhost:3000/api/action/message/update`, where the action for updating a message will be handled.

        #### Authorization:
        - **Auth Type**:  
          The request requires bearer token authentication. This means that the client needs to provide a valid token to access this endpoint.

        - **Bearer Token**:  
          A placeholder for the authentication token used in the request. It should be replaced with the actual bearer token value. 

        #### Headers:
        - **Client-UUID**:  
          A header that carries a unique identifier for the client making the request. This helps the server recognize which client is sending the request.

        #### Body Parameters:
        - **sessionId**:  
          A unique identifier for the session in which the message is being processed. This should be replaced with the actual session ID.

        - **accountId**:  
          The ID of the account that owns the message or is associated with the request. Should be replaced with the actual account ID.

        - **path**:  
          The path of the resource being targeted by the message. This indicates where the message will be applied, e.g., a specific video resource.

        - **targetType**:  
          Indicates the type of the target for the message. In this case, it's a `videoId`, specifying that the message is directed at a video resource.

        - **targetId**:  
          The ID of the target resource (video in this case) that the update affects. This should be replaced with the actual target ID.

        - **sourceType**:  
          This specifies the type of source responsible for generating the message. Here it is defined as `accountId`.

        - **sourceId**:  
          The ID of the source from which the message originates. This should correspond to the actual source ID.

        - **didMessage**:  
          A boolean value indicating whether the message was sent or delivered. This is a flag to show the status of the message.

        - **text**:  
          The content of the message being updated. It can be any string text; in this case, it is initialized to "Hello World!".

        - **priority**:  
          An indication of the message's importance. It can have values like `high`, `medium`, or `low`, specifying how critical the message is.

        - **name**:  
          A field that can be used to provide a name for the message. It is currently empty and can be filled with a descriptive name.

        - **description**:  
          This field allows for a more detailed description of the message. It is empty by default but can be used to add context.

        - **tags**:  
          A space where tags can be added to categorize or label the message. It is also empty by default.

        - **messageId**:  
          A unique identifier for the message being updated. This should be filled in with the actual message ID you wish to reference.

        #### Body Format:
        - **Mode**:  
          The body format is set to `raw`, indicating that the data being sent is in raw format and will be treated as a single block of text.

        - **Language**:  
          The format of the data in the body is specified as `json`, meaning that the content should adhere to the JSON structure.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didMessage: true
                text: Hello World!
                priority: high
                name: ''
                description: ''
                tags: ''
                messageId: messageId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/message/get:
    get:
      tags:
        - ActionMessage
      summary: Action - Message - Get
      description: |-
        ### Endpoint: Action - Message - Get

        **Description**: This endpoint is used to retrieve a specific message from the server based on the provided identifiers.

        ---

        #### Request

        - **Auth**:
          - **Type**: `bearer` - This indicates that the request requires bearer token authentication.
          - **Bearer**:
            - **Key**: `token` - The key used for authentication.
            - **Value**: `BearerToken` - A placeholder for the actual token that needs to be provided for authorization.
            - **Type**: `string` - The data type of the value is a string.

        - **Method**: `GET` - This HTTP method is used to request data from the specified resource.

        - **URL**: 
          ```
          http://localhost:3000/api/action/message/get/?messageId=messageId&sessionId=sessionId&accountId=accountId
          ```
          - This is the endpoint URL where the request is sent. 
          - **Query Parameters**:
            - `messageId`: This parameter identifies the specific message you want to retrieve. Replace `messageId` with the actual ID of the message.
            - `sessionId`: This parameter identifies the session related to the message retrieval. Replace `sessionId` with the actual ID of the session.
            - `accountId`: This parameter identifies the account that contains the message. Replace `accountId` with the actual account ID.

        - **Headers**:
          - There are currently no headers specified. The header entry is disabled, which means it will not be included in the request. If any headers are needed for this endpoint in the future, they should be added here.

        - **Body**:
          - **Mode**: `raw` - This indicates that the body of the request is in raw format. 
          - **Raw**: 
            - The body of the request is empty (`""`). Since this is a `GET` request, it typically does not require a body. 

        ---

        ### Note
        Make sure to replace the placeholder values (`BearerToken`, `messageId`, `sessionId`, `accountId`) with actual valid data when making a request.
      security:
        - bearerAuth: []
      parameters:
        - name: messageId
          in: query
          schema:
            type: string
          example: messageId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/message/all:
    get:
      tags:
        - ActionMessage
      summary: Action - Message - Get All
      description: |-
        ### Endpoint Description: Action - Message - Get All

        - **Name**: Action - Message - Get All
          - This is the name of the API endpoint that retrieves all messages related to a specific action.

        - **Request**:  
          - This section outlines the configuration needed to make the request to the API.

          - **Auth**:  
            - **Type**: bearer
              - This indicates that the request is authenticated using Bearer Token authentication.
            - **Bearer**: 
              - This is an array that contains the authentication details.
              - **Key**: token 
                - The name/key used for the token in the authentication.
              - **Value**: BearerToken 
                - This is a placeholder for the actual token needed for authentication.
              - **Type**: string 
                - Indicates that the token value is a string.

          - **Method**:
            - **GET**
              - Specifies that this endpoint uses the GET HTTP method to retrieve information.

          - **URL**: 
            - `http://localhost:3000/api/action/message/all/?sessionId=sessionId&accountId=accountId`
              - This is the endpoint URL where the request will be sent.
              - It includes query parameters:
                - **sessionId**: sessionId
                  - A placeholder for the session identifier, which may be required for context or security purposes.
                - **accountId**: accountId
                  - A placeholder for the account identifier, which may specify which user's messages to retrieve.

          - **Headers**: 
            - An array of header fields to be included in the request.
            - Each header consists of:
              - **Key**: (currently empty)
                - This is where you can define custom headers if necessary.
              - **Value**: (currently empty)
                - This is where you specify the value for the custom header.
              - **Type**: default
                - Indicates the default type of header.
              - **Disabled**: true
                - This means that this header is currently not in use. 

          - **Body**: 
            - **Mode**: raw
              - Indicates that the body of the request is sent as raw data, although in this case, no data is provided.
            - **Raw**: 
              - This field is empty, meaning no request body content is required for this GET request. 

        This endpoint is used to fetch all messages related to actions tied to a user session and account. Ensure that the correct bearer token and query parameters are provided when making the request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/message/delete:
    post:
      tags:
        - ActionMessage
      summary: Action - Message - Delete
      description: |-
        ### Action - Message - Delete

        #### Request Overview
        This endpoint is used to delete a specific message from the system. It requires authentication and the relevant identifiers for the session, account, and message that needs to be deleted.

        #### Request Details

        - **Authentication**:
          - **Type**: Bearer Token
          - **Bearer Token**: This uses a bearer token for authentication.
            - **Key**: `token` 
            - **Value**: `sessionId` 
            - **Type**: This is specified as a string. The `sessionId` acts as the authorization credential to validate the user's session.

        - **Method**: 
          - **Type**: POST 
          - This method is used to request the deletion of a message.

        - **URL**:
          - **Endpoint**: `http://localhost:3000/api/action/message/delete`
          - This is the endpoint that handles the delete request for messages.

        - **Headers**: 
          - No headers are specified. The default header configuration is disabled.

        - **Body**:
          - **Mode**: Raw
          - **Content**: The body of the request is in raw JSON format containing the following fields:
            - **sessionId**: This is the unique identifier for the user's session. It is used to authenticate the user making the request.
            - **accountId**: This is the unique identifier for the user's account. It links the action to a specific account in the system.
            - **messageId**: This is the unique identifier for the message that needs to be deleted. It specifies which message the system should remove.

        #### Summary
        The "Action - Message - Delete" endpoint allows users to delete a message by providing the necessary identifiers for session, account, and message. It requires a valid bearer token for authentication and sends the necessary data in the body of the POST request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"messageId\":\"messageId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/moderate/create:
    post:
      tags:
        - ActionModerate
      summary: Action - Moderate - Create
      description: |-
        ### Action - Moderate - Create

        This endpoint is designed to create a moderate action related to a specified video channel. Below are the details for each piece of data that is included in the request.

        #### Request Method
        - **Method**: POST
          - This indicates that the endpoint is used to send data to the server to create a new resource.

        #### Request URL
        - **URL**: `http://localhost:3000/api/action/moderate/create`
          - This is the endpoint where the POST request is made, typically used for creating a moderation action.

        #### Authentication
        - **Auth Type**: Bearer
          - This indicates that the request uses Bearer Token authentication. The token must be included in the request to authorize access.

        - **Bearer Token**: 
          - **Key**: `token`
            - This is the key used to identify the token in the authorization header.
          - **Value**: `BearerToken`
            - This is a placeholder for the actual token that would need to be provided for authentication.
          - **Type**: string
            - Specifies that the value is of type string.

        #### Headers
        - **Headers**: 
          - This section may include additional headers for the request, but all entries are currently disabled and empty.
          - **Key**: `""` 
            - There are no specific headers being passed in this example, indicated by empty quotes.
          - **Value**: `""`
            - As with the key, the value is also empty.
          - **Disabled**: true
            - This means that the header configuration is turned off and not used in the request.

        #### Request Body
        - **Body Mode**: raw
          - The request body will be sent in a raw format, specifically JSON.

        - **Raw Content**:
          - The following JSON structure is included in the request body:
          
        ```json
        {
            "sessionId": "sessionId",
            "accountId": "accountId",
            "path": "/live/channel/video123",
            "targetType": "videoId",
            "targetId": "videoId",
            "sourceType": "accountId",
            "sourceId": "accountId",
            "name": "",
            "description": "",
            "tags": "",
            "didModerate": true,
            "moderationType": "remove"
        }
        ```

        - **Field Descriptions**:
          - **sessionId**: A unique identifier for the session during which the moderation action is being performed. Placeholder value is provided.
          - **accountId**: The ID of the account initiating the moderation action. Placeholder value is provided.
          - **path**: The path that specifies the location of the video on the server. In this case, it refers to a video in a live channel.
          - **targetType**: Indicates the type of the target being moderated, which in this case is a video ID.
          - **targetId**: The unique identifier of the target video that is being moderated.
          - **sourceType**: Indicates the type of source from which the moderation request is initiated. This refers to an account ID.
          - **sourceId**: The unique identifier for the account that is making the request.
          - **name**: A placeholder for the name associated with the moderation action.
          - **description**: A placeholder for any additional information about the moderation action.
          - **tags**: Placeholder for any tags that might relate to the moderation action.
          - **didModerate**: A boolean indicating whether the moderation action was executed. Set to true, indicating that moderation should take place.
          - **moderationType**: Specifies the type of moderation action to be taken, such as "remove" which indicates a removal action.

        This endpoint will facilitate adding moderation actions for videos by specifying various attributes that define the context and type of action taken.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                name: ''
                description: ''
                tags: ''
                didModerate: true
                moderationType: remove
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/moderate/update:
    put:
      tags:
        - ActionModerate
      summary: Action - Moderate - Update
      description: |-
        ### Endpoint Description: Action - Moderate - Update

        This endpoint allows the user to update moderation actions for a specific video or content. Below is a detailed description of each data field included in the request.

        #### Request Fields:

        - **Auth**: 
          - **Type**: The type of authentication used for the request, which is "bearer".
          - **Bearer**: This section contains the authentication token that must be included in the request.
            - **Key**: This field represents the name of the token in the request. 
            - **Value**: This is the actual token string that will authenticate the user. It should be replaced with a valid Bearer token when making a request.
            - **Type**: Specifies that the data type for the token value is a string.

        - **Method**: 
          - The HTTP method used for the request, which is "PUT". This indicates that this endpoint is being used to update existing resources.

        - **URL**: 
          - The endpoint URL where the request will be sent. In this case, it’s `http://localhost:3000/api/action/moderate/update`.

        - **Headers**: 
          - This section includes additional metadata sent with the request.
            - **Key**: "Client-UUID" is used to identify the client making the request.
            - **Value**: This field should contain the unique Client UUID, which helps in tracking and managing client requests.
            - **Type**: Describes the nature of the header, here it is "default".

        #### Body Fields:

        The body of the request contains the data required for updating the moderation action:

        - **sessionId**: 
          - A unique identifier for the session during which the action is being moderated.

        - **accountId**: 
          - The ID of the account associated with the moderation action.

        - **path**: 
          - The path to the content that is being moderated, typically in a specific format such as `/live/channel/video123`.

        - **targetType**: 
          - Indicates the type of target being moderated. In this case, it is set to "videoId", suggesting that the moderation is specifically for a video.

        - **targetId**: 
          - The unique identifier for the target, which corresponds to the video being moderated.

        - **sourceType**: 
          - Specifies the source type for the action. It is set to "accountId", indicating that the action is coming from an account.

        - **sourceId**: 
          - The unique identifier for the source, which should match the account ID.

        - **name**: 
          - An optional field to provide a name or title for the moderation action.

        - **description**: 
          - An optional field for additional information or context regarding the moderation action.

        - **tags**: 
          - A field for specifying any relevant tags that can aid in categorizing or describing the moderation action.

        - **didModerate**: 
          - A boolean value indicating whether the moderation action was actually performed or not. It can be either true or false.

        - **moderationType**: 
          - Specifies the type of moderation applied (e.g., "none", "strict"). This indicates how the content was moderated.

        - **moderateId**: 
          - A unique identifier for the moderation action itself, allowing it to be tracked or referenced in the system.

        ### Summary:
        Sending a PUT request to this endpoint with the specified parameters allows for the update of existing moderation actions associated with a video or content, supporting functionalities such as tracking, auditing, and managing content moderation.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                name: ''
                description: ''
                tags: ''
                didModerate: false
                moderationType: none
                moderateId: moderateId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/moderate/get:
    get:
      tags:
        - ActionModerate
      summary: Action - Moderate - Get
      description: |-
        ### Endpoint Description: Action - Moderate - Get

        - **Name**: Action - Moderate - Get
          - This is the name of the API request that retrieves moderate action data based on specified parameters.

        - **Request**: 
          - This section details the configuration of the request being made to the API.

          - **Auth**: 
            - **Type**: bearer 
              - This indicates that bearer token authentication is being used to authorize the request. The server checks the token provided to verify that the user has permission to access the endpoint.

            - **Bearer**: 
              - This section contains the details for the bearer token used in authorization.
              - **Key**: token
                - This is the key name for the bearer token in the authentication process.
              - **Value**: BearerToken
                - This is a placeholder for the actual bearer token that must be provided for authentication. This token is used to validate the user's session and permissions.
              - **Type**: string
                - This indicates that the value of the bearer token is a string.

          - **Method**: GET
            - The HTTP method used for this request is GET, indicating that the request is intended to retrieve data from the specified resource.

          - **URL**: 
            - `http://localhost:3000/api/action/moderate/get/?moderateId=moderateId&sessionId=sessionId&accountId=accountId`
              - This is the endpoint URL where the GET request is sent. 
              - The URL contains query parameters:
                - **moderateId**: This parameter should be replaced with the actual ID of the moderation action you are querying.
                - **sessionId**: This parameter should be replaced with the session ID relevant to the request.
                - **accountId**: This parameter should be replaced with the account ID you want to retrieve data for.

          - **Headers**: 
            - This section is where headers can be specified to be sent along with the request. 
              - **Key**: 
                - This is where the name of the header would typically be specified, but it is currently empty.
              - **Value**: 
                - Similarly, this is where the value for the header would be specified, but it is also currently empty.
              - **Type**: default 
                - This indicates that the header type is default; however, this entry is disabled, meaning it will not be sent with the request.

          - **Body**: 
            - **Mode**: raw 
              - This indicates the format of the request body. In this case, the body content type is raw.
            - **Raw**: 
              - This is where the raw body content would be specified. Currently, it is empty, meaning no additional data is sent in the request body. 

        This API request is primarily designed to retrieve moderation action data based on specified identifiers, utilizing bearer token authentication to ensure that only authorized users can access the information.
      security:
        - bearerAuth: []
      parameters:
        - name: moderateId
          in: query
          schema:
            type: string
          example: moderateId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/moderate/all:
    get:
      tags:
        - ActionModerate
      summary: Action - Moderate - Get All
      description: |-
        ### Action - Moderate - Get All

        #### Request Details

        - **Auth**
          - **Type:** This specifies the type of authentication required for the request. In this case, it is "bearer" authentication.
          - **Bearer Token:**
            - **Key:** This indicates the key for the authorization token, which is simply labeled as "token".
            - **Value:** This is the actual token value needed to authenticate the request. Here it is represented as "BearerToken", which is a placeholder for the actual token.
            - **Type:** The data type of the token is specified as "string".

        - **Method**
          - This indicates the HTTP method to be used for the request. In this case, it is a "GET" method, which is used to retrieve data from the specified resource.

        - **URL**
          - This is the endpoint where the request is sent. The URL is structured as follows:
            - `http://localhost:3000/api/action/moderate/all/` is the base endpoint.
            - `?sessionId=sessionId&accountId=accountId` are query parameters included in the URL. This allows the client to pass specific data:
              - **sessionId:** A placeholder for a unique identifier representing the current session.
              - **accountId:** A placeholder for the unique identifier for the account being accessed.

        - **Headers**
          - This section is meant for adding additional metadata to the request. Currently, there are no headers specified:
            - **Key:** Left empty, indicating that no specific header key is being used.
            - **Value:** Left empty, showing that there is no corresponding value for the header key.
            - **Type:** Default type, which means it is the standard header type.
            - **Disabled:** Set to true, indicating that this header is not active and will not be sent with the request.

        - **Body**
          - This defines the body of the request. The body is specified as:
            - **Mode:** "raw" indicates that the request body is sent as a raw string format.
            - **Raw:** The raw body content is empty in this case, meaning no additional data is being sent with the request.

        This summary captures the essential details of the "Action - Moderate - Get All" endpoint, providing a clear understanding of the API request structure.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/moderate/delete:
    post:
      tags:
        - ActionModerate
      summary: Action - Moderate - Delete
      description: |-
        ### Action - Moderate - Delete

        This endpoint is designed to handle the deletion of a moderation action. Below is a detailed description of each component of the request:

        - **Name**: Action - Moderate - Delete  
          This is the title of the API endpoint, indicating that it is used for deleting a moderation action.

        - **Request**:  
          This section contains the details related to the request that will be sent to the API.

          - **Auth**:  
            This specifies the authentication method used for the request.
            
            - **Type**: `bearer`  
              This indicates that the bearer token authentication method is being used.
              
            - **Bearer**:  
              This section contains details about the bearer token.
              
              - **Key**: `token`  
                This is the identifier for the token.
                
              - **Value**: `sessionId`  
                This represents the actual session identifier that will be used for authentication.
                
              - **Type**: `string`  
                This indicates that the value is of string type.

          - **Method**: `POST`  
            This specifies the HTTP method being used for the request. In this case, it is a POST request to send data to the server.

          - **URL**: `http://localhost:3000/api/action/moderate/delete`  
            This is the endpoint URL where the request will be sent. It points to the local server running on port 3000.

          - **Headers**:  
            This section allows for specifying additional HTTP headers for the request.
            
            - **Key**: `""`  
              There are no specific headers set in this example (key is empty).
              
            - **Value**: `""`  
              Corresponding value for the header is also empty.
              
            - **Type**: `default`  
              This indicates that the header is of the default type.
              
            - **Disabled**: `true`  
              This indicates that the header is currently disabled and will not be sent with the request.

          - **Body**:  
            This section contains the data that will be sent in the body of the request.

            - **Mode**: `raw`  
              This specifies that the body content is in raw format. 

            - **Raw**:  
              This contains the actual JSON data that will be sent to the server.

              - **sessionId**: `sessionId`  
                This field holds the session identifier used for the user session.
                
              - **accountId**: `accountId`  
                This field holds the identifier for the account which is associated with the moderation action being deleted.
                
              - **moderateId**: `moderateId`  
                This field holds the identifier for the specific moderation action that is to be deleted.

        This endpoint is useful for developers who need to remove moderation actions and requires proper authentication along with the relevant identifiers in the request body.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"moderateId\":\"moderateId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/promote/create:
    post:
      tags:
        - ActionPromote
      summary: Action - Promote - Create
      description: |-
        ### Endpoint: Promote - Create

        This API endpoint allows users to create a promotion action. Below is a detailed description of each data component used in this request.

        #### Authentication
        - **Type**: Bearer Token
          - **Key**: `token`
          - **Value**: `BearerToken` (This is a placeholder for the actual bearer token that authenticates the user making the request.)

        #### Request Details
        - **Method**: POST
          - This specifies that the request will be creating a new resource on the server.

        - **URL**: `http://localhost:3000/api/action/promote/create`
          - This is the endpoint where the request is sent to create a promotion.

        #### Headers
        - **Key**: (Empty)
          - This field is currently not being used, as indicated by the empty value and the `disabled` status being true. Headers can be crucial for certain requests and might need to be configured based on the API's requirements.

        #### Request Body
        - **Mode**: Raw
          - The request body is sent in a raw format, which is typically in JSON.

        ##### JSON Payload Structure:
        ```json
        {
            "sessionId": "sessionId",
            "accountId": "accountId",
            "path": "/live/channel/video123",
            "targetType": "streamer",
            "targetId": "videoId",
            "sourceType": "accountId",
            "sourceId": "accountId",
            "tokenAmount": 20,
            "name": "promote1",
            "description": "",
            "tags": ""
        }
        ```

        - **sessionId**: 
          - A unique identifier for the session related to this promotion action. It helps track the context in which the promotion occurs.

        - **accountId**: 
          - The identifier of the account initiating the promotion. This is crucial for associating the promotion with the correct user.

        - **path**: 
          - The path to the resource being promoted. In this example, it indicates a specific live video channel.

        - **targetType**: 
          - Specifies the type of target for the promotion. In this case, it is set to "streamer," indicating that the promotion will aim toward a streamer.

        - **targetId**: 
          - The unique identifier for the target being promoted. Here, it represents the video being promoted.

        - **sourceType**: 
          - Defines the type of source from which the promotion originates. It is set to "accountId," indicating that the source is the account itself.

        - **sourceId**: 
          - Similar to `accountId`, this is the identifier for the source account.

        - **tokenAmount**: 
          - Specifies the amount of tokens to be used for the promotion. In this case, it is set to 20 tokens.

        - **name**: 
          - A name for the promotion, which helps in identifying it later. Here it is labeled "promote1."

        - **description**: 
          - An optional field for additional details about the promotion. It is currently empty.

        - **tags**: 
          - An optional field to include any relevant tags for better categorization of the promotion. It is currently empty.

        This endpoint is designed to streamline the promotion creation process, allowing users to easily configure their promotion parameters for effective marketing.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: promote1
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/promote/update:
    put:
      tags:
        - ActionPromote
      summary: Action - Promote - Update
      description: |-
        ### Action - Promote - Update Endpoint Description

        This is a PUT request to update a promotion action on a specified target. Below is a detailed description of the request components.

        #### Request Overview
        - **Method**: PUT
        - **Endpoint URL**: `http://localhost:3000/api/action/promote/update`

        #### Authentication
        - **Auth Type**: Bearer token authentication is used to authorize the request.
          - **Token**: A string representing the bearer token required for authentication. Replace `BearerToken` with the actual token value.

        #### Headers
        - **Client-UUID**: A unique identifier for the client making the request. Replace `ClientUUID` with the actual UUID to identify the client.

        #### Body Parameters
        The body of the request is in JSON format and contains the following fields:

        1. **sessionId**: A string representing the session identifier associated with the promotion action.

        2. **accountId**: A string that specifies the unique identifier for the account initiating the promotion.

        3. **promoteId**: A string that identifies the unique promotion action being updated.

        4. **path**: A string indicating the path where the video or content is located, such as `/live/channel/video123`. This provides context about the specific content being promoted.

        5. **targetType**: A string denoting the type of target for the promotion, such as "streamer". This helps specify who or what is receiving the promotion.

        6. **targetId**: A string that indicates the unique identifier for the target of the promotion, such as a video ID.

        7. **sourceType**: A string that represents the type of source initiating the promotion, e.g., "accountId".

        8. **sourceId**: A string indicating the unique identifier for the source that owns the promotion, generally the same as `accountId`.

        9. **tokenAmount**: An integer representing the amount of tokens being used for the promotion. In this case, it is set to `20`.

        10. **name**: A string that stores the name associated with the promotion. Here, it is `"Farooq"`.

        11. **description**: A string providing additional details about the promotion. This is set to `"this is description"`.

        12. **tags**: A string of tags associated with the promotion, used for categorization or searchability. In this case, it is set to `"xyz"`.

        ### Summary
        This endpoint allows users to update promotion actions by providing details such as session ID, account information, target details, the number of tokens, and descriptive information. Make sure to replace placeholders with actual values when making a request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                promoteId: promoteId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: Farooq
                description: this is description
                tags: xyz
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/promote/get:
    get:
      tags:
        - ActionPromote
      summary: Action - Promote - Get
      description: |-
        {
          "name": "Action - Promote - Get",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "BearerToken",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "url": "http://localhost:3000/api/action/promote/get/?promoteId=promoteId&sessionId=sessionId&accountId=accountId",
            "headers": [
              {
                "key": "",
                "value": "",
                "type": "default",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            }
          }
        }

        ### Description of Each Data:

        - **name**: This is the title of the API request. It is clearly labeled as "Action - Promote - Get," indicating that this request is related to promoting an action.

        - **request**: This object encapsulates all the details required to make the API call.

          - **auth**: This section specifies the authentication method required for the API request. Here, it is set to bearer token authentication.

            - **type**: Indicates the type of authentication used, which is "bearer" in this instance.

            - **bearer**: An array containing objects for bearer token configuration.

              - **key**: Represents the identifier for the bearer token, which is named "token."

              - **value**: This is where the actual bearer token is provided, represented as "BearerToken." This will typically be replaced with an actual token when making a request.

              - **type**: Specifies the data type of the value, which is set to "string."

          - **method**: This signifies the HTTP method to be used for the request. In this case, it is a "GET" request, meaning the API will retrieve data.

          - **url**: This is the endpoint URL where the API request will be sent. It specifies the base URL (`http://localhost:3000/api/action/promote/get/`) and includes query parameters for `promoteId`, `sessionId`, and `accountId`, which are placeholders that need to be filled in with actual values when making the request.

            - **promoteId**: A query parameter representing the ID of the promotion to be fetched.

            - **sessionId**: A query parameter representing the session ID associated with the promotion request.

            - **accountId**: A query parameter for the account ID related to the request.

          - **headers**: This array is for any additional HTTP headers that may be needed for the request.

            - **key**: The name of the header. In this case, it is empty.

            - **value**: The value of the header, which is also empty here.

            - **type**: The type of the header, set to "default."

            - **disabled**: A boolean that indicates whether this header is currently active or not. Here, it is `true`, meaning this header will not be sent with the request.

          - **body**: This section specifies the body of the request.

            - **mode**: This indicates the format of the request body. It is set to "raw," which means that the body will contain raw data.

            - **raw**: The actual content of the request body in raw format. Currently, this is empty since GET requests typically do not have a body.
      security:
        - bearerAuth: []
      parameters:
        - name: promoteId
          in: query
          schema:
            type: string
          example: promoteId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/promote/all:
    get:
      tags:
        - ActionPromote
      summary: Action - Promote - Get All
      description: |-
        ### Endpoint Description

        **Name:** Action - Promote - Get All  
        This endpoint is used to retrieve a list of all promotions associated with a specific session and account.

        #### Request Structure

        - **Authentication:**
          - **Type:** Bearer Token
            - This endpoint requires a bearer token for authentication. The token is passed in the Authorization header of the request.
          
          - **Key:** token
            - The key for the bearer token.
          
          - **Value:** BearerToken
            - This is a placeholder for the actual bearer token that should be used for authentication.
          
          - **Type:** string
            - Indicates that the token value should be a string.

        - **Method:**
          - **GET**
            - Specifies that this request will retrieve data from the server.

        - **URL:**
          - **http://localhost:3000/api/action/promote/all/?sessionId=sessionId&accountId=accountId**
            - This is the endpoint's URL.
            - **Path:** /api/action/promote/all/
            - **Query Parameters:**
              - **sessionId:** Represents the unique identifier for a session. This is required to filter the promotions.
              - **accountId:** Represents the unique identifier for an account. This is required to filter the promotions.

        - **Headers:**
          - There are currently no custom headers included in the request.
          - The header entry is disabled and does not contain any key-value pairs.

        - **Body:**
          - **Mode:** raw
            - Indicates the format of the body, which in this case is set to raw.
            
          - **Raw:** 
            - The body is empty as this is a GET request, and typically does not require a body.

        ### Usage
        Users should replace `BearToken` with a valid authentication token, and provide actual values for `sessionId` and `accountId` in the URL to successfully call this endpoint and receive the promotions data.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/promote/delete:
    post:
      tags:
        - ActionPromote
      summary: Action - Promote - Delete
      description: |-
        {
          "description": {
            "name": "Action - Promote - Delete",
            "request": {
              "auth": {
                "type": "bearer": "This indicates that the authentication method used for this request is Bearer Token authentication. A token is required to access this endpoint.",
                "bearer": [
                  {
                    "key": "token": "This is the key used to specify the type of authentication. In this case, it's set to 'token'.",
                    "value": "sessionId": "This is the placeholder value representing the session ID that must be provided as part of the authentication to access the endpoint.",
                    "type": "string": "This indicates that the value of the token is a string."
                  }
                ]
              },
              "method": "POST": "This specifies that the HTTP method used for this request is POST, which is typically used to send data to the server.",
              "url": "http://localhost:3000/api/action/promote/delete": "This is the endpoint URL where the request will be sent. It points to the local server running on port 3000 and targets the action promote delete functionality.",
              "headers": [
                {
                  "key": "": "This field is currently empty, meaning no additional headers will be sent with the request.",
                  "value": "": "Since the key is empty, this value is also not utilized.",
                  "type": "default": "This indicates that the header type is default, but since the key and value are empty, this header is effectively disabled.",
                  "disabled": true: "This indicates that this header is currently disabled and will not be included in the request."
                }
              ],
              "body": {
                "mode": "raw": "This indicates that the body of the request is formatted as raw data rather than in a predefined format such as JSON or form data.",
                "raw": "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"promoteId\":\"promoteId\"}": "This is the body of the request containing raw JSON data. It includes three fields: 'sessionId', 'accountId', and 'promoteId', which should be replaced with actual values for the request to be processed successfully."
              }
            }
          }
        }
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"promoteId\":\"promoteId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/read/create:
    post:
      tags:
        - ActionRead
      summary: Action - Read - Create
      description: |-
        ### Action - Read - Create

        This endpoint is used to create a read action in the system. The following details outline the structure and expected input for the request:

        #### Request Authentication
        - **Auth Type:** Bearer
          - This indicates that the request requires a bearer token for authentication. 
          - **Bearer Token:**
            - *Key*: `token` 
            - *Value*: The value should be prefixed with "Bearer" followed by a space and then the actual token (e.g., "Bearer {YourActualToken}").
            - *Type*: String

        #### Request Method
        - **Method:** POST
          - This specifies that the request type is a POST method, typically used for creating new resources.

        #### Request URL
        - **URL:** `http://localhost:3000/api/action/read/create`
          - This is the endpoint on the server where the request will be sent. The `/create` part indicates that it is for creating a new read action.

        #### Request Headers
        - **Headers:**
          - Currently, no specific headers are defined as the key and value fields are empty. However, headers can typically be used for content type or other authentication details if needed.

        #### Request Body
        - **Body Mode:** Raw
          - The body of the request is provided in raw format as a JSON string.

        - **Raw JSON Structure:**
          ```json
          {
              "sessionId": "sessionId",
              "accountId": "accountId",
              "path": "/live/channel/video123",
              "targetType": "streamer",
              "targetId": "videoId",
              "sourceType": "accountId",
              "sourceId": "accountId",
              "tokenAmount": 20,
              "name": "read1",
              "description": "",
              "tags": ""
          }
          ```

        #### JSON Field Descriptions
        - **sessionId:** 
          - This is a string that represents a unique identifier for the session in which the read action is taking place. 

        - **accountId:** 
          - A string that identifies the account associated with the read action.

        - **path:** 
          - The path is a string that specifies the location of the resource being read. In this case, it shows a live channel path.

        - **targetType:** 
          - A string that specifies the type of target being accessed. In this context, "streamer" indicates that the target is a streaming service or channel.

        - **targetId:** 
          - This string represents the unique identifier of the target resource. It should be the ID of the video or stream being accessed.

        - **sourceType:** 
          - This indicates the type of source from which the action is being initiated. Here, it is identified by "accountId."

        - **sourceId:** 
          - A string that denotes the unique identifier of the source from which the read action originates.

        - **tokenAmount:** 
          - A numeric value indicating the amount of tokens or credits used in this read action. In this case, it is set to 20.

        - **name:** 
          - A string that provides a name for the read action, allowing for easier identification.

        - **description:** 
          - A string meant for additional information about the read action. It is currently empty but can be populated with relevant details.

        - **tags:** 
          - A string intended for categorizing or tagging the action for easier searching or filtering. It is also currently empty.

        This detailed breakdown of each field should help users understand the required structure and purpose of the data being sent with this API request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: read1
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/read/update:
    put:
      tags:
        - ActionRead
      summary: Action - Read - Update
      description: |-
        {
          "description": {
            "name": "Name of the action being performed, in this case, 'Action - Read - Update'.",
            
            "request": {
              "auth": {
                "type": "bearer": "Authentication method being used, which is Bearer Token in this case.",
                
                "bearer": [
                  {
                    "key": "token": "Identifies the type of token used for authentication.",
                    "value": "BearerToken": "The actual token value that is required to authenticate the user.",
                    "type": "string": "Indicates that the type of the value is a string."
                  }
                ]
              },
              
              "method": "PUT": "The HTTP method used for this request; in this case, it is PUT, which is typically used for updating resources.",
              
              "url": "http://localhost:3000/api/action/read/update": "The URL endpoint where the request is sent to perform the action.",
              
              "headers": [
                {
                  "key": "Client-UUID": "A unique identifier for the client making the request.",
                  "value": "ClientUUID": "The actual UUID value for the client, which is required in the header.",
                  "type": "default": "Specifies that this is a default type header."
                }
              ],
              
              "body": {
                "mode": "raw": "Indicates that the body of the request is being sent in raw format.",
                
                "raw": "{\n    \"sessionId\": \"sessionId\",\n    \"accountId\": \"accountId\",\n    \"readId\":\"readId\",\n    \"path\": \"/live/channel/video123\",\n    \"targetType\": \"streamer\",\n    \"targetId\": \"videoId\",\n    \"sourceType\": \"accountId\",\n    \"sourceId\": \"accountId\",\n    \"tokenAmount\": 20,\n    \"name\": \"Farooq\",\n    \"description\": \"this is description\",\n    \"tags\": \"xyz\"\n}": "The raw JSON body of the request which contains multiple fields to be sent with the update.",
                
                "options": {
                  "raw": {
                    "language": "json": "Specifies that the language of the raw body content is JSON."
                  }
                }
              }
            }
          }
        }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                readId: readId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: Farooq
                description: this is description
                tags: xyz
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/read/get:
    get:
      tags:
        - ActionRead
      summary: Action - Read - Get
      description: |-
        ### Description of the Endpoint Data

        - **name**: This is the name of the API request. It describes the purpose of the request which, in this case, is to read data through a "GET" action.

        - **request**: This object contains all the details necessary to execute the API request.

          - **auth**: This section defines the authentication type required for the request.
            - **type**: Specifies the authentication method used. Here, it's set to "bearer", which means that the request requires a bearer token for authorization.
            - **bearer**: An array that contains the details of the bearer token.
              - **key**: The name of the token field, which is "token" in this instance.
              - **value**: This is where the actual token is provided, represented as "BearerToken". This value should typically be replaced with the actual bearer token needed for authentication.
              - **type**: Specifies the data type, which is "string" in this case.

          - **method**: Indicates the HTTP method used for the request. "GET" means this request is used to retrieve data from the server.

          - **url**: This is the endpoint URL where the request is sent. It includes the following parameters:
            - **readId**: Represents the ID of the item you want to read. This should be replaced with the actual ID you're querying.
            - **sessionId**: Represents the session identifier associated with the request. This should also be replaced with the actual session ID.
            - **accountId**: Represents the ID of the account you are retrieving data for. This should be replaced with the actual account ID.

          - **headers**: Contains any additional headers to be sent along with the request.
            - The current entry has an empty key and value, and is disabled, indicating that no extra headers are being used in this request.

          - **body**: This section defines the content of the request body.
            - **mode**: Indicates the format of the body. It's set to "raw", which means the payload is sent as plain text.
            - **raw**: Contains the actual content of the body. In this case, it's empty, suggesting no body content is necessary for this GET request.
      security:
        - bearerAuth: []
      parameters:
        - name: readId
          in: query
          schema:
            type: string
          example: readId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/read/all:
    get:
      tags:
        - ActionRead
      summary: Action - Read - Get All
      description: |-
        ### Endpoint Description: Action - Read - Get All

        - **Name**: Action - Read - Get All
          - This refers to a specific API operation designed to retrieve all actions stored in the database.

        - **Request**:
          - **Auth**:
            - **Type**: Bearer
              - This indicates that the request requires authentication via a bearer token.
              - **Bearer**: Provides details for authentication.
                - **Key**: 
                  - `token`
                    - This represents the authentication key required by the API to authorize the request.
                - **Value**: 
                  - `BearerToken`
                    - This is where the actual bearer token must be placed for authentication. Replace `BearerToken` with a valid token to access the API.
                - **Type**: 
                  - `string`
                    - Designates that the expected value for the token is a string.

          - **Method**:
            - **GET**
              - This specifies that the request will be using the HTTP GET method, which is typically used to retrieve data from the server.

          - **URL**:
            - `http://localhost:3000/api/action/read/all/?sessionId=sessionId&accountId=accountId`
              - This is the endpoint URL where the API can be accessed.
              - `sessionId` and `accountId` are query parameters that must be filled in with appropriate values to identify the session and account for which actions are being retrieved.

          - **Headers**:
            - An empty header is defined but currently disabled.
              - **Key**: `""`
                - This part is where you can specify custom headers if needed.
              - **Value**: `""`
                - The expected value for the custom header, currently left blank.
              - **Type**: 
                - `default`
                  - Indicates the type of the header, which is default in this case.
              - **Disabled**: 
                - `true`
                  - This means this particular header will not be sent with the request.

          - **Body**:
            - **Mode**: 
              - `raw`
                - Indicates that the body of the request is sent in raw format.
            - **Raw**: 
              - `""`
                - The body of the request is currently empty, as this is a GET request where typically no body is included.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/read/delete:
    post:
      tags:
        - ActionRead
      summary: Action - Read - Delete
      description: |-
        ### Description of Endpoint Data

        **Endpoint Name:**  
        Action - Read - Delete  

        **Request Details:**  
        - **Auth:**  
          - **Type:** Bearer Authentication  
            This requires a bearer token for authorization, which is typically used to verify the user's identity and grant access to protected resources.
          - **Bearer Array:**  
            - **Key:** token  
              The key represents the type of authentication being used.
            - **Value:** sessionId  
              This is a placeholder that should be replaced with the actual session ID for the user making the request.
            - **Type:** string  
              Indicates that the value should be formatted as a string.

        - **Method:**  
          - **POST**  
            This indicates that the request will submit data to the server for processing.

        - **URL:**  
          - **http://localhost:3000/api/action/read/delete**  
            This is the endpoint where the request is sent. It is hosted locally on port 3000, and the action being performed is to read and delete data.

        - **Headers:**  
          - This section is currently empty but reserved for any additional header key-value pairs needed for the request. The header is marked as disabled, indicating it is not currently in use.

        - **Body:**  
          - **Mode:** raw  
            This indicates that the body of the request will be sent as raw JSON data.
          - **Raw Data:**  
            - `{"sessionId":"sessionId","accountId":"accountId","readId":"readId"}`  
              This JSON object is structured to include three key-value pairs:  
              - **sessionId:** Represents the user's session identifier. Replace "sessionId" with the actual session ID.  
              - **accountId:** Represents the account identifier that is associated with the user. Replace "accountId" with the actual account ID.  
              - **readId:** Represents the unique identifier for the item intended to be deleted. Replace "readId" with the actual ID of the item.

        This endpoint is designed to manage the reading and deletion of specific data related to user actions in the application.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"readId\":\"readId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/refund/create:
    post:
      tags:
        - ActionRefund
      summary: Action - Refund - Create
      description: |-
        ### Action - Refund - Create

        #### Request Overview
        This endpoint is used to create a refund action for a specific session and account. It requires an authentication token and accepts a JSON body containing details about the refund.

        #### Authentication
        - **Type**: Bearer
        - **Bearer Token**: This is a placeholder for the actual token needed to authenticate the request. Replace "BearerToken" with your valid bearer token.

        #### Request Method
        - **Method**: POST
          - This request method is used to create a new resource or perform an action on the server.

        #### Request URL
        - **URL**: `http://localhost:3000/api/action/refund/create`
          - This is the endpoint where the refund action request is sent. It's hosted locally on port 3000.

        #### Headers
        - **Headers**: (No headers are defined)
          - Currently, there are no headers defined in the request. You can modify this to include any necessary headers if required.

        #### Request Body
        - **Mode**: Raw
          - The body of the request is defined in raw format as JSON.

        ##### JSON Body Parameters
        1. **sessionId**: 
           - **Description**: This represents the unique identifier for the session related to the refund action. Replace "sessionId" with the actual session ID.

        2. **accountId**: 
           - **Description**: This is the unique identifier for the account that is initiating the refund. Replace "accountId" with the actual account ID.

        3. **path**: 
           - **Description**: This is the path to the specific content linked to the refund request. For example, it could reference a video or channel.

        4. **targetType**: 
           - **Description**: This specifies the type of target for the refund action. In this case, it is set to "videoId" indicating the target is a video.

        5. **targetId**: 
           - **Description**: This is the unique identifier of the target resource (e.g., video) to which the refund applies. Replace "videoId" with the actual target ID.

        6. **sourceType**: 
           - **Description**: This specifies the type of source for the refund, indicating where the refund is coming from. It is set to "accountId" for account-based refunds.

        7. **sourceId**: 
           - **Description**: This is the unique identifier of the source account for the refund. Replace "accountId" with the actual source ID.

        8. **name**: 
           - **Description**: This field allows you to provide a name for the refund action. It is currently left empty.

        9. **description**: 
           - **Description**: This field provides a space for a description of the refund action. It is currently left empty.

        10. **tags**: 
            - **Description**: This field can be used to specify tags related to the refund action. It is currently left empty.

        11. **didRefund**: 
            - **Description**: A boolean value indicating whether the refund has been processed. It's set to false by default, meaning the refund has not yet occurred.

        12. **reason**: 
            - **Description**: This field allows for the inclusion of a reason for the refund. It's set to "null", indicating no reason has been provided.

        #### Options
        - **Raw Options**: 
          - **Language**: JSON
            - The request body is formatted in JSON for clarity and ease of use.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                name: ''
                description: ''
                tags: ''
                didRefund: false
                reason: 'null'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/refund/update:
    put:
      tags:
        - ActionRefund
      summary: Action - Refund - Update
      description: |-
        ### Action - Refund - Update Endpoint Description

        #### Request Structure

        1. **Auth**
           - **Type**: Specifies the authentication method used for the API request.
             - `bearer`: Indicates that bearer token authentication is required.
           - **Bearer Token**:
             - **Key**: `token`
               - Represents the name of the token used for authorization.
             - **Value**: `BearerToken`
               - This should be replaced with the actual bearer token for accessing the API.
             - **Type**: Specifies the data type of the key.
               - `string`: Indicates that the token value is a string.

        2. **Method**
           - **Type**: `PUT`
             - Indicates that this endpoint is used to update existing data.

        3. **URL**
           - **Endpoint**: `http://localhost:3000/api/action/refund/update`
             - The URL where the API request is sent for updating refund actions.

        4. **Headers**
           - Required headers for the request:
             - **Key**: `Client-UUID`
               - A unique identifier for the client making the request.
             - **Value**: `ClientUUID`
               - Should be replaced with the actual UUID of the client.
             - **Type**: `default`
               - Indicates the header is of the default type.

        5. **Body**
           - Specifies the data that needs to be sent with the request.
             - **Mode**: `raw`
               - Indicates that the body content is sent in raw format.
             - **Raw Content**: JSON formatted string, requires specific fields:
               - **sessionId**: 
                 - The ID for the current session.
               - **accountId**: 
                 - The ID associated with the user's account.
               - **path**: 
                 - The path where the resource (video) is located on the server, e.g., `/live/channel/video123`.
               - **targetType**: 
                 - The type of the target for the action, which in this case is `videoId`.
               - **targetId**: 
                 - The actual ID of the video being referred to.
               - **sourceType**: 
                 - The type of source from which the refund is being processed, set as `accountId`.
               - **sourceId**: 
                 - The ID of the source account initiating the refund.
               - **name**: 
                 - A placeholder for the name associated with the refund action; can be left empty.
               - **description**: 
                 - A placeholder for a description of the refund action; can be left empty.
               - **tags**: 
                 - A placeholder for any tags related to the refund action; can be left empty.
               - **didRefund**: 
                 - A boolean value (true or false) indicating whether the refund has been processed.
               - **reason**: 
                 - A string explaining the reason for the refund; an example provided is `duplicate charge`.
               - **refundId**: 
                 - A unique identifier for this specific refund action.

        ### Summary
        This endpoint is a PUT request used to update refund actions. It requires bearer token authentication and requires specific data within the body for processing the refund, including session and account IDs, target and source types, and additional information related to the refund reason and identification.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                name: ''
                description: ''
                tags: ''
                didRefund: true
                reason: duplicate charge
                refundId: refundId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/refund/get:
    get:
      tags:
        - ActionRefund
      summary: Action - Refund - Get
      description: |-
        ### Description of Endpoint Data

        - **Name**: This is the title of the API request which indicates its purpose. In this case, the endpoint is for fetching refund details, specifically titled "Action - Refund - Get".

        - **Request**: This section contains all the details required to make the API call.

          - **Auth**: This specifies the type of authentication method used for the API. Here, it uses "bearer" authentication, which requires a token to authorize the user's access.

            - **Type**: Indicates that the authentication method is "bearer".

            - **Bearer**: This is an array that holds the token information used for authentication.

              - **Key**: This field denotes the name of the token parameter. In this case, it is labeled as "token".

              - **Value**: The actual token needed for authorization; here it is a placeholder "BearerToken".

              - **Type**: Specifies the data type of the value, which is set as "string".

          - **Method**: This indicates the HTTP method used for the request. For this endpoint, the method is "GET", which is typically used to retrieve data from the server.

          - **URL**: This is the endpoint to which the request is made. The URL includes query parameters that are essential for the request.

            - **Base URL**: "http://localhost:3000/api/action/refund/get/" is the base endpoint.

            - **Query Parameters**:
              - **refundId**: This is a required parameter that specifies the unique identifier for the refund that is to be retrieved.
              - **sessionId**: This parameter is used to identify the session related to the refund request.
              - **accountId**: This parameter indicates the account associated with the refund.

          - **Headers**: This section is usually where custom HTTP headers can be defined for the request. In this instance, no specific headers are set, as indicated by empty key and value fields. The header is marked as disabled.

          - **Body**: This part describes the request body content. For a GET request, it is typically empty, which is reflected here.

            - **Mode**: Indicates the format of the body content. It is set to "raw".

            - **Raw**: This field is empty, meaning no body content is sent with the GET request.
      security:
        - bearerAuth: []
      parameters:
        - name: refundId
          in: query
          schema:
            type: string
          example: refundId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/refund/all:
    get:
      tags:
        - ActionRefund
      summary: Action - Refund - Get All
      description: |-
        ### Endpoint Description: Action - Refund - Get All

        - **Name**: This is the name of the API endpoint which is "Action - Refund - Get All". It signifies that this endpoint is used to retrieve all refund actions.

        - **Request**: This section describes the details of the HTTP request sent to the server.

          - **Auth**: This describes the authentication method for the request.
            - **Type**: Specifies that the authentication type is "bearer", indicating that the request requires a bearer token for authentication.
            - **Bearer**: This is an array that holds the authentication token required for access.
              - **Key**: Identifies the type of authentication token being used, which is "token".
              - **Value**: This is a placeholder for the actual bearer token which is represented as "BearerToken". Users should replace this with a valid token when making requests.
              - **Type**: Indicates the data type of the token, which is a "string".

          - **Method**: The HTTP method used for this request is "GET". This method is used for retrieving data from the server.

          - **URL**: This is the endpoint URL for the request.
            - **Base URL**: "http://localhost:3000/api/action/refund/all/" is the base URL indicating that this request is made to a local server.
            - **Query Parameters**: 
              - **sessionId**: This parameter is mandatory and should be replaced with a specific session identifier needed to filter the refunds.
              - **accountId**: This parameter is also mandatory and must be replaced with the account identifier associated with the refunds.

          - **Headers**: This section is meant for any additional HTTP headers required by the request.
            - **Key**: This field is currently empty, suggesting no additional headers are needed.
            - **Value**: Correspondingly, this value is also empty, signifying no additional information is included in the headers.
            - **Type**: The type is designated as "default".
            - **Disabled**: This property is set to true, indicating that no extra headers are currently being sent with the request.

          - **Body**: This section contains information about the body of the request.
            - **Mode**: This is set to "raw", indicating that the body will consist of raw data format.
            - **Raw**: The body content is empty, implying that no data needs to be sent in the body for this GET request. 

        This endpoint is primarily used to pull a list of all refund actions based on the provided session and account identifiers. Ensure that the bearer token is valid and that the appropriate parameters are supplied in the URL before making the request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/refund/delete:
    post:
      tags:
        - ActionRefund
      summary: Action - Refund - Delete
      description: |-
        ### Action - Refund - Delete

        #### Request Summary
        This endpoint is designed to delete a refund action. It requires a POST request containing specific authentication and body parameters.

        #### Authentication
        - **Type**: Bearer
          - This indicates that the request requires a bearer token for authentication.
          - **Token Details**:
            - **Key**: token
            - **Value**: sessionId
            - **Type**: string
          - The sessionId will be used to authenticate the request and verify the user's session.

        #### HTTP Method
        - **Method**: POST
          - This means that the request is intended to submit data to the server for processing.

        #### URL
        - **Endpoint URL**: http://localhost:3000/api/action/refund/delete
          - This is the address where the request should be sent to perform the delete operation for the refund.

        #### Headers
        - **Headers**: An empty header is set, currently disabled.
          - There are no specific headers required for this request, but space is reserved in case additional headers are needed in the future.

        #### Request Body
        - **Body Mode**: Raw
          - The body is sent in raw JSON format.
          
        - **Raw JSON Structure**:
          - The body must contain the following key-value pairs:
            - **sessionId**: Represents the unique session identifier for the user making the request. This is critical for tracking user sessions.
            - **accountId**: Identifies the user's account associated with the refund. This links the request to a particular user.
            - **refundId**: Specifies the unique identifier for the refund that is to be deleted. This tells the server which refund action to remove.

        Users should ensure that all the required fields in the body are populated correctly to successfully execute the delete operation.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"refundId\":\"refundId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/reinstate/create:
    post:
      tags:
        - ActionReinstate
      summary: Action - Reinstate - Create
      description: |-
        ### Endpoint Description: Action - Reinstate - Create

        This endpoint is used to create a reinstatement action for a specified session. Below is a detailed description of each data point in the request body:

        - **sessionId**: This is a unique identifier for the session associated with the reinstatement action. It is required to link the reinstatement to the specific session context.

        - **accountId**: This represents the identifier for the account performing the action. It is crucial for authorizing the request and ensuring that the action is being carried out by the correct user.

        - **path**: This is the specific path of the resource that is being reinstated. In this example, it points to a live channel video, which indicates that the action is related to streaming content.

        - **targetType**: Indicates the type of target being reinstated. In this case, it is specified as "streamer", meaning that the action is aimed at a streamer account.

        - **targetId**: This is the unique identifier for the specific target resource (e.g., the video or streamer) being reinstated. It connects the action to the individual entity.

        - **sourceType**: This field specifies the type of source from which the reinstatement is being initiated. It is set to "accountId", indicating that the source is an account identifier.

        - **sourceId**: This is the identifier for the source account associated with the reinstatement. It should match the account that is initiating the reinstatement process.

        - **tokenAmount**: This number indicates the amount of tokens being used or affected by the reinstatement. In this example, the value is set to 20.

        - **name**: This field provides a name for the reinstatement action. It can be used to identify or label the action for future reference, with "reinstate1" as a sample name.

        - **description**: This is an optional field for providing additional information about the reinstatement action. In this instance, it is left empty, but users can include any relevant details if necessary.

        - **tags**: This optional field allows users to categorize the reinstatement action using tags. It is useful for organization and searching purposes but is left empty in this example.

        ### Request Configuration
        - **Auth**: The endpoint requires bearer token authentication for authorization. The token must be sent with the request to validate the user's identity and permissions.

        - **Method**: The HTTP method for this request is POST, which is used to submit data to the server to create a new resource.

        - **URL**: The endpoint URL is `http://localhost:3000/api/action/reinstate/create`, where the request should be sent.

        - **Headers**: Currently, there is a placeholder for headers that is disabled. Users can customize or add headers as needed for the request.

        - **Body**: The request body is sent in raw JSON format and contains all the parameters necessary for creating a reinstatement action as described above.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: reinstate1
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/reinstate/update:
    put:
      tags:
        - ActionReinstate
      summary: Action - Reinstate - Update
      description: |-
        ### Action - Reinstate - Update Endpoint Description

        - **name**: Identifies this API request as "Action - Reinstate - Update."

        - **request**: Contains all the details needed to make the API request.

          - **auth**: Specifies the authentication method.

            - **type**: Indicates the type of authentication used. Here, it is "bearer."
            
            - **bearer**: Represents the details of the bearer token.
            
              - **key**: The name of the token parameter. It is labeled as "token."
              
              - **value**: Placeholder for the actual token value, represented as "BearerToken." This will be replaced with the real token when making the request.
              
              - **type**: The data type of the token, which is specified as "string."

          - **method**: Indicates the HTTP method used for the request. In this case, it is "PUT," which is commonly used to update existing resources.

          - **url**: The endpoint URL where the request is sent. It points to the action for reinstating an update: `http://localhost:3000/api/action/reinstate/update`.

          - **headers**: Additional information sent with the request.

            - **key**: The name of the header, which is "Client-UUID."
            
            - **value**: A placeholder for the actual client UUID, represented here as "ClientUUID."
            
            - **type**: Specifies that this header is a default type.

          - **body**: Contains the data sent with the request.

            - **mode**: Indicates the format of the request body, which is "raw," meaning the body contains raw data.

            - **raw**: The content of the body in JSON format, which includes various fields necessary for the action.

              - **sessionId**: A unique identifier for the session in which the action is being performed.
              
              - **accountId**: The identifier for the account associated with the action.
              
              - **reinstateId**: An identifier specifically related to the reinstatement action.
              
              - **path**: The path to the resource (in this case, a video) that is being reinstated.
              
              - **targetType**: Describes the type of the target entity; here, it is specified as "streamer."
              
              - **targetId**: The identifier of the target entity, in this case, related to a video, referred to as "videoId."
              
              - **sourceType**: The type of source entity associated with the action; it is indicated as the account ID.
              
              - **sourceId**: An identifier for the source entity, in this case, represented as "accountId."
              
              - **tokenAmount**: The amount of tokens involved in this action, set to 20.
              
              - **name**: A placeholder for a name associated with this action, set to "Farooq."
              
              - **description**: A text description providing details about the action, here specified as "this is description."
              
              - **tags**: A string for tagging or categorizing the action, currently expressed as "xyz."

            - **options**: Additional configuration for the body data.

              - **raw**: Specifies that the content of the body is in raw format.
              
                - **language**: Indicates the language of the raw content, stating it is "json."

        This structure outlines the requirements for the reinstatement action, detailing how to authenticate, where to send the request, and the data needed to successfully execute the update.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                reinstateId: reinstateId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: Farooq
                description: this is description
                tags: xyz
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/reinstate/get:
    get:
      tags:
        - ActionReinstate
      summary: Action - Reinstate - Get
      description: |-
        ### Endpoint Description: Action - Reinstate - Get

        - **Name**: Identifies this particular API endpoint as "Action - Reinstate - Get."

        - **Request**: Contains all the details necessary to make a request to the API.

          - **Auth**: Specifies the authentication method needed to access the endpoint.
            - **Type**: Indicates that a bearer token is used for authentication.
            - **Bearer**: This section includes the details of the bearer token.
              - **Key**: The name of the bearer token, which is "token."
              - **Value**: The actual token value, labeled here as "BearerToken." This will be replaced with the actual token to gain access.
              - **Type**: Describes the format of the token, which is a string.

          - **Method**: The HTTP method used for this request, which is "GET." This method is typically used to retrieve data from the server.

          - **URL**: The endpoint URL where the request is sent. It includes placeholders for parameters:
            - `reinstateId`: A required identifier for the specific reinstate action.
            - `sessionId`: A required identifier representing the current session.
            - `accountId`: A required identifier associated with the user account.

          - **Headers**: Contains additional information for the request.
            - **Key**: The key of the header. In this case, it is left blank.
            - **Value**: The value of the header. This is also blank.
            - **Type**: Describes the type of header used, which is "default." This header is currently disabled and will not be sent with the request.

          - **Body**: Contains data sent with the request.
            - **Mode**: Indicates how the body is formatted, which is set to "raw."
            - **Raw**: This section is currently empty, meaning no additional body data will be sent with the request.
      security:
        - bearerAuth: []
      parameters:
        - name: reinstateId
          in: query
          schema:
            type: string
          example: reinstateId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/reinstate/all:
    get:
      tags:
        - ActionReinstate
      summary: Action - Reinstate - Get All
      description: |-
        ### Endpoint Description

        **Name**: Action - Reinstate - Get All  
        This is an API endpoint designed to retrieve all reinstatement actions. 

        ---

        ### Request Details

        - **Auth**: 
          - **Type**: Bearer 
            - The request is authorized using a bearer token. This means that a token must be provided to verify the user's identity.
            - **Bearer**: 
              - **Key**: token 
                - This is the identifier for the authentication method.
              - **Value**: BearerToken 
                - This is a placeholder for the actual bearer token that must be used for authorization.
              - **Type**: string 
                - This indicates that the token value is a string.

        - **Method**: GET 
          - This indicates that the request method is GET, which is used to retrieve data from the server.

        - **URL**: 
          - `http://localhost:3000/api/action/reinstate/all/?sessionId=sessionId&accountId=accountId`
            - This is the full URL used to access the endpoint.
            - **Base URL**: `http://localhost:3000/api/action/reinstate/all/` 
              - This part specifies the server and the path to the resource.
            - **Query Parameters**:
              - **sessionId**: sessionId 
                - This is a placeholder for the actual session ID to identify the user's session.
              - **accountId**: accountId 
                - This is a placeholder for the actual account ID to filter the reinstatement actions by account.

        - **Headers**: 
          - An array that can contain any additional header information. In this case, it is empty and disabled, meaning no extra headers are sent with this request.

        - **Body**: 
          - **Mode**: raw 
            - This indicates that the body content type is raw text.
          - **Raw**: 
            - The body is empty in this request, meaning no additional data is being sent with the GET request.

        ---

        This endpoint can be used to fetch all reinstatement actions associated with a specific session and account, provided that the correct bearer token and IDs are supplied.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/reinstate/delete:
    post:
      tags:
        - ActionReinstate
      summary: Action - Reinstate - Delete
      description: |-
        ### Description of Each Data in the Endpoint

        **Name**: 
        - **Action - Reinstate - Delete**: This is the title of the API request, indicating that the action pertains to reinstating and deleting a specific resource.

        **Request**:
        - **Auth**:
          - **Type**: 
            - **Bearer**: This denotes the authentication method used for the API request. In this case, the Bearer token is used to authorize the request.
          - **Bearer**:
            - **Key**: 
              - **token**: This is the identifier for the token used in authorization.
            - **Value**: 
              - **sessionId**: This indicates the actual token value that must be replaced with a valid session ID during the execution of the request.
            - **Type**:
              - **string**: This shows that the value of the token is expected to be a string.

        - **Method**:
          - **POST**: This specifies that the HTTP method for this request is POST, meaning data will be sent to the server to create or modify resources.

        - **URL**:
          - **http://localhost:3000/api/action/reinstate/delete**: This is the endpoint to which the request is sent. It directs the request to the local server on port 3000 and specifies the action of reinstating and deleting.

        - **Headers**:
          - **Key**: 
            - (empty): There is currently no custom header included in this request.
          - **Value**: 
            - (empty): As with the key, there is no associated value for a custom header at this stage.
          - **Type**: 
            - **default**: The header is of the default type, which generally means there are no special configurations applied.
          - **Disabled**: 
            - **true**: This setting means that this particular header is not active and will not be sent with the request.

        - **Body**:
          - **Mode**: 
            - **raw**: Indicates that the data being sent in the body of the request is raw data, not form data or URL encoded.
          - **Raw**: 
            - **{"sessionId":"sessionId","accountId":"accountId","reinstateId":"reinstateId"}**: This is the actual payload of the request in JSON format. It contains three keys:
              - **sessionId**: This should be replaced with the actual session ID to authenticate the user making the request.
              - **accountId**: This should be replaced with the account ID related to the reinstatement action.
              - **reinstateId**: This should be replaced with the ID of the resource that needs to be reinstated and deleted. 

        In summary, this endpoint facilitates a POST request that allows the user to reinstate and delete a specified resource using a session ID, account ID, and reinstate ID, with authorization handled via a Bearer token.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"reinstateId\":\"reinstateId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/reject/create:
    post:
      tags:
        - ActionReject
      summary: Action - Reject - Create
      description: |-
        {
          "description": {
            "name": "Action - Reject - Create",
            "request": {
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "BearerToken",
                    "type": "string"
                  }
                ]
              },
              "method": "POST",
              "url": "http://localhost:3000/api/action/reject/create",
              "headers": [
                {
                  "key": "",
                  "value": "",
                  "type": "default",
                  "disabled": true
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n    \"sessionId\": \"sessionId\",\n    \"accountId\": \"accountId\",\n    \"path\": \"/live/channel/video123\",\n    \"targetType\": \"videoId\",\n    \"targetId\": \"videoId\",\n    \"sourceType\": \"accountId\",\n    \"sourceId\": \"accountId\",\n    \"didReject\": true,\n    \"reason\": \"inappropriate content\",\n    \"name\": \"\",\n    \"description\": \"\",\n    \"tag\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            }
          },
          "details": {
            "auth": {
              "type": "bearer": This indicates that the request requires bearer token authentication.
              "bearer": [
                {
                  "key": "token": This is the key used for the authentication.
                  "value": "BearerToken": This is a placeholder for the actual token that grants access to the API.
                  "type": "string": This indicates that the value of the token is a string.
                }
              ]
            },
            "method": "POST": This specifies that the request method is POST, which is used to send data to the server to create a new resource.
            
            "url": "http://localhost:3000/api/action/reject/create": This is the endpoint URL where the POST request is sent to create an action to reject content.

            "headers": [
              {
                "key": "": Indicates the name of the header, which is currently empty.
                "value": "": Indicates the value of the header, which is also currently empty.
                "type": "default": Specifies that this header type is default.
                "disabled": true: This means that this header is currently disabled and won't be sent with the request.
              }
            ],

            "body": {
              "mode": "raw": This indicates the type of body data being sent, which is in raw format.
              "raw": "{\n    \"sessionId\": \"sessionId\",\n    \"accountId\": \"accountId\",\n    \"path\": \"/live/channel/video123\",\n    \"targetType\": \"videoId\",\n    \"targetId\": \"videoId\",\n    \"sourceType\": \"accountId\",\n    \"sourceId\": \"accountId\",\n    \"didReject\": true,\n    \"reason\": \"inappropriate content\",\n    \"name\": \"\",\n    \"description\": \"\",\n    \"tag\": \"\"\n}": This is the JSON data that will be sent in the body of the request, containing the details of the rejection action.
              "options": {
                "raw": {
                  "language": "json": This indicates that the language format of the raw body data is JSON.
                }
              }
            },
            "bodyFields": {
              "sessionId": "sessionId": This is the ID of the current session, which is needed to keep track of ongoing actions.
              "accountId": "accountId": This is the ID of the account, indicating which user is making the request.
              "path": "/live/channel/video123": This represents the path of the content that is being acted upon.
              "targetType": "videoId": This indicates the type of target that is being rejected, in this case, a video ID.
              "targetId": "videoId": This is the specific ID of the video that is being rejected.
              "sourceType": "accountId": This indicates the source type of the content, which is from an account ID.
              "sourceId": "accountId": This indicates the specific account ID that is the source of the content.
              "didReject": true: This flag indicates that the action taken is indeed a rejection.
              "reason": "inappropriate content": This field provides a reason for the rejection, stating the content was inappropriate.
              "name": "": This is a placeholder for any name associated with the rejection, currently empty.
              "description": "": This is a placeholder for any description related to the rejection, currently empty.
              "tag": "": This is a placeholder for any tags that may be associated with the rejection, currently empty.
            }
          }
        }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didReject: true
                reason: inappropriate content
                name: ''
                description: ''
                tag: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/reject/update:
    put:
      tags:
        - ActionReject
      summary: Action - Reject - Update
      description: |-
        ### Detailed Description of each Data in the Endpoint

        **Endpoint Overview**  
        This endpoint is designed to update the rejection status of actions in a system. It requires a PUT request and is authenticated via a bearer token.

        #### Request Structure

        1. **Authentication**
           - **Type**: Bearer
             - This specifies that the request uses bearer token authentication.
           - **Token**: 
             - This is where you will input your authentication token. It is essential for gaining access to the API resources.

        2. **Method**
           - **PUT**: 
             - This indicates that the request will update an existing resource or create a new resource if it does not exist.

        3. **URL**
           - **Endpoint URL**: `http://localhost:3000/api/action/reject/update`
             - This is the local server address where the request will be sent to perform the action of updating the rejection status.

        4. **Headers**
           - **Header Key**: `Client-UUID`
             - This header is used to pass the client's universally unique identifier. It is required by the server to identify the client making the request.
           - **Header Value**: `ClientUUID`
             - You will need to replace this with your actual client UUID.

        5. **Request Body**
           - **Mode**: Raw
             - The body is sent as a raw JSON string.
           - **Content**: 
             ```json
             {
               "sessionId": "sessionId",
               "accountId": "accountId",
               "path": "/live/channel/video123",
               "targetType": "videoId",
               "targetId": "videoId",
               "sourceType": "accountId",
               "sourceId": "accountId",
               "didReject": false,
               "reason": "none",
               "name": "",
               "description": "",
               "tag": "",
               "rejectId": "rejectId"
             }
             ```
             
           - **Field Descriptions**:
             - **sessionId**: 
               - Unique identifier for the session in which the action is being performed. It is necessary for tracking the context of the action.
             - **accountId**: 
               - Unique identifier for the account associated with the action. It represents the user or entity executing the request.
             - **path**: 
               - The specific path where the action is tied, indicating the resource's location (e.g., a video).
             - **targetType**: 
               - This specifies the type of the target being acted upon. In this case, it indicates that the target is identified by a video ID.
             - **targetId**: 
               - The unique identifier for the target resource (e.g., a video ID) that may be rejected.
             - **sourceType**: 
               - This indicates the type of source the action is originating from, typically an account ID.
             - **sourceId**: 
               - The unique identifier for the source account that is related to the action.
             - **didReject**: 
               - A boolean flag that indicates whether the action was rejected (true) or not (false). Defaulting to false means it was not rejected.
             - **reason**: 
               - A textual explanation for the rejection, if applicable. If not rejected, it may be set to "none" or left blank.
             - **name**: 
               - An optional name associated with the rejection record. This can be left blank if not needed.
             - **description**: 
               - Optional field to add more details regarding the rejection. It can also be left blank.
             - **tag**: 
               - Optional labeling for the rejection record that can help with categorization.
             - **rejectId**: 
               - Unique identifier for this rejection action. This helps track individual rejection actions and may be required for further processes.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didReject: false
                reason: none
                name: ''
                description: ''
                tag: ''
                rejectId: rejectId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/reject/get:
    get:
      tags:
        - ActionReject
      summary: Action - Reject - Get
      description: |-
        ### Description of Each Data in the Endpoint

        - **name**: The name of the API request is "Action - Reject - Get". This indicates that the endpoint is related to retrieving action details, specifically for a rejection process.

        - **request**: This is the main object containing all the details related to the API request.

          - **auth**: This section defines the authentication method required to access the endpoint.
            - **type**: The type of authentication being used is "bearer". This means that the API requires a bearer token for secure access.
            - **bearer**: This is an array containing the authentication details.
              - **key**: This is the name of the token parameter. It is labeled "token", indicating that it is the key for the bearer token.
              - **value**: This is the placeholder for the actual token being used for authentication. The placeholder shows "BearerToken", which should be replaced with a valid token.
              - **type**: This defines the data type of the value. It is set as "string", meaning the token should be in string format.

          - **method**: This indicates the HTTP method used for the request. In this case, it is "GET", which is typically used for retrieving data from the server.

          - **url**: This is the endpoint URL to which the request will be sent. It consists of the base URL "http://localhost:3000/api/action/reject/get/" followed by query parameters:
            - **rejectId**: This is a query parameter that needs to be specified for determining the specific rejection action to retrieve.
            - **sessionId**: This is another query parameter that identifies the user session associated with the request.
            - **accountId**: This query parameter is used to specify the account related to the rejection action being requested.

          - **headers**: This section defines any custom headers that should be sent with the request.
            - **key**: Currently, there are no custom headers specified, as the key is empty.
            - **value**: Similarly, there is no value set for any headers.
            - **type**: The type is set to "default".
            - **disabled**: This is set to true, meaning that these headers are currently disabled and not included in the request.

          - **body**: This section represents the body content of the request.
            - **mode**: The body mode is set to "raw", indicating that the body content is raw data without any specific format.
            - **raw**: This is left empty, suggesting that there is no body content required for this GET request.

        This endpoint is designed to retrieve information about a rejection action based on the specified identifiers while ensuring the request is authenticated via a bearer token.
      security:
        - bearerAuth: []
      parameters:
        - name: rejectId
          in: query
          schema:
            type: string
          example: rejectId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/reject/all:
    get:
      tags:
        - ActionReject
      summary: Action - Reject - Get All
      description: |-
        ### Action - Reject - Get All Endpoint Description

        - **Name**: Action - Reject - Get All
          - This is the name of the API request that is used to retrieve all rejected actions.

        - **Request**:
          - **Auth**:
            - **Type**: Bearer
              - Specifies that the authentication mechanism used is bearer token authentication.
            - **Bearer**:
              - An array that contains the authentication token.
              - **Key**: token
                - The identifier for the token field in the request.
              - **Value**: BearerToken
                - The actual token value needed for authorization (replace with a valid token).
              - **Type**: string
                - Indicates that the token value is a string.

          - **Method**: GET
            - This is the HTTP method used for the request. A GET method is used to retrieve data from the specified resource.

          - **URL**: 
            - `http://localhost:3000/api/action/reject/all/?sessionId=sessionId&accountId=accountId`
              - This is the endpoint where the API request is sent. 
              - It contains query parameters:
                - **sessionId**: A placeholder for the session identifier, which should be replaced with the actual session ID.
                - **accountId**: A placeholder for the account identifier, which should be replaced with the actual account ID.
          
          - **Headers**:
            - An array of headers to be included in the request.
            - The current header key and value are empty, and the header is disabled. This means no additional headers will be sent with the request.

          - **Body**:
            - **Mode**: raw
              - Indicates that the body of the request is sent in raw format.
            - **Raw**: 
              - This field is empty, meaning no body content is sent in the request.

        This endpoint is designed to retrieve all actions that have been rejected based on the provided session and account identifiers. Adjust the sessionId and accountId in the URL parameters as needed before sending the request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/reject/delete:
    post:
      tags:
        - ActionReject
      summary: Action - Reject - Delete
      description: |-
        ### Endpoint: Action - Reject - Delete

        - **Name**: This specifies the name of the action being executed, which is "Action - Reject - Delete". It indicates that this API call is intended to reject and delete a specific action.

        - **Request**: This section contains details about how to execute the API request.

          - **Auth**: This defines the authentication method used for the API call.
            - **Type**: Indicates that the authentication method is "bearer", meaning it uses a bearer token for access.
            - **Bearer**: This is an array that contains the specific parameters needed for the bearer token.
              - **Key**: Indicates the name of the token field, which is "token".
              - **Value**: Specifies a placeholder value for the token, which is "sessionId". This will need to be replaced with the actual session ID when making the request.
              - **Type**: Indicates that the type of value provided for the token is a string.

          - **Method**: This specifies the HTTP method used for the request, which is "POST". This indicates that data will be sent to the server.

          - **URL**: This is the endpoint where the request is sent. In this case, the URL is "http://localhost:3000/api/action/reject/delete". This indicates that the action will be processed at this location on the server.

          - **Headers**: This section lists any headers that should be included in the request.
            - **Key**: This is currently empty, meaning no specific header key will be sent with the request.
            - **Value**: This value is also empty, indicating that there is no associated value with the key.
            - **Type**: The type is set to "default" but is disabled, making this header inactive.

          - **Body**: This specifies the data being sent with the request.
            - **Mode**: This indicates the type of data mode being used, which is set to "raw". This means the body content is sent as a raw string.
            - **Raw**: This section contains the actual data payload being sent in the request body. The format is JSON and includes three fields:
              - **sessionId**: This is a placeholder for the session ID. It should be replaced with the actual session ID when making a request.
              - **accountId**: This represents the account ID associated with the action being rejected and deleted. This should also be replaced with the actual account ID.
              - **rejectId**: This is the identifier of the specific action to be rejected and deleted. It needs to be replaced with the actual reject ID when the request is made.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"rejectId\":\"rejectId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/reload/create:
    post:
      tags:
        - ActionReload
      summary: Action - Reload - Create
      description: |-
        ### Action - Reload - Create

        #### Request
        - **Auth**: 
          - **Type**: Specifies the type of authentication used for the request. This endpoint utilizes Bearer token authentication.
          - **Bearer**: 
            - **Key**: Identifies the token parameter.
            - **Value**: This should be replaced with the actual Bearer token for authentication.
            - **Type**: Indicates that the value is a string.

        - **Method**: 
          - **POST**: This specifies that the HTTP method for this request is POST, which is used to send data to the server.

        - **URL**: 
          - **Endpoint**: The URL to which the request is made. In this case, it points to `http://localhost:3000/api/action/reload/create`, which is likely a local server endpoint.

        - **Headers**: 
          - An array to hold HTTP headers. In this case, there is a header entry present but it is currently disabled and contains no key or value.

        - **Body**: 
          - **Mode**: Indicates the body type is "raw." This means the raw data will be sent in the request body.
          - **Raw**: Contains the actual JSON payload being sent to the server. It includes the following fields:
            - **sessionId**: A unique identifier for the current user session. This should be replaced with an actual session ID.
            - **accountId**: Identifies the account associated with the request. This should be replaced with the actual account ID.
            - **path**: The path indicating the location of the resource being acted upon. This typically represents a specific channel, such as `/live/channel/video123`.
            - **targetType**: Specifies the type of target for the action, in this case, it is indicated as `videoId`.
            - **targetId**: The unique identifier for the target resource, which should be replaced with the actual video ID.
            - **sourceType**: Represents the type of source related to this action, which in this case is also indicated as `accountId`.
            - **sourceId**: The unique identifier for the source resource, typically the same as `accountId`.
            - **name**: A placeholder that can be filled with a name related to the action or resource. Currently, it is left empty.
            - **description**: A placeholder for a description regarding the action or resource. Currently, it is left empty.
            - **tags**: A placeholder for any tags relevant to the action or resource. Currently, it is left empty.
            - **didReload**: A boolean value indicating if the action involved a reload. Currently set to `true`.

        - **Options**: 
          - **Raw**: 
            - **Language**: Specifies that the content being sent is in JSON format.

        This endpoint is designed for creating a reload action associated with video content, requiring identifiers for the session and account, as well as details about the video and accompanying metadata.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                name: ''
                description: ''
                tags: ''
                didReload: true
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/reload/update:
    put:
      tags:
        - ActionReload
      summary: Action - Reload - Update
      description: |-
        ### Action - Reload - Update Endpoint Description

        - **Name**: 
          - Action - Reload - Update
          
        - **Request Details**:
          - **Authentication**: 
            - Type: Bearer Token
              - The request requires a bearer token for authentication which should be included in the authorization header.
              - Key: `token`
              - Value: The token should be in the format of `BearerToken`.

          - **Method**: 
            - PUT
              - This method is used to update existing resources or data on the server.
              
          - **URL**: 
            - `http://localhost:3000/api/action/reload/update`
              - This is the endpoint where the request is sent for updating the reload action.
              
          - **Headers**:
            - **Client-UUID**:
              - Key: `Client-UUID`
              - Value: This header should contain the unique identifier of the client making the request.
              
          - **Body**: 
            - Mode: Raw
              - This indicates that the body of the request is sent as raw JSON data.
            - Raw Content:
              ```json
              {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "path": "/live/channel/video123",
                  "targetType": "videoId",
                  "targetId": "videoId",
                  "sourceType": "accountId",
                  "sourceId": "accountId",
                  "name": "",
                  "description": "",
                  "tags": "",
                  "didReload": false,
                  "reloadId": "reloadId"
              }
              ```
              - **sessionId**: 
                - Represents the unique identifier for the session associated with the action.
                
              - **accountId**: 
                - The unique identifier for the account that owns the resources or is making the request.
                
              - **path**: 
                - Specifies the resource path, in this example, pointing to a live channel.
                
              - **targetType**: 
                - Indicates the type of the target that is being acted upon; here, it is `videoId`.
                
              - **targetId**: 
                - The unique identifier of the target resource (video) that is being referred to.
                
              - **sourceType**: 
                - Defines the type of the source, stated as `accountId`, indicating it is associated with the account.
                
              - **sourceId**: 
                - The unique identifier of the source which might be relevant to the action.
                
              - **name**: 
                - A string field intended for the name of the reload action (can be left empty).
                
              - **description**: 
                - A string field intended for providing a description of the reload action (can be left empty).
                
              - **tags**: 
                - A field for specifying any tags associated with the reload action (can be left empty).
                
              - **didReload**: 
                - A boolean indicating whether the reload action has been performed; `false` indicates it has not.
                
              - **reloadId**: 
                - The unique identifier associated with the reload action.

        This endpoint is intended for updating action-related data in a system that handles video resources, particularly for live streaming channels. It requires specific identifiers and may involve a change in the state of a reload action based on the provided parameters.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                name: ''
                description: ''
                tags: ''
                didReload: false
                reloadId: reloadId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/reload/get:
    get:
      tags:
        - ActionReload
      summary: Action - Reload - Get
      description: |-
        ### Endpoint Description: Action - Reload - Get

        - **Name**: This is the identifier for the API endpoint and indicates that it is used to retrieve information about a reload action.

        - **Request**: This section outlines the specific details required to make a request to the endpoint.

          - **Auth**:
            - **Type**: This specifies the authentication method used. In this case, it uses **Bearer Token** authentication.
            - **Bearer**: This contains the details of the bearer token.
              - **Key**: The key used to identify the bearer token, labeled as "token".
              - **Value**: This is where the actual bearer token is specified, labeled as "BearerToken". This is a placeholder that should be replaced with a valid token when making a request.
              - **Type**: This indicates the datatype for the bearer token, which is a string.

          - **Method**: Indicates the HTTP method used for this request. It is set to **GET**, meaning this endpoint is intended for retrieving data.

          - **URL**: The endpoint URL specifies where the request should be sent. The URL includes query parameters:
            - `reloadId`: Represents the unique identifier for the reload action that is being requested.
            - `sessionId`: Represents the session identifier, which is related to the user's session when making the request.
            - `accountId`: Represents the unique identifier for the account associated with the reload action.

          - **Headers**: This section allows for custom headers to be sent with the request.
            - **Key**: This is left blank, indicating that no additional header keys are specified at this time.
            - **Value**: Similarly, the value is blank, so no specific values are provided.
            - **Type**: The type is listed as **default**, indicating standard header settings.
            - **Disabled**: This indicates that the header is currently disabled and will not be included in the request.

          - **Body**: This section defines the content that can be sent with the request.
            - **Mode**: The body mode is set to **raw**, which means that the body content will be sent as plain text.
            - **Raw**: Currently, this is an empty string, indicating that no body content needs to be sent with the request.

        This endpoint is designed to retrieve information related to a reload action based on specific identifiers, utilizing bearer token authentication for security.
      security:
        - bearerAuth: []
      parameters:
        - name: reloadId
          in: query
          schema:
            type: string
          example: reloadId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/reload/all:
    get:
      tags:
        - ActionReload
      summary: Action - Reload - Get All
      description: |-
        ### Action - Reload - Get All Endpoint Description

        **Name:**  
        Action - Reload - Get All  
        This endpoint is designed to retrieve all reload actions for a specific user session and account.

        **Request:**

        - **Auth:**  
          The endpoint requires bearer token authentication, which is a method of verifying access using a token.

          - **Type:**  
            This specifies the authentication method used, which is set to **bearer**.

          - **Bearer:**  
            This section contains the token details necessary for authentication.  

            - **Key:**  
              The key field indicates the name of the token parameter, which is **token**.  

            - **Value:**  
              The value field shows the actual token required for accessing this endpoint, prefixed with "Bearer". The placeholder here is **BearerToken** and should be replaced with the actual token during usage.

            - **Type:**  
              This denotes the data type of the value, which is **string**.

        - **Method:**  
          The HTTP method for this request is **GET**, indicating that this request is meant to retrieve data from the server.

        - **URL:**  
          The URL specifies the endpoint address to which the request will be sent.  
          ```
          http://localhost:3000/api/action/reload/all/?sessionId=sessionId&accountId=accountId
          ```
          - **Base URL:** The base URL is set to **http://localhost:3000**, indicating that the API is hosted locally on port 3000.  

          - **Path:** The path **/api/action/reload/all/** indicates that this is the resource aimed at fetching all reload actions.  

          - **Query Parameters:**  
            - **sessionId:** A query parameter that needs to be replaced with the actual session ID to identify the user session.  
            - **accountId:** Another query parameter that should be replaced with the actual account ID to access the specific account actions.  

        - **Headers:**  
          This section is currently set with an empty key and value and is disabled, meaning no additional headers are being used for this request. Users can enable or modify it as needed.

        - **Body:**  
          The body of the request is configured in a **raw** format but is left empty, implying that no additional data needs to be sent in the body for this GET request.

        This endpoint is used to fetch all reload-related actions associated with a specific user session and account, requiring appropriate authentication and session details.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/reload/delete:
    post:
      tags:
        - ActionReload
      summary: Action - Reload - Delete
      description: |-
        ### Endpoint: Action - Reload - Delete

        #### Request Details

        - **Auth**: 
          - **Type**: Bearer Authentication is used to authorize access to the API. 
          - **Bearer Details**: A token is required for the request, which will be passed as a `sessionId`. 

        - **Method**: 
          - **POST**: This endpoint uses the HTTP POST method to send data to the server.

        - **URL**: 
          - The request will be sent to `http://localhost:3000/api/action/reload/delete`, which is the local host address where the API is hosted. 

        - **Headers**: 
          - Currently, there are no custom headers specified. There is an empty header field that is disabled, meaning it will not be sent with the request.

        - **Body**: 
          - **Mode**: The body is in "raw" format, which allows for sending JSON data directly.
          - **Raw Data**: The JSON payload being sent contains the following keys:
            - **sessionId**: This represents the unique identifier for the user session that is currently active.
            - **accountId**: This represents the unique identifier for the account linked to the session or action.
            - **reloadId**: This signifies the unique identifier for the reload action that is to be deleted. 

        This endpoint is designed to send a request to delete a specific reload action associated with a user session and account. Make sure to properly replace the placeholder values with actual identifiers when making a request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"reloadId\":\"reloadId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/reply/create:
    post:
      tags:
        - ActionReply
      summary: Action - Reply - Create
      description: |-
        {
          "description": {
            "name": "Action - Reply - Create": "This is the name of the API endpoint which is responsible for creating a reply action.",
            
            "request": {
              "auth": {
                "type": "bearer": "This indicates that the endpoint requires bearer token authentication to secure access, ensuring only authorized users can make requests.",
                
                "bearer": [
                  {
                    "key": "token": "This is the key used to identify the bearer token authorization.",
                    "value": "BearerToken": "This is a placeholder for the actual bearer token, which should be replaced with a valid token to authenticate the request.",
                    "type": "string": "This specifies that the value of the token is expected to be a string."
                  }
                ]
              },
              
              "method": "POST": "This specifies the HTTP method used for the request. In this case, it is a POST request, which is typically used to create new resources.",
              
              "url": "http://localhost:3000/api/action/reply/create": "This is the endpoint URL that the request will be sent to. It is a local server URL for creating a reply action.",
              
              "headers": [
                {
                  "key": "": "This field is currently empty, indicating that there are no additional headers required for this request.",
                  "value": "": "The value field is also empty, which means there are no values set for the headers.",
                  "type": "default": "Indicates that the type of the header is default and it is currently disabled.",
                  "disabled": true: "This shows that this particular header is not active and will not be sent with the request."
                }
              ],
              
              "body": {
                "mode": "raw": "This indicates that the body of the request will be sent as raw data.",
                
                "raw": "{\n    \"sessionId\": \"sessionId\",\n    \"accountId\": \"accountId\",\n    \"path\": \"/live/channel/video123\",\n    \"targetType\": \"videoId\",\n    \"targetId\": \"videoId\",\n    \"sourceType\": \"accountId\",\n    \"sourceId\": \"accountId\"\n}": "This is a JSON object containing parameters required for creating the reply action. It includes several fields:",
                
                "options": {
                  "raw": {
                    "language": "json": "This specifies that the raw data being sent is formatted as JSON."
                  }
                }
              }
            },

            "parameters": {
              "sessionId": "This represents the session identifier, used to track the current session of the user.",
              "accountId": "This indicates the unique identifier for the user's account sending the reply.",
              "path": "This provides the specific path related to the content being replied to, indicating its location.",
              "targetType": "This specifies the type of content being targeted for the reply. In this case, it is identified by videoId.",
              "targetId": "This denotes the unique identifier of the target content, such as the video that is being replied to.",
              "sourceType": "This indicates the type of the source of the reply, which is identified by accountId.",
              "sourceId": "This represents the unique identifier of the source from which the reply originates, typically the same as accountId."
            }
          }
        }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/reply/update:
    put:
      tags:
        - ActionReply
      summary: Action - Reply - Update
      description: |-
        {
          "description": {
            "name": "This is the name of the action to be performed. It indicates the purpose of the API call, which in this case is to update a reply.",
            
            "request": {
              "auth": {
                "type": "bearer": "Defines the type of authentication being used for the API request. In this case, it uses Bearer Token authentication.",
                
                "bearer": [
                  {
                    "key": "token": "This is the key for the Bearer Token in the authentication header.",
                    "value": "BearerToken": "This is where the actual Bearer Token value would be placed for authentication.",
                    "type": "string": "Indicates the data type of the token value, which is a string."
                  }
                ]
              },
              
              "method": "PUT": "Specifies that this API request is using the HTTP PUT method, which is typically used to update existing resources.",
              
              "url": "http://localhost:3000/api/action/reply/update": "The endpoint URL where the API request is directed. It includes the base URL and the specific path for updating a reply.",
              
              "headers": [
                {
                  "key": "Client-UUID": "This is the key for the Client UUID that is being sent in the request header.",
                  
                  "value": "ClientUUID": "This is where the actual Client UUID value should be placed. It is used for client identification.",
                  
                  "type": "default": "Indicates the data type for the header value, which is set to default."
                }
              ],
              
              "body": {
                "mode": "raw": "Specifies the format of the request body. 'raw' indicates that the body is to be sent as raw data.",
                
                "raw": "{\n    \"sessionId\": \"sessionId\",\n    \"accountId\": \"accountId\",\n    \"path\": \"/live/channel/video123\",\n    \"targetType\": \"videoId\",\n    \"targetId\": \"videoId\",\n    \"sourceType\": \"accountId\",\n    \"sourceId\": \"accountId\",\n    \"replyId\":\"replyId\"\n}": "This is the actual JSON payload being sent in the request body. It contains key-value pairs where each key is a specific attribute related to the reply update.",
                
                "options": {
                  "raw": {
                    "language": "json": "Indicates that the language of the raw body content is JSON, which is a common format for API requests."
                  }
                }
              }
            }
          }
        }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                replyId: replyId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/reply/get:
    get:
      tags:
        - ActionReply
      summary: Action - Reply - Get
      description: |-
        ### Detailed Description of Endpoint: Action - Reply - Get

        - **name**: Action - Reply - Get  
          This is the name of the API endpoint, indicating that it handles retrieval actions related to replies.

        - **request**:  
          This object encapsulates all the details regarding the API request configuration.

          - **auth**:  
            This field defines the authentication method required for the request.

            - **type**: "bearer"  
              Specifies that bearer token authentication is used to authorize access to the resource.

            - **bearer**:  
              This array contains the bearer token information.

              - **key**: "token"  
                This is the identifier for the token in the request, indicating what to expect in the authorization header.

              - **value**: "BearerToken"  
                This represents the actual bearer token value that will be sent with the request. It should be replaced with a valid token.

              - **type**: "string"  
                Indicates that the value of the token is formatted as a string.

          - **method**: "GET"  
            Denotes the HTTP method used for this request. In this case, it is a GET request, which is typically used to retrieve data from a server.

          - **url**:  
            The URL endpoint to which the request is sent.

            - **http://localhost:3000/api/action/reply/get/**  
              This is the base URL for the API. The local server runs on port 3000, and this endpoint is specifically for getting reply information.

            - **query parameters**:  
              The URL includes several query parameters used to specify the request further.

              - **replyId**: "replyId"  
                This parameter should be replaced with the ID of the reply you wish to fetch.

              - **sessionId**: "sessionId"  
                This parameter should be replaced with the ID of the session associated with the reply.

              - **accountId**: "accountId"  
                This parameter should be replaced with the ID of the account that owns the reply.

          - **headers**:  
            This array would contain any HTTP headers that are necessary for the request.

            - **key**: ""  
              The key for the header, currently remains empty.

            - **value**: ""  
              The value for the header, currently remains empty.

            - **type**: "default"  
              Indicates the type of header, which is currently set to default.

            - **disabled**: true  
              This field shows that this header is not currently active; it won't be sent with the request.

          - **body**:  
            This object defines the body of the request, which is not utilized in the case of a GET request.

            - **mode**: "raw"  
              This indicates that the body content would be in raw format.

            - **raw**: ""  
              Currently, there is no body content included in this request, as GET requests generally do not require a body.
      security:
        - bearerAuth: []
      parameters:
        - name: replyId
          in: query
          schema:
            type: string
          example: replyId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/reply/all:
    get:
      tags:
        - ActionReply
      summary: Action - Reply - Get All
      description: |-
        ### Description of Data

        - **name**: The name of this API request is "Action - Reply - Get All". It indicates that the purpose of this request is to retrieve all replies related to a specific action.

        - **request**: This object contains all the necessary details required to execute the API request.

          - **auth**: Specifies the authentication method used to secure the API request.
            
            - **type**: Indicates the type of authentication, which is "bearer". This means that a token will be required for accessing the API.
            
            - **bearer**: This is an array containing the authentication data needed for the bearer token.
              
              - **key**: This is the key for the token field, labeled as "token".
              
              - **value**: This is where the actual token goes, marked here as "BearerToken". This should be replaced with the actual token when making requests.
              
              - **type**: Indicates the type of the value, which is a "string".

          - **method**: Specifies the HTTP method to be used for the request, which is "GET". This method is utilized for retrieving data from the server.

          - **url**: The endpoint URL to which the request is sent. It consists of:
            
            - Base URL: "http://localhost:3000/api/action/reply/all/"
            - Query Parameters: 
              - `sessionId`: A placeholder representing the session ID that needs to be passed with the request.
              - `accountId`: A placeholder representing the account ID that needs to be provided with the request.

          - **headers**: An array that specifies any headers that need to be included in the request. In this case, it contains:
            
            - **key**: Currently empty, meaning no additional headers are being sent.
            
            - **value**: Also empty, indicating no values are defined.
            
            - **type**: Set as "default", which is a standard type for headers payload.
            
            - **disabled**: Set to true, meaning this header is not active and will not be sent with the request.

          - **body**: Represents the body of the request. The mode is set to "raw", meaning the body content would be raw data.
            
            - **raw**: Currently empty, indicating that there is no body content to send with this GET request.

        This description clarifies each component of the API request and helps users understand how to use the endpoint effectively.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/reply/delete:
    post:
      tags:
        - ActionReply
      summary: Action - Reply - Delete
      description: |-
        {
          "name": "Action - Reply - Delete",
          "description": "This API endpoint is designed to delete a specific reply associated with a user's action. Below is a detailed explanation of the data in the request.",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "sessionId",
                  "type": "string"
                }
              ],
              "description": "Authentication is performed using a bearer token. The token is a sessionId that validates the user's identity and permission to access the resource."
            },
            "method": "POST",
            "description": "The method used for this request is POST, indicating that the client is sending data to the server to perform the delete action."
            "url": "http://localhost:3000/api/action/reply/delete",
            "description": "The URL specifies the location of the API endpoint for deleting a reply. It points to the local server running on port 3000."
            "headers": [
              {
                "key": "",
                "value": "",
                "type": "default",
                "disabled": true
              }
            ],
            "description": "Currently, no specific headers are required for this request as the header field is disabled. Additional headers can be added if needed in the future.",
            "body": {
              "mode": "raw",
              "description": "The body of the request is in raw JSON format containing the necessary identifiers for the delete operation.",
              "raw": "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"replyId\":\"replyId\"}",
              "description": {
                "sessionId": "This is the session ID used for authentication and must match the user's current session.",
                "accountId": "This is the unique identifier for the user's account from which the reply will be deleted.",
                "replyId": "This is the identifier of the specific reply that needs to be deleted."
              }
            }
          }
        }
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"replyId\":\"replyId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/report/create:
    post:
      tags:
        - ActionReport
      summary: Action - Report - Create
      description: |-
        ### Description of Endpoint: Action - Report - Create

        This endpoint is used to create a report within the system through a `POST` request to the specified URL. Below are the details for each piece of data involved in the request:

        #### Request Details:

        - **Method**: 
          - **POST** - This HTTP method is used to send data to the server to create a new resource.

        - **URL**: 
          - **http://localhost:3000/api/action/report/create** - This is the endpoint URL where the report creation request is sent. It runs on `localhost` at port `3000`.

        #### Authentication:

        - **Auth Type**: 
          - **Bearer** - The request requires bearer token authentication for authorization.
          
        - **Bearer Token**: 
          - **key**: Represents the parameter name used to pass the token.
          - **value**: A placeholder (`BearerToken`) that should be replaced with the actual token needed to authenticate the request.
          - **type**: Indicates that this is a string value.

        #### Headers:

        - **Headers**: 
          - This section is currently empty, with a key and value that are not set. It is marked as disabled, meaning it won't be sent with the request. Typically, headers can be used to provide additional context or directives for the server.

        #### Body:

        - **Body Mode**: 
          - **raw** - The body of the request will be sent as raw JSON data.

        - **Body Content**: 
          The body contains the following fields in JSON format:
          
          - **sessionId**: A unique identifier for the session. This should be replaced with the actual session identifier being reported.
          
          - **accountId**: The identifier for the account that is making the report. Replace with the specific account ID.
          
          - **path**: A string that describes the path of the content being reported, such as the URL or route. Example: `/live/channel/video123`.
          
          - **targetType**: The type of the target being reported. For instance, it could indicate that the target is identified by a video ID.
          
          - **targetId**: The specific ID of the target (e.g., video ID) that you are reporting.
          
          - **sourceType**: Indicates the type of source that is reporting the content, typically related to the identifier passed in `accountId`.
          
          - **sourceId**: The ID of the source that is creating the report, usually the same as `accountId`.
          
          - **didReport**: A boolean value indicating if the report has already been submitted. Typically should be set to `true`.
          
          - **category**: A string describing the main category of the report. This provides general classification of the report type.
          
          - **subcategory**: A string providing more specific classification within the main category.
          
          - **subject**: A brief title or subject line for the report, summarizing the reason for the report.
          
          - **text**: A longer text field providing details about the report’s content, providing context or explanations as necessary.
          
          - **name**: A field that could be used to specify a name associated with the report, currently left empty.
          
          - **description**: A field for a more detailed description of the report. It is currently left empty.
          
          - **tags**: This can hold metadata or labels to categorize the report, currently left empty.

        This request structure enables you to effectively report an issue or action within the application, gathering essential information needed for review and resolution.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didReport: true
                category: this is category
                subcategory: this is subcategory
                subject: this is subject
                text: some text
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/report/update:
    put:
      tags:
        - ActionReport
      summary: Action - Report - Update
      description: |-
        ### Endpoint Description: Action - Report - Update

        This endpoint allows for the updating of a report in the action system. Below are detailed descriptions for each field in the request.

        #### Request Details

        - **Auth**: 
          - **Type**: Defines the authorization mechanism used for this request. In this case, it is set to "bearer".
          - **Bearer**: 
            - **Key**: The name of the key used for authorization, labeled as "token".
            - **Value**: This should include the actual Bearer token used for authentication, shown as "BearerToken".
            - **Type**: Indicates the data type, which is "string".

        - **Method**: 
          - Specifies the HTTP method used for the request. Here it is set to "PUT", indicating that the client intends to update an existing resource.

        - **URL**: 
          - The endpoint to which the request is sent. In this instance, it points to "http://localhost:3000/api/action/report/update", suggesting that this is a local development endpoint.

        - **Headers**:
          - **Client-UUID**: 
            - **Key**: Represents the header name, "Client-UUID".
            - **Value**: This should contain the unique identifier for the client making the request, noted as "ClientUUID".
            - **Type**: Declares the type of data sent in the header, which is set to "default".

        #### Body Content
        The body of the request must be formatted as raw JSON. Below is a breakdown of each field within the body:

        - **sessionId**: 
          - A string that identifies the session in which the report is being updated.

        - **accountId**: 
          - A string representing the unique identifier for the account associated with this report.

        - **path**: 
          - A string that indicates the resource path for the report, here denoted as "/live/channel/video123".

        - **targetType**: 
          - A string that specifies the type of target being reported. In this case, it is set to "videoId".

        - **targetId**: 
          - A string that contains the unique identifier of the targeted resource, specifically the video being reported.

        - **sourceType**: 
          - A string denoting the type of source for the report, here labeled as "accountId".

        - **sourceId**: 
          - A string representing the unique identifier of the source account reporting the issue.

        - **didReport**: 
          - A boolean value that indicates whether the item has been reported. It is set to true in this example.

        - **category**: 
          - A string providing a description of the report's main category, identified as "this is category updated".

        - **subcategory**: 
          - A string that gives further detail within the category, noted as "this is subcategory".

        - **subject**: 
          - A string summarizing the subject of the report, presented as "this is subject".

        - **text**: 
          - A string containing additional information or remarks about the report, described as "some text".

        - **name**: 
          - A string reserved for the name associated with the report. It is left empty in this context.

        - **description**: 
          - A string intended for a detailed description of the report's purpose or context. This field is also left empty here.

        - **tags**: 
          - A string for any tags that might be relevant to the report. It is currently empty in this request.

        - **reportId**: 
          - A string that uniquely identifies the report being updated, noted as "reportId".

        This endpoint is designed to facilitate the modification of report details within the action system, providing a comprehensive structure for the necessary data.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didReport: true
                category: this is category updated
                subcategory: this is subcategory
                subject: this is subject
                text: some text
                name: ''
                description: ''
                tags: ''
                reportId: reportId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/report/get:
    get:
      tags:
        - ActionReport
      summary: Action - Report - Get
      description: |-
        **Description of the Data in the Endpoint:**

        - **name**: This is the title of the request. It indicates that this request is related to getting a report action. The name helps in identifying the purpose of the API call.

        - **request**: This object encapsulates all the details required to execute the API call.

          - **auth**: This section defines the authentication method used for the request. In this case:
            - **type**: Specifies that the authentication method is "bearer", which typically uses a token to validate access.
            - **bearer**: This is an array containing the details of the bearer token:
              - **key**: This indicates the type of the token. It's labeled "token".
              - **value**: This is a placeholder for the actual bearer token that you will use for authentication. Replace "BearerToken" with your actual token.
              - **type**: Specifies that the token is of type "string".

          - **method**: This defines the HTTP method used for the request. Here, it is "GET", which is used to retrieve data from the server.

          - **url**: This is the endpoint where the API request is sent. It includes query parameters:
            - **reportId**: This query parameter is used to specify which report is being requested. Replace "reportId" with the actual ID of the report you want to retrieve.
            - **sessionId**: This parameter is used to identify the session for which the report is generated. Replace "sessionId" with the actual session ID.
            - **accountId**: This parameter identifies the user account related to the report. Replace "accountId" with the appropriate account ID.

          - **headers**: This section contains any additional headers that may need to be sent with the request. In this case:
            - **key**: Currently set to an empty string, which indicates there are no additional headers needed in this request.
            - **value**: Also set to an empty string for the same reason.
            - **type**: Specifies that the header type is "default".
            - **disabled**: Set to true, indicating that this header is currently not being used.

          - **body**: This section contains the body of the request:
            - **mode**: Indicates the format of the body. Here it is set to "raw", which is often used for API requests that do not require a body.
            - **raw**: Contains the actual content of the body. It is empty in this request, indicating that no body content is required for this GET request.
      security:
        - bearerAuth: []
      parameters:
        - name: reportId
          in: query
          schema:
            type: string
          example: reportId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/report/all:
    get:
      tags:
        - ActionReport
      summary: Action - Report - Get All
      description: |-
        ### Description of Data for Endpoint: Action - Report - Get All

        - **name**: This is the name of the API endpoint. It describes the purpose of the request, which is to retrieve all report data related to actions.

        - **request**: This section contains all the details necessary to perform the API request.

          - **auth**: This specifies the authentication method required for the request.
          
            - **type**: Indicates the type of authentication. In this case, it is a bearer token authentication.
          
            - **bearer**: This is an array that holds the bearer token details.
            
              - **key**: This is the identifier for the token, labeled as "token".
              
              - **value**: This specifies the actual token value needed to authorize the request. For this example, it is represented as "BearerToken" and should be replaced with an actual token in a real scenario.
              
              - **type**: This specifies the data type of the token, which is a string.

          - **method**: This indicates the HTTP method used for the request. Here, it is "GET", meaning the request is intended to retrieve data.

          - **url**: This is the endpoint URL where the API request will be sent. It includes query parameters for `sessionId` and `accountId`, which need to be specified to access the desired reports.
          
          - **headers**: This array holds any additional header information for the request.
          
            - **key**: This is the name of the header. Currently, it is empty.
            
            - **value**: This is the value of the header. It is also currently empty.
            
            - **type**: Indicates the type of header. It is set to "default".
            
            - **disabled**: A boolean value indicating whether the header is active or inactive. In this case, it is set to true, meaning this header will not be sent with the request.

          - **body**: This specifies the data that will be sent with the request.
          
            - **mode**: Indicates the format used for the body data. It is set to "raw", suggesting that the body may contain a raw payload.
            
            - **raw**: This is where the actual body content would be placed. Currently, it is empty, indicating that no body data is sent with this GET request.

        This endpoint is designed to fetch reports related to actions from a specified account and session, utilizing bearer token authentication for security.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/report/delete:
    post:
      tags:
        - ActionReport
      summary: Action - Report - Delete
      description: |-
        **Endpoint Name**: Action - Report - Delete

        **Description**: This endpoint is designed for deleting a report from the system. It requires proper authentication and specific details to successfully execute the deletion.

        **Request Details**:
        - **Authentication**:
          - **Type**: Bearer
          - **Bearer Token**: The authorization uses a bearer token, which is a common method for accessing secure APIs. The token required is a "sessionId" that validates the user's session.

        - **HTTP Method**: POST  
          - This method indicates that data is being sent to the server to perform an action—in this case, to delete a report.

        - **URL**: 
          - The endpoint URL is `http://localhost:3000/api/action/report/delete`. This is the address to which the request will be sent for report deletion.

        - **Headers**:
          - There are currently no custom headers specified. The default header setup is disabled, meaning it will not be sent with the request. Customize if necessary for your application.

        - **Body**:
          - **Mode**: Raw
          - **Content**: The body of the request is sent as a raw JSON string. It contains:
            - **sessionId**: A string identifier for the user's current session, which is necessary for authentication.
            - **accountId**: A string identifier for the account associated with the report. This informs the system which user's report is being targeted.
            - **reportId**: A string identifier for the specific report that needs to be deleted. This tells the system exactly which report to remove.

        This detailed information should help users understand how to use the "Action - Report - Delete" endpoint effectively.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"reportId\":\"reportId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/request/create:
    post:
      tags:
        - ActionRequest
      summary: Action - Request - Create
      description: |-
        {
          "description": {
            "name": "Action - Request - Create",
            "request": {
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "BearerToken",
                    "type": "string"
                  }
                ]
              },
              "method": "POST",
              "url": "http://localhost:3000/api/action/request/create",
              "headers": [
                {
                  "key": "",
                  "value": "",
                  "type": "default",
                  "disabled": true
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n    \"sessionId\": \"sessionId\",\n    \"accountId\": \"accountId\",\n    \"path\": \"/live/channel/video123\",\n    \"targetType\": \"videoId\",\n    \"targetId\": \"videoId\",\n    \"sourceType\": \"accountId\",\n    \"sourceId\": \"accountId\",\n    \"didRequest\": true,\n    \"requestType\": \"feature\",\n    \"name\": \"\",\n    \"description\": \"\",\n    \"tags\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            }
          },
          "fields": {
            "auth": {
              "type": "bearer": "Authentication method used is bearer token, which provides a way to pass security credentials in the request.",
              "bearer": {
                "key": "token": "The key for the bearer token.",
                "value": "BearerToken": "The actual bearer token to be used in the authentication. This is typically obtained after logging in or with credentials.",
                "type": "string": "This specifies the data type of the token."
              }
            },
            "method": {
              "type": "POST": "The HTTP method used for this request, indicating that data will be created on the server."
            },
            "url": {
              "type": "string": "http://localhost:3000/api/action/request/create": "The endpoint URL where the request will be sent."
            },
            "headers": {
              "key": "": "The HTTP header key, which is currently empty.",
              "value": "": "The HTTP header value, which is currently empty.",
              "type": "default": "Indicates the default type for the header.",
              "disabled": true: "This header is disabled and will not be sent with the request."
            },
            "body": {
              "mode": "raw": "The body mode is set to raw, meaning the request payload is sent as a raw string.",
              "raw": "{\n    \"sessionId\": \"sessionId\",\n    \"accountId\": \"accountId\",\n    \"path\": \"/live/channel/video123\",\n    \"targetType\": \"videoId\",\n    \"targetId\": \"videoId\",\n    \"sourceType\": \"accountId\",\n    \"sourceId\": \"accountId\",\n    \"didRequest\": true,\n    \"requestType\": \"feature\",\n    \"name\": \"\",\n    \"description\": \"\",\n    \"tags\": \"\"\n}": "The raw JSON data sent in the request body containing various parameters.",
              "options": {
                "raw": {
                  "language": "json": "Indicates that the raw body is in JSON format."
                }
              }
            }
          },
          "parameters": {
            "sessionId": "An identifier for the session. This helps track the user session during the process.",
            "accountId": "The unique identifier of the account making the request.",
            "path": "The path that specifies the resource being accessed, in this case, a video located at '/live/channel/video123'.",
            "targetType": "The type of target being referred to, which is 'videoId' in this context.",
            "targetId": "The unique identifier of the target resource, which specifically identifies the video.",
            "sourceType": "Type of source identifier, here it is 'accountId', indicating the source is an account.",
            "sourceId": "The identifier for the source, which is the same as accountId.",
            "didRequest": "A boolean flag indicating that a request was made (true in this case).",
            "requestType": "Specifies the type of request being made, indicated as 'feature'.",
            "name": "An optional field where the name of the action can be specified.",
            "description": "An optional field for providing additional details about the action being requested.",
            "tags": "An optional field for including any tags associated with the request."
          }
        }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didRequest: true
                requestType: feature
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/request/update:
    put:
      tags:
        - ActionRequest
      summary: Action - Request - Update
      description: |-
        Here is the detailed description of each data element in the provided endpoint:

        ### Request Details

        - **Name**: Action - Request - Update
          - This is the name assigned to the API request. It describes the action that the request performs, which is to update a specific resource.

        ### Request Configuration

        - **Method**: PUT
          - This specifies the HTTP method used for the request. A PUT method is typically used to update existing resources on the server.

        - **URL**: http://localhost:3000/api/action/request/update
          - This is the endpoint where the PUT request is sent. It indicates the location on the server where the action will take place.

        ### Authentication

        - **Auth**: 
          - **Type**: Bearer
            - Indicates that the request will use bearer token authentication. This is a common method for securing APIs.
          
          - **Bearer**:
            - **Key**: token
              - The name of the authorization field.
            - **Value**: BearerToken
              - This is a placeholder for the actual bearer token used to authenticate the request.
            - **Type**: string
              - Specifies that the token is of string data type.

        ### Headers

        - **Headers**:
          - **Key**: Client-UUID
            - A unique identifier for the client making the request.
          - **Value**: ClientUUID
            - This is a placeholder for the actual UUID value that uniquely identifies the client.
          - **Type**: default
            - Indicates the standard type for HTTP headers.

        ### Request Body

        - **Body**:
          - **Mode**: raw
            - This indicates that the body content is raw data, not encoded in a particular format (like form data).
          
          - **Raw**: 
            - This field contains the actual data sent in the request body in JSON format. The structure includes the following parameters:

              - **sessionId**: "sessionId"
                - A placeholder for the unique identifier of the session during which the action is taking place.

              - **accountId**: "accountId"
                - Represents the identifier for the account involved in the action.

              - **path**: "/live/channel/video123"
                - The specific path that the action relates to, indicating the location of the resource on the server.

              - **targetType**: "videoId"
                - Specifies the type of the target resource, in this case, a video identified by its ID.

              - **targetId**: "videoId"
                - The unique identifier for the target resource being updated.

              - **sourceType**: "accountId"
                - Indicates the type for the source resource, which is also an account ID in this context.

              - **sourceId**: "accountId"
                - The unique identifier for the source resource associated with the request.

              - **didRequest**: true
                - A boolean flag indicating whether a request has been made.

              - **requestType**: "feature"
                - Defines the type of request being made, categorized as a feature request.

              - **name**: ""
                - A field intended to hold a name or title for the action, currently left empty.

              - **description**: ""
                - A field for a description of the action, currently left empty.

              - **tags**: ""
                - This field allows tagging the request for categorization or filtering, currently left empty.

              - **requestId**: "requestId"
                - A unique identifier for the request itself, allowing for tracking and referencing.

            - **Options**:
              - **Raw**: 
                - **Language**: json
                  - Specifies that the format of the raw data is JSON.

        This comprehensive description explains each component of the API request for other users who will use your Postman API collection.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didRequest: true
                requestType: feature
                name: ''
                description: ''
                tags: ''
                requestId: requestId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/request/get:
    get:
      tags:
        - ActionRequest
      summary: Action - Request - Get
      description: |-
        ### Description of Endpoint Data:

        - **name**: 
          - This refers to the identifier for the request in the API collection, indicating that this is an action request of type "Get".

        - **request**: 
          - This object contains all the necessary details to make the API request.

          - **auth**: 
            - This specifies the authentication method for the request.
            
            - **type**: 
              - Indicates that bearer token authentication is being used, which is a common method for securing API accesses.
              
            - **bearer**: 
              - An array containing objects that define the bearer token's key, value, and type.
              
              - **key**: 
                - Represents the token identifier, here labeled as "token".
                
              - **value**: 
                - Represents the actual token to be used for authentication, indicated as "BearerToken", which should be replaced with a valid token during actual use.
                
              - **type**: 
                - Specifies the data type of the token, which is a string.

          - **method**: 
            - This defines the HTTP method to be used for the request, which is "GET" in this case, indicating that data will be retrieved from the server.

          - **url**: 
            - This is the endpoint URL where the request will be sent. It includes query parameters to specify the necessary identifiers.
            
            - **requestId**: 
              - A query parameter indicating a unique identifier for the request.
              
            - **sessionId**: 
              - A query parameter representing the session ID related to the request.
              
            - **accountId**: 
              - A query parameter representing the account ID associated with the request.

          - **headers**: 
            - This object contains any additional HTTP headers that may need to be sent with the request.
            
            - **key**: 
              - Placeholder for a header key; currently empty.
              
            - **value**: 
              - Placeholder for the corresponding header value; currently empty.
              
            - **type**: 
              - Specifies the type of the header, marked as "default".
              
            - **disabled**: 
              - A boolean indicating whether this header is currently active or not; this one is set to true, meaning it is inactive.

          - **body**: 
            - This object contains the body of the request if applicable.
            
            - **mode**: 
              - Indicates the format of the request body; set to "raw", meaning that the body content will be plain text.
              
            - **raw**: 
              - Represents the actual content of the request body; currently empty since a body is not needed for a GET request.

        This is a detailed description of all components in the specified endpoint data structure, pointing out the purpose and usage of each item for ease of understanding by users of the Postman API collection.
      security:
        - bearerAuth: []
      parameters:
        - name: requestId
          in: query
          schema:
            type: string
          example: requestId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/request/all:
    get:
      tags:
        - ActionRequest
      summary: Action - Request - Get All
      description: |-
        ### Description of Each Data in Endpoint

        - **name**: This is the identifier for the specific action request in the API. In this case, it is labeled as "Action - Request - Get All," indicating that this action retrieves all available data.

        - **request**: This object encapsulates the details about the HTTP request that will be made.

            - **auth**: This section specifies the authentication method used for the request. In this case, it employs bearer token authentication, which is a security token that allows the user to access secured endpoints.

                - **type**: The authentication method being used, which is "bearer" in this case.

                - **bearer**: This is an array that contains the details for the bearer token used for authentication.

                    - **key**: This defines the name of the bearer token parameter, which in this case is simply "token."

                    - **value**: This is the actual bearer token that provides access. It is indicated as "BearerToken," and in practical use, it should be replaced with a valid token string.

                    - **type**: This describes the data type of the value being sent, which is "string."

            - **method**: This indicates the HTTP method being used for the request. Here, it is set to "GET," meaning that data will be retrieved from the server.

            - **url**: This is the endpoint to which the request is being sent. It includes parameters for `sessionId` and `accountId`. You would replace `sessionId` and `accountId` with actual values when making the request.

            - **headers**: This is an array of key-value pairs that represent additional information sent with the request. The current entry is empty and disabled, meaning no additional headers are being included in the request.

                - **key**: The field for the header's name, which is currently left empty.

                - **value**: The field for the header's value, which is also currently empty.

                - **type**: This indicates the type of this header, marked as "default" and currently disabled.

            - **body**: This section defines the content of the request body.

                - **mode**: This indicates the format of the body; set to "raw," meaning that the body will contain raw data.

                - **raw**: This is the actual content of the body. It is currently empty, indicating that no data will be sent in the body of this GET request since GET requests do not typically require a body.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/request/delete:
    post:
      tags:
        - ActionRequest
      summary: Action - Request - Delete
      description: |-
        {
          "description": {
            "name": "Action - Request - Delete",
            "request": {
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "sessionId",
                    "type": "string"
                  }
                ]
              },
              "method": "POST",
              "url": "http://localhost:3000/api/action/request/delete",
              "headers": [
                {
                  "key": "",
                  "value": "",
                  "type": "default",
                  "disabled": true
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"requestId\":\"requestId\"}"
              }
            }
          }
        }

        1. **name**: "Action - Request - Delete"
           - This is the name of the API request, denoting that it is related to deleting an action request.

        2. **request**: 
           - This object contains all the necessary details to configure and send the API request.

        3. **auth**:
           - This section specifies the type of authentication used for the API request.

           - **type**: "bearer"
             - The authentication type is Bearer token, which typically involves passing a token in the header to verify the user's identity.

           - **bearer**: 
             - This array holds the details of the authentication token being used for this request.

             - **key**: "token"
               - This key signifies that the value is a token.

             - **value**: "sessionId"
               - The token should be a session ID, which is used to authenticate the user’s session.

             - **type**: "string"
               - Indicates that the value of the token is of string type.

        4. **method**: "POST"
           - This indicates that the HTTP method used for the request is POST, which is typically used for sending data to the server.

        5. **url**: "http://localhost:3000/api/action/request/delete"
           - This is the endpoint URL to which the request is sent. It is hosted locally on port 3000 and indicates the action to delete a request.

        6. **headers**: 
           - This section includes any headers that need to be sent with the request.

           - **key**: ""
             - There is currently no specified key for the headers.

           - **value**: ""
             - There is currently no specified value for the headers.

           - **type**: "default"
             - Specifies the type of the header.

           - **disabled**: true
             - Indicates that this header is currently disabled and will not be sent with the request.

        7. **body**:
           - This part contains the data that is sent with the POST request.

           - **mode**: "raw"
             - This indicates that the body is sent in raw format rather than using forms or other structured data.

           - **raw**: "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"requestId\":\"requestId\"}"
             - This is the actual data being sent in the request body. It should contain the session ID, account ID, and request ID in JSON format. Replace the placeholders with actual values when making the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"requestId\":\"requestId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/review/create:
    post:
      tags:
        - ActionReview
      summary: Action - Review - Create
      description: |-
        ### Action - Review - Create

        **Request Details:**

        - **Auth**:
          - **Type**: Indicates the authentication method being used. In this case, it is a bearer token.
          - **Bearer**: Contains the following information:
            - **Key**: Represents the parameter name for the token. In this case, it is labeled as "token".
            - **Value**: This is where the actual bearer token should be placed to authorize the request. For example, it is represented as "BearerToken".
            - **Type**: Specifies the data type of the token, which is a string.

        - **Method**: 
          - **POST**: This indicates that the request is using the POST method, which is typically used to create new resources or submit data to the server.

        - **URL**: 
          - **Endpoint**: The URL endpoint where the request is sent. Here, it is "http://localhost:3000/api/action/review/create", indicating that this request is targeting a local server for action review creation.

        - **Headers**:
          - A key-value pair representing the headers for the HTTP request. In this case, the key and value are empty, and the header is disabled.

        - **Body**: 
          - **Mode**: The format of the request body. Here it is set to "raw", indicating that the body is sent as a raw string.
          - **Raw**: Contains the actual content that will be sent in the request body. The content is formatted as JSON and consists of the following fields:
            - **sessionId**: A string representing the unique identifier for the session in which the review is being created.
            - **accountId**: A string that represents the identifier of the account making the review.
            - **path**: A string indicating the path to the content being reviewed, such as a video on a live channel.
            - **targetType**: A string defining the type of target being reviewed, in this case, it is labeled as "videoId".
            - **targetId**: A string representing the unique identifier of the target, such as the video ID.
            - **sourceType**: A string indicating the type of the source from which the review originates, which is set as "accountId".
            - **sourceId**: A string representing the unique identifier of the source, mimicking the accountId.
            - **didReview**: A boolean indicating whether the user has submitted a review (true) or not (false).
            - **reviewScore**: An integer score given by the reviewer, here it is set to 5, representing the highest rating.
            - **isUndo**: A boolean representing if the review should be undone; set to false indicates that this is a new review, not an undo action.
            - **name**: An optional string field for the name associated with the review (currently empty).
            - **description**: An optional string field for the description associated with the review (currently empty).
            - **tags**: An optional string field for tags associated with the review (currently empty).

        - **Options**:
          - **Raw**:
            - **Language**: Specifies the format of the raw body content as JSON.

        This detailed description provides a comprehensive understanding of the fields and structure for users interacting with the Action - Review - Create API.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didReview: true
                reviewScore: 5
                isUndo: false
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/review/update:
    put:
      tags:
        - ActionReview
      summary: Action - Review - Update
      description: |-
        ### Action - Review - Update

        This endpoint allows users to update a review for a specified action or item. Below is a detailed description of each piece of data associated with the request:

        #### Request Type
        - **Method**: PUT
          - This indicates that the operation will update an existing resource on the server.

        #### URL
        - **URL**: `http://localhost:3000/api/action/review/update`
          - The endpoint where the action review update request is sent.

        #### Authentication
        - **Auth Type**: Bearer
          - The request requires bearer token authentication, ensuring that the requester has proper authorization.

        - **Bearer Token**: 
          - **Key**: `token`
            - The identifier for the bearer token.
          - **Value**: `BearerToken`
            - A placeholder for the actual token used to authenticate the request.
          - **Type**: string
            - Indicates that the token value should be a string.

        #### Headers
        - **Client-UUID**:
          - **Key**: `Client-UUID`
            - A custom header field used to identify the client making the request.
          - **Value**: `ClientUUID`
            - A placeholder for the actual UUID of the client.
          - **Type**: default
            - Specifies the default type for this header.

        #### Request Body
        - **Body Mode**: raw
          - Indicates that the body of the request will be sent in raw format.
          
        - **Raw Body Content**:
          - The body is formatted in JSON and contains the following fields:

          - **sessionId**: 
            - Represents the unique identifier for the session during which the review is made.

          - **accountId**: 
            - Identifies the account associated with the review.

          - **path**: 
            - The path indicating where the video or content is located, e.g., `/live/channel/video123`.

          - **targetType**: 
            - Specifies the type of the target being reviewed, e.g., `videoId`.

          - **targetId**: 
            - The unique identifier of the target that is being reviewed.

          - **sourceType**: 
            - Indicates the type of the source, e.g., `accountId`.

          - **sourceId**: 
            - The unique identifier for the source account of the review.

          - **didReview**: 
            - A boolean indicating whether or not the review has been completed (true/false).

          - **reviewScore**: 
            - A numeric score assigned to the review, typically on a scale (e.g., 1 to 5).

          - **isUndo**: 
            - A boolean value indicating whether the review action is to undo a previous review.

          - **name**: 
            - An optional field for the name associated with the review.

          - **description**: 
            - An optional field for a description of the review.

          - **tags**: 
            - Optional field for any tags associated with the review.

          - **reviewId**: 
            - The unique identifier of the review being updated.

        This endpoint is used for updating an existing review and requires appropriate authentication and information in the request body.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didReview: true
                reviewScore: 5
                isUndo: false
                name: ''
                description: ''
                tags: ''
                reviewId: reviewId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/review/get:
    get:
      tags:
        - ActionReview
      summary: Action - Review - Get
      description: |-
        ### Endpoint Description: Action - Review - Get

        - **Name**: This endpoint is referred to as "Action - Review - Get". It is designed to retrieve a review based on specific parameters.

        - **Method**: The HTTP method used for this request is **GET**, indicating that the endpoint is meant to fetch data without modifying any server resources.

        - **URL**: The request is sent to the following URL:
          ```
          http://localhost:3000/api/action/review/get/?reviewId=reviewId&sessionId=sessionId&accountId=accountId
          ```
          This URL includes query parameters for `reviewId`, `sessionId`, and `accountId`, which are essential for identifying which review to retrieve.

        - **Query Parameters**:
          - **reviewId**: This parameter should be replaced with the actual ID of the review you want to fetch. It serves as a unique identifier for the review.
          - **sessionId**: This parameter represents the session context under which the review was created or accessed. It helps in tracking user sessions.
          - **accountId**: This parameter indicates the account associated with the review, allowing for filtering based on user accounts.

        - **Authentication**: The request requires bearer token authentication. This means that access to this endpoint is secured and needs a valid token to be provided in the request header.
          - **Bearer Token**: 
            - **Key**: `token`
            - **Value**: `BearerToken` - This is a placeholder for the actual token that will authorize the request.
            - **Type**: This is marked as a string, indicating the format of the token.

        - **Headers**: The current state of headers shows one placeholder with no key or value and is disabled. This means no additional headers are currently required or sent with this request aside from the authorization token.

        - **Body**: The request body is set to raw mode but contains no data. For a GET request, it is typical to not include a body, so this configuration is appropriate.

        Overall, this endpoint allows users to retrieve specific review details by providing necessary identifiers in the URL, ensuring that access is controlled through bearer token authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: reviewId
          in: query
          schema:
            type: string
          example: reviewId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/review/all:
    get:
      tags:
        - ActionReview
      summary: Action - Review - Get All
      description: |-
        ### Endpoint Description: Action - Review - Get All

        This API endpoint retrieves all reviews associated with actions. Below is a detailed description of each component of the request.

        - **Name**: Action - Review - Get All  
          This is the name of the API request. It indicates that the endpoint is used to get all reviews related to actions.

        - **Request**: 
          The main section where the details of the API request are defined.

          - **Auth**:  
            Specifies the authentication method used for the API call.
            
            - **Type**: `bearer`  
              This indicates that the API uses Bearer Token authentication.
              
            - **Bearer**:  
              An array that contains a single object for the token.
              
              - **Key**: `token`  
                The key used to signify the token in the authorization header.
                
              - **Value**: `BearerToken`  
                A placeholder string for the actual Bearer Token required for authentication. Users should replace `BearerToken` with their actual token.
                
              - **Type**: `string`  
                This denotes that the value of the token is a string data type.
                
          - **Method**: `GET`  
            This specifies that the request method is GET, which means it will retrieve data from the server.

          - **URL**: `http://localhost:3000/api/action/review/all/?sessionId=sessionId&accountId=accountId`  
            The endpoint URL for the API request. It consists of the base URL followed by the specific route to access all reviews. It also includes two query parameters:
            
            - **sessionId**: a placeholder for the unique identifier of the session. This should be replaced with the actual session ID.
            
            - **accountId**: a placeholder for the unique identifier of the account. This should be replaced with the actual account ID.

          - **Headers**:  
            An array that allows you to specify any additional HTTP headers for the request.
            
            - **Key**: `""`  
              In this case, there are no custom headers defined as the key is empty.
              
            - **Value**: `""`  
              Similarly, since the key is empty, there is no value defined.
              
            - **Type**: `default`  
              Indicates the type of the header, which defaults to standard headers.
              
            - **Disabled**: `true`  
              This means that the header configuration is currently disabled and will not be sent with the request.
              
          - **Body**:  
            Contains the data to be sent with the request.
            
            - **Mode**: `raw`  
              This indicates that the body of the request is in raw format.
              
            - **Raw**: `""`  
              The body is empty, meaning no additional data is sent with the request. This is typical for GET requests where no body is required. 

        This detailed description serves to help users understand how to interact with the endpoint correctly and what information they need to prepare when making a request to retrieve action reviews.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/review/delete:
    post:
      tags:
        - ActionReview
      summary: Action - Review - Delete
      description: |-
        ### Action - Review - Delete

        - **Request Auth**: 
          - **Type**: The authentication type is set to "bearer", meaning that this request requires a bearer token for authentication.
          - **Bearer**: Contains an array with authentication details.
            - **Key**: This field indicates the name of the token, which is "token" in this case.
            - **Value**: This is a placeholder value where "sessionId" should be replaced with the actual session ID that provides authorization for the request.
            - **Type**: The type of the value is set to "string", indicating that the token is in string format.

        - **Request Method**: 
          - The HTTP method used for this request is "POST", indicating that data is being sent to the server to perform an action.

        - **Request URL**: 
          - The endpoint URL for the request is "http://localhost:3000/api/action/review/delete". This is the address where the request will be sent to delete a review action.

        - **Request Headers**: 
          - This section is currently empty, with no headers set. One header is marked as disabled, implying it was considered but not in use for this request.

        - **Request Body**: 
          - The body of the request is set to use "raw" mode, meaning that the data will be sent as a raw JSON string.
          - The raw data must follow the structure provided:
            - **sessionId**: This field requires the actual session ID for the user session, replacing the placeholder "sessionId".
            - **accountId**: This field requires the account ID of the user requesting the review deletion, replacing the placeholder "accountId".
            - **reviewId**: This field specifies the ID of the review that needs to be deleted, replacing the placeholder "reviewId". 

        Users must ensure to replace the placeholders in the JSON body with actual IDs to successfully execute the delete action for the review.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"reviewId\":\"reviewId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/revoke/create:
    post:
      tags:
        - ActionRevoke
      summary: Action - Revoke - Create
      description: |-
        ### Action - Revoke - Create

        This endpoint is designed to handle the action of revoking a specific resource. Below is a detailed description of the data used in this endpoint:

        #### Auth
        - **type**: Specifies the type of authorization required. In this case, it is a bearer token.
        - **bearer**: This section contains the authentication details.
          - **key**: This indicates the authentication key type, which is `token`.
          - **value**: The actual token required for the request, here represented as `BearerToken`.
          - **type**: Indicates the data type of the token, specified as a string.

        #### Method
        - **method**: The HTTP method used for this request. It is set to `POST`, which is commonly used for creating new resources.

        #### URL
        - **url**: The endpoint to which the request is sent. In this case, it is `http://localhost:3000/api/action/revoke/create`, which suggests that this is a local development server.

        #### Headers
        - **headers**: This section contains any additional information sent with the request.
          - Currently, there are no specific headers mentioned as both the key and value are empty, and the header is marked as disabled.

        #### Body
        - **mode**: This indicates the format of the body data. It is set to `raw`, meaning the body contains a raw JSON string.
        - **raw**: The actual content of the body that contains the parameters required for the revocation action in JSON format. Below are the details of each field:
          - **sessionId**: The unique identifier for the session from which the resource will be revoked.
          - **accountId**: The identifier of the account associated with the operation.
          - **path**: The specific path of the resource being revoked, represented as `"/live/channel/video123"`.
          - **targetType**: Indicates the type of target from which the resource will be revoked, in this case, it is set to `streamer`.
          - **targetId**: The unique identifier for the specific target being revoked, represented as `videoId`.
          - **sourceType**: Indicates the origin type from where the resource is being revoked. Here, it relates to the account ID.
          - **sourceId**: The identifier of the source account for context, represented as `accountId`.
          - **tokenAmount**: The amount of tokens to be considered for this revocation, which is set to 20.
          - **name**: A name for the revoke action, provided here as `revoke1`.
          - **description**: A space for additional details about the operation. Currently left empty.
          - **tags**: A space for any tags that may categorize or describe this request further. Currently left empty.

        #### Options
        - **options**: Specifies additional options for the request body.
          - **raw**: Indicates that the body content is in raw format.
            - **language**: Specifies the format of the raw content, here noted as `json`. 

        This endpoint is crucial for managing the revocation of resources associated with an account, allowing for controlled actions within the system.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: revoke1
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/revoke/update:
    put:
      tags:
        - ActionRevoke
      summary: Action - Revoke - Update
      description: |-
        ### Endpoint: Action - Revoke - Update

        #### Request Details

        - **Authentication**: 
          - **Type**: Bearer
            - **Token**: A string value that represents the bearer token used for authentication, structured as "BearerToken". This token must be included in the header to authenticate the request.

        - **Method**: 
          - **PUT**: Indicates that this request is intended to update existing resources on the server.

        - **URL**: 
          - **Endpoint**: `http://localhost:3000/api/action/revoke/update`
            - This is the URL where the API request is sent. It is intended for updating revocation actions.

        - **Headers**:
          - **Client-UUID**: 
            - A default header that holds the client’s unique identifier. It is represented as "ClientUUID", and should be replaced with the actual UUID of the client making the request.

        #### Body Parameters

        - **Mode**: 
          - **Raw**: The body of the request is sent in its raw format, typically necessary for JSON data.

        - **Raw Content**: 
          ```json
          {
              "sessionId": "sessionId",
              "accountId": "accountId",
              "revokeId": "revokeId",
              "path": "/live/channel/video123",
              "targetType": "streamer",
              "targetId": "videoId",
              "sourceType": "accountId",
              "sourceId": "accountId",
              "tokenAmount": 20,
              "name": "Farooq",
              "description": "this is description",
              "tags": "xyz"
          }
          ```
          
          - **sessionId**: A string that uniquely identifies the session. This should be populated with the actual session identifier.
          
          - **accountId**: A string that represents the account's unique identifier. Replace this with the actual account ID of the user making the request.
          
          - **revokeId**: A unique identifier for the revoke action. This should be replaced with the specific ID related to the revocation process.
          
          - **path**: A string that indicates the path to the resource being access, specifically intended for revocation actions, such as `"/live/channel/video123"`.
          
          - **targetType**: A string value indicating the type of target for the revoke action. It typically denotes whether the target is a user, streamer, etc. In this case, it is specified as "streamer".
          
          - **targetId**: The unique identifier for the target of the revoke action. This should be replaced with the actual target ID, which could refer to a video or user ID.
          
          - **sourceType**: Indicates the type of source initiating the action. This could refer to the account type, shown here as "accountId".
          
          - **sourceId**: The unique identifier for the source account. It is generally the same as the `accountId`.
          
          - **tokenAmount**: A numeric value representing the amount of tokens involved in the revocation. In this case, it’s set to 20.
          
          - **name**: A string representing the name associated with the revoke action. Here, it's "Farooq".
          
          - **description**: A detailed string providing additional context about the revoke action. In this instance, it simply states "this is description".
          
          - **tags**: A string that allows for categorization or labeling of the revoke action. The example value is "xyz". 

        Ensure to replace placeholder values with appropriate real-world data before making the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                revokeId: revokeId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: Farooq
                description: this is description
                tags: xyz
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/revoke/get:
    get:
      tags:
        - ActionRevoke
      summary: Action - Revoke - Get
      description: |-
        {
          "name": "Action - Revoke - Get",
          "description": "This endpoint retrieves information about a specific revoke action based on provided identifiers. It utilizes a GET HTTP method to fetch the data without modifying any resources.",
          "request": {
            "auth": {
              "type": "bearer",
              "description": "Authentication is done using a bearer token. This token must be included in the request to authorize access to the endpoint.",
              "bearer": [
                {
                  "key": "token",
                  "description": "This represents the key for the bearer token used for authentication. Replace 'BearerToken' with your actual token.",
                  "value": "BearerToken",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "description": "The HTTP method used for this request. In this case, it is a GET request, meaning it is used to retrieve data.",
            "url": "http://localhost:3000/api/action/revoke/get/?revokeId=revokeId&sessionId=sessionId&accountId=accountId",
            "description": "The URL endpoint for the request. Replace 'revokeId', 'sessionId', and 'accountId' with actual values to specify which revoke action to retrieve.",
            "headers": [
              {
                "key": "",
                "value": "",
                "type": "default",
                "disabled": true,
                "description": "This section is currently empty and disabled. Headers can be added as necessary for additional request specifications."
              }
            ],
            "body": {
              "mode": "raw",
              "description": "The body of the request is set to raw mode.",
              "raw": "",
              "description": "Currently, no body content is needed for this GET request as it does not require additional data submission."
            }
          }
        }
      security:
        - bearerAuth: []
      parameters:
        - name: revokeId
          in: query
          schema:
            type: string
          example: revokeId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/revoke/all:
    get:
      tags:
        - ActionRevoke
      summary: Action - Revoke - Get All
      description: |-
        ### Action - Revoke - Get All

        #### Overview
        This endpoint is designed to retrieve all revocation actions from the server. It requires a valid session ID and account ID to fetch the relevant data.

        #### Request Details

        - **Authentication**: 
          - **Type**: Bearer Token
          - **Key**: `token`
          - **Value**: The actual token should be prefixed with `Bearer ` followed by the token value. This is used to authorize the request and ensure that the caller has the necessary permissions to access the endpoint.

        - **HTTP Method**: 
          - **Method**: GET
          - This specifies that the request is intended to retrieve information from the server rather than modifying it.

        - **URL**: 
          - **Endpoint**: `http://localhost:3000/api/action/revoke/all/`
          - **Query Parameters**: 
            - **sessionId**: Represents the unique identifier for the user session. This is required to identify the session for which revocation actions are being requested.
            - **accountId**: Represents the unique identifier for the user's account. This is required to specify which account's revocation actions are being queried.

        - **Headers**: 
          - A placeholder for any additional headers required by the request. In this case, the header is currently disabled and does not carry any value or key.

        - **Body**: 
          - **Mode**: Raw
          - **Content**: The body of the request is empty since GET requests generally do not require a body. The raw mode indicates that no formatting is needed.

        ### Summary
        This endpoint allows users to fetch all revocation actions by providing a session ID and account ID. It uses a Bearer Token for authentication and follows a standard GET request structure.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/revoke/delete:
    post:
      tags:
        - ActionRevoke
      summary: Action - Revoke - Delete
      description: |-
        ### Description of the API Endpoint

        **Name**: Action - Revoke - Delete  
        This endpoint is used to revoke or delete a specific action associated with a particular account session.

        **Request Details**:  
        - **Auth**: This section specifies the authentication method used to access the endpoint.
          - **Type**: Bearer  
            The authentication is done using a Bearer token, which is typically used for stateless authentication.
          - **Bearer**:  
            - **Key**: token  
              This indicates that the parameter being used for authentication is a token.
            - **Value**: sessionId  
              The value should be replaced with the actual session identifier that grants access to the API.
            - **Type**: string  
              Indicates that the token is a string type.

        - **Method**: POST  
          The HTTP method used for this request is POST, which is typically used to send data to the server for processing.

        - **URL**: http://localhost:3000/api/action/revoke/delete  
          This is the endpoint URL where the revoke action is processed. It is hosted locally on the server running on port 3000.

        - **Headers**:  
          This section is for any HTTP headers that need to be passed with the request.
          - **Key**: (empty)  
            No specific header keys are defined in this request.
          - **Value**: (empty)  
            No specific header values are defined in this request.
          - **Type**: default  
            The default type for this header entry.
          - **Disabled**: true  
            Indicates that this header is currently disabled and will not be sent with the request.

        - **Body**:  
          This section includes the body of the POST request.
          - **Mode**: raw  
            The body is sent as raw data.
          - **Raw**:  
            `{"sessionId":"sessionId","accountId":"accountId","revokeId":"revokeId"}`  
            The body should contain a JSON object with the following fields:
            - **sessionId**: A string representing the session identifier for the current user session. Replace "sessionId" with the actual session ID.
            - **accountId**: A string representing the account identifier that the action is associated with. Replace "accountId" with the actual account ID.
            - **revokeId**: A string representing the identifier of the action to be revoked or deleted. Replace "revokeId" with the actual ID of the action you want to remove.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"revokeId\":\"revokeId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/search/create:
    post:
      tags:
        - ActionSearch
      summary: Action - Search - Create
      description: |-
        ### Endpoint: Action - Search - Create

        #### Request Method
        - **Method**: POST  
          This endpoint uses the POST HTTP method to create a new search action.

        #### URL
        - **URL**: `http://localhost:3000/api/action/search/create`  
          This is the local address where the API endpoint can be accessed for creating a search action.

        #### Authentication
        - **Auth Type**: Bearer  
          This endpoint requires bearer token authentication.
          - **Token**:  
            - **Key**: `token`  
              The key used to identify the token in the header.
            - **Value**: `BearerToken`  
              Placeholder for the actual bearer token that grants access to the API.

        #### Headers
        - **Headers**:  
          Contains key-value pairs sent with the request.  
          - **Key**: *Not specified*  
            - No specific headers are required for this request. This entry is disabled.

        #### Request Body
        - **Body Mode**: Raw  
          The request body is sent in raw JSON format.

        - **JSON Structure**:  
          The following fields are included in the JSON body:

          1. **sessionId**:  
             - Type: String  
             A unique identifier for the current session.

          2. **accountId**:  
             - Type: String  
             The identifier for the user's account.

          3. **path**:  
             - Type: String  
             The path where the action is taking place, e.g., the URL of a video.

          4. **targetType**:  
             - Type: String  
             Specifies the type of target for the action, e.g., 'videoId'.

          5. **targetId**:  
             - Type: String  
             The identifier of the target, e.g., a specific video ID.

          6. **sourceType**:  
             - Type: String  
             Specifies the type of source from where the action is derived.

          7. **sourceId**:  
             - Type: String  
             The identifier of the source, e.g., the account ID.

          8. **didSearch**:  
             - Type: Boolean  
             Indicates whether a search action was performed (true/false).

          9. **query**:  
             - Type: String  
             The search query entered by the user, e.g., "example search".

          10. **queryId**:  
              - Type: String  
              A unique identifier for the specific search query, e.g., 'dhasikdhjk23sd'.

          11. **filter**:  
              - Type: String  
              Indicates the type of filter applied to the search results, e.g., 'spam'.

          12. **filterId**:  
              - Type: String  
              A unique identifier for the specific filter applied, e.g., 'jdaslk2'.

          13. **name**:  
              - Type: String  
              Optional name for the search action.

          14. **description**:  
              - Type: String  
              Optional description providing more details about the search action.

          15. **tags**:  
              - Type: String  
              Optional tags associated with the search action for easier categorization.

        #### Summary
        This endpoint allows the creation of a search action by providing necessary identifiers, search parameters, and optional metadata to accurately describe the action being taken. Use this whenever a new search is initiated in your application.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didSearch: true
                query: example search
                queryId: dhasikdhjk23sd
                filter: spam
                filterId: jdaslk2
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/search/update:
    put:
      tags:
        - ActionSearch
      summary: Action - Search - Update
      description: |-
        ### Description of Each Data in the Endpoint

        - **name**: This is the title of the API request, indicating that this action will search and update relevant data.

        - **request**: This field contains all the details necessary to perform the request.

          - **auth**: Specifies the authentication method used for this request.
          
            - **type**: Indicates the type of authentication. Here it is set to "bearer", which means a token will be used for access.
            
            - **bearer**: This holds the actual token needed for authentication.
            
              - **key**: This is the identifier for the token, labeled as "token".
              
              - **value**: This represents the actual bearer token required for authentication, labeled as "BearerToken".
              
              - **type**: Describes the data type of the token, which is set to "string".

          - **method**: This indicates the HTTP method used for the request. In this case, it is a "PUT" method, typically used for updating existing resources.

          - **url**: This is the endpoint where the request is sent. Here it is set to "http://localhost:3000/api/action/search/update", which suggests that the action is performed on a local server.

          - **headers**: This is an array that contains header information sent along with the request.
          
            - **key**: Identifies the header. In this case, it is "Client-UUID".
            
            - **value**: This is the unique identifier for the client, labeled as "ClientUUID".
            
            - **type**: Indicates the type of the header, which is set to "default".

          - **body**: This section holds the payload that will be sent with the request.
          
            - **mode**: Defines how the body is structured. It is set to "raw", meaning the data will be sent as-is, without any transformations.
            
            - **raw**: This contains the actual data being sent, represented in JSON format:
            
              - **sessionId**: This is a unique identifier for the session related to the action.
          
              - **accountId**: This represents the ID of the account associated with the action.
          
              - **path**: This is the specific resource path being accessed or modified, such as a video or channel (e.g., "/live/channel/video123").
          
              - **targetType**: Describes the type of target being updated or searched, in this case, it is specified as "videoId".
          
              - **targetId**: This is the ID of the target resource being manipulated or queried.
          
              - **sourceType**: Indicates the type of source for the search or update, here identified as "accountId".
          
              - **sourceId**: This is the ID of the source account associated with the action.
          
              - **didSearch**: A boolean value indicating whether a search action was performed.
          
              - **query**: This represents the search query that is being updated, for example, "example search updated".
          
              - **queryId**: A unique identifier for the search query.
          
              - **filter**: This specifies any filters applied to the search action, such as "spam".
          
              - **filterId**: A unique identifier for the filter being applied.
          
              - **searchId**: This is the identifier for the search operation.
          
              - **name**: This field is meant for the name associated with the action, currently left empty.
          
              - **description**: This allows for the addition of a description related to the action, currently left empty.
          
              - **tags**: This is for adding any relevant tags associated with the action, currently left empty.
          
            - **options**: This allows for additional settings for the body.
            
              - **raw**: This holds settings specific to raw body data.
              
                - **language**: Indicates the format of the raw data, which is set to "json".
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didSearch: true
                query: example search updated
                queryId: dhasikdhjk23sd
                filter: spam
                filterId: jdaslk2
                searchId: searchId
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/search/get:
    get:
      tags:
        - ActionSearch
      summary: Action - Search - Get
      description: |-
        ### Action - Search - Get

        #### Authentication
        - **Type**: Bearer
          - This request requires bearer token authentication. A valid token must be included in the request headers to access the API.
          - **Key**: `token`
            - Represents the authorization token needed for authentication.
          - **Value**: `BearerToken`
            - A placeholder for the actual bearer token that should be substituted before making the request.
          - **Type**: String
            - The token must be a string value.

        #### Request Details
        - **Method**: GET
          - This endpoint uses the GET method, which is typically used to retrieve data from a specified resource.

        - **URL**: `http://localhost:3000/api/action/search/get/?searchId=searchId&sessionId=sessionId&accountId=accountId`
          - This is the endpoint's address. It is structured to include query parameters for specifics.
          - **Query Parameters**:
            - **searchId**: A parameter used to specify the identifier for the search action. This should be replaced with the actual search ID.
            - **sessionId**: A session identifier that may be used to track the user's session. Replace this with the actual session ID.
            - **accountId**: Identifies the account associated with the search. This needs to be replaced with the actual account ID.

        #### Headers
        - An empty header is included by default:
          - **Key**: `""`
            - Currently, there is no header key specified.
          - **Value**: `""`
            - Currently, there is no header value specified.
          - **Disabled**: true
            - This header is not active; it will not be sent with the request.

        #### Body
        - **Mode**: Raw
          - Indicates the format of the body content, which in this case, is set to raw text.
        - **Raw**: `""`
          - The body is currently empty, meaning no additional data is being sent with the request. No content is required for a GET request.

        Make sure to provide actual values for the placeholder fields (`BearerToken`, `searchId`, `sessionId`, `accountId`) when using this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - name: searchId
          in: query
          schema:
            type: string
          example: searchId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/search/all:
    get:
      tags:
        - ActionSearch
      summary: Action - Search - Get All
      description: |-
        {
          "description": {
            "name": "Action - Search - Get All",
            "request": {
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "BearerToken",
                    "type": "string"
                  }
                ]
              },
              "method": "GET",
              "url": "http://localhost:3000/api/action/search/all/?sessionId=sessionId&accountId=accountId",
              "headers": [
                {
                  "key": "",
                  "value": "",
                  "type": "default",
                  "disabled": true
                }
              ],
              "body": {
                "mode": "raw",
                "raw": ""
              }
            }
          },
          "details": {
            "auth": {
              "description": "Authentication information for the API request. This endpoint requires a Bearer Token for authorization.",
              "token": {
                "description": "The key used for authorization, which should be replaced with a valid token prior to making the request."
              }
            },
            "method": {
              "description": "The HTTP method used for this request. In this case, it is a GET request, which is used to retrieve data."
            },
            "url": {
              "description": "The endpoint URL for the API request. This includes placeholders for sessionId and accountId that need to be replaced with actual values when executing the request.",
              "example": "http://localhost:3000/api/action/search/all/?sessionId=yourSessionId&accountId=yourAccountId"
            },
            "headers": {
              "description": "This section contains any additional headers for the request. Currently, there are no headers set, and the default header field is disabled."
            },
            "body": {
              "description": "The body of the request. This request does not require a body since it is a GET request. The mode is set to raw, but no content is needed."
            }
          }
        }
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/search/delete:
    post:
      tags:
        - ActionSearch
      summary: Action - Search - Delete
      description: |-
        ### Action - Search - Delete Endpoint Description

        #### Request Object
        - **Auth**: This section specifies the authentication method used for the API request.
          - **Type**: The type of authentication is "bearer," which means the request will include a token that grants access to the endpoint.
          - **Bearer**: This array contains the details of the bearer token.
            - **Key**: The name of the field, which is "token" in this case.
            - **Value**: This represents where the actual token is stored, referred to as "sessionId."
            - **Type**: Indicates the data type of the value, which is a string.

        - **Method**: The HTTP method for the request is "POST." This means that the request is intended to send data to the server to perform an action (in this case, deleting a search).

        - **URL**: The endpoint URL for this request is "http://localhost:3000/api/action/search/delete." This is the URL on the local server where the delete action will be performed.

        - **Headers**: This section includes any additional headers that may be necessary for the request.
          - Since there are currently no headers specified (the key and value are empty), this header is disabled and will not be sent with the request.

        #### Request Body
        - **Mode**: The body mode is set to "raw," indicating that the body content is sent as plain text rather than in a specific format like form data or URL-encoded data.

        - **Raw**: This is the actual data sent within the body of the request. It is a JSON string that contains:
          - **sessionId**: A unique identifier for the user's session, used for authentication to verify the identity of the user making the request.
          - **accountId**: This identifies the specific account associated with the action being performed. It allows the server to know which account's search is to be deleted.
          - **searchId**: This represents the unique identifier of the specific search to be deleted. It tells the server which search record should be removed.

        This endpoint is designed to allow users to delete a specific search associated with their account by providing the necessary identifiers in the request body.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"searchId\":\"searchId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/sell/create:
    post:
      tags:
        - ActionSell
      summary: Action - Sell - Create
      description: |-
        # Action - Sell - Create Endpoint Description

        This section outlines the details for the "Action - Sell - Create" endpoint in the API. Users may utilize this information to understand how to structure their requests effectively and make successful API calls.

        ## Endpoint Details

        ### Request Method
        - **Method**: POST  
          Indicates that this endpoint will be used to send data to the server to create a new resource.

        ### Request URL
        - **URL**: `http://localhost:3000/api/action/sell/create`  
          The endpoint where the POST request will be sent.

        ### Authentication
        - **Auth Type**: Bearer  
          This API requires bearer token authentication to be added in the request header.
          
        - **Bearer Token**: 
          - **Key**: token  
            The key used for authentication is "token".
          - **Value**: BearerToken  
            Replace this with a valid bearer token to access the API.

        ### Headers
        - **Headers**: 
          - The current configuration includes an empty header, which is disabled by default. You can add any required headers relevant to your implementation. 

        ### Request Body
        - **Body**: Raw JSON  
          The body of the request must be sent in JSON format. Below are the required and optional fields:

        #### Fields in the Request Body
        1. **sessionId**:  
           - Type: String  
           - Description: Identifier for the session during which the sell action is being executed.

        2. **accountId**:  
           - Type: String  
           - Description: Unique identifier for the account associated with the sell action.

        3. **path**:  
           - Type: String  
           - Description: The path indicating the location of the resource. E.g., `/live/channel/video123`.

        4. **targetType**:  
           - Type: String  
           - Description: Type of the target resource. For example, it could signify that the target is identified by a "videoId".

        5. **targetId**:  
           - Type: String  
           - Description: Identifier for the specific target resource (e.g., the video being sold).

        6. **sourceType**:  
           - Type: String  
           - Description: Type of the source resource, which could be an "accountId" in this context.

        7. **sourceId**:  
           - Type: String  
           - Description: Identifier of the source resource corresponding to the selling action.

        8. **tokenAmount**:  
           - Type: Integer  
           - Description: The quantity of tokens being sold in this action. 

        9. **didSell**:  
           - Type: Boolean  
           - Description: A flag indicating whether the selling action was successfully completed (true) or not (false).

        10. **itemType**:  
            - Type: String  
            - Description: Specifies the type of item being sold, e.g., "token".

        11. **utilityType**:  
            - Type: String  
            - Description: Indicates the utility type of the item, such as "coin".

        12. **name**:  
            - Type: String  
            - Description: A descriptive name associated with the sell action.

        13. **description**:  
            - Type: String  
            - Description: A detailed description of the sell action. This can be kept empty if not needed.

        14. **tags**:  
            - Type: String  
            - Description: Any tags relevant to the sell action to enhance categorization. This can also be left blank.

        ### Conclusion
        This endpoint allows for the creation of a new sell action in the API. Ensure that all necessary fields are filled out and that valid authentication is provided to successfully execute the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 10
                didSell: true
                itemType: token
                utilityType: coin
                name: this is name
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/sell/update:
    put:
      tags:
        - ActionSell
      summary: Action - Sell - Update
      description: |-
        ### Action - Sell - Update

        This endpoint facilitates the update of a sell action in the system. Below is a detailed description of each data field involved in this API request:

        **Request Overview:**
        - **Auth**: This section outlines the authentication method for the request.
          - **Type**: Specifies that a bearer token is used for authenticating the request.
          - **Bearer**: Contains the authentication token to verify the identity of the API caller.
            - **Key**: "token" - Denotes the name of the token being passed.
            - **Value**: "BearerToken" - Placeholder for the actual bearer token that should be provided.
            - **Type**: "string" - Indicates the data type of the token.

        - **Method**: 
          - **PUT**: This HTTP method is used to update an existing resource.

        - **URL**: 
          - **http://localhost:3000/api/action/sell/update**: The endpoint URL where the PUT request will be sent to update a sell action.

        - **Headers**: 
          - Contains any additional metadata to be passed along with the request.
            - **Key**: "Client-UUID" - A unique identifier for the client making the request.
            - **Value**: "ClientUUID" - Placeholder for the actual UUID that should be provided.
            - **Type**: "default" - Indicates the default header type.

        - **Body**: This section details the data sent with the request when using the raw mode in JSON format.
          - **Mode**: 
            - **raw**: Specifies that the request body is in raw format.
          - **Raw Data**: JSON object containing the following fields:
            - **sessionId**: Represents the identifier for the session associated with this action.
            - **accountId**: Unique identifier for the account that is making the sell action.
            - **path**: The specific path related to the content, e.g., "/live/channel/video123".
            - **targetType**: Type of target that is being acted upon (e.g., "videoId").
            - **targetId**: Unique identifier for the target item (e.g., videoId).
            - **sourceType**: Denotes the type of source from where the sell action originates (same as accountId).
            - **sourceId**: Unique identifier for the source entity (same as accountId).
            - **tokenAmount**: The quantity of tokens involved in the sell action (e.g., 10).
            - **didSell**: Boolean value (true/false) indicating if the sell action was successful.
            - **itemType**: Describes the type of item being sold (e.g., "token").
            - **utilityType**: Indicates the category of utility for the item, such as "coin".
            - **name**: New name assigned to the sell action or item, which is being updated (e.g., "this is updated name").
            - **description**: This field can hold additional information or description about the selling action (currently empty).
            - **tags**: A field for any associated tags relevant to the sell action (currently empty).
            - **sellId**: Unique identifier for the specific sell action being updated (e.g., "sellId"). 

        This detailed description should help users understand the purpose and structure of the data when using the "Action - Sell - Update" API endpoint.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 10
                didSell: true
                itemType: token
                utilityType: coin
                name: this is updated name
                description: ''
                tags: ''
                sellId: sellId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/sell/get:
    get:
      tags:
        - ActionSell
      summary: Action - Sell - Get
      description: |-
        ### Description of the API Endpoint:

        #### Name: 
        - **Action - Sell - Get**
          - This is the identifier for the API request, indicating that it is used to retrieve information related to a sell action.

        #### Request Details:
        - **Auth**: 
          - This specifies the authentication method for the request.
          - **Type**: `bearer`
            - The API uses bearer token authentication, which requires a token to be sent in the request header for authorization.
          - **Bearer**:
            - The following data is contained within the bearer authentication.
              - **Key**: `token`
                - This is the name of the key used for the token.
              - **Value**: `BearerToken`
                - This is a placeholder where the actual bearer token should be placed to authorize the request.
              - **Type**: `string`
                - This indicates the type of the value expected (a string representing the token).

        - **Method**: 
          - **GET**
            - This indicates that the API request is a GET request, which is used to retrieve data from the server.

        - **URL**: 
          - `http://localhost:3000/api/action/sell/get/?sellId=sellId&sessionId=sessionId&accountId=accountId`
            - This is the endpoint URL where the GET request will be sent. 
            - It contains query parameters:
              - **sellId**: Represents the unique identifier for the sell action.
              - **sessionId**: Represents the unique identifier for the session associated with the request.
              - **accountId**: Represents the unique identifier for the account involved in the sell action.

        - **Headers**: 
          - This section is used to specify any additional HTTP headers required for the request.
          - **Key**: `""` 
            - There are no custom headers set, as denoted by the empty key.
          - **Value**: `""`
            - No values are assigned, indicating that this header is currently not being used.
          - **Type**: `default`
            - This indicates the default type for the header.
          - **Disabled**: `true`
            - This means that the header configuration is disabled and will not be sent with the request.

        - **Body**: 
          - The body of the request is specified here.
          - **Mode**: `raw`
            - Indicates that the body content will be sent as raw data.
          - **Raw**: `""`
            - The body is currently empty, meaning no additional data is sent with the request.

        This endpoint is designed to retrieve sell action details based on the provided identifiers for sell, session, and account. Ensure that the bearer token is replaced with a valid token for successful authentication while using this API.
      security:
        - bearerAuth: []
      parameters:
        - name: sellId
          in: query
          schema:
            type: string
          example: sellId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/sell/all:
    get:
      tags:
        - ActionSell
      summary: Action - Sell - Get All
      description: |-
        ### Endpoint Description: Action - Sell - Get All

        - **Name**: Action - Sell - Get All
          - This is the name of the API endpoint which indicates that it retrieves all sell actions.

        - **Request**: 
          - This section describes the details of the API request.

          - **Auth**: 
            - **Type**: Bearer
              - Specifies that the authentication method used for this API request is bearer token authentication.
              
            - **Bearer**:
              - This section includes the bearer token information needed for authentication.
              
              - **Key**: "token"
                - This is the key that identifies the bearer token used for accessing the API.

              - **Value**: "BearerToken"
                - Replace "BearerToken" with the actual token value that provides authorization to access the endpoint.

              - **Type**: String
                - Indicates that the value of the token is a string data type.

          - **Method**: GET
            - The HTTP method used for this request is GET, indicating that the requester wants to retrieve data from the API.

          - **URL**: 
            - This is the endpoint to which the GET request is made.
            - **Format**: `http://localhost:3000/api/action/sell/all/?sessionId=sessionId&accountId=accountId`
              - Replace `sessionId` and `accountId` with actual session and account identifiers to retrieve specific sell actions.
              
          - **Headers**: 
            - This section typically includes any additional headers to be sent with the request. Here, the header is currently not defined and is disabled.
            
              - **Key**: (Empty)
                - No specific key is provided for headers in this request.
                
              - **Value**: (Empty)
                - No value is provided for headers in this request.
                
              - **Type**: Default
                - Indicates that this is a default type header.
                
              - **Disabled**: true
                - The header is currently disabled, meaning it will not be sent with the request.

          - **Body**: 
            - This section defines the body of the request.
            
            - **Mode**: Raw
              - Indicates that the body format is raw text.
              
            - **Raw**: (Empty)
              - No content is provided in the body of the request, meaning the GET request does not send additional data.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/sell/delete:
    post:
      tags:
        - ActionSell
      summary: Action - Sell - Delete
      description: |-
        ### Endpoint Description: Action - Sell - Delete

        - **Endpoint Name**: Action - Sell - Delete
          - This endpoint is designated for the operation of deleting an action related to selling.

        - **Request Method**: POST
          - This endpoint accepts a POST request, which is typically used to send data to the server to create or delete resources.

        - **Request URL**: 
          - `http://localhost:3000/api/action/sell/delete`
            - The base URL indicates that the endpoint is hosted on a local server and is dedicated to handling delete actions for sells.

        - **Authorization**:
          - **Auth Type**: Bearer
            - The endpoint requires Bearer Token authentication for access.
          - **Bearer Token Details**:
            - **Key**: token
              - This is the identifier for the token being used in the authentication process.
            - **Value**: sessionId
              - This represents the actual session token that needs to be sent with the request to authenticate the user.
            - **Type**: string
              - Indicates that the token is provided as a string data type.

        - **Headers**:
          - The request includes a header section, but it currently has no defined headers, as the key and value fields are empty.
          - The header is marked as disabled, indicating that it will not be sent with the request.

        - **Body**:
          - **Body Mode**: raw
            - The body of the request is sent in raw format, which allows for custom JSON strings to be sent.
          - **Raw Data**:
            - The body contains the following JSON structure:
              ```json
              {
                "sessionId": "sessionId",
                "accountId": "accountId",
                "sellId": "sellId"
              }
              ```
            - **sessionId**: 
              - This field represents the user's session ID, which is necessary for authentication purposes.
            - **accountId**:
              - This field identifies which user's account is being accessed in relation to the sell action.
            - **sellId**:
              - This field specifies the unique identifier for the sell action that needs to be deleted.

        This endpoint is crucial for functions that require removing sell actions from an account, and it relies on providing valid IDs and a session token for secure operations.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"sellId\":\"sellId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/share/create:
    post:
      tags:
        - ActionShare
      summary: Action - Share - Create
      description: |-
        ### Action - Share - Create

        This API endpoint allows users to create a share action for a specific target item. Below are the details for each component of the request:

        - **Authorization**: 
          - **Type**: Bearer 
          - **Token**: A bearer token is required for authentication. Replace `"BearerToken"` with an actual token string when making the request.

        - **HTTP Method**: 
          - **POST**: This indicates that data is being sent to the server to create a new entry.

        - **URL**: 
          - `http://localhost:3000/api/action/share/create`: This is the endpoint where the request will be sent.

        - **Headers**: 
          - Currently, there are no headers specified, as indicated by the empty key and value. The header is disabled, meaning it won't be included in the request.

        - **Body**: 
          - The body of the request is in raw JSON format. The following fields are to be included:

          - **sessionId**: 
            - Represents the unique identifier for the user session. This should be replaced with the actual session ID when making the request.

          - **accountId**: 
            - The unique identifier for the user's account. This should be filled in with the actual account ID.

          - **path**: 
            - This indicates the specific path or URL of the item being shared. Example: `"/live/channel/video123"` describes where the video is located.

          - **targetType**: 
            - Defines the type of the target being shared. In this case, it is set to `videoId`, indicating that the target is a video.

          - **targetId**: 
            - The unique identifier of the target item (video) being shared. This should be replaced with the actual video ID.

          - **sourceType**: 
            - Specifies the type of source from which the item is being shared; here it is `accountId`, indicating that the source is an account.

          - **sourceId**: 
            - The unique identifier of the source entity (account) that is sharing the target item. This should correspond with the actual account ID.

          - **didShare**: 
            - A boolean value indicating if the item has been shared. Set to `true` if the share action is being performed.

          - **shareType**: 
            - Indicates the type of share being executed. In this case, it is set to `link`, meaning that a link to the target item is being shared.

          - **text**: 
            - A message that accompanies the share. This is usually a description or comment about the shared item (e.g., `"check this out"`).

          - **name**: 
            - An optional field for the name associated with the share. This can be left blank if not used.

          - **description**: 
            - An optional field to provide more context about the share. This is also left blank if not applicable.

          - **tags**: 
            - An optional field for including any relevant tags associated with the share. These might help categorize or describe the content of the share.

        This endpoint is essentially designed to facilitate sharing actions on various types of content, with the ability to specify who is sharing, what is being shared, and additional context about the share.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didShare: true
                shareType: link
                text: check this out
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/share/update:
    put:
      tags:
        - ActionShare
      summary: Action - Share - Update
      description: |-
        ### Action - Share - Update

        This API endpoint allows users to update sharing details for specific content.

        #### Request

        - **Auth**:
          - **Type**: Bearer
            - **Bearer Token**: The token required for authorization to access this endpoint. The token should be supplied in the format: "Bearer <token>".

        - **Method**: 
          - **PUT**: This HTTP method is used to update existing resources on the server.
          
        - **URL**: 
          - **Endpoint**: `http://localhost:3000/api/action/share/update` 
            - This is the endpoint where the request will be sent to perform the update action.

        - **Headers**:
          - **Client-UUID**: A unique identifier for the client making the request. This helps the server identify the client and its context.

        - **Body**:
          - **Mode**: Raw
            - This indicates that the request body contains raw data in JSON format.

          - **Raw JSON Data**:
            - **sessionId**: A unique identifier for the user's session, which is useful for tracking user interactions and data sharing sessions.
            - **accountId**: The ID associated with the user's account that is performing the sharing action.
            - **path**: The location of the content being shared. For example, it might denote a URL path for a video.
            - **targetType**: Specifies the type of target being shared, such as "videoId", indicating that the target of the share is a video identified by its ID.
            - **targetId**: The unique identifier of the target content that is being shared.
            - **sourceType**: The type of the source account that is sharing the content. This might be an "accountId" indicating the account sharing the video.
            - **sourceId**: The unique identifier of the source account that is responsible for sharing.
            - **didShare**: A boolean value indicating whether the share action was successfully executed. Set to true if the item was shared.
            - **shareType**: Indicates the method of sharing, such as "link", specifying how the content is being shared.
            - **text**: A custom message that can accompany the shared content. In this case, it states "check this out update".
            - **name**: A placeholder for any name associated with the share, currently left empty.
            - **description**: A space for a description of the shared content, also currently left empty.
            - **tags**: Tags associated with the shared content for better categorization, currently left empty.
            - **shareId**: A unique identifier for the share action itself, which could be used to track or reference this particular share operation.

        This endpoint is designed for users to modify sharing details effectively, ensuring that all relevant information is captured in the request body.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didShare: true
                shareType: link
                text: check this out update
                name: ''
                description: ''
                tags: ''
                shareId: shareId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/share/get:
    get:
      tags:
        - ActionShare
      summary: Action - Share - Get
      description: |-
        ### Description of Endpoint Data

        - **name**: This is the name of the API request. In this case, it is titled "Action - Share - Get", indicating that it is used for retrieving share actions.

        - **request**: This section contains all the necessary information for making the API request.

          - **auth**: This part specifies the authentication method required to access the endpoint.
          
            - **type**: Indicates the type of authentication being used. Here, it is "bearer", which typically involves passing a token for authorization.
            
            - **bearer**: This array holds the details related to the bearer token.
            
              - **key**: This is a label for the token parameter. In this case, it is named "token".
              
              - **value**: This is where you input the actual bearer token you will use for authentication. The placeholder "BearerToken" is meant to be replaced with a valid token.
              
              - **type**: Indicates the data type of the value. Here, it is specified as "string", meaning the token should be a text value.

          - **method**: This indicates the type of HTTP method used for the request. In this case, "GET" signifies that this request is meant to retrieve data from the server.

          - **url**: This is the endpoint URL where the request will be sent. It includes several query parameters:
          
            - **shareId**: This parameter represents the unique identifier for the share you want to retrieve. It should be replaced with the actual share ID.
            
            - **sessionId**: This parameter is used to specify the session ID related to the request. It should be replaced with the actual session ID.
            
            - **accountId**: This parameter represents the unique identifier for the account associated with the share. It should be replaced with the actual account ID.

          - **headers**: This section is a list of HTTP headers that may be included with the request.
          
            - **key**: This is intended for specifying the name of a header. In this case, it is empty.
            
            - **value**: This is where you would include the value for the header. It is also empty here.
            
            - **type**: This indicates the type of header. "default" means it is a standard HTTP header.
            
            - **disabled**: Indicates whether this header section is active or not. Here, it is set to true, meaning this specific header will not be sent with the request.

          - **body**: This section holds the body of the HTTP request.
          
            - **mode**: This indicates how the body is formatted. "raw" means that the body content can be written freely in its raw form.
            
            - **raw**: This is where the actual data content for the request body would be specified. It is currently empty, implying that this GET request does not require a request body.
      security:
        - bearerAuth: []
      parameters:
        - name: shareId
          in: query
          schema:
            type: string
          example: shareId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/share/all:
    get:
      tags:
        - ActionShare
      summary: Action - Share - Get All
      description: |-
        ### Detailed Description of the Endpoint Data

        - **name**: This is the identifier for the API endpoint. In this case, it is named "Action - Share - Get All", which indicates that this endpoint is used to retrieve all share actions available in the system.

        - **request**: This object contains all the properties related to the HTTP request that will be made to the API endpoint.

          - **auth**: This section outlines the authentication method used when accessing the endpoint. Here, it specifies that a bearer token is required for authorization.

            - **type**: This indicates the type of authentication being used. It is set to "bearer", which means that bearer token authentication is required.

            - **bearer**: This is an array that holds the details for the bearer token.

              - **key**: This represents the name of the parameter for the token. In this case, it is labeled as "token".

              - **value**: This is the actual bearer token that will be passed in the authorization header. For demonstration purposes, it is shown as "BearerToken".

              - **type**: This indicates the data type of the `value`. Here, it is specified as "string".

          - **method**: This specifies the HTTP method used to interact with the endpoint. It is set to "GET", which indicates that this request is intended to retrieve data.

          - **url**: This is the complete URL to which the request will be made. The URL provided is `http://localhost:3000/api/action/share/all/?sessionId=sessionId&accountId=accountId`, where:
          
            - `http://localhost:3000` is the base URL of the local server.
            - `/api/action/share/all/` is the specific path for this API endpoint.
            - `?sessionId=sessionId` is a query parameter for the session ID, where "sessionId" should be replaced with a valid session identifier.
            - `&accountId=accountId` is another query parameter for the account ID, which should be replaced with a valid account identifier.

          - **headers**: This section is for defining any additional HTTP headers that may be necessary for the request.

            - **key**: In this instance, there is no key specified, meaning no additional headers are being sent with this request.

            - **value**: Similar to the key, there is no value specified, so this field is left empty.

            - **type**: This indicates the type of the header, which is set to "default".

            - **disabled**: This property indicates whether the header is enabled or disabled for the request. It is set to true, meaning that this header will not be included in the request.

          - **body**: This field is used to define the body of the request.

            - **mode**: This specifies the format of the body. It is set to "raw", which indicates that the body will contain plain text.

            - **raw**: This is the field where the actual body content would go if applicable. In this case, it is empty, which means there is no body content to be sent with the GET request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/share/delete:
    post:
      tags:
        - ActionShare
      summary: Action - Share - Delete
      description: |-
        ### Action - Share - Delete Endpoint Description

        - **Endpoint Name:** Action - Share - Delete
          - This endpoint is used to delete a shared action.

        - **Request Type:**
          - **Method:** POST
            - This endpoint uses the POST method to send a request to the server.

        - **Authentication:**
          - **Auth Type:** Bearer
            - Authentication is done using a bearer token to validate the user's session.

          - **Bearer Token Details:**
            - **Key:** token
              - This key is used to identify the authorization token within the request.
            - **Value:** sessionId
              - The value represents the session identifier, which must be replaced with the actual session ID during the request.
            - **Type:** string
              - Indicates that the token is a string value.

        - **Request URL:**
          - **URL:** `http://localhost:3000/api/action/share/delete`
            - This is the endpoint URL where the request is sent. It is set to localhost for local testing.

        - **Headers:**
          - The request currently has a header defined but it is disabled and does not contain any key or value.
            - **Key:** (empty)
            - **Value:** (empty)
            - **Type:** default
            - **Disabled:** true
              - This indicates that no additional headers are being sent with the request.

        - **Request Body:**
          - **Mode:** raw
            - Indicates that the body of the request is in raw JSON format.
          - **Raw Body Content:**
            - The body contains a JSON object with the following parameters:
              - **sessionId:** "sessionId"
                - This field should contain the actual session ID for authentication.
              - **accountId:** "accountId"
                - This field should contain the actual account ID associated with the action to be deleted.
              - **shareId:** "shareId"
                - This field should contain the ID of the share that needs to be deleted.

        Make sure to replace the placeholder values ("sessionId", "accountId", "shareId") with actual values when making a request to successfully delete a share.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"shareId\":\"shareId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/sticker/create:
    post:
      tags:
        - ActionSticker
      summary: Action - Sticker - Create
      description: |-
        ### Description of Request Data for "Action - Sticker - Create"

        - **Auth**: This section is for authentication.
          - **Type**: Specifies the type of authentication being used. In this case, it is a Bearer token which is required for secure API access.
          - **Bearer**: An array that contains the authentication token.
            - **Key**: Refers to the specific identifier for the token.
            - **Value**: This is the actual bearer token that you need to provide for authentication.
            - **Type**: This indicates the data type of the token, which is "string".

        - **Method**: This specifies the HTTP method being used for the request. Here, the method is "POST", indicating that data is being sent to the server.

        - **URL**: This is the endpoint to which the request is being sent. It is set to "http://localhost:3000/api/action/sticker/create", indicating that the creation of a sticker will happen at this API endpoint located on the local server.

        - **Headers**: This section would typically contain additional metadata for the request.
          - **Key**: This can be used to specify any specific header parameters. Currently, there are no headers defined as the key is empty.
          - **Value**: As with the key, the value is currently empty.
          - **Type**: Default, indicating a standard header.
          - **Disabled**: This indicates whether the header is active or not. Currently, it is disabled.

        - **Body**: This section contains the data payload for the request.
          - **Mode**: Specifies the format of the payload. "raw" means that the data is sent directly as-is.
          - **Raw**: The actual data being sent in JSON format. It includes:
            - **sessionId**: A unique identifier for the session during which the sticker is created.
            - **accountId**: The identifier for the account that is creating the sticker.
            - **path**: Specifies the location associated with the sticker, given in a string format which includes a reference to a video.
            - **targetType**: Denotes what type of target the sticker is being applied to. Here it is "videoId".
            - **targetId**: The identifier for the target where the sticker will be placed, specifically a video.
            - **sourceType**: Indicates the type of source being used. Here, it is set to "accountId".
            - **sourceId**: The identifier for the source, which is also the accountId.
            - **didUseSticker**: A boolean value indicating whether the sticker has been used or not, currently set to true.
            - **stickerType**: The category or type of sticker being created; in this case, it is "funny".
            - **tokenAmount**: Indicates the number of tokens being utilized in the creation of the sticker, set to 30.
            - **name**: A placeholder for the name of the sticker, currently left blank.
            - **description**: A placeholder for a description of the sticker, currently left blank.
            - **tags**: Placeholder for any tags that may be associated with the sticker, currently left blank.
          - **Options**: Additional options for the request payload.
            - **Raw**: Specifies the language of the raw data, which is set to "json".

        This structured data allows users to create a sticker through the specified API endpoint, supplying necessary details about the session, account, and properties of the sticker itself.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didUseSticker: true
                stickerType: funny
                tokenAmount: 30
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/sticker/update:
    put:
      tags:
        - ActionSticker
      summary: Action - Sticker - Update
      description: |-
        ### Endpoint Description: Action - Sticker - Update

        **Request Details:**

        - **Auth:**
          - **Type:** Bearer
            - **Token:**
              - **Key:** token
              - **Value:** BearerToken
              - **Type:** string
              - This is the authorization token required to authenticate the request. Replace "BearerToken" with your actual token.

        - **Method:** PUT  
          - This specifies that the request will update existing resources on the server.

        - **URL:** `http://localhost:3000/api/action/sticker/update`  
          - This is the endpoint where the request is sent to update the sticker action.

        - **Headers:**
          - **Client-UUID:**  
            - **Key:** Client-UUID
            - **Value:** ClientUUID
            - **Type:** default  
            - This header is used to identify the client making the request. Replace "ClientUUID" with the actual UUID of the client.

        - **Body:**
          - **Mode:** raw  
            - Indicates that the body of the request is in raw format.
          
          - **Raw Content:**  
            ```json
            {
              "sessionId": "sessionId",
              "accountId": "accountId",
              "path": "/live/channel/video123",
              "targetType": "videoId",
              "targetId": "videoId",
              "sourceType": "accountId",
              "sourceId": "accountId",
              "didUseSticker": true,
              "stickerType": "funny update",
              "tokenAmount": 30,
              "name": "",
              "description": "",
              "tags": "",
              "stickerId": "stickerId"
            }
            ```
          
          - **Field Descriptions:**
            - **sessionId:**  
              - A unique identifier for the current session. Replace "sessionId" with the actual session ID.

            - **accountId:**  
              - The identifier for the user's account. Replace "accountId" with the actual account ID.

            - **path:**  
              - The path to the content where the sticker is applied. For example, "/live/channel/video123" indicates the specific location of the video.

            - **targetType:**  
              - Specifies the type of target the sticker will be applied to. In this case, it indicates that the target type is a video ID.

            - **targetId:**  
              - The specific ID of the target video where the sticker is being applied. Replace "videoId" with the actual video ID.

            - **sourceType:**  
              - Indicates the type of the source for the sticker action. In this case, it refers to an account ID.

            - **sourceId:**  
              - The identifier of the source where the sticker originated. Replace "accountId" with the actual account ID again.

            - **didUseSticker:**  
              - A boolean value indicating whether the sticker was used or not. Set to `true` means the sticker was applied.

            - **stickerType:**  
              - Describes the type of the sticker being used. In this example, it’s specified as "funny update".

            - **tokenAmount:**  
              - The amount of tokens used or rewarded for this sticker action. This example shows 30 tokens.

            - **name:**  
              - A field for the name of the sticker. Currently empty but can be used to define a custom name.

            - **description:**  
              - A field to provide a description of the sticker. Currently empty and can be utilized to elaborate on the sticker's purpose.

            - **tags:**  
              - Tags related to the sticker. This field is currently empty but can be used to categorize or label the sticker.

            - **stickerId:**  
              - The unique identifier for the sticker. Replace "stickerId" with the actual sticker ID.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didUseSticker: true
                stickerType: funny update
                tokenAmount: 30
                name: ''
                description: ''
                tags: ''
                stickerId: stickerId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/sticker/get:
    get:
      tags:
        - ActionSticker
      summary: Action - Sticker - Get
      description: |-
        ### Action - Sticker - Get Endpoint Description

        - **Name**: Action - Sticker - Get  
          This is the name of the API endpoint that retrieves information about a specific sticker based on provided identifiers.

        - **Request**:
          - **Auth**:  
            - **Type**: Bearer  
              The authentication method used for this request is bearer token authentication.

            - **Bearer**:  
              - **Key**: token  
                This is the key used to pass the authentication token in the request.
                
              - **Value**: BearerToken  
                This represents the actual bearer token value needed to authenticate the request. It must be replaced with a valid token to access the endpoint.

              - **Type**: string  
                This indicates that the value provided for the bearer token should be in string format.

          - **Method**: GET  
            This specifies that the HTTP method for this request is GET, which is typically used to retrieve data from a server.

          - **URL**:  
            `http://localhost:3000/api/action/sticker/get/?stickerId=stickerId&sessionId=sessionId&accountId=accountId`  
            This is the endpoint URL used to fetch the sticker data. It includes query parameters:
            - **stickerId**: This parameter should be replaced with the unique identifier of the sticker you want to retrieve.
            - **sessionId**: This parameter should be replaced with the session identifier related to the active user session.
            - **accountId**: This parameter should be replaced with the account identifier associated with the user making the request.

          - **Headers**:
            - **Key**: ""  
              No custom headers are defined for this request as indicated by the empty key.
              
            - **Value**: ""  
              There is no value associated with the custom header since the key is empty.

            - **Type**: default  
              This specifies that the header type is set to default.

            - **Disabled**: true  
              This indicates that any provided headers are currently disabled and will not be sent with the request.

          - **Body**:
            - **Mode**: raw  
              The body of the request is set to "raw", which means it does not send any specific formatted data.

            - **Raw**: ""  
              The body is empty, meaning no data is required to be sent in the body of this GET request.
      security:
        - bearerAuth: []
      parameters:
        - name: stickerId
          in: query
          schema:
            type: string
          example: stickerId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/sticker/all:
    get:
      tags:
        - ActionSticker
      summary: Action - Sticker - Get All
      description: |-
        ### Endpoint Description

        #### Name
        - **Action - Sticker - Get All**: This endpoint retrieves all sticker actions available for the user.

        #### Request Details

        1. **Authentication** 
           - **Type**: Bearer
           - **Bearer**: This section contains an authorization token that is required to access the endpoint.
             - **Key**: `token` - This is the name of the authorization key.
             - **Value**: `BearerToken` - This is a placeholder for the actual bearer token that must be provided to authenticate the request. Users must replace it with a valid token.
             - **Type**: `string` - Indicates that the value of the token is a string.

        2. **Method**
           - **GET**: This specifies that the endpoint uses the GET method, which is typically used for retrieving data from the server.

        3. **URL**
           - **Endpoint URL**: `http://localhost:3000/api/action/sticker/all/?sessionId=sessionId&accountId=accountId` - This is the URL used to access the endpoint. It includes query parameters:
             - **sessionId**: A placeholder for the user's session identifier. Must be replaced with an actual session ID.
             - **accountId**: A placeholder for the user's account identifier. Must be replaced with an actual account ID.

        4. **Headers**
           - The headers section is currently empty and disabled. Users can add any necessary headers for their request here, but as it stands, no additional headers are required.

        5. **Body**
           - **Mode**: `raw` - This indicates that the body of the request is in raw format.
           - **Raw**: This field is empty, meaning no request body is sent with the GET request. GET requests typically do not include a body.

        ### Usage Notes
        - Ensure that you replace `BearerToken`, `sessionId`, and `accountId` with appropriate values before making the request.
        - Since this is a GET request, it is primarily used to retrieve information from the server, and no data is sent in the body of the request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/sticker/delete:
    post:
      tags:
        - ActionSticker
      summary: Action - Sticker - Delete
      description: |-
        ### Description of Each Data Element in the Endpoint

        - **name**: This is the title of the API request. It describes the action being performed, in this case, it indicates that this endpoint is used to delete a sticker.

        - **request**: This section contains all the details related to the API request being made.

          - **auth**: This specifies the authentication mechanism being used for the request.
          
            - **type**: This indicates the method of authentication. In this case, it is a "bearer" token, which means that access is controlled via a token that must be included in the request.
            
            - **bearer**: This array holds the details of the bearer token required for authentication.
            
              - **key**: This is the identifier for the token. Here it is labeled "token," indicating its purpose.
              
              - **value**: This is a placeholder for the actual value of the bearer token needed for the request. In the context of the request, it is set to "sessionId," indicating that the session ID will be used as the bearer token.
              
              - **type**: This indicates the data type of the value. It is specified as "string," meaning that the value should be treated as a string.

          - **method**: This states the type of HTTP request being made. In this case, "POST" indicates that data is being sent to the server, which is typical for deleting resources.

          - **url**: This is the endpoint URL where the API request is directed. The URL "http://localhost:3000/api/action/sticker/delete" indicates that the request is being made to a local server running on port 3000 to perform the action of deleting a sticker.

          - **headers**: This section can include custom headers that provide additional context for the request.

            - **key**: This is the name of a header. Here it is left empty, possibly indicating that there are no additional headers required for this request.
            
            - **value**: This is the value associated with the key. It is also empty in this case.
            
            - **type**: This specifies the type of header, which is "default" in this case indicating standard header behavior.
            
            - **disabled**: This boolean indicates whether the header is currently enabled or disabled. It is set to true, meaning that this header will not be included in the request.

          - **body**: This section holds the data sent with the request.

            - **mode**: This specifies the format of the request body. It is set to "raw," indicating that the body will be sent as raw JSON data.
            
            - **raw**: This is a string representation of the actual data being sent in the request body. The raw data includes:
            
              - **sessionId**: This field should contain the valid session ID for the user making the request. It is a placeholder indicating that the actual session ID needs to be provided.
              
              - **accountId**: This field is meant to hold the identifier for the account associated with the sticker being deleted. Like sessionId, it indicates that the actual account ID needs to be specified.
              
              - **stickerId**: This field is used to specify the unique identifier of the sticker that is to be deleted. Again, this is a placeholder, and the actual sticker ID needs to be included in the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"stickerId\":\"stickerId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/subscribe/create:
    post:
      tags:
        - ActionSubscribe
      summary: Action - Subscribe - Create
      description: |-
        ### Description of Endpoint Data

        - **name**: This is the name of the API endpoint. It identifies the action being performed, which is to subscribe to a service or item.

        - **request**: This section describes the details of the API request.

          - **auth**: This defines the authentication method required for the request.
            - **type**: Indicates the type of authentication used. In this case, it is "bearer", which typically means that a token is required.
            - **bearer**: Contains the details of the bearer token.
              - **key**: A label for the bearer token field, here it is simply "token".
              - **value**: The actual token string used for authorization. "BearerToken" is a placeholder for a valid token.
              - **type**: Specifies the data type of the token, which is "string".

          - **method**: The HTTP method used for the request. In this case, it is "POST", indicating data is being sent to the server.

          - **url**: The URL to which the request is to be sent. Here it is a local endpoint: "http://localhost:3000/api/action/subscribe/create".

          - **headers**: This section outlines any HTTP headers that are sent with the request.
            - **key**: The name of the header. An empty key indicates there are no specific headers being set.
            - **value**: The value of the header. Again, this is empty as indicated.
            - **type**: Specifies the type of the header. "default" is the type used here.
            - **disabled**: A boolean that shows if the header is currently disabled (true means it is disabled).

          - **body**: This contains the data sent with the request.
            - **mode**: Indicates the format of the body content. "raw" means the body is sent as raw data.
            - **raw**: This is the actual content of the body in JSON format. The body parameters are as follows:
              - **sessionId**: A unique identifier for the session. It's meant to track the current session of the action being requested.
              - **accountId**: The unique identifier for the user’s account that is making a subscription.
              - **path**: This specifies the path to the resource being subscribed to, in this case, a specific channel or video.
              - **targetType**: Specifies the type of target for the subscription, here it indicates it is a "videoId".
              - **targetId**: The unique identifier for the target item (i.e., the specific video).
              - **sourceType**: Indicates the type of source from which the subscription originates, here it's an "accountId".
              - **sourceId**: This is the unique identifier of the source account.
              - **didSubscribe**: A boolean flag that indicates whether the subscribe action has been successfully executed.
              - **isUndo**: A boolean flag that shows if the action is attempting to undo a previous subscription (false means it is not an undo).
              - **name**: A string field for providing a name related to the subscription, currently empty.
              - **description**: A string field for providing a description of the subscription, currently empty.
              - **tags**: A string field to include any tags associated with the subscription, currently empty.
            - **options**: Additional configuration for the body.
              - **raw**: This specifies the format of the body being sent, in this case, it is JSON.

        This endpoint aims to create a subscription for a user to a certain resource, using the provided identifiers and metadata.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didSubscribe: true
                isUndo: false
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/subscribe/update:
    put:
      tags:
        - ActionSubscribe
      summary: Action - Subscribe - Update
      description: |-
        ### Description of Endpoint Data

        #### Name
        - **Action - Subscribe - Update**: The name of the action that indicates this endpoint is meant for updating subscription information.

        #### Request
        - **Auth**: Authentication method used to access the endpoint.
          - **Type**: Specifies the authentication type being used, which is "bearer".
          - **Bearer**: This array contains the authentication details.
            - **Key**: The name of the authentication key, set as "token".
            - **Value**: The placeholder value for the bearer token, indicating where to insert the actual token.
            - **Type**: The data type of the value, noted as "string".

        - **Method**: The HTTP method used for the request, which is "PUT". This indicates that the client requests to update existing resources.

        - **URL**: The endpoint where the request is sent.
          - **Value**: "http://localhost:3000/api/action/subscribe/update", this is where the update action is performed.

        - **Headers**: Additional information included in the request.
          - **Key**: The name of the header being sent, which is "Client-UUID".
          - **Value**: Placeholder for the client-specific UUID value that identifies the client making the request.
          - **Type**: The type of the header, noted as "default".

        - **Body**: This contains the data sent with the request.
          - **Mode**: Set to "raw", indicating that the body content is provided as raw text.
          - **Raw**: The payload sent in JSON format containing various fields related to the subscription update.
            - **sessionId**: Unique identifier for the current session.
            - **accountId**: Identifier for the user’s account involved in the subscription.
            - **path**: The URL path related to the specific resource being updated, in this case pointing to a video.
            - **targetType**: Specifies the type of target for the subscription, set to "videoId", signifying the content type.
            - **targetId**: The unique identifier for the target resource, which is the video being subscribed to.
            - **sourceType**: Indicates the type of source from which the subscription comes, here specified as "accountId".
            - **sourceId**: The unique identifier for the source account associated with the subscription.
            - **didSubscribe**: A boolean value indicating whether the subscription action is being confirmed or not.
            - **isUndo**: A boolean that indicates if the action is meant to revert a previous subscription.
            - **name**: An optional field for providing a name associated with the subscription.
            - **description**: An optional field for providing a description associated with the subscription.
            - **tags**: An optional field where tags can be provided to categorize the subscription.
            - **subscribeId**: A unique identifier for the subscription itself, used for tracking.

        - **Options**: Configuration options for the body content.
          - **Raw**: Specifies that the content is in raw format.
            - **Language**: Indicates the language used for the raw data, set to "json".
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didSubscribe: true
                isUndo: false
                name: ''
                description: ''
                tags: ''
                subscribeId: subscribeId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/subscribe/get:
    get:
      tags:
        - ActionSubscribe
      summary: Action - Subscribe - Get
      description: |-
        {
          "name": "Action - Subscribe - Get",
          "description": "This endpoint retrieves subscription details based on the provided parameters. It uses a GET request method to fetch data regarding a specific subscription.",
          "request": {
            "auth": {
              "type": "bearer",
              "description": "Authentication is done using a Bearer token. This token must be included in the request header to authorize access to the endpoint.",
              "bearer": [
                {
                  "key": "token",
                  "value": "BearerToken",
                  "type": "string",
                  "description": "The Bearer token used for authentication. Replace 'BearerToken' with the actual token value required for accessing the resource."
                }
              ]
            },
            "method": "GET",
            "description": "The HTTP method used for this request is GET, which is typically used to retrieve data from the server.",
            "url": "http://localhost:3000/api/action/subscribe/get/?subscribeId=subscribeId&sessionId=sessionId&accountId=accountId",
            "description": "The URL for the request includes three query parameters: subscribeId, sessionId, and accountId. These parameters are necessary for identifying the specific subscription details to be fetched.",
            "headers": [
              {
                "key": "",
                "value": "",
                "type": "default",
                "disabled": true,
                "description": "No headers are actively set for this request, as this entry is currently disabled. If needed, headers can be enabled and configured according to requirements."
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "description": "This endpoint does not require a request body, as it uses the GET method. The body is set to raw and empty."
            }
          }
        }
      security:
        - bearerAuth: []
      parameters:
        - name: subscribeId
          in: query
          schema:
            type: string
          example: subscribeId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/subscribe/all:
    get:
      tags:
        - ActionSubscribe
      summary: Action - Subscribe - Get All
      description: |-
        ```json
        {
          "description": {
            "name": "Action - Subscribe - Get All": "This is the title of the endpoint request used to retrieve a list of all subscriptions for a user or a system action.",
            
            "request": {
              "auth": {
                "type": "bearer": "This indicates that bearer token authentication is being used to authorize the request.",
                
                "bearer": [
                  {
                    "key": "token": "This is the name of the authentication key used in the request.",
                    "value": "BearerToken": "This represents the actual bearer token that is required to authenticate the request. Users will need to replace 'BearerToken' with a valid token.",
                    "type": "string": "This indicates that the value of the token is of type string."
                  }
                ]
              },
              
              "method": "GET": "This specifies that the HTTP method used for the request is GET, which is used to request data from the specified resource.",
              
              "url": "http://localhost:3000/api/action/subscribe/all/?sessionId=sessionId&accountId=accountId": "This is the endpoint URL where the GET request is sent. It includes two query parameters: 'sessionId' and 'accountId', which need to be supplied with the actual session ID and account ID for the request to work.",
              
              "headers": [
                {
                  "key": "": "This is a placeholder for any additional headers, which are currently empty.",
                  "value": "": "This is the value for the additional headers, which are currently empty.",
                  "type": "default": "This indicates the type of the header, although no headers are currently defined here.",
                  "disabled": true: "This indicates that the header is disabled and thus will not be included in the request."
                }
              ],
              
              "body": {
                "mode": "raw": "This specifies that the body of the request is in raw format.",
                
                "raw": "": "This field is currently empty, meaning that there is no body payload required for this GET request."
              }
            }
          }
        }
        ```
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/subscribe/delete:
    post:
      tags:
        - ActionSubscribe
      summary: Action - Subscribe - Delete
      description: |-
        ## Description

        ### Name
        **Action - Subscribe - Delete**: This is the name of the API request, indicating its function is to delete a subscription action.

        ### Request
        - **Auth**: This section describes the authentication method used to access the API.
          - **Type**: The authentication type is set to bearer, which implies that a token is required for authorization.
          - **Bearer**: This array contains the parameters for the bearer token.
            - **Key**: This is the identifier for the token parameter, specified as "token".
            - **Value**: The expected value for this key is "sessionId", which should be replaced with the actual session token during a real request.
            - **Type**: The type is set to "string", indicating that the value is a string format.

        - **Method**: The HTTP method used for this request is POST. This means that the request is intended to send data to the server to perform an action, in this case, deleting a subscription.

        - **URL**: The endpoint for this request is "http://localhost:3000/api/action/subscribe/delete". This URL is where the request will be sent to process the unsubscribe action.

        - **Headers**: This section includes the HTTP headers for the request.
          - There is an empty header entry present in the configuration, but it is currently disabled. This means no additional custom headers will be sent with the request.

        - **Body**: This defines the content of the request.
          - **Mode**: The body mode is set to "raw", indicating that the body content will be sent as raw text rather than through form-encoded data.
          - **Raw**: The body content is a JSON string that contains the following parameters:
            - **sessionId**: This key should be replaced with the actual session identifier for the user making the request.
            - **accountId**: This key should be replaced with the actual account identifier to specify which account is being unsubscribed.
            - **subscribeId**: This key should be replaced with the actual subscription identifier that needs to be deleted.

        This endpoint is designed to handle requests to unsubscribe users from a particular service or notifications by providing the necessary identifiers in the request body.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"subscribeId\":\"subscribeId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/suggest/create:
    post:
      tags:
        - ActionSuggest
      summary: Action - Suggest - Create
      description: |-
        ### Endpoint: Action - Suggest - Create

        #### Request Details

        - **Auth**: This section specifies the authorization method used for the API request. It uses a bearer token for authentication.
          - **Type**: Indicates the type of authentication being used, which is "bearer".
          - **Bearer**: This is an array that contains objects with authentication details.
            - **Key**: The key used for the token, labeled as "token".
            - **Value**: The actual bearer token value, marked as "BearerToken".
            - **Type**: The data type of the token, which is "string".

        - **Method**: Specifies the HTTP method to be used for this request, which is "POST". This method is typically used to submit data to be processed to a specified resource.

        - **URL**: The endpoint URL where the request is sent. In this case, it is `http://localhost:3000/api/action/suggest/create`.

        - **Headers**: This section allows you to define any additional headers for your request. 
          - The header is currently empty (with no key or value) and is marked as disabled, meaning it won't be sent with the request.

        #### Body Data

        The body of the request is formatted as raw JSON and contains the following fields:

        - **sessionId**: A unique identifier for the session in which the action is taking place. This helps in tracking user actions associated with a specific session.

        - **accountId**: The identifier for the user account that is making the suggestion. 

        - **path**: The path to the specific resource or context related to the suggestion. In this example, it points to a video resource.

        - **targetType**: Defines the type of the target for the suggestion. In this case, it is specified as "videoId".

        - **targetId**: The unique identifier of the target item (video) related to the suggestion.

        - **sourceType**: Indicates where the suggestion originates from. Here, it is specified as "accountId" indicating that the source is a user account.

        - **sourceId**: The unique identifier of the source that is making the suggestion, mirroring the accountId.

        - **didSuggest**: A boolean value indicating whether this user has made a suggestion. This is set to `true`.

        - **category**: The broader category under which the suggestion falls. In this case, it is categorized as "feature".

        - **subcategory**: A more specific classification of the category. Here, it is specified as "UI improvements".

        - **subject**: A brief description of what the suggestion is about, labeled as "Dark mode req".

        - **title**: A concise title summarizing the suggestion, which is "add dark mode".

        - **description**: A more detailed explanation of the suggestion, providing context. In this case, it notes that having a dark mode option would be helpful.

        - **tags**: A comma-separated list of tags related to the suggestion for better categorization and searchability. In this example, the tags are "feature request" and "dark mode".

        - **didReply**: A boolean indicating whether a reply has been made regarding this suggestion. This is set to `true`.

        - **didReview**: A boolean indicating whether the suggestion has been reviewed. This is set to `true`.

        - **replyText**: The text of the reply provided for the suggestion. Here, it states that dark mode is part of the development roadmap.

        - **reviewStars**: A numeric rating given during the review of the suggestion, with a value of 5 indicating a high rating.

        - **name**: An optional field, currently left empty, that could hold a name related to the suggestion if needed. 

        This detailed breakdown should provide clarity on each field in the API request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didSuggest: true
                category: feature
                subcategory: uI improvements
                subject: Dark mode req
                title: add dark mode
                description: It would be helpful to have a dark mode option.
                tags: feature request,dark mode
                didReply: true
                didReview: true
                replyText: Dark mode is in our roadmap
                reviewStars: 5
                name: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/suggest/update:
    put:
      tags:
        - ActionSuggest
      summary: Action - Suggest - Update
      description: |-
        ### Detailed Description of Each Data in the Endpoint

        1. **name**: 
           - This is the title of the request. It indicates that this endpoint is responsible for updating a suggestion action.

        2. **request**: 
           - This object encapsulates all elements required to make the API call.

           - **auth**: 
             - Contains authentication details.
             - **type**: "bearer"
               - Indicates that the request utilizes Bearer Token authentication.
             - **bearer**: 
               - An array that holds the authentication token.
               - **key**: "token"
                 - Represents the key used to authenticate.
               - **value**: "BearerToken"
                 - Placeholder for the actual Bearer token that will be used for authentication.
               - **type**: "string"
                 - Specifies that the value type is a string.

           - **method**: 
             - "PUT"
               - This indicates that the HTTP method used for the request will be PUT, typically used for updating resources.

           - **url**: 
             - "http://localhost:3000/api/action/suggest/update"
               - This is the endpoint where the request is sent. The base URL follows with the specific path for updating a suggestion.

           - **headers**: 
             - Contains the additional headers to be sent with the request.
             - **key**: "Client-UUID"
               - This header is used to identify the client making the request.
             - **value**: "ClientUUID"
               - Placeholder for the actual Client UUID that will be included in the request.
             - **type**: "default"
               - Indicates that this is a standard header.

           - **body**: 
             - This section includes the payload sent with the PUT request.
             - **mode**: "raw"
               - Indicates that the body is being sent in a raw format.
             - **raw**: 
               - This is the actual JSON data being sent to the server for the update.
               - **sessionId**: "sessionId"
                 - Identifies the specific session during which the action is made.
               - **accountId**: "accountId"
                 - Represents the ID of the user account making the suggestion.
               - **path**: "/live/channel/video123"
                 - Specifies the URI path related to the suggestion.
               - **targetType**: "videoId"
                 - Defines what type of item the suggestion is related to.
               - **targetId**: "videoId"
                 - The identifier for the specific target (video) related to the suggestion.
               - **sourceType**: "accountId"
                 - Indicates the type of source from which the suggestion originated.
               - **sourceId**: "accountId"
                 - The identifier for the source account related to the suggestion.
               - **didSuggest**: true
                 - A boolean indicating if the user made a suggestion.
               - **category**: "feature"
                 - Categorizes the suggestion type (e.g., feature request).
               - **subcategory**: "uI improvements"
                 - Further classifies the suggestion under a specific subcategory.
               - **subject**: "Dark mode req"
                 - A brief title summarizing the suggestion.
               - **title**: "add dark mode"
                 - A more descriptive title reflecting what the suggestion entails.
               - **description**: "It would be helpful to have a dark mode option."
                 - Provides detailed information and rationale behind the suggestion.
               - **tags**: "feature request,dark mode"
                 - Keywords associated with the suggestion that may help in categorization or search functionalities.
               - **didReply**: true
                 - Indicates whether a response to the suggestion has been provided.
               - **didReview**: true
                 - Shows if the suggestion has been reviewed by the appropriate party.
               - **replyText**: "Dark mode is in our roadmap"
                 - The text response provided regarding the suggestion.
               - **reviewStars**: 1
                 - Indicates the rating given to the suggestion during the review process.
               - **name**: ""
                 - Placeholder for the name of the individual or entity making the suggestion which is currently left empty.
               - **suggestId**: "suggestId"
                 - A unique identifier for the suggestion being updated.

           - **options**:
             - This object specifies details about the raw body content.
             - **raw**: 
               - Indicates that the format of the raw data being sent is JSON.

        This structure provides the necessary information to understand how to interact with the API endpoint for updating suggestions effectively.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didSuggest: true
                category: feature
                subcategory: uI improvements
                subject: Dark mode req
                title: add dark mode
                description: It would be helpful to have a dark mode option.
                tags: feature request,dark mode
                didReply: true
                didReview: true
                replyText: Dark mode is in our roadmap
                reviewStars: 1
                name: ''
                suggestId: suggestId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/suggest/get:
    get:
      tags:
        - ActionSuggest
      summary: Action - Suggest - Get
      description: |-
        ### Endpoint Description: Action - Suggest - Get

        - **Name**: Action - Suggest - Get  
          This is the identifier for the API request and hints at its purpose, which is to retrieve suggestions.

        - **Request**:  
          This section contains details about how to make the API request.

          - **Auth**:  
            Details the authentication method required to access this endpoint.
            
            - **Type**:  
              The type of authentication being used.
              - **Bearer**: This indicates that bearer token authentication is required.
            
            - **Bearer**:  
              Contains information about the bearer token used for authentication.
              
              - **Key**:  
                This is the identifier for the token.
                - **Token**: The key used to pass the authentication token.
              
              - **Value**:  
                The actual token string needed for authentication.
                - **BearerToken**: Placeholder for the actual bearer token that must be provided when making the request.
              
              - **Type**:  
                Specifies that the value type of the token is a string.

          - **Method**:  
            Specifies the HTTP method to be used for the API request.
            - **GET**: The request should use the GET method to retrieve data.

          - **URL**:  
            This is the endpoint address to which the GET request is sent.
            - `http://localhost:3000/api/action/suggest/get/?suggestId=suggestId&sessionId=sessionId&accountId=accountId`: This is the endpoint where the request is directed. It includes query parameters for:
              - **suggestId**: Represents the ID of the suggestion being requested.
              - **sessionId**: Represents the current session ID.
              - **accountId**: Represents the ID of the account for which suggestions are being retrieved.

          - **Headers**:  
            Contains any additional parameters to be included in the request.
            - **Key**:  
              Currently empty, indicating there are no specific header keys set.
              
            - **Value**:  
              Also currently empty, showing no specific header values.
              
            - **Type**:  
              This suggests the type of header, set to ‘default’.
              
            - **Disabled**:  
              Set to true, indicating that this header is currently inactive and will not be sent with the request.

          - **Body**:  
            Details the structure of the body of the request.
            
            - **Mode**:  
              Indicates how the body of the request is structured.
              - **Raw**: Specifies that the body of the request will be sent as raw data.
            
            - **Raw**:  
              This is the content of the request body.
              - Currently empty, indicating that no body content is needed or provided for this GET request.
      security:
        - bearerAuth: []
      parameters:
        - name: suggestId
          in: query
          schema:
            type: string
          example: suggestId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/suggest/all:
    get:
      tags:
        - ActionSuggest
      summary: Action - Suggest - Get All
      description: |-
        ### Endpoint: Action - Suggest - Get All

        **Name**: Action - Suggest - Get All  
        This is the name of the API request, indicating that it is used to retrieve all suggestions related to actions.

        **Request**:  
        This section contains the details of how to make the API request.

        - **Auth**:  
          Contains information about the authentication method used for this request.
          
          - **Type**:  
            Specifies the authentication type as "bearer", which indicates that a bearer token will be used for authentication.
            
          - **Bearer**:  
            This is an array containing details about the bearer token required to authorize the request.
            
            - **Key**:  
              Indicates the name of the bearer token parameter. In this case, it's labeled "token".
              
            - **Value**:  
              Represents the actual authorization token that needs to be sent with the request. Here it is shown as "BearerToken", and users should replace this with their actual token.
              
            - **Type**:  
              Shows that the token should be sent as a string.

        - **Method**:  
          The HTTP method to be used for this request is "GET". This means that the request is intended to retrieve data from the server.

        - **URL**:  
          The endpoint URL where the request will be sent. In this case:
          `http://localhost:3000/api/action/suggest/all/?sessionId=sessionId&accountId=accountId`. Users should replace `sessionId` and `accountId` with actual values relevant to their session and account.

        - **Headers**:  
          This section allows for additional data to be sent along with the request, which can help facilitate the communication between the client and server.
          
          - **Key**:  
            A string intended for the header's name. This is currently empty.
            
          - **Value**:  
            The value associated with the header's key, which is also empty. Together, this header is disabled and does not contribute to the request.

        - **Body**:  
          This section contains data that can be sent with the request, although for a GET request, a body is typically not used.
          
          - **Mode**:  
            Specifies the mode of the request body, which is set to "raw". This means the body is intended to carry raw data.
            
          - **Raw**:  
            This is the area where the raw body data would be entered. Currently, it is empty since a GET request does not usually include a body.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/suggest/delete:
    post:
      tags:
        - ActionSuggest
      summary: Action - Suggest - Delete
      description: |-
        ### Action - Suggest - Delete

        #### Request Overview
        This endpoint is designed to delete a suggestion associated with a specific account and session. It utilizes a POST request to execute the deletion action.

        #### Authentication
        - **Auth Type**: Bearer Token
          - This endpoint requires a bearer token for authentication. The token must be provided in the request header to authorize the user.
          - **Token Details**:
            - **Key**: `token`
            - **Value**: `sessionId`
            - **Type**: String
          - The `sessionId` represents the unique identifier for the user's current session.

        #### HTTP Method
        - **Method**: POST
          - This indicates that the request is sending data to the server to perform an action (in this case, deleting a suggestion).

        #### URL
        - **Endpoint URL**: `http://localhost:3000/api/action/suggest/delete`
          - This is the local development URL where the API can be accessed.

        #### Headers
        - **Headers**: 
          - Currently, there are no additional headers required for this request, as indicated by the empty key and value fields. The header is also disabled, meaning it is not currently in use.

        #### Body
        - **Body Mode**: Raw
          - The request body is sent in raw format as a JSON string.
          
        - **Body Content**:
          - The body includes the following fields:
            - **sessionId**: This is the identifier for the user's current session. It is used to validate the request.
            - **accountId**: This represents the unique identifier for the user's account. It links the action to the correct account.
            - **suggestId**: This is the identifier of the suggestion that is to be deleted. It specifies which suggestion to remove from the database.

        This structure allows users to easily understand how to use this endpoint and what data needs to be provided for successful operation.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"suggestId\":\"suggestId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/suspend/create:
    post:
      tags:
        - ActionSuspend
      summary: Action - Suspend - Create
      description: |-
        {
          "name": "Action - Suspend - Create",
          "description": "This API endpoint is used to create a suspend action for a specific streaming session. Below are the details of the data required for this request.",

          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "BearerToken",
                  "type": "string"
                }
              ]
            },
            "description": "The authentication method used for this request is Bearer token. The user must provide a valid BearerToken to access the API.",
            
            "method": "POST",
            "description": "This specifies that the request method is POST, indicating that we are sending data to the server to create a new resource.",

            "url": "http://localhost:3000/api/action/suspend/create",
            "description": "This is the endpoint URL where the suspend action request is sent. It indicates that the action occurs within the local server at port 3000 in the 'api/action/suspend/create' route.",

            "headers": [
              {
                "key": "",
                "value": "",
                "type": "default",
                "disabled": true
              }
            ],
            "description": "Currently, there are no headers provided in this request, and the existing default header is disabled. If specific headers are required, they should be added here.",

            "body": {
              "mode": "raw",
              "description": "The body of the request is sent in raw format, specifically in JSON, containing the necessary data for creating a suspend action.",

              "raw": "{\n    \"sessionId\": \"sessionId\",\n    \"accountId\": \"accountId\",\n    \"path\": \"/live/channel/video123\",\n    \"targetType\": \"streamer\",\n    \"targetId\": \"videoId\",\n    \"sourceType\": \"accountId\",\n    \"sourceId\": \"accountId\",\n    \"tokenAmount\": 20,\n    \"name\": \"suspend1\",\n    \"description\": \"\",\n    \"tags\": \"\"\n}",
              "description": "This JSON object includes the parameters needed to create a suspend action. Details are as follows:",
              
              "parameters": {
                "sessionId": {
                  "description": "A unique identifier for the session that is being suspended."
                },
                "accountId": {
                  "description": "The unique identifier for the account that is associated with the suspend action."
                },
                "path": {
                  "description": "The path that specifies the location or resource linked to the suspend action, such as a live streaming channel."
                },
                "targetType": {
                  "description": "Indicates the type of entity being targeted by the suspend action. In this case, it is set to 'streamer'."
                },
                "targetId": {
                  "description": "The unique identifier for the target entity, which may refer to a specific video or stream."
                },
                "sourceType": {
                  "description": "Denotes the type of source for the suspend action. Here, the source is associated with an account ID."
                },
                "sourceId": {
                  "description": "This is the unique identifier for the source of the action, typically the account ID."
                },
                "tokenAmount": {
                  "description": "The quantity of tokens involved in the suspend action. In this case, it is set to 20."
                },
                "name": {
                  "description": "A designated name for the suspend action, here it is 'suspend1'."
                },
                "description": {
                  "description": "An optional field for providing additional details about the suspend action. Currently, it is empty."
                },
                "tags": {
                  "description": "An optional field for adding tags related to the suspend action. Currently, it is empty."
                }
              },

              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          }
        }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: suspend1
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/suspend/update:
    put:
      tags:
        - ActionSuspend
      summary: Action - Suspend - Update
      description: |-
        ### Description of API Endpoint: Action - Suspend - Update

        - **Name**: Action - Suspend - Update  
          The name of the API endpoint indicating that it is used to update suspension actions for a specific account or user.

        - **Request**:  
          This section contains details about the request being made to the API.

          - **Auth**:  
            Information regarding the authentication method used for this request.
            
            - **Type**: bearer  
              Specifies that a bearer token is used for authentication.
              
            - **Bearer**:  
              Contains the details of the authentication token.
              
              - **Key**: token  
                The name or key of the authentication parameter.
                
              - **Value**: BearerToken  
                The actual token used to authorize the request. Replace "BearerToken" with the valid token.

              - **Type**: string  
                Indicates that the value of the token is a string.

          - **Method**: PUT  
            This indicates that the HTTP method used for the request is PUT, typically used for updating resources.

          - **URL**: http://localhost:3000/api/action/suspend/update  
            The endpoint URL where the request is sent. It points to a local server address and defines the specific resource being accessed or modified.

          - **Headers**:  
            Includes additional information sent along with the request.

            - **Key**: Client-UUID  
              A unique identifier for the client making the request.

            - **Value**: ClientUUID  
              The actual UUID for the client. Replace "ClientUUID" with the actual client UUID used for identifying the request.

            - **Type**: default  
              Specifies the default type for the header.

          - **Body**:  
            Contains the payload of the request, typically in JSON format. It consists of several parameters used to update the suspension action.

            - **Mode**: raw  
              Indicates that the request body is in raw format, allowing the use of custom JSON data.

            - **Raw**:  
              The actual JSON data to be sent with the request, formatted as follows:

              - **sessionId**: "sessionId"  
                Unique identifier for the session. Replace "sessionId" with the actual session ID.

              - **accountId**: "accountId"  
                The identifier for the account being suspended. Replace "accountId" with the actual account ID.

              - **suspendId**: "suspendId"  
                Unique identifier for the suspension action. Replace "suspendId" with the relevant ID.

              - **path**: "/live/channel/video123"  
                The path indicating where the suspension action affects, typically a live channel or video. 

              - **targetType**: "streamer"  
                The type of target that is being affected by the suspension, e.g., a streamer.

              - **targetId**: "videoId"  
                The identifier for the specific target item (such as a video) being suspended. 

              - **sourceType**: "accountId"  
                Specifies the type of the source from which information is being pulled, such as an account.

              - **sourceId**: "accountId"  
                Identifier for the source account. Replace "accountId" with the actual source account ID.

              - **tokenAmount**: 20  
                The amount of tokens that are relevant to the suspension action. 

              - **name**: "Farooq"  
                A name associated with the action, likely indicating who is performing the suspension or whose account is affected.

              - **description**: "this is description"  
                A text field providing additional context or information about the suspension action. 

              - **tags**: "xyz"  
                Tags associated with the suspension action to categorize or identify it.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                suspendId: suspendId
                path: /live/channel/video123
                targetType: streamer
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                tokenAmount: 20
                name: Farooq
                description: this is description
                tags: xyz
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/suspend/get:
    get:
      tags:
        - ActionSuspend
      summary: Action - Suspend - Get
      description: |-
        ### Action - Suspend - Get

        This API endpoint is designed to retrieve information related to a specific suspend action. Below is a detailed description of each component involved in the request.

        #### Request Information:

        - **Auth**: 
          - **Type**: Specifies that the authentication method used is Bearer Token.
          - **Bearer**: 
            - **Key**: This denotes the authorization key used in the request.
            - **Value**: This is where you will insert the actual token required for authorization. Replace "BearerToken" with your valid token.
            - **Type**: Indicates the data type of the token as a string.

        - **Method**: 
          - The HTTP method used for this request is `GET`. This implies that the request is intended to retrieve data from the server.

        - **URL**: 
          - This is the endpoint where the request is sent. The URL is structured as follows:
            - **Base URL**: `http://localhost:3000/api/action/suspend/get/`
            - **Query Parameters**:
              - **suspendId**: Replace `suspendId` with the unique identifier for the suspend action you want to query.
              - **sessionId**: Replace `sessionId` with the identifier for the session related to this action.
              - **accountId**: Replace `accountId` with the identifier for the account you wish to retrieve information for.

        - **Headers**: 
          - This section can include additional HTTP headers required for the request. Currently, it is empty and disabled.

        - **Body**:
          - The body of the request is set to `raw` mode and is blank. For a `GET` request, traditionally, you do not send a body, so this section does not require any data. 

        Make sure to update the placeholders in the URL with actual values before executing the request to ensure it works correctly.
      security:
        - bearerAuth: []
      parameters:
        - name: suspendId
          in: query
          schema:
            type: string
          example: suspendId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/suspend/all:
    get:
      tags:
        - ActionSuspend
      summary: Action - Suspend - Get All
      description: |-
        ### Action - Suspend - Get All

        **Description:** This endpoint retrieves a list of all suspended actions associated with a specified session and account.

        - **Request Type:** GET  
          The HTTP method used to request data from the server.

        - **URL:** `http://localhost:3000/api/action/suspend/all/?sessionId=sessionId&accountId=accountId`  
          The endpoint URL where the request is sent. It includes query parameters:
          - **sessionId:** This parameter should contain the unique identifier for the session you are interested in.
          - **accountId:** This parameter should contain the unique identifier for the account associated with the session.

        - **Authentication:** Bearer Token  
          This endpoint requires authentication via a bearer token. The token must be included in the request to verify the user's identity.

          - **Bearer Token Structure:**
            - **Key:** `token`  
              The name of the token parameter.
            - **Value:** `BearerToken`  
              Replace `BearerToken` with the actual token string to authenticate the request.
            - **Type:** string  
              Indicates that the token is a string type.

        - **Headers:**  
          No additional headers are required for this request. An empty header is provided but is currently disabled.

        - **Body:**  
          The body of the request is empty since this is a GET request and typically does not send data in the body. The mode is set to `raw` with no content.

        This endpoint will return a list of all actions that have been suspended for the specified session and account. Ensure that you replace the placeholder values in the URL and the bearer token with valid data before making the request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/suspend/delete:
    post:
      tags:
        - ActionSuspend
      summary: Action - Suspend - Delete
      description: |-
        ### Endpoint Description: Action - Suspend - Delete

        - **Name**: Action - Suspend - Delete  
          This is the name of the API request that outlines the action to suspend or delete a session.

        - **Request Object**: This section contains all details related to the request being made to the API.

          - **Auth**: This subsection describes the authentication method used for the request.    
            - **Type**: `bearer`  
              This indicates that the request uses Bearer Token authentication.
            - **Bearer**: This is an array that holds information about the authorization token.
              - **Key**: `token`  
                This represents the name of the authentication key that is expected in the request.
              - **Value**: `sessionId`  
                This is a placeholder for the actual session ID that needs to be provided for authentication.
              - **Type**: `string`  
                This specifies that the value associated with "token" is a string.

          - **Method**: `POST`  
            This indicates that the request uses the POST method to send data to the server.

          - **URL**: `http://localhost:3000/api/action/suspend/delete`  
            This is the endpoint URL where the request is being sent. It indicates that the action pertains to suspending or deleting a session.

          - **Headers**: This section is intended for request headers.
            - **Key**: *(empty)*  
              No specific header key is provided in this request.
            - **Value**: *(empty)*  
              No specific header value is provided in this request.
            - **Type**: `default`  
              This denotes the type of header, even though it's currently disabled.
            - **Disabled**: `true`  
              This indicates that the provided header is currently not active and won’t be sent with the request.

          - **Body**: This section contains the data that will be sent in the body of the POST request.
            - **Mode**: `raw`  
              This indicates that the body content is in raw format.
            - **Raw**: `{"sessionId":"sessionId","accountId":"accountId","suspendId":"suspendId"}`  
              This is the actual body data being sent in JSON format. It consists of:
                - **sessionId**: A placeholder for the session ID to be suspended or deleted.
                - **accountId**: A placeholder for the user account ID associated with the session.
                - **suspendId**: A placeholder for the ID of the suspension action being referenced.

        Overall, this endpoint is designed to suspend or delete a session associated with a specific account, using Bearer Token authentication to ensure secure access to the API.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"suspendId\":\"suspendId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/tag/create:
    post:
      tags:
        - ActionTag
      summary: Action - Tag - Create
      description: |-
        **Action - Tag - Create**

        This endpoint is used to create a tag for a specific target in the system. Below is a detailed description of each data field involved in this request.

        **Request Details:**

        - **Auth Object:**
          - **Type:** Specifies the method of authentication being used, in this case, it's a bearer token authorization.
          - **Bearer:** Contains the authorization token needed to access the API.
            - **Key:** Represents the token identifier, which is "token".
            - **Value:** The actual bearer token. This should be replaced with a valid token when making the request.
            - **Type:** Indicates the data type of the key, which is set to "string".

        - **Method:** 
          - Defines the HTTP method used for this request. The method is set to "POST", indicating that this request will create a new resource.

        - **URL:**
          - The endpoint URL where the request is being sent. For this request, it is "http://localhost:3000/api/action/tag/create".

        - **Headers:**
          - This section can be used to include any additional HTTP headers, but it is blank and disabled at the moment, indicating no extra headers are required for this request.

        - **Body:**
          - This is where the data for the tag creation is specified. The body is sent in a raw JSON format.
          - **Mode:** Indicates the type of body being used. Here, it is set to "raw".
          - **Raw:** The actual content of the request body. This JSON object includes the following fields:
            - **sessionId:** A unique identifier for the user session. This needs to be specified to link the tag to a session.
            - **accountId:** The identifier for the account the tag is associated with.
            - **path:** The path of the resource being tagged. This typically specifies the location or context in which the tag is applied, like a video in a live channel.
            - **targetType:** Defines the type of target being tagged. In this example, it's set to "videoId".
            - **targetId:** The specific identifier of the target resource (e.g., the video) you want to tag.
            - **sourceType:** Indicates the type of source that is being tagged. Here it is set to "accountId".
            - **sourceId:** The identifier of the source being tagged, which corresponds to the account ID.
            - **didTag:** A boolean value that indicates whether the tagging action has been performed. It is set to true to confirm the action.
            - **name:** A field for the name of the tag. Currently, it's empty and should be filled with the appropriate tag name.
            - **description:** A field for a description of the tag. It is also currently empty and can be populated with additional information if needed.
            - **tags:** This is a field where multiple tags can be specified. It is currently an empty string and should be filled with appropriate tags when creating the tag.

        This endpoint is essential for managing tags associated with various resources in the application, and proper usage of the fields will ensure successful tag creation.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didTag: true
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/tag/update:
    put:
      tags:
        - ActionTag
      summary: Action - Tag - Update
      description: |-
        ### Action - Tag - Update

        This endpoint allows users to update a tag associated with an action in the system. Below is a detailed description of each data element in the request.

        #### Request Components

        - **Auth**
          - **Type**: "bearer"
            - This indicates that the request requires authorization using a bearer token.
          - **Bearer**
            - This is an array containing:
              - **Key**: "token"
                - The key for the bearer token in the header.
              - **Value**: "BearerToken"
                - The actual token used for authorization, which should be replaced with a valid token.
              - **Type**: "string"
                - Indicates the data type of the token.

        - **Method**: "PUT"
          - This specifies that the request method is PUT, which is typically used to update existing resources.

        - **URL**: "http://localhost:3000/api/action/tag/update"
          - This is the endpoint's URL where the request will be sent. It points to the action tag update functionality on the local server.

        - **Headers**
          - An array of header objects:
            - **Key**: "Client-UUID"
              - A unique identifier for the client making the request.
            - **Value**: "ClientUUID"
              - Placeholder for the actual UUID value that uniquely identifies the client.
            - **Type**: "default"
              - Indicates the header's type.

        - **Body**
          - **Mode**: "raw"
            - This indicates that the body of the request is sent as raw data.
          - **Raw**
            - The content of the request body formatted in JSON. It includes the following key-value pairs:
              - **sessionId**: "sessionId"
                - Identifies the current session for tracking purposes. Replace with the actual session ID.
              - **accountId**: "accountId"
                - Identifies the account associated with the action. Replace with the actual account ID.
              - **path**: "/live/channel/video123"
                - The path or endpoint related to the resource being updated. Replace with the actual path.
              - **targetType**: "videoId"
                - Specifies the type of the target being updated; here, it designates a video ID.
              - **targetId**: "videoId"
                - The identifier for the target that is being modified. This should be replaced with the actual video ID.
              - **sourceType**: "accountId"
                - Indicates the type of source related to the tag; here, it is an account ID.
              - **sourceId**: "accountId"
                - The identifier for the source associated with the action. This should be replaced with the actual account ID.
              - **didTag**: false
                - A boolean indicating whether the tagging action was performed or not.
              - **name**: ""
                - A placeholder for the name of the tag. Provide the relevant name as needed.
              - **description**: ""
                - A placeholder for a description of the tag. Provide the relevant description as needed.
              - **tags**: ""
                - A placeholder for any tags associated with the action. Provide the relevant tags.
              - **tagId**: "tagId"
                - The identifier for the tag that is being updated. Replace with the actual tag ID.

        ### Summary
        This request is structured to facilitate the update of an action tag, requiring proper authorization and the inclusion of various contextual identifiers and metadata.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didTag: false
                name: ''
                description: ''
                tags: ''
                tagId: tagId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/tag/get:
    get:
      tags:
        - ActionTag
      summary: Action - Tag - Get
      description: |-
        ### Action - Tag - Get Endpoint Description

        **Name**: Action - Tag - Get  
        This is an API endpoint designed to retrieve information related to a specific tag associated with an action.

        **Request Details**:
        - **Auth**: The request requires bearer token authentication. The token must be included in the request header to authorize access.
          - **Type**: This specifies the authentication type used. In this case, it’s set to "bearer".
          - **Bearer**: This is a list of tokens that will be used for authorization.
            - **Key**: This indicates the name of the token, which is "token" in this instance.
            - **Value**: The value provided here should be a valid bearer token, formatted as "BearerToken".
            - **Type**: Indicates the data type of the key value, which is a string.

        - **Method**: The HTTP method used for the request is "GET". This means the endpoint is intended to retrieve data rather than create or modify it.

        - **URL**: This is the endpoint URL where the request will be sent. It consists of a base URL followed by query parameters.
          - **Base URL**: `http://localhost:3000/api/action/tag/get/`
          - **Query Parameters**:
            - **tagId**: This parameter is used to specify the ID of the tag that you wish to retrieve information for. It must be replaced with an actual tag ID value.
            - **sessionId**: This parameter indicates the session ID for the request. Similar to tagId, it should be replaced with an actual session ID value.
            - **accountId**: This parameter identifies the account associated with the request. It also needs a real account ID value.

        - **Headers**: This section contains headers to be sent with the request. In this instance:
          - **Key**: No header key is specified.
          - **Value**: No header value is specified.
          - **Type**: Set to "default", indicating it is a standard header.
          - **Disabled**: This is marked as true, suggesting that this header will not be included in the request.

        - **Body**: The request does not include a body in this case.
          - **Mode**: Set to "raw", indicating that if there were a body, it would be sent as raw data.
          - **Raw**: An empty string is specified, indicating no body content is submitted with the request.

        This endpoint is useful for fetching tag-related information by providing specific identifiers, ensuring that the request is authenticated properly.
      security:
        - bearerAuth: []
      parameters:
        - name: tagId
          in: query
          schema:
            type: string
          example: tagId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/tag/all:
    get:
      tags:
        - ActionTag
      summary: Action - Tag - Get All
      description: |-
        ### Endpoint Description: Action - Tag - Get All

        - **Name**: Action - Tag - Get All  
          This endpoint is used to retrieve all tags associated with a specified action.

        - **Request Details**:
          - **Authentication**: 
            - **Type**: Bearer  
              This indicates that the request requires a bearer token for authentication. The token should be supplied in the request header.
            - **Bearer Token**: 
              - **Key**: token  
                The name of the authentication key is "token".
              - **Value**: BearerToken  
                This represents the actual bearer token that is used for authentication. It should be replaced with a valid token.
              - **Type**: string  
                Indicates that the value of the bearer token is a string.

          - **Method**: GET  
            This specifies that the HTTP method used for the request is GET, which is used to retrieve data from the server.

          - **URL**: 
            - **Format**: `http://localhost:3000/api/action/tag/all/?sessionId=sessionId&accountId=accountId`  
            The endpoint to access the action tags. It requires two query parameters:
              - **sessionId**: A unique identifier for the user session, to track the user's activity and maintain state.
              - **accountId**: An identifier for the account associated with the request, which specifies which account's tags are being retrieved.

          - **Headers**: 
            - This section includes HTTP headers for the request. Currently, it is empty and disabled, implying that no additional headers are required for this request. Headers can be enabled or modified if necessary.

          - **Body**: 
            - **Mode**: raw  
              This indicates that the request body is being sent as raw data.
            - **Raw**: (empty)  
              Since this is a GET request, the body is not expected to contain data, thus it is empty.

        This endpoint is designed for obtaining information about all action tags related to a specific session and account, utilizing proper authentication via the bearer token.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/tag/delete:
    post:
      tags:
        - ActionTag
      summary: Action - Tag - Delete
      description: |-
        **Action - Tag - Delete Endpoint Description**

        - **Endpoint Name**: Action - Tag - Delete
          - This endpoint is used to delete a tag associated with a specified account.

        - **Request Type**: POST
          - The HTTP method used to send the request is POST, indicating that data will be sent to the server to perform the deletion operation.

        - **URL**: `http://localhost:3000/api/action/tag/delete`
          - This is the endpoint's address where the request will be sent. It is hosted locally on port 3000.

        - **Authentication**: Bearer Token
          - The request requires authentication using a bearer token. This token must be included in the request to authorize the operation.

        - **Authorization Details**:
          - **Token Key**: `token`
            - The key used to represent the bearer token in the request.
          - **Token Value**: `sessionId`
            - This is the placeholder for the actual session ID token that authenticates the user.
          - **Token Type**: `string`
            - Indicates that the token is expected to be a string value.

        - **Headers**: 
          - There is an empty header in the request that is currently disabled. This may be utilized for future header values but is not active at this time.

        - **Body**:
          - The request body is sent in raw JSON format.
          - **Body Mode**: Raw
            - The body is not formatted as form data or x-www-form-urlencoded, but rather as a plain JSON string.
          - **Raw Content**: 
            ```json
            {
              "sessionId": "sessionId",
              "accountId": "accountId",
              "tagId": "tagId"
            }
            ```
            - **sessionId**: This field should contain the actual session ID for authentication.
            - **accountId**: Represents the ID of the account from which the tag should be deleted.
            - **tagId**: Represents the ID of the tag that is to be deleted.

        This endpoint is primarily used to facilitate the removal of specific tags associated with user accounts, ensuring that appropriate authorization is maintained through the use of a session token.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"tagId\":\"tagId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/tip/create:
    post:
      tags:
        - ActionTip
      summary: Action - Tip - Create
      description: |-
        ### Action - Tip - Create

        This endpoint is designed for creating a tip action associated with specific content, such as a video. Below is a detailed description of each part of the request data.

        #### Request

        - **Auth**
          - **Type**: Represents the authentication method. In this case, it uses Bearer token authentication.
          - **Bearer**: Contains the details for the bearer token.
            - **Key**: Specifies the name for the token, in this instance, it's labeled “token”.
            - **Value**: Holds the bearer token string, shown here as “BearerToken”. This token is required for authorization.
            - **Type**: Indicates the data type of the token, which is a string.

        - **Method**: This specifies the HTTP method to be used for the request. It is set to **POST**, indicating that data will be sent to the server to create a new resource.

        - **URL**: The endpoint for the API call. It’s given as `http://localhost:3000/api/action/tip/create`, which is the path where the request will be sent.

        - **Headers**: Contains the request headers.
          - **Key**: This is currently empty, indicating that no custom headers are being used.
          - **Value**: Also empty, which means no value is set for the key. 
          - **Type**: Default, meaning it is a standard header.
          - **Disabled**: This is marked as true, indicating that the header will not be included in the request.

        - **Body**: This specifies the content to be sent in the request body.
          - **Mode**: It indicates the body structure. It is set as **raw**, meaning a raw data payload is used rather than form data or x-www-form-urlencoded.
          - **Raw**: This section contains the JSON data that will be sent to the server. The following fields are included:
            - **sessionId**: Represents the unique identifier for the session, where the tip action occurs.
            - **accountId**: Specifies the unique identifier for the user's account making the tip.
            - **path**: The path to the content being tipped, represented as a string (e.g., `/live/channel/video123`).
            - **targetType**: Indicates the type of target being tipped. In this case, it is set to `videoId`, referring to the video content.
            - **targetId**: The unique identifier for the target video that is receiving the tip.
            - **sourceType**: Marks the source type associated with the tip action, also set to `accountId`.
            - **sourceId**: The unique identifier for the account that is the source of the tip.
            - **didTip**: A boolean value that indicates whether the tip action was completed (true signifies the action took place).
            - **utilityType**: Indicates the type of utility used for the tip, specified here as `token`.
            - **tokenAmount**: Represents the amount of tokens being tipped, shown as `20`.
            - **name**: A placeholder for any name associated with the tip (currently left empty).
            - **description**: A placeholder for any description associated with the tip (currently left empty).
            - **tags**: A placeholder for any tags related to the tip (currently left empty).
          
        - **Options**: This defines the settings for the raw body content.
          - **Raw**: Specifies that the content type is JSON in this case, ensuring the server recognizes the format correctly.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didTip: true
                utilityType: token
                tokenAmount: 20
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/tip/update:
    put:
      tags:
        - ActionTip
      summary: Action - Tip - Update
      description: |-
        ### Endpoint Description: Action - Tip - Update

        **Request Type:** PUT  
        **Endpoint URL:** http://localhost:3000/api/action/tip/update  

        #### Authentication:
        - **Type:** Bearer Token  
          - **Token:** A string value representing the authorization token required for accessing the API. Replace "BearerToken" with the actual token.

        #### Headers:
        - **Client-UUID:** 
          - A unique identifier for the client making the request. Replace "ClientUUID" with the actual client UUID.

        #### Body Parameters (in JSON format):
        1. **sessionId:** 
           - The ID of the session related to the action being performed. Replace "sessionId" with the appropriate session identifier.

        2. **accountId:** 
           - The unique identifier for the account associated with the action. Replace "accountId" with the actual account ID.

        3. **path:** 
           - The URL path pointing to the specific resource being tipped. This typically includes the type of resource and its identifier, such as "/live/channel/video123".

        4. **targetType:** 
           - Specifies the type of the target receiving the tip, such as "videoId". This indicates what kind of resource is being interacted with.

        5. **targetId:** 
           - The unique identifier of the target that is being tipped. Replace "videoId" with the actual identifier of the target resource.

        6. **sourceType:** 
           - Indicates the type of the source from which the tip is coming, such as "accountId". 

        7. **sourceId:** 
           - The unique identifier of the source from which the tip is being sent. Replace "accountId" with the appropriate identifier.

        8. **didTip:** 
           - A boolean value indicating whether a tip has been given. Set this to `true` to indicate that a tip is being made.

        9. **utilityType:** 
           - Specifies the type of utility being used for the tip, such as "token". This indicates the medium used for the tip.

        10. **tokenAmount:** 
            - The amount of tokens being tipped. Replace "10" with the actual number of tokens intended to be tipped.

        11. **name:** 
            - An optional field for a name or title associated with the tip. It can be left blank if not needed.

        12. **description:** 
            - An optional field for a description of the tip. It can be left blank if not needed.

        13. **tags:** 
            - Optional tags associated with the tip action. This can be used for categorization and can be left blank if not utilized.

        14. **tipId:** 
            - The unique identifier for the tip action being updated. Replace "tipId" with the actual identifier of the tip.

        ### Note:
        Make sure to replace placeholder values in the request with actual values relevant to the action you intend to update.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didTip: true
                utilityType: token
                tokenAmount: 10
                name: ''
                description: ''
                tags: ''
                tipId: tipId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/tip/get:
    get:
      tags:
        - ActionTip
      summary: Action - Tip - Get
      description: |-
        **Description of Endpoint Data:**

        - **Name**: Action - Tip - Get
          - This is the name of the API request, indicating the operation being performed is to retrieve a 'tip' action.

        - **Request**:
          - This section describes the details of the API request that will be sent to the server.

          - **Auth**:
            - **Type**: bearer
              - This indicates that the request uses Bearer token authentication.
              
            - **Bearer**:
              - This is an array containing the authentication token required for authorization.
              
              - **Key**: token
                - This is the identifier for the authentication token.
                
              - **Value**: BearerToken
                - This is a placeholder for the actual Bearer token value that must be provided for authentication when making the request.
                
              - **Type**: string
                - This specifies that the value should be a string.

          - **Method**: GET
            - This indicates that the request method used is GET, meaning it is intended to retrieve data from the server without modifying any resources.

          - **URL**: http://localhost:3000/api/action/tip/get/?tipId=tipId&sessionId=sessionId&accountId=accountId
            - This is the endpoint URL where the GET request will be sent. 
            - It includes several query parameters:
              - **tipId**: Represents the unique identifier of the tip being requested.
              - **sessionId**: Represents the unique identifier of the session related to the request.
              - **accountId**: Represents the unique identifier of the account making the request.

          - **Headers**:
            - This section would typically contain additional HTTP headers to be sent with the request.
            
            - **Key**: ""
              - This field is currently empty, meaning no additional header key is specified.
              
            - **Value**: ""
              - This field is also empty, indicating no additional value is provided for the header.
              
            - **Type**: default
              - This signifies the type of header, which is in its default format, but it is currently disabled.

          - **Body**:
            - This section specifies the body of the request, relevant for methods that send data. However, since this is a GET request, the body is not used.
            
            - **Mode**: raw
              - Indicates that the request body could be in raw data format, though it is not applicable for a GET request.
              
            - **Raw**: ""
              - The raw body content is empty, as no data needs to be sent in the body for this GET operation.
      security:
        - bearerAuth: []
      parameters:
        - name: tipId
          in: query
          schema:
            type: string
          example: tipId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/tip/all:
    get:
      tags:
        - ActionTip
      summary: Action - Tip - Get All
      description: |-
        ### Endpoint: Action - Tip - Get All

        - **name**: This is the name of the API endpoint, which is "Action - Tip - Get All". It indicates this endpoint is used for retrieving all tip-related actions.

        - **request**: Contains details about how to make the request to the API.

          - **auth**: This section defines the authentication method required to access the endpoint.
          
            - **type**: Specifies the type of authentication being used. In this case, it is "bearer", which means a token is required to authenticate.
            
            - **bearer**: An array that holds the bearer token information.
              
              - **key**: The identifier for the token; here, it is simply "token".
              
              - **value**: The actual bearer token that will be sent with the request. It is represented as "BearerToken", and should be replaced with a valid token when making the request.
              
              - **type**: Indicates the type of data for the token. In this case, it is a "string".

          - **method**: Specifies the HTTP method. This endpoint uses the "GET" method, which is typically used for retrieving data from the server.

          - **url**: The URL endpoint where the request will be sent. It is a combination of the base URL and specific path to access tips. The example provided is "http://localhost:3000/api/action/tip/all/?sessionId=sessionId&accountId=accountId".
            
            - **sessionId**: This is a query parameter in the URL, used to identify the session related to the request. It should be substituted with the actual session ID you are working with.
            
            - **accountId**: Another query parameter that identifies the specific account linked to the request. This should also be replaced with the actual account ID.

          - **headers**: Contains the HTTP headers to be sent with the request.
            
            - **key**: Indicates the name of the header; it is currently empty and not used.
            
            - **value**: The value associated with the header; also currently empty.
            
            - **type**: Specifies that the header type is "default". This header is marked as "disabled", meaning it will not be sent with the request.

          - **body**: Describes the content that would be included in the body of the request if needed.
            
            - **mode**: Defines the format of the body. Currently set to "raw", indicating no specific formatting is applied.
            
            - **raw**: Contains the raw data that would be sent in the body; currently, it is empty, which implies that for a GET request, no body content is typically needed.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/tip/delete:
    post:
      tags:
        - ActionTip
      summary: Action - Tip - Delete
      description: |-
        **Endpoint Description: Action - Tip - Delete**

        - **Name**: Action - Tip - Delete  
          This is the identifier for the action of deleting a tip.

        - **Request**:  
          Details regarding the request that needs to be made to the endpoint.

          - **Auth**:  
            This section details the authentication required to access the endpoint.
            
            - **Type**: bearer  
              Indicates that a bearer token is used for authentication.
            
            - **Bearer**:  
              Contains information about the bearer token.
              
              - **Key**: token  
                This specifies the name of the token parameter.
              
              - **Value**: sessionId  
                This is a placeholder that represents the actual session ID necessary for authentication.
              
              - **Type**: string  
                This indicates that the value of the token is a string.

          - **Method**: POST  
            This signifies that the request method used will be POST, which is typically used for sending data to the server.

          - **URL**: http://localhost:3000/api/action/tip/delete  
            This is the endpoint where the delete request will be sent. It targets the action of deleting a tip.

          - **Headers**:  
            This section contains any HTTP headers that may need to accompany the request.
            
            - **Key**: (empty)  
              No specific headers are being set in this request as the key is empty.
            
            - **Value**: (empty)  
              Similarly, the value for the header is empty.

            - **Type**: default  
              This specifies the default type of the headers.

            - **Disabled**: true  
              This indicates that the header is currently disabled and will not be included in the request.

          - **Body**:  
            This section outlines the content that will be sent in the request body.

            - **Mode**: raw  
              The body content is sent as raw data.

            - **Raw**:  
              This is the actual payload being sent to the server. It contains three key-value pairs in JSON format.

              - **sessionId**: "sessionId"  
                This is a placeholder representing the user's session ID which is required for the operation.

              - **accountId**: "accountId"  
                This is a placeholder that indicates the account ID of the user associated with the tip.

              - **tipId**: "tipId"  
                This is a placeholder that refers to the unique identifier of the tip that needs to be deleted.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"tipId\":\"tipId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/unlock/create:
    post:
      tags:
        - ActionUnlock
      summary: Action - Unlock - Create
      description: |-
        {
          "description": {
            "name": "Action - Unlock - Create",
            "request": {
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "BearerToken",
                    "type": "string"
                  }
                ]
              },
              "method": "POST",
              "url": "http://localhost:3000/api/action/unlock/create",
              "headers": [
                {
                  "key": "",
                  "value": "",
                  "type": "default",
                  "disabled": true
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n    \"sessionId\": \"sessionId\",\n    \"accountId\": \"accountId\",\n    \"path\": \"/live/channel/video123\",\n    \"targetType\": \"videoId\",\n    \"targetId\": \"videoId\",\n    \"sourceType\": \"accountId\",\n    \"sourceId\": \"accountId\",\n    \"didUnlock\": true,\n    \"unlockType\": \"channel\",\n    \"didClickthrough\": true,\n    \"tokenAmount\": 40,\n    \"name\": \"\",\n    \"description\": \"\",\n    \"tags\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            }
          }
        }

        1. **name**: This field represents the name of the API action. It indicates that this endpoint is used for creating an unlock action.

        2. **request**: This nested object details the request properties for the API call.

           - **auth**: This section defines the authentication method used for the request. In this case, a bearer token is required to authorize the request.
             
             - **type**: Specifies the type of authentication; here, it is bearer.
             - **bearer**: This array contains the bearer token information.
               
               - **key**: The name of the token parameter, which is "token".
               - **value**: The actual bearer token value expected to be used for authentication. In this example, it is indicated as "BearerToken".
               - **type**: Indicates the data type of the token, specified as string.

           - **method**: This specifies the HTTP method for the API call. Here, it is a POST method, indicating that data is being sent to the server to create a new resource.

           - **url**: The endpoint URL for the API that will process the request. In this case, it's a local server URL pointing to the action unlock create route.

           - **headers**: This is an array that can hold additional headers for the request. In this example, the header is empty and disabled.

           - **body**: This section contains the details of the data being sent in the POST request.
             
             - **mode**: Indicates the format of the body data. Here it is set to "raw", meaning the content is provided as a plain text.
             
             - **raw**: This is the raw JSON data that will be sent in the request body. It includes various parameters.
               
               - **sessionId**: Identifier for the current user session. This is used to track the user's activities within the application.
               - **accountId**: Unique identifier for the user’s account. This is necessary for associating the unlock action with the right user account.
               - **path**: The specific path or URL where the unlock action is being applied, denoted by "/live/channel/video123".
               - **targetType**: This indicates the type of target being unlocked, which is set as "videoId" in this case.
               - **targetId**: The ID of the target item that is being unlocked, referenced here as "videoId".
               - **sourceType**: Represents the type of source that is initiating the unlock action, indicated as "accountId".
               - **sourceId**: The identifier for the source account that is performing the unlock action, marked as "accountId".
               - **didUnlock**: A boolean that indicates if the unlock action was successful; set to true in this example.
               - **unlockType**: Describes the type of unlock performed, with "channel" being the specified type.
               - **didClickthrough**: A boolean indicating whether the user clicked through to unlock; also set to true here.
               - **tokenAmount**: The amount of tokens to be deducted or used for unlocking, set to 40.
               - **name**: A placeholder for the name associated with the unlock action, currently empty.
               - **description**: A placeholder for a description of the unlock action, currently empty.
               - **tags**: A placeholder for tags related to the unlock action, currently empty.

             - **options**: This object specifies options related to the body format.
               
               - **raw**: Contains formatting options for raw data.
                 
                 - **language**: Specifies the language of the raw data, set to "json".
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didUnlock: true
                unlockType: channel
                didClickthrough: true
                tokenAmount: 40
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/unlock/update:
    put:
      tags:
        - ActionUnlock
      summary: Action - Unlock - Update
      description: |-
        # Action - Unlock - Update Endpoint Description

        ## Request Authentication
        - **Auth Type**: Bearer
          - **Key**: `token` 
            - The token used for authorization. It is a Bearer token which is passed in the request for authentication.

        ## HTTP Method
        - **Method**: PUT
          - This endpoint uses the PUT method to update existing resources.

        ## URL
        - **Endpoint URL**: `http://localhost:3000/api/action/unlock/update`
          - This is the endpoint URL where the request will be sent.

        ## Headers
        - **Header Name**: `Client-UUID`
          - **Value**: `ClientUUID`
            - A unique identifier for the client making the request. This is used to track or identify client requests.

        ## Request Body
        - **Content Type**: raw (JSON format)
          
        ### Body Parameters
        - **sessionId**: 
          - A unique identifier for the session. This is used to track the session state.
          
        - **accountId**: 
          - The identifier for the user's account. This represents the account related to the unlock action.
          
        - **path**: 
          - The path indicating the resource being accessed or modified. E.g., `/live/channel/video123` for a specific video.

        - **targetType**: 
          - Specifies the type of resource being targeted by the action. In this case, it is set to `"videoId"`.

        - **targetId**: 
          - The identifier of the resource being unlocked or acted upon. This should specify the video ID.

        - **sourceType**: 
          - Indicates the type of source from which the item is being unlocked, set to `"accountId"`.

        - **sourceId**: 
          - The identifier of the source associated with the unlock action, which corresponds to the `accountId`.

        - **didUnlock**: 
          - A boolean value indicating whether the item has been successfully unlocked. Set to `true` to indicate a successful unlock.

        - **unlockType**: 
          - Describes the type of unlock action performed. In this case, it is set to `"channel"`.

        - **didClickthrough**: 
          - A boolean value indicating whether the user acted upon a click-through. Set to `true` to indicate that a click-through occurred.

        - **tokenAmount**: 
          - A numeric value representing the amount of tokens involved in the unlock action. In this case, it is set to `40`.

        - **name**: 
          - A field for an additional name related to the unlock action. This is currently empty.

        - **description**: 
          - A field for a description of the unlock action. This is also currently provided as empty.

        - **tags**: 
          - A field for any tags related to the unlock action. Presently left empty.

        - **unlockId**: 
          - A unique identifier for the unlock action itself. This must be specified to track individual unlock actions.

        This description is intended to clarify the usage and required parameters for making a PUT request to the specified endpoint to update unlock actions.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didUnlock: true
                unlockType: channel
                didClickthrough: true
                tokenAmount: 40
                name: ''
                description: ''
                tags: ''
                unlockId: unlockId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/unlock/get:
    get:
      tags:
        - ActionUnlock
      summary: Action - Unlock - Get
      description: |-
        ### Endpoint: Action - Unlock - Get

        #### Description:
        This endpoint is designed to retrieve information related to an unlock action. It uses a GET request to fetch data based on specific identifiers.

        #### Components:

        1. **name**: 
           - Describes the purpose of the endpoint, which is to retrieve information about an unlock action.

        2. **request**:
           - Contains all necessary details needed to make the API call.

           - **auth**:
             - Defines the authentication method used for the request.
             - **type**: Indicates that the authentication method is a bearer token.
             - **bearer**: Holds the details of the token used to authorize the request.
               - **key**: The name of the token parameter, which is "token".
               - **value**: Placeholder for the actual bearer token that will be used for authorization (represented as "BearerToken").
               - **type**: Specifies the data type of the token, which is a "string".

           - **method**:
             - Specifies the HTTP method to be used for this request, which is "GET".

           - **url**:
             - This is the endpoint's URL, including query parameters that are required for the request:
               - **unlockId**: A unique identifier for the unlock action.
               - **sessionId**: Identifier for the session in which the unlock action is taking place.
               - **accountId**: Identifier for the account that is involved in the unlock action.

           - **headers**:
             - An array of header parameters for the request.
             - Currently, there is an entry without a key or value, which is disabled, indicating it is not in use for this request.

           - **body**:
             - Defines the body of the request.
             - **mode**: Indicates the way the body is structured—here it is set to "raw".
             - **raw**: This field is empty, meaning no additional data is sent in the body of the GET request.

        This endpoint allows users to retrieve specific unlock action information by providing the necessary identifiers in the URL.
      security:
        - bearerAuth: []
      parameters:
        - name: unlockId
          in: query
          schema:
            type: string
          example: unlockId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/unlock/all:
    get:
      tags:
        - ActionUnlock
      summary: Action - Unlock - Get All
      description: |-
        {
          "name": "Action - Unlock - Get All",
          "description": "This endpoint retrieves all unlock actions from the server. It requires authentication and uses a GET request method to fetch the required data. The response will contain details related to all unlock actions available in the system.",
          "request": {
            "auth": {
              "description": "Authentication type for making requests to the API. This endpoint uses bearer token authentication.",
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "description": "The key used to provide the bearer token for authentication. This token must be included in the request headers.",
                  "value": "BearerToken",
                  "type": "string"
                }
              ]
            },
            "method": {
              "description": "The HTTP method used for this request. 'GET' is used here, indicating that the request is intended to retrieve data from the server."
            },
            "url": {
              "description": "The endpoint URL where the request is sent. This example uses a local server address and includes query parameters.",
              "value": "http://localhost:3000/api/action/unlock/all/?sessionId=sessionId&accountId=accountId"
            },
            "headers": {
              "description": "Additional headers can be sent with the request. In this case, no custom header is defined as the key and value fields are empty and disabled."
            },
            "body": {
              "description": "The body of the request. Since this is a GET request, the body is empty.",
              "mode": "raw",
              "raw": ""
            }
          }
        }
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/unlock/delete:
    post:
      tags:
        - ActionUnlock
      summary: Action - Unlock - Delete
      description: |-
        ### Endpoint Description: Action - Unlock - Delete

        - **Name**: Action - Unlock - Delete 
          - This is the identifier for the specific action being documented.

        - **Request**:
          - **Auth**: 
            - **Type**: Bearer
              - This indicates that the API request uses bearer token authentication.
            - **Bearer**: 
              - **Key**: token
                - This is the key used to represent the authentication token in the request.
              - **Value**: sessionId
                - This represents the session identifier being passed to authenticate the request.
              - **Type**: string
                - The data type expected for the token.
          
          - **Method**: 
            - POST
              - This specifies that the request type is a POST request, which is typically used for sending data to the server to create or update a resource.

          - **URL**: 
            - http://localhost:3000/api/action/unlock/delete
              - This is the endpoint where the request is sent. It indicates the local server and the specific path for unlocking and deleting an action.

          - **Headers**: 
            - An array of headers that can be attached to the request. In this case:
              - **Key**: (empty)
                - Currently, there are no additional headers being used in this request.
              - **Value**: (empty)
                - There is no specified value for headers as they are not being utilized.
              - **Type**: default
                - Indicates the default type for headers.
              - **Disabled**: true
                - This indicates that the header is disabled and will not be sent with the request.

          - **Body**: 
            - **Mode**: raw
              - The body of the request is in raw format, allowing for sending custom data structures.
            - **Raw**: 
              - `{"sessionId":"sessionId","accountId":"accountId","unlockId":"unlockId"}`
                - This is the JSON payload being sent with the request. It contains:
                  - **sessionId**: This is the identifier for the current user session.
                  - **accountId**: This represents the unique identifier for the account associated with the action.
                  - **unlockId**: This is the specific identifier for the unlock action that is to be deleted.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"unlockId\":\"unlockId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/vote/create:
    post:
      tags:
        - ActionVote
      summary: Action - Vote - Create
      description: |-
        **Endpoint Name: Action - Vote - Create**

        **Request Details:**

        - **Auth**: 
          - Type: Bearer
          - This endpoint uses Bearer token authentication. Users must provide a valid token to access the endpoint.

        - **Method**: 
          - POST
          - This indicates that the endpoint is used to submit data to create a vote.

        - **URL**: 
          - `http://localhost:3000/api/action/vote/create`
          - This is the endpoint for creating a vote action. The server should be running locally on port 3000.

        - **Headers**: 
          - There are no specific headers required for this request as the provided header is disabled.

        **Body Parameters** (in JSON format):

        - **sessionId**: 
          - Type: string
          - A unique identifier for the session in which the vote is being cast.

        - **accountId**: 
          - Type: string
          - The identifier for the user account that is casting the vote.

        - **path**: 
          - Type: string
          - The path to the content related to the vote, specified as `/live/channel/video123`. This might represent the URL structure for the resource.

        - **targetType**: 
          - Type: string
          - Specifies the type of target being voted on, which in this case is identified as a `videoId`.

        - **targetId**: 
          - Type: string
          - The unique identifier for the target, which is the video being voted on.

        - **sourceType**: 
          - Type: string
          - Specifies the type of source for the vote. Here, it's identified as `accountId`.

        - **sourceId**: 
          - Type: string
          - The unique identifier for the source, which refers to the account casting the vote.

        - **didVote**: 
          - Type: boolean
          - Indicates if the user has voted (true) or not (false). 

        - **buttonText**: 
          - Type: string
          - Text displayed on the voting button, indicating the action (in this case, "upvote").

        - **tokenAmount**: 
          - Type: integer
          - Indicates the amount of tokens being used for the vote, set to 10 in this instance.

        - **name**: 
          - Type: string
          - A space for any additional name related to the vote. Currently left blank.

        - **description**: 
          - Type: string
          - A space for any description regarding the vote. Currently left blank.

        - **tags**: 
          - Type: string
          - A space for any tags related to the vote. Currently left blank. 

        This endpoint is used for submitting a vote for a specified target, providing necessary details like session and account identifiers, as well as additional options regarding the vote action.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didVote: true
                buttonText: upvote
                tokenAmount: 10
                name: ''
                description: ''
                tags: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/vote/update:
    put:
      tags:
        - ActionVote
      summary: Action - Vote - Update
      description: |-
        ### Action - Vote - Update Endpoint Description

        #### Request Method
        - **Method**: PUT  
          Indicates that this request is used to update existing information related to a vote.

        #### Request URL
        - **URL**: `http://localhost:3000/api/action/vote/update`  
          The endpoint for updating a vote action on the server.

        #### Authentication
        - **Auth Type**: Bearer  
          This endpoint requires bearer token authentication to authorize the request.

        - **Bearer Token**:  
          - **Key**: `token`  
            This is the key used to pass the authentication token.
          - **Value**: `BearerToken`  
            The placeholder for the actual bearer token that needs to be supplied. This token is required to authenticate the request.
          - **Type**: string  
            Indicates that the value of the token is a string type.

        #### Headers
        - **Header**: `Client-UUID`  
          - **Key**: `Client-UUID`  
            A unique identifier for the client making the request.
          - **Value**: `ClientUUID`  
            This is a placeholder for the actual client UUID that should be provided.
          - **Type**: default  
            Specifies that this is a standard header without special formatting.

        #### Body Parameters
        - **Body Mode**: raw  
          The body of the request is sent in raw format.

        - **Raw JSON**:  
          The body content must be formatted as JSON. Each field is described below:
          
          - **sessionId**: "sessionId"  
            A unique identifier for the session in which the vote is being cast. This helps track user interactions across multiple actions.

          - **accountId**: "accountId"  
            The unique ID associated with the account that is casting the vote.

          - **path**: "/live/channel/video123"  
            The path to the resource that is being voted on. This typically represents the location of the content within the application.

          - **targetType**: "videoId"  
            Specifies the type of target being voted on. In this case, it indicates that the target is a video.

          - **targetId**: "videoId"  
            The unique identifier for the specific video that is being voted on.

          - **sourceType**: "accountId"  
            Indicates the type of source account that is casting the vote, which in this case is also an account ID.

          - **sourceId**: "accountId"  
            The unique ID of the source account that is submitting the vote.

          - **didVote**: true  
            A boolean value indicating whether the user has cast their vote or not. If true, it confirms that a vote has already been made.

          - **buttonText**: "upvote"  
            The text that appears on the button used to cast the vote, indicating the action that will be taken (in this case, an upvote).

          - **tokenAmount**: 10  
            The amount of tokens that the user will spend or earn by casting this vote.

          - **name**: ""  
            An optional field for the name related to the vote or the voting action. It can be left blank if not applicable.

          - **description**: ""  
            An optional field for additional context or information about the vote. It can also be left blank.

          - **tags**: ""  
            A field for any relevant tags associated with the vote. This can help categorize or add context to the voting action. It is optional and can be left blank.

          - **voteId**: "voteId"  
            A unique identifier for the vote itself, which helps track the specific vote that is being updated.

        #### Conclusion
        This endpoint is designed to facilitate the updating of a vote for a specific resource, including necessary authentication and detailed data about the vote being made or modified.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                path: /live/channel/video123
                targetType: videoId
                targetId: videoId
                sourceType: accountId
                sourceId: accountId
                didVote: true
                buttonText: upvote
                tokenAmount: 10
                name: ''
                description: ''
                tags: ''
                voteId: voteId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/vote/get:
    get:
      tags:
        - ActionVote
      summary: Action - Vote - Get
      description: |-
        ### Action - Vote - Get Endpoint Description

        **Request Type**: GET  
        This endpoint retrieves voting information based on the specified parameters.

        **Authentication**:
        - **Type**: Bearer Token
          - A security token is required to access this endpoint. The token must be included in the request headers.
          - **Key**: `token` 
          - **Value**: `BearerToken` (Replace with the actual token before making a request)
          - **Type**: string (Indicates the format of the token)

        **URL Format**:  
        `http://localhost:3000/api/action/vote/get/?voteId=voteId&sessionId=sessionId&accountId=accountId`

        - **Base URL**: `http://localhost:3000/api/action/vote/get/`
        - **Query Parameters**:
          - `voteId`: Identifier for the specific vote you want to retrieve.
          - `sessionId`: Identifier for the session during which the vote was cast.
          - `accountId`: Identifier for the user account associated with the vote.

        **Headers**:  
        - The request currently has an empty header configuration, which means no additional headers are set. The header is disabled and will not be included in the request unless modifications are made.

        **Body**:  
        - The body of the request is in `raw` mode but contains no content. No payload is needed for this GET request, so the body remains empty. 

        This endpoint is useful for retrieving details about specific votes based on the provided identifiers, ensuring that the request is authenticated with the necessary bearer token.
      security:
        - bearerAuth: []
      parameters:
        - name: voteId
          in: query
          schema:
            type: string
          example: voteId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/vote/all:
    get:
      tags:
        - ActionVote
      summary: Action - Vote - Get All
      description: |-
        ### Description of Each Data in the Endpoint

        - **name**: This is the name of the API endpoint, which is "Action - Vote - Get All". It indicates that this endpoint is related to retrieving all vote actions.

        - **request**: This section contains all the details regarding the API request.

          - **auth**: This specifies the authentication method used for the endpoint.
          
            - **type**: The type of authentication used is "bearer", indicating that a bearer token is required to authorize the request.
            
            - **bearer**: This array contains information about the bearer token.
            
              - **key**: A named field for the bearer token, which is "token".
              
              - **value**: The actual bearer token, represented here as "BearerToken". This token provides access to the API and should be replaced with a valid token when making a request.
              
              - **type**: Indicates that the value is of type "string".

          - **method**: This indicates the type of HTTP method being used. In this case, it is "GET", meaning that this endpoint is used to retrieve data.

          - **url**: This is the endpoint URL where the API request is sent. In this case, the URL is "http://localhost:3000/api/action/vote/all/?sessionId=sessionId&accountId=accountId". It contains two query parameters:
          
            - **sessionId**: This parameter is used to specify the session identifier, represented as "sessionId". It needs to be replaced with an actual session ID.
            
            - **accountId**: This parameter is used to specify the account identifier, represented as "accountId". It should be replaced with a valid account ID.

          - **headers**: This section lists the headers to be sent along with the request.
          
            - **key**: This field is currently empty, meaning no custom headers are defined here.
            
            - **value**: This field is also empty, corresponding to the empty key.
            
            - **type**: The type of this header is "default".
            
            - **disabled**: This parameter is set to true, indicating that this header is currently disabled and will not be sent with the request.

          - **body**: This section defines the body of the request.
          
            - **mode**: The mode for the body is set to "raw", indicating that the body data is sent as raw text.
            
            - **raw**: This field is empty, meaning no data is being sent in the body of the request. 

        This endpoint is used to fetch all voting actions associated with a particular session and account, requiring proper authentication and the necessary parameters.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/action/vote/delete:
    post:
      tags:
        - ActionVote
      summary: Action - Vote - Delete
      description: |-
        {
          "name": "Action - Vote - Delete",
          "description": "This endpoint is used to delete a vote from a user's account. Users must provide a valid session ID, their account ID, and the ID of the vote they wish to delete. Here’s a breakdown of the data involved in this request:",
          
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "sessionId",
                  "type": "string"
                }
              ],
              "description": "Authentication is done via a bearer token. Users must provide their session ID as a token to authenticate the request."
            },
            
            "method": "POST",
            "description": "This specifies that the request should use the POST method, which is typically used for sending data to the server."

            "url": "http://localhost:3000/api/action/vote/delete",
            "description": "This is the URL endpoint where the delete vote request will be sent. It is expected to be accessed via localhost during development."

            "headers": [
              {
                "key": "",
                "value": "",
                "type": "default",
                "disabled": true
              }
            ],
            "description": "No custom headers are required for this request as they are currently disabled. By default, the server will handle headers automatically."

            "body": {
              "mode": "raw",
              "description": "The body of the request contains the data that needs to be sent to the server to process the vote deletion.",
              
              "raw": "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"voteId\":\"voteId\"}",
              "description": "This is a raw JSON format containing the necessary parameters for the request. It contains the following fields:",
              
              "fields": {
                "sessionId": "This is the unique identifier for the user's session, required for authentication.",
                
                "accountId": "This is the unique identifier associated with the user's account, which will be used to locate the vote.",
                
                "voteId": "This is the unique identifier for the vote that the user wishes to delete."
              }
            }
          }
        }
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"voteId\":\"voteId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/category/create:
    post:
      tags:
        - ArticleCategory
      summary: Article - Category - Create
      description: |-
        This endpoint is labeled as "Article - Category - Create" and is designated for creating a new category within an article domain. It uses the POST method and makes a request to "http://localhost:3000/api/article/category/create". The endpoint uses Bearer token type for authorization. You need to replace the "BearerToken" with your actual bearer token to get authenticated.

        In this request, the following key-value pairs are sent:

        1. `sessionId`: Represents the session ID of the active user. Replace "sessionId" with the actual ID of the user session.

        2. `accountId`: Represents the account ID of the user. Replace "accountId" with the actual ID of the user account.

        3. `name`: The unique, short, and URL-friendly name of the category. For example, "Miami Art Week 4".

        4. `displayName`: The full user-friendly name of the category to display in the UI, for instance, "Miami Art Week 2024".

        5. `description`: A brief explanation about the category. For example, "An immersive celebration of art and culture during Miami Art Week."

        6. `tags`: A list of keywords associated with the category, separated by commas. For example, "Art,Exhibition,Miami,Culture".

        Note: The entire body parameters are in raw JSON format. The format of the JSON data should be as highlighted in the `body.raw` key.

        The endpoint currently contains no custom headers, as indicated by the empty "key" and "value" fields in `headers`. However, the `type` is set to "default", and the `disabled` field is set to `true`, indicating these headers are not currently in use.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: Miami Art Week 4
                displayName: Miami Art Week 2024
                description: An immersive celebration of art and culture during Miami Art Week.
                tags: Art,Exhibition,Miami,Culture
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/category/createBulk:
    post:
      tags:
        - ArticleCategory
      summary: Article - Category - Create Bulk
      description: |-
        This endpoint is titled "Article - Category - Create Bulk", suggesting that it's used for creating various article categories in one batch.

        1. `auth`: This contains the authentication information. It's a bearer authentication type where a token (key-value pair `token: BearerToken`) is sent in the header of the request for authorization. The `type` field defines the data type of the token, in this case, it's a string.

        2. `method`: This is a POST request indicating the intention to send data to create new resources at the specified URL.

        3. `url`: This is the URL or path endpoint to API that accepts the request. In this case, the server will be running on localhost using port number 3000 with a specific path `/api/article/category/createBulk`.

        4. `headers`: An array holder for HTTP headers to be included when sending the request. The provided header fields are blank and disabled by default in this instance.

        5. `body`: This contains the actual request payload/data. The `mode` is set to `raw`, allowing you to input JSON data directly. The `raw` field contains the JSON data being transmitted. The `options` field insinuates that the `raw` input should be interpreted as JSON which lets formatting and syntax highlighting applicable.

        6. Within the `body`, `sessionId` and `accountId` are unique identifiers for the current session and account. `categories` is an array of objects, each containing information about a category of articles:
           - `name`: The unique name identifying the category
           - `displayName`: The name as it will appear to users
           - `description`: Brief explanation of what the category is about
           - `tags`: A string of comma-separated values that act as keywords related to the category.

        This endpoint is used for creating multiple article categories at once, with each category having a name, display name, description, and associated tags.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                categories:
                  - name: Miami Art Week 4
                    displayName: Miami Art Week 2024
                    description: An immersive celebration of art and culture during Miami Art Week.
                    tags: Art,Exhibition,Miami,Culture
                  - name: Tech Fest 2024
                    displayName: Technology Festival 2024
                    description: A celebration of innovation and technology.
                    tags: Technology,Innovation,Festival,Tech
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/category/update:
    put:
      tags:
        - ArticleCategory
      summary: Article - Category - Update
      description: |-
        This is the data description for the endpoint named 'Article - Category - Update'. It consists of various components as listed below:

        1. **Auth:** This refers to the authentication needed to access this endpoint. It uses a 'Bearer' token type, which should be provided as a string value. The key for this token is 'token' and its value would be a 'BearerToken'. 

        2. **Method:** This endpoint uses the 'PUT' method which means it is used for updating an existing resource.

        3. **URL:** The url 'http://localhost:3000/api/article/category/update' represents the location on the server where the request should be sent to update an article category.

        4. **Headers:** Under this, a 'Client-UUID' key is provided with a value 'ClientUUID'. ClientUUID's are universally unique identifiers for a client device.

        5. **Body:** The body contains the request payload in raw JSON format. Fields include:
           - **categoryId:** Unique identifier for the category which needs to be updated.
           - **sessionId:** Unique identifier for the current session.
           - **accountId:** Unique identifier for the account that is performing the update.
           - **name:** New name of the category.
           - **displayName:** New display name of the category.
           - **description:** New description of the category.
           - **tags:** New tags associated with the category, divided by commas.

        6. **Options:** This is an extension of the body where the format of raw data is specified. Here, the raw data language is JSON.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                categoryId: articleCategoryId
                sessionId: sessionId
                accountId: accountId
                name: Miami Art Week 2
                displayName: Miami Art Week 2024
                description: An immersive celebration of art and culture during Miami Art Week.
                tags: Art,Exhibition,Miami,Culture
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/category/get:
    get:
      tags:
        - ArticleCategory
      summary: Article - Category - Get By Short ID
      description: |-
        This endpoint is called "Article - Category - Get By Short ID". It is used to retrieve a specific article category by a shorter identifier known as "shortId". Now let's dive into each aspect of this endpoint:

        1. "name": This property indicates the name of the endpoint, which is "Article - Category - Get By Short ID".

        2. "request": This property contains the majority of the data for running this API call. 

        3. "auth": This property describes the authentication method used for this API request. This endpoint uses the 'bearer' token type. The "bearer" array includes:
            - "key": This signifies the type of data being sent in the bearer token. In this case, it is "token".
            - "value": The "BearerToken" specifies the expected value. It should be replaced with a valid token string while using this endpoint.
            - "type": This characterizes the data type of the token. As mentioned here, it's a string.

        4. "method": This property mentions the HTTP method to be used, which in this case is "GET".

        5. "url": This is the API's endpoint URL where the Get request is being sent. "http://localhost:3000/api/article/category/get/?shortId=articleCategoryShortId" is the URL, and 'articleCategoryShortId' at the end is a placeholder for the short identifier that should be used to fetch the specific article category.

        6. "headers": This array usually contains any additional HTTP headers to be sent with the API request. However, in this case, the "key" and "value" fields are empty, and the header is set to disabled. It would appear that there are no additional headers required for this endpoint.

        7. "body": This part of the request contains the data that is going out with the request. In this case, the mode is set to 'raw', and the 'raw' field is empty since there's no data to be sent with the GET request. 

        In summary, this endpoint is intended to fetch a specific article category by its 'shortId' using a GET request. It requires a bearer token for authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: shortId
          in: query
          schema:
            type: string
          example: articleCategoryShortId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/category/all:
    get:
      tags:
        - ArticleCategory
      summary: Article - Category - Get All By Account ID
      description: |-
        This endpoint, named "Article - Category - Get All By Account ID", is used to retrieve all articles by a specific account ID via a GET request. The details of each segment in this endpoint are as follows:

        1. "name": This is the key that refers to the name of the API endpoint. In this case, it is "Article - Category - Get All By Account ID".

        2. "request": This is where the configuration of the API request is defined. It includes:

        - "auth": This defines the type of authorization required to access this endpoint. The endpoint uses 'Bearer token' authorization. The token is provided in the "bearer" field with a key named "token" and a value of "BearerToken".

        - "method": Method used to get the information for the API. It's a 'GET' request which is used when you want to retrieve data.

        - "url": This is the URL which the request will be sent to. It is "http://localhost:3000/api/article/category/all/?accountId=accountId". The accountId at the end indicates where you would replace it with the actual ID of the account.

        - "headers": These are metadata in the form of key-value pairs, sent in the request. In this case, no headers are defined which is why the key and value fields are empty and "disabled" is set to true

        - "body": This is the data that you send to the path in the HTTP protocol. However, in this case, it has no content; the mode is "raw" and the raw field is empty.

        Remember to replace 'BearerToken' and 'accountId' with actual values in your application.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/category/delete:
    post:
      tags:
        - ArticleCategory
      summary: Article - Category - Delete
      description: |-
        This endpoint is named "Article - Category - Delete". Here's a detailed breakdown of all components of this endpoint: 

        1. **Name**: The name "Article - Category - Delete" gives a clear indication of the function of this endpoint. It's probably for deleting a specific category associated with an article in your application/system.

        2. **Request**: This is the main part of the endpoint that carries the necessary information for processing the request on the server.

           - **Auth**: Refers to the authentication type used. Here "bearer" token type is used. It contains a key named "token", which should hold a string type value which here is termed as "sessionId". This is likely for authenticating the request.

           - **Method**: This is the HTTP method used, which is "POST". It's generally used to send data to a server to create a new resource.

           - **URL**: This is the address to which this request is going to be sent. Here, it is "http://localhost:3000/api/article/category/delete".

           - **Headers**: This is an array of various properties that can be sent along the request. In this case, it's empty and disabled. It can be used for different purposes like specifying content type, authentication etc.

           - **Body**: This part contains all the major data that's going to be sent to the server. Here the mode used is "raw", meaning you are sending the data as directly inputted without any alterations.
           
               - The raw data contains three properties: "sessionId", "accountId", and "categoryId". These are likely to be identifiers for the session, the account, and the category of the article that is being deleted.
                
        This endpoint sends a POST request to delete a specific article's category from your application. It uses a bearer token authentication and requires the session ID, account ID, and category ID to be included in the body of the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"categoryId\":\"articleCategoryId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/general/create:
    post:
      tags:
        - ArticleGeneral
      summary: Article - General - Create Auto
      description: |-
        This endpoint is titled "Article - General - Create Auto". It is used to create a new article through an HTTP POST request, with the URL specified as "http://localhost:3000/api/article/general/create".

        The authentication used for this endpoint is "Bearer Authentication". It requires a bearer token provided in the format: "BearerToken".

        There's also a placeholder for potential additional headers, although it's currently disabled by default.

        The input body of the endpoint request is in raw JSON format. These are:

        1. "accountId" - The account identifier string representing the user.
        2. "sessionId" - The session identifier string representing the session.
        3. "category" - Represents the main categorization of the article.
        4. "subCategory" - Represents the sub categorization under the main category.
        5. "topic" - The primary discussion point of the article.
        6. "title" - The title of the article.
        7. "author" - The name of the author of the article.
        8. "estimatedTime" - The estimated time to read the article.
        9. "date" - The date the article was written.
        10. "image" - A URL string to an image related to the article.
        11. "tags" - An array of strings including various tags related to the article.
        12. "content" - An object containing extended content for the article like:
             - "startDate" and "endDate": Event duration for the article feature
             - "location": Where the event of the featured article takes place
             - "featuredArtists": Artists who are highlighted in the article
             - "collections": The collections featured or mentioned in the article.
             - "article": An array of objects where each object represents an event related to the article with fields like:
                - "type": Type of the event
                - "date": Date of the event
                - Various other fields depending on the type of event (like "time", "activities", "chef" based on context)

        The language type of the input request body is set to JSON. This confirms that the server expects the body content to be in JSON format.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                category: My New Shiny Category
                subCategory: My New Shiny Sub Category
                topic: My New Interesting Topic
                title: Invisible Luggage Exhibition
                author: Fortune Vieyra
                estimatedTime: 5 minutes
                date: '2024-12-02'
                image: https://www.beladed.com/img/logo.png
                tags:
                  - Art
                  - Exhibition
                  - SocialJustice
                  - GenderIdentity
                  - Immigration
                content:
                  startDate: '2024-12-02'
                  endDate: '2024-12-15'
                  location: Historic Hampton House, Miami, FL
                  featuredArtists:
                    - Beth Rudin DeWoody
                    - Zoe Lukov
                    - Laura Dvorkin
                    - Maynard Monrow
                  collections:
                    - Rubell Family Collection
                    - Bernard Lumpkin Collection
                    - Joy Simmons Collection
                  article:
                    - type: Opening Night
                      date: '2024-12-02'
                      time: '18:00'
                      activities:
                        - Cocktails
                        - Preview Dinner
                        - Artist Introductions
                    - type: Panel Discussion
                      date: '2024-12-05'
                      time: '15:00'
                      topic: Art and Social Justice
                    - type: VIP Dinner
                      date: '2024-12-10'
                      time: '19:00'
                      chef: Jessica Harris
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/general/createBulk:
    post:
      tags:
        - ArticleGeneral
      summary: Article - General - Create Bulk Auto
      description: |
        The endpoint `Article - General - Create Bulk Auto` is a HTTP `POST` request used to create multiple ("bulk") articles in the system.

        The `auth` object is how the API handles authentication. It uses a `type` of "bearer", which means it's expecting a bearer token in the request header. The `bearer` array holds key-value pair objects, where the `key` is the "token" and its corresponding `value` is the "BearerToken" we provide.

        The `url` is the path where the request is sent. In this case, it's a local development server (`localhost`) on port `3000`.

        The `headers` object in the request is currently empty and has `disabled` set to `true`, which means no specific HTTP headers are set for this request.

        The `body` encompasses the actual content of the request. It is sent as `raw` JSON. 

        The data in the `body` includes:

        - `sessionId`: The unique identifier for the ongoing session.
        - `accountId`: The unique identifier for the user's account.
        - `articles`: An array of objects, with each object representing an individual article and containing:
          - `title`: The article's title.
          - `category`: The category the article belongs to.
          - `subCategory`: Subcategory of the article.
          - `topic`: Topic of the article.
          - `date`: The date of the article.
          - `author`: Author of the article.
          - `estimatedTime`: Estimated reading time of the article.
          - `image`: URL of the image related to the article.
          - `content`: An array representing sections of the article's content. Each section is an object that includes a `type` (either "text" or "section"), `title` (for "section" type), and `content`.
          - `tags`: An array of tags associated with the article.

        Note: The `title` of each article must be unique in the bulk creation. The `date` needs to be in a recognized format like "DD MM YYYY". The `image` URL needs to be a valid, publicly accessible URL.

        The `options` object (inside `body`) defines the language of the `raw` input as `json`.

        In summary, this endpoint allows the bulk creation of articles based on the provided JSON data, including details as article title, category, sub-category, author, estimated reading time, image URL, content, and tags. It requires a bearer token for authentication.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "articles": [
                    {
                      "title": "how to change your email address on beladed",
                      "category": "Account Management",
                      "subCategory": "Account and Security",
                      "topic": "Update my account",
                      "date": "15 May 2024",
                      "author": "Alex Johnson",
                      "estimatedTime": "5 mins",
                      "image": "https://www.bldcdn.com/images/articles/how%20to%20change%20your%20email%20address%20on%20beladed.webp",
                      "content": [
                        {
                          "type": "text",
                          "content": "Keeping your email address up-to-date on Beladed is crucial for account security and communication. Follow these steps to change your email address quickly and securely."
                        },
                        {
                          "type": "section",
                          "title": "Step 1: Log In to Your Beladed Account",
                          "content": "Start by logging into your Beladed account using your current credentials at beladed.com."
                        },
                        {
                          "type": "section",
                          "title": "Step 2: Navigate to Account Settings",
                          "content": "Once logged in, click on your profile icon in the top-right corner and select 'Account Settings' from the dropdown menu."
                        },
                        {
                          "type": "section",
                          "title": "Step 3: Locate Email Settings",
                          "content": "In the Account Settings page, find the 'Email' or 'Contact Information' section."
                        },
                        {
                          "type": "section",
                          "title": "Step 4: Enter New Email Address",
                          "content": "Click on the 'Change Email' button and enter your new email address in the provided field. You may need to enter your current password for security verification."
                        },
                        {
                          "type": "section",
                          "title": "Step 5: Verify New Email",
                          "content": "Beladed will send a verification link to your new email address. Check your inbox (and spam folder) for this email and click the verification link to confirm the change."
                        },
                        {
                          "type": "section",
                          "title": "Step 6: Confirmation",
                          "content": "Once verified, log out and log back in to ensure the change has taken effect. You should now receive all Beladed communications at your new email address."
                        },
                        {
                          "type": "text",
                          "content": "Remember to update your email on any linked accounts or services to maintain seamless integration with your Beladed account."
                        }
                      ],
                      "tags": [
                        "Account Management",
                        "Email",
                        "Security",
                        "Profile Settings"
                      ]
                    },
                    {
                      "title": "resetting your password on beladed",
                      "category": "Account Management",
                      "subCategory": "Account and Security",
                      "topic": "Update my account",
                      "date": "20 May 2024",
                      "author": "Sam Lee",
                      "estimatedTime": "4 mins",
                      "image": "https://www.bldcdn.com/images/articles/resetting%20your%20password%20on%20beladed.webp",
                      "content": [
                        {
                          "type": "text",
                          "content": "Forgot your password? Don't worry! Beladed makes it easy to reset your password and regain access to your account. Follow these simple steps to create a new, secure password."
                        },
                        {
                          "type": "section",
                          "title": "Step 1: Access the Login Page",
                          "content": "Go to the Beladed login page at beladed.com/login."
                        },
                        {
                          "type": "section",
                          "title": "Step 2: Click 'Forgot Password'",
                          "content": "Look for the 'Forgot Password?' link below the login form and click on it."
                        },
                        {
                          "type": "section",
                          "title": "Step 3: Enter Your Email",
                          "content": "On the password reset page, enter the email address associated with your Beladed account and click 'Submit' or 'Reset Password'."
                        },
                        {
                          "type": "section",
                          "title": "Step 4: Check Your Email",
                          "content": "Beladed will send a password reset link to your email. Check your inbox (and spam folder) for an email from Beladed support."
                        },
                        {
                          "type": "section",
                          "title": "Step 5: Click the Reset Link",
                          "content": "Open the email and click on the password reset link provided. This will take you to a page where you can create a new password."
                        },
                        {
                          "type": "section",
                          "title": "Step 6: Create a New Password",
                          "content": "Enter your new password. Make sure it's strong and unique. Beladed may have specific requirements for password strength, so follow the guidelines provided."
                        },
                        {
                          "type": "section",
                          "title": "Step 7: Confirm and Log In",
                          "content": "After setting your new password, you'll be redirected to the login page. Use your email and new password to log in to your account."
                        },
                        {
                          "type": "text",
                          "content": "Remember to use a unique, strong password for your Beladed account to ensure the best security. Consider using a password manager to keep track of your passwords securely."
                        }
                      ],
                      "tags": [
                        "Account Management",
                        "Password",
                        "Security",
                        "Login"
                      ]
                    },
                    {
                      "title": "updating your profile information on beladed",
                      "category": "Account Management",
                      "subCategory": "Profile Customization",
                      "topic": "Updating profile picture and banner",
                      "date": "25 May 2024",
                      "author": "Jamie Smith",
                      "estimatedTime": "6 mins",
                      "image": "https://www.bldcdn.com/images/articles/updating%20your%20profile%20information%20on%20beladed.webp",
                      "content": [
                        {
                          "type": "text",
                          "content": "Keeping your Beladed profile up-to-date helps viewers find and connect with you more easily. This guide will walk you through the process of updating your profile information to ensure your Beladed presence is current and engaging."
                        },
                        {
                          "type": "section",
                          "title": "Step 1: Log In to Beladed",
                          "content": "Start by logging into your Beladed account at beladed.com using your email and password."
                        },
                        {
                          "type": "section",
                          "title": "Step 2: Access Your Profile Settings",
                          "content": "Click on your profile icon in the top-right corner of the page, then select 'Profile Settings' from the dropdown menu."
                        },
                        {
                          "type": "section",
                          "title": "Step 3: Edit Basic Information",
                          "content": "In the profile settings, you can update your display name, bio, and profile picture. Click on the 'Edit' button next to each section to make changes."
                        },
                        {
                          "type": "section",
                          "title": "Step 4: Update Your Stream Information",
                          "content": "Scroll down to find sections for updating your stream title, game category, and tags. Keep these current to help viewers find your content."
                        },
                        {
                          "type": "section",
                          "title": "Step 5: Manage Social Media Links",
                          "content": "Look for the 'Social Links' section where you can add or update links to your other social media profiles. This helps viewers connect with you on other platforms."
                        },
                        {
                          "type": "section",
                          "title": "Step 6: Customize Your Channel Appearance",
                          "content": "Beladed offers options to customize your channel's look. Explore the 'Channel Appearance' settings to update your banner image, accent colors, and other visual elements."
                        },
                        {
                          "type": "section",
                          "title": "Step 7: Save Your Changes",
                          "content": "After making all desired updates, scroll to the bottom of the page and click the 'Save Changes' button to apply your updates."
                        },
                        {
                          "type": "text",
                          "content": "Remember to review and update your profile regularly to keep your information fresh and relevant. A well-maintained profile can help attract and retain viewers on Beladed."
                        }
                      ],
                      "tags": [
                        "Profile Management",
                        "Customization",
                        "Account Settings"
                      ]
                    },
                    {
                      "title": "recovering a hacked beladed account",
                      "category": "Account Management",
                      "subCategory": "Account and Security",
                      "topic": "Account issues",
                      "date": "30 May 2024",
                      "author": "Chris Taylor",
                      "estimatedTime": "8 mins",
                      "image": "https://www.bldcdn.com/images/articles/recovering%20a%20hacked%20beladed%20account.webp",
                      "content": [
                        {
                          "type": "text",
                          "content": "If you suspect your Beladed account has been hacked, it's crucial to act quickly to regain control and secure your account. Follow these steps to recover your hacked account."
                        },
                        {
                          "type": "section",
                          "title": "Step 1: Reset Your Password",
                          "content": "Immediately change your password by using the 'Forgot Password' feature on the login page. This will help prevent further unauthorized access."
                        },
                        {
                          "type": "section",
                          "title": "Step 2: Enable Two-Factor Authentication",
                          "content": "After regaining access, enable two-factor authentication (2FA) to add an extra layer of security to your account."
                        },
                        {
                          "type": "section",
                          "title": "Step 3: Review Account Activity",
                          "content": "Check your account's recent activity, including stream history, chat logs, and any changes to your profile or settings."
                        },
                        {
                          "type": "section",
                          "title": "Step 4: Update Email and Recovery Options",
                          "content": "Ensure your email address is up-to-date and add additional recovery options like a phone number or backup email."
                        },
                        {
                          "type": "section",
                          "title": "Step 5: Contact Beladed Support",
                          "content": "If you're still experiencing issues or notice unauthorized changes you can't reverse, contact Beladed support for further assistance."
                        },
                        {
                          "type": "text",
                          "content": "Remember to use strong, unique passwords for all your accounts and be cautious about phishing attempts to prevent future hacking incidents."
                        }
                      ],
                      "tags": [
                        "Account Security",
                        "Hacking",
                        "Recovery",
                        "Security"
                      ]
                    },
                    {
                      "title": "creating engaging stream overlays",
                      "category": "Streaming Essentials",
                      "subCategory": "Getting Started with Streaming",
                      "topic": "Streaming software setup",
                      "date": "1 June 2024",
                      "author": "David Park",
                      "estimatedTime": "12 mins",
                      "image": "https://www.bldcdn.com/images/articles/creating%20engaging%20stream%20overlays.webp",
                      "content": [
                        {
                          "type": "text",
                          "content": "Learn how to design and implement professional-looking stream overlays that enhance viewer experience."
                        },
                        {
                          "type": "section",
                          "title": "Essential Overlay Elements",
                          "content": "Discover the key components that make up an effective stream overlay, from alerts to social media displays."
                        }
                      ],
                      "tags": [
                        "Stream Design",
                        "Overlays",
                        "Customization",
                        "Branding"
                      ]
                    },
                    {
                      "title": "maximizing revenue through channel memberships",
                      "category": "Monetization",
                      "subCategory": "Earning Revenue",
                      "topic": "Channel Subscriptions",
                      "date": "3 June 2024",
                      "author": "Rachel Kim",
                      "estimatedTime": "15 mins",
                      "image": "https://www.bldcdn.com/images/articles/maximizing%20revenue%20through%20channel%20memberships.webp",
                      "content": [
                        {
                          "type": "text",
                          "content": "Explore strategies to create valuable membership tiers and increase subscriber retention."
                        },
                        {
                          "type": "section",
                          "title": "Designing Membership Tiers",
                          "content": "Learn how to structure your membership levels to provide value at every price point."
                        }
                      ],
                      "tags": [
                        "Monetization",
                        "Memberships",
                        "Revenue",
                        "Subscriber Benefits"
                      ]
                    },
                    {
                      "title": "setting up streamlabs alerts effectively",
                      "category": "Technical Troubleshooting",
                      "subCategory": "Software Issues",
                      "topic": "Integration Issues",
                      "date": "5 June 2024",
                      "author": "Marcus Chen",
                      "estimatedTime": "8 mins",
                      "image": "https://www.bldcdn.com/images/articles/setting%20up%20streamlabs%20alerts%20effectively.webp",
                      "content": [
                        {
                          "type": "text",
                          "content": "Configure your Streamlabs alerts to enhance viewer engagement and show appreciation for support."
                        }
                      ],
                      "tags": [
                        "Streaming Tools",
                        "Alerts",
                        "Streamlabs",
                        "Stream Setup"
                      ]
                    },
                    {
                      "title": "building a moderation team for your channel",
                      "category": "Safety and Community Guidelines",
                      "subCategory": "Community Standards",
                      "topic": "Moderation Tools",
                      "date": "7 June 2024",
                      "author": "Sophie Martinez",
                      "estimatedTime": "10 mins",
                      "image": "https://www.bldcdn.com/images/articles/building%20a%20moderation%20team%20for%20your%20channel.webp",
                      "content": [
                        {
                          "type": "text",
                          "content": "Learn how to recruit, train, and manage effective moderators for your streaming community."
                        }
                      ],
                      "tags": [
                        "Moderation",
                        "Community Management",
                        "Safety",
                        "Team Building"
                      ]
                    },
                    {
                      "title": "optimizing your stream for mobile viewers",
                      "category": "Mobile Streaming",
                      "subCategory": "Mobile Setup",
                      "topic": "Technical Requirements",
                      "date": "9 June 2024",
                      "author": "James Wilson",
                      "estimatedTime": "7 mins",
                      "image": "https://www.bldcdn.com/images/articles/optimizing%20your%20stream%20for%20mobile%20viewers.webp",
                      "content": [
                        {
                          "type": "text",
                          "content": "Ensure your stream looks great on all devices with these mobile-friendly optimization tips."
                        }
                      ],
                      "tags": [
                        "Mobile Streaming",
                        "Optimization",
                        "Technical Setup"
                      ]
                    },
                    {
                      "title": "creating compelling channel panels",
                      "category": "Content Creation",
                      "subCategory": "Stream Planning",
                      "topic": "Stream Preparation",
                      "date": "11 June 2024",
                       "Content Rights"
                      ]
                    }
                  ]
                }
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/general/update:
    put:
      tags:
        - ArticleGeneral
      summary: Article - General - Update Auto
      description: |-
        The given endpoint updates a general-type article. Here are the data details:

        - **name**: The name is "Article - General - Update Auto", which indicates that this endpoint is used for updating general articles automatically.

        - **request**: This is the main configuration for making the request.

          - **auth**: The "auth" field is used for API authentication. It is using bearer token authentication. The "token" key should be replaced with a valid bearer token for successful authentication.

          - **method**: The request method is "PUT", which means it is used to update an existing resource.

          - **url**: The URL for this request is "http://localhost:3000/api/article/general/update".

          - **headers**: In the headers, we have the "Client-UUID" that is a unique identifier for the client making the request.

          - **body**: The content of the request with mode as "raw" and language as "json". This body needs to be filled with proper data for updating the article. Here are the body fields:
            
            - **articleId**: The unique identifier of the article
            - **accountId**: The unique identifier for the account
            - **sessionId**: The unique identifier for a session
            - **category, subCategory, and topic**: Category and subcategory of the article, and the topic it refers to.
            - **title and author**: Title of the article and the author's name.
            - **estimatedTime**: An estimate of how long it will take to read the article.
            - **date**: Publication date of the article
            - **image**: URL of the article image
            - **tags**: Tags associated with the article
            - **content**: It contains further details like start date, end date, location, featured artists, collections, details about each event in the article like event type, date, time, and specific details about the event like activities, topic, chef etc.
            
          - **options**: It specifies that the raw body language is in JSON format.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                articleId: articleId
                accountId: accountId
                sessionId: sessionId
                category: My New Shiny Category
                subCategory: My New Shiny Sub Category
                topic: My New Interesting Topic
                title: Invisible Luggage Exhibition 3.0
                author: Fortune Vieyra
                estimatedTime: 5 minutes
                date: '2024-12-02'
                image: https://www.beladed.com/img/logo.png
                tags:
                  - Art
                  - Exhibition
                  - SocialJustice
                  - GenderIdentity
                  - Immigration
                content:
                  startDate: '2024-12-02'
                  endDate: '2024-12-15'
                  location: Historic Hampton House, Miami, FL
                  featuredArtists:
                    - Beth Rudin DeWoody
                    - Zoe Lukov
                    - Laura Dvorkin
                    - Maynard Monrow
                  collections:
                    - Rubell Family Collection
                    - Bernard Lumpkin Collection
                    - Joy Simmons Collection
                  article:
                    - type: Opening Night
                      date: '2024-12-02'
                      time: '18:00'
                      activities:
                        - Cocktails
                        - Preview Dinner
                        - Artist Introductions
                    - type: Panel Discussion
                      date: '2024-12-05'
                      time: '15:00'
                      topic: Art and Social Justice
                    - type: VIP Dinner
                      date: '2024-12-10'
                      time: '19:00'
                      chef: Jessica Harris
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/general/get:
    get:
      tags:
        - ArticleGeneral
      summary: Article - General - Get By Account ID
      description: |-
        This API endpoint is titled "Article - General - Get By Account ID". 

        1. Request Type: It is a GET request used to fetch data.

        2. Authentication: The authentication type is 'Bearer'. It uses a bearer token to authenticate the request. You need to replace "BearerToken" with your valid token for access.

        3. URL: The URL for the request is http://localhost:3000/api/article/general/get?accountId=accountId. In this URL, replace "accountId" query parameter with the actual account id whose articles you want to retrieve.

        4. Headers: No additional headers are required for this API request. Default headers will automatically be added when the request is made.

        5. Body: The body part is empty, as it's not needed in a GET request. 

        In a nutshell, this endpoint fetches the articles related to a specific account based on its ID. This is done through a GET request, which requires the use of a bearer token for authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/general/all:
    get:
      tags:
        - ArticleGeneral
      summary: Article - General - Get All By Topic ID
      description: |-
        This endpoint is titled "Article - General - Get All By Topic ID". Here is a detailed explanation of each field:

        - `name`: This is the title of the endpoint. It is an essential brief description used to identify the endpoint's purpose. In this case, it is used to retrieve all general articles associated with a given topic ID.

        - `request`: This field contains the details of the API request to be made.

           - `auth`: This part specifies the authentication required for making the API request.
                - `type`: Shows the type of authentication. Here it is "bearer" authentication.
                - `bearer`: Contains an array with information about the bearer token. 
                    - `key`: This is the name of the field required for the token, which in this case is "token".
                    - `value`: This is the placeholder for the token value.
                    - `type`: Shows the type of the field. For the "token" field, the type is "string".
                
           - `method`: Describes the type of API request. For this endpoint, a "GET" method is used, meaning it retrieves information from the server without modifying any data.

           - `url`: This specifies the URL to which the API request is made. It includes a parameter, "topicId", where the topic ID to filter articles by should be inputted.

           - `headers`: This section contains details regarding the headers to be sent with the request. In this case, it's an empty field, disabled, and set to the default type.

           - `body`: This section contains information about the body of the request.
               - `mode`: Represents how the data in the body is being sent. In this case, it is set to "raw", indicating that the data must be sent exactly as provided, but it's empty in this request since "GET" method is used.

        Note: The bearer token should be replaced by a real token when sending the request for authentication. Furthermore, a real topic ID should be included in the URL instead of the placeholder "articleTopicId".
      security:
        - bearerAuth: []
      parameters:
        - name: topicId
          in: query
          schema:
            type: string
          example: articleTopicId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/general/delete:
    post:
      tags:
        - ArticleGeneral
      summary: Article - General - Delete
      description: |-
        This endpoint is called "Article - General - Delete". As the name suggests, it is used to delete a general article. This is what each part of the endpoint does:

        1. `auth`: This section deals with authentication. This endpoint uses `bearer` authentication. Here, `token` is the key, `sessionId` is the value and the type of the `bearer token` is a `string`. This means you need to input a valid session ID as your bearer token to be able to successfully access this endpoint.

        2. `method`: The method used here is `POST`. This means you're sending data to the server with the request to delete a specific general article.

        3. `url`: This is the URL you must send your request to. In this case, it is http://localhost:3000/api/article/general/delete.

        4. `headers`: The headers are set to `default` and `disabled`, which means no extra HTTP headers are included in the request.

        5. `body`: This section specifies the data you send to the server. The `mode` specified here is `raw`, which means you're sending a string of text.
           
           Inside the `raw` string, there are three properties:
           - `sessionId`: This is where you input the ID of the session.
           - `accountId`: This is where you input the ID of the account that wants to delete the article.
           - `article`: This is where you input the article that you want to delete.

        Make sure to replace `sessionId`, `accountId` and `article` with the actual information during your request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"article\":\"article\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/subcategory/create:
    post:
      tags:
        - ArticleSubcategory
      summary: Article - SubCategory - Create Auto
      description: |-
        1. `name`: This represents the name of the API endpoint. In this case, it's "Article - SubCategory - Create Auto". This is also likely what the endpoint is used for, which is to create auto subcategories for articles.

        2. `request`: This includes all the details related to the HTTP request method, endpoint URL, headers, body, and authorization type used in the API call. 

        3. `auth`: This section provides details about the type of authentication being used. Here, the type is "bearer", which indicates bearer token authentication is used for this request. A bearer token, represented by the `key` value pair of "token" and "BearerToken", is sent for authorization.

        4. `method`: The HTTP method for this request is "POST", which is mostly used to send data to a server to create a new resource.

        5. `url`: This is the URL endpoint where the API call is being made. This endpoint is used to create a new subcategory under the article's category.

        6. `headers`: These are the default headers for the request. In this case, the header key and value are both empty and disabled.

        7. `body`: This is the data which is sent to the server. This data is sent in raw JSON format. It contains several fields: 

           - `sessionId`: This is likely an identifier for the session in which the API call is being made.
           - `accountId`: This could be an identifier for the user or system making the API call.
           - `displayName`: This is the name that will be displayed for the new subcategory.
           - `description`: Provides a description of the new subcategory being created.
           - `tags`: These are keywords associated with the new subcategory.
           - `category`: This is the parent category under which the new subcategory is created.

        8. `options`: This field specifies that the request body "raw" data is in JSON format.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                displayName: Miami Art Week 2024
                description: An immersive celebration of art and culture during Miami Art Week.
                tags: Art,Exhibition,Miami,Culture
                category: My Very Own Category
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/subcategory/createBulk:
    post:
      tags:
        - ArticleSubcategory
      summary: Article - SubCategory - Create Bulk Auto
      description: |-
        1. `name`: This specifies the name of the API endpoint, i.e., "Article - SubCategory - Create Bulk Auto". This denotes that this endpoint is used to create multiple subcategories automatically in articles.

        2. `request`: This constitutes the main body of the API request and includes several subparts:

           2.1. `auth`: This dictates the type of authentication used for this API endpoint. In this case, `type` is "bearer", implying bearer token authentication is required. `bearer` consists further of a `key` termed as "token", and a `value` signaled as "BearerToken". It should be replaced with the actual token for authentication.

           2.2. `method`: This mentions the HTTP method (or verb) used for the API request. In this case, it specifies "POST", which means this request will be used to send data to the server to create new resources.

           2.3. `url`: This represents the URL where the API request will be sent. Here, it signifies our local host URL targeted at creating bulk subcategories in articles.

           2.4. `headers`: This usually holds metadata associated with the API request. Currently, it has no definite value enabled.

           2.5. `body`: This forms the main content of the API request.

               2.5.1. `mode`: It states that data is sent in a "raw" format.
           
               2.5.2. `raw`: It encompasses the actual JSON data to be sent in the request. It contains `sessionId`, `accountId`, and `subCategories`. Subcategories field is an array of objects. Each object in the array has `name`, `displayName`, `categoryId`, `category`, `description`, and `tags`. These fields provide detailed information about each subcategory such as its name, id, associated category, and brief description along with relevant tags.
           
               2.5.3. `options`: It defines how the `raw` data should be interpreted, with `language` stating that the raw data is JSON formatted.

        The above data constitutes a detailed description of all the information present in the `POST` request API endpoint for creating multiple subcategories in articles.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                subCategories:
                  - name: Digital Art
                    displayName: Digital Art Subcategory
                    categoryId: '12345'
                    category: Art
                    description: Subcategory for digital artworks.
                    tags: Digital,Art,Subcategory
                  - name: AI Innovations
                    displayName: AI in Art
                    category: Art
                    description: Subcategory for AI-based artistic innovations.
                    tags: AI,Art,Innovation
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/subcategory/update:
    put:
      tags:
        - ArticleSubcategory
      summary: Article - SubCategory - Update Auto
      description: |-
        This endpoint is used to update an auto-generated subcategory under the 'Article' main category.

        Here's a detailed explanation of each field that needs to be provided:

        1. Name: This is the title or name of the endpoint, namely "Article - SubCategory - Update Auto". 

        2. Request: This section contains all the details regarding the HTTP request.

        3. Auth: Here, the type of authorisation is 'bearer', which means OAuth 2.0 authentication is used. The bearer key is where you have to input your bearer token.

        4. Method: The HTTP request method for this endpoint is 'PUT', indicating that you are updating information.

        5. Url: This is the API call's endpoint. By making a PUT request at this URL, "http://localhost:3000/api/article/subcategory/update", you request the server to update the specified subcategory.

        6. Headers: In this field, there is one key-value pair defined, 'Client-UUID'. It uniquely identifies the client sending the request. 

        7. Body: This section contains the specific data that should be updated. 

        - Mode: Here, the chosen mode is 'raw', which allows you to write the data as needed in text format.
          
        - Raw: This field contains JSON text with keys for 'subCategoryId', 'sessionId', 'accountId', 'category', 'displayName', 'description' and 'tags'. 

        - 'subCategoryId': This is the unique identifier for the sub-category you want to update.
          
        - 'sessionId': Input the session identifier here, which is used to maintain session state between requests.
          
        - 'accountId': Input the account identifier, which is related to the user account making the change.
          
        - 'category': This is the category name which you want to change or update.
          
        - 'displayName':  This field is for renaming the display name of the category.
          
        - 'description': This is for updating the description of the category.
          
        - 'tags': The tags related to this category can be updated and should be comma-separated strings.

        - Options: In this field, the language specified is 'json' for the raw body data.

        Ensure to replace the placeholders with actual data before making the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                subCategoryId: articleSubCategoryId
                sessionId: sessionId
                accountId: accountId
                category: My Shiny New Category 2.0
                displayName: Miami Art Week 2025
                description: An immersive celebration of art and culture during Miami Art Week.
                tags: Art,Exhibition,Miami,Culture
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/subcategory/get:
    get:
      tags:
        - ArticleSubcategory
      summary: Article - SubCategory - Get By Short ID
      description: |-
        **Endpoint Name: Article - SubCategory - Get By Short ID**

        This is the name of the given endpoint. It specifies the purpose of the endpoint indicating that it's used to retrieve (Get) a SubCategory of an Article by its Short ID.

        **Authentication: Bearer Token**

        This endpoint uses Bearer authentication. This type of authentication is an HTTP authentication scheme that involves security tokens called bearer tokens. The token value is labeled as 'BearerToken'. This data must be string type.

        **Request Method: GET**

        This is an HTTP method used by the client to request data from a server. In this instance, the method is 'GET' which is used to request data from a specified resource.

        **URL**

        This is the endpoint to which the request is sent. In this case, it's http://localhost:3000/api/article/subcategory/get/?shortId=articleSubCategoryShortId. It specifies that the endpoint lives on a localhost server, running on port 3000, and is part of an API dealing with an article's subcategory retrieval (get) by its Short ID.

        **Headers**

        This section denotes the HTTP headers to be included with the request. Currently, there is a placeholder for a header, but it's been disabled and left empty, therefore, it's non functional.

        **Body**

        As this is a 'GET' request, typically no body is included and the body section is therefore set to 'raw', but no value ('') is provided.

        **Parameters: shortId**

        This query parameter specifies the shortId of an article's subcategory. This shortId is used to identify the specific subcategory that needs to be retrieved from the server. 

        Note: Replace 'articleSubCategoryShortId' with the actual Short ID of the Article's SubCategory.
      security:
        - bearerAuth: []
      parameters:
        - name: shortId
          in: query
          schema:
            type: string
          example: articleSubCategoryShortId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/subcategory/all:
    get:
      tags:
        - ArticleSubcategory
      summary: Article - SubCategory - Get All By Category ID
      description: |-
        This endpoint is called "Article - SubCategory - Get All By Category ID". Here is a detailed description of each data:

        - "name": It is the name of the endpoint. It indicates that this endpoint is used to retrieve all the subcategories of articles under a specific category, identified by a category ID.

        - "request": The object contains all the necessary details required to make the HTTP request.

          - "auth": The authentication method required for this endpoint. It is of type "bearer". Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. 
            - "bearer": An array containing details about the bearer authentication token required for the endpoint. 
              - "key": The name of the token, which is "token".
              - "value": The placeholder for the bearer token, which should replaced with your actual bearer token (BearerToken).
              - "type": The datatype of the value, here it is "string".

          - "method": The HTTP method used for this request, which is "GET" in our case.

          - "url": The URL where the request needs to be sent. Here it should be pointing to the place where your server is running, followed by the specific route to get the article subcategories. Replace 'articleCategoryId' with your actual article category id to fetch respective subcategories.

          - "headers": An array where you can add additional headers. Currently, there are no additional headers required for the call, hence it's empty and disabled.

          - "body": Details of the body of the request. Since this is a GET request, no body data is necessary and hence the "mode" is "raw" and "raw" data is empty.
          
        Remember, this endpoint requires a bearer token for authentication, so ensure to include it in your request.
      security:
        - bearerAuth: []
      parameters:
        - name: categoryId
          in: query
          schema:
            type: string
          example: articleCategoryId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/subcategory/delete:
    post:
      tags:
        - ArticleSubcategory
      summary: Article - SubCategory - Delete
      description: |-
        This endpoint is labeled as "Article - SubCategory - Delete". It required bearer authentication type which means the API won't work without a proper authorization. The authentication uses a bearer token which usually represents the logged-in user session, identified by the key "token" and takes a string value "sessionId".

        The HTTP request method for this endpoint is POST. It's typically used to send data to a server to create a new resource. 

        The URL for this endpoint is "http://localhost:3000/api/article/subcategory/delete". This URL suggests that it will be interacting with the subcategories under articles. Specifically, it appears that it will be used to delete an item based on the route "/delete". It's highly likely that it's used to delete an article's subcategory.

        The default header key is not provided in the endpoint, hence the empty strings (""). The "disabled" field indicates the headers are disabled for this endpoint, meaning that the headers won't be sent along with the request.

        The request body is in raw json format, which directly embodies all the information needed for the request. Within that message body, there are three fields included: 

        1. "sessionId" which probably is used to keep the current logged-in user's session. 
        2. "accountId" might be used to represent a specific user account that the session belong to. 
        3. "subCategoryId" that seemingly represents the identification of the subcategory in an article that you want to delete. 

        This endpoint appears to be deleting an article's subcategory of an account with a verified session.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"subCategoryId\":\"articleSubCategoryId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/topic/create:
    post:
      tags:
        - ArticleTopic
      summary: Article - Topic - Create Auto
      description: |-
        1. `name`: This is the name of the endpoint, which in this case is "Article - Topic - Create Auto". It is used to give a description of the action being carried out by this endpoint.

        2. `request`: The request object consists of several key properties:

            - `auth`: This object provides information about the authentication method used for this API endpoint. The authentication type here is Bearer token authentication which typically involves sending a token in the authorization header of the HTTP request.
                - `type`: It describes the type of authentication used. Here, 'bearer' authentication is used.
                - `bearer`: This array contains the bearer token details.
                    - `key`: The key is "token" which is the standard key value when using bearer token authentication.
                    - `value`: This stands for the actual token value which is to be replaced with the actual bearer token.
                    - `type`: The type of the token. Here, it is a string.

            - `method`: HTTP method being used for the request. Here it is "POST" which is used to send data to a server to create a resource.

            - `url`: It is the endpoint URL where the HTTP request is sent. Here the URL is "http://localhost:3000/api/article/topic/create".

            - `headers`: This is an object that contains all the HTTP headers that you want to include in your request. Here, no specific headers have been provided and the disabled property set to true indicating that there's no active header being used for this API request.

            - `body`: Contains the actual content/data you're sending with the request. Here, it is in raw JSON format and contains the following fields:
                - `sessionId`: This is most likely a unique identifier for the current user session.
                - `accountId`: Possibly the account ID of the user creating the article or the topic.
                - `category`: This contains the category for the new article or topic.
                - `subCategory`: This contains the sub category for the new article or topic.
                - `name`: This is the name of the new article or topic.
                - `displayName`: The human-readable name for the new article or topic.
                - `description`: A brief description of the new article or topic.
                - `tags`: These are the tags related to the new article or topic. They seem to be a comma-separated list of words related to the article or topic. 

            - `options`: Contains additional options related to the body of the request.
                  - `raw`: It possesses an object which states the language format of the raw data, in this instance, the language choice is JSON.

        In summary, this endpoint is for creating a new article or topic within a certain category and sub-category using their account ID and session ID, as well as providing a name, display name, description and related tags. The bearer token used for authenticated requests is expected to be provided.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                category: My Brand New Category
                subCategory: My Brand New Sub Category
                name: Miami Art Week 8
                displayName: Miami Art Week 2028
                description: An immersive celebration of art and culture during Miami Art Week.
                tags: Art,Exhibition,Miami,Culture
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/topic/createBulk:
    post:
      tags:
        - ArticleTopic
      summary: Article - Topic - Create Bulk Auto
      description: |-
        This endpoint, named "Article - Topic - Create Bulk Auto", is a POST method used for creating multiple topics under an article in a single request. It requires bearer token authorization and is located at "http://localhost:3000/api/article/topic/createBulk".

        The authorization field includes "auth" which is of type "bearer". This includes the "key" which should be called "token", and its "value" should be your Bearer access token. This token should be of "string" type.

        The "request" element includes the HTTP method type which is "POST" in this case as well as the "url" for the API endpoint. Headers for the request are included in the "headers" object but they are currently blank and disabled.

        The "body" of the request contains the data that will be sent to the server. The "mode" is set to "raw", so raw input data can be provided. The "language" key in "options" is set to "json", meaning the body data should be in JSON format. 

        The "raw" string contains a JSON object, which includes:
        - "sessionId": This is a special identifier for the session, replace it with your session ID.
        - "accountId": This denotes the account id for the user, replace it with the user's account ID.
        - "topics": This is an array of objects where each object represents a unique article topic that is to be created. Each topic object includes the following:
          - "sessionId" & "accountId": Similar to above.
          - "category": This represents the category of the article topic.
          - "subCategory": This represents the sub-category within the main category.
          - "name": This is the name of the topic.
          - "displayName": This is the displayed name of the topic.
          - "description": This is a brief summary of the topic.
          - "tags": Comma-separated keywords related to the topic for search optimization. 

        Note: Replace the placeholders "sessionId" and "accountId" with real values for all instances inside the topics array.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                topics:
                  - sessionId: sessionId
                    accountId: accountId
                    category: My Brand New Category
                    subCategory: My Brand New Sub Category
                    name: Miami Art Week 8
                    displayName: Miami Art Week 2028
                    description: An immersive celebration of art and culture during Miami Art Week.
                    tags: Art,Exhibition,Miami,Culture
                  - sessionId: sessionId
                    accountId: accountId
                    category: Technology Innovations
                    subCategory: AI and Machine Learning
                    name: Tech Trends 2028
                    displayName: Technology Trends 2028
                    description: An exploration of cutting-edge technology trends.
                    tags: Tech,AI,Innovation
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/topic/update:
    put:
      tags:
        - ArticleTopic
      summary: Article - Topic - Update Auto
      description: |-
        "name": This is the endpoint's name, "Article - Topic - Update Auto". It's mainly used for identification purposes.

        "request": This includes all the details required to make a HTTP request. 

        Inside "request":
           "auth": Contains authentication details required for authorizing the request.
           "type": The auth type, which is "bearer" in this case. It means the authorization is following the Bearer scheme.
           "bearer": An array containing the bearer token details which are key-value pairs with the key named "token" and value named "BearerToken"

        "method": This is the HTTP verb to use for the request. Here we are using the "PUT" method, which is generally used for updating resources.

        "url": This is the web address to which the request will be sent. "http://localhost:3000/api/article/topic/update" is the endpoint URL.

        "headers": This is an array containing all the header information required for processing the HTTP request. "Client-UUID" is a unique client identifier that's being passed here.

        "body": The data to be sent with the request comes under this. The mode is set as "raw", indicating that we are sending raw bytes in the body of our request.
          
        Inside "body":
           "raw": Raw text to be included in the body of the request. This contains all the basic information required to update an article topic. It includes fields such as "topicId", "sessionId", "accountId", "category", "subCategory", "name", "displayName", "description", "tags".
           "options": Parameters to configure the way raw data is interpreted. Here it's set to "json", meaning that the raw text included must be written in json format.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                topicId: articleTopicId
                sessionId: sessionId
                accountId: accountId
                category: My Brand New Category
                subCategory: My Brand New Sub Category
                name: Miami Art Week
                displayName: Miami Art Week 2024
                description: An immersive celebration of art and culture during Miami Art Week.
                tags: Art,Exhibition,Miami,Culture
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/topic/get:
    get:
      tags:
        - ArticleTopic
      summary: Article - Topic - Get By Short ID
      description: |
        1. "name": This field represents the name of the API endpoint, which in this case is "Article - Topic - Get By Short ID". This name is used to identify the API endpoint within the collection.

        2. "request": This field is an object containing information about the HTTP request to be made to the server.

        3. "auth": This is a part of the request object specifying authorization details to be sent along with the request. The "type" field under "auth" represents the type of Authorization which in this case is "bearer".

        4. "bearer": This field is part of the auth object that contains an array of bearer tokens. Each bearer token object has three properties:

            - "key": It represents the attribute name or identifier of the token. In this case, it's "token".
            - "value": It holds the actual value of the key. Here, it is "BearerToken".
            - "type": It represents the data type of the value. In this case, it's a "string".

        5. "method": This is a part of the request object and specifies the HTTP method to be used when making a request to the server. The HTTP method here is "GET".

        6. "url": This is the URL to which the request is to be sent. Here, it is "http://localhost:3000/api/article/topic/get/?shortId=articleTopicShortId".

        7. "headers": This field is an array of objects representing the headers to be sent along with the request. Each object has four properties: "key", "value", "type", and "disabled". In this case, they are all empty or set to default, meaning no additional headers are required for the request.

        8. "body": This object specifies the body of the request. It has two properties: "mode" and "raw". The "mode" specifies the format in which the data is sent in the body of the request. Here, the mode is "raw", meaning the data is sent as is. The "raw" field, which is empty, is where the raw data to be sent in the body would be entered.
      security:
        - bearerAuth: []
      parameters:
        - name: shortId
          in: query
          schema:
            type: string
          example: articleTopicShortId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/topic/all:
    get:
      tags:
        - ArticleTopic
      summary: Article - Topic - Get All By SubCategory ID
      description: |-
        This endpoint is named "Article - Topic - Get All By SubCategory ID". It basically gets all articles under a specific topic identified by its subcategory ID. Here's the breakdown:

        1. **name**: The name of this endpoint is "Article - Topic - Get All By SubCategory ID", which explains the primary function of this endpoint. It's designed to fetch all articles within a specified topic that falls under a certain subcategory.

        2. **auth**: This section outlines the expected authentication mechanism. The `type` is "bearer", indicating that bearer token authentication is required. The bearer token itself should be supplied as the value of the `token` key. Here, "BearerToken" is a placeholder for the actual token you need to provide.

        3. **method**: This endpoint uses the "GET" HTTP method, which is typically used to retrieve information.

        4. **url**: This is the URL where the request should be sent. This example uses a local server running on port 3000. The route is "/api/article/topic/all". A query parameter `subCategoryId` is required where you are supposed to provide the subcategory ID (`articleSubCategoryId`) of the articles that you want to retrieve.

        5. **headers**: This is usually where you define any necessary HTTP headers for your request. However, in this case, a default header without a key-value pair is defined, but it is disabled.

        6. **body**: This outlines the structure and mode of the body of your request. However, since we're using a GET method, the body is not required and thus the `raw` field is empty. The `mode` is set to "raw", but it won't be used here.

        Please remember to replace placeholders with real values when using this endpoint. Specifically, you should provide a valid bearer token and a valid subcategory ID.
      security:
        - bearerAuth: []
      parameters:
        - name: subCategoryId
          in: query
          schema:
            type: string
          example: articleSubCategoryId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/article/topic/delete:
    post:
      tags:
        - ArticleTopic
      summary: Article - Topic - Delete
      description: |-
        This endpoint named "Article - Topic - Delete" allows you to delete a specific topic from an article. Here is a detailed description for each datum:

        1. "name": It signifies the identifier of this endpoint which is "Article - Topic - Delete".
           
        2. "request": This is an object which contains multiple properties under it. Let's consider each one.

           - "auth": This property is used for handling authentication. It uses bearer token authentication where you need to provide a token.
              
             - "type": The type of the provided token which is "bearer".
              
             - "bearer": This is an array of objects containing bearer's key, type and value. 
                 - "key": This denotes the token name. Here, the key is "token".
                 - "value": This stands for the passed value for the key which in this case is "sessionId".
                 - "type": Identifies the datatype of value (i.e., "sessionId"). It is a "string". 

           - "method": An HTTP method used. This endpoint uses "POST" method.
              
           - "url": It provides the URL where this endpoint hits, which is "http://localhost:3000/api/article/topic/delete".
           
           - "headers": This is an array primarily meant for passing additional information while sending requests. It's set to empty here, and being ignored as it's "disabled": True.

           - "body": It carries the data which needs to be processed in the HTTP request. Here, the data is in "raw" mode.

               - "mode": Since the mode is set to "raw", you can write JSON or XML directly in the text input field.

               - "raw": It holds JSON string which contains sessionId, accountId and topicId.
                   - "sessionId": It is the session identity of the user. Replace the placeholder "sessionId" with a valid one.
                   - "accountId": It represents the account identity that is associated with this action. Replace "accountId" with actual account identifier.
                   - "topicId": It is the specific identifier to an article's topic that you wish to delete. Enter the actual topicId instead of "articleTopicId".
                   
        Please replace all placeholders with actual values while using this endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"topicId\":\"articleTopicId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/chat/comment/create:
    post:
      tags:
        - ChatComment
      summary: Chat - Comment - Create
      description: |-
        This endpoint, named "Chat - Comment - Create", is used to create a new comment in a chat. It is a HTTP POST request to the URL http://localhost:3000/api/chat/comment/create. Here is a deeper look at the different pieces of data provided in this endpoint:

        1. **auth**: This contains the authorization method which is of type "bearer". The bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. 

           **key**: The key field contains the name of the header, which is "token".

           **value**: The value field contains the actual Bearer token that needs to be added in the header for access.

           **type**: This defines the data type of the value, in this case, it is a string.

        2. **method**: The HTTP method used for this request is POST. HTTP POST requests are used to send data to the server, like when you fill out a form and hit 'submit'. In this case, it is used to create a new chat comment.

        3. **url**: This is the endpoint where the POST request is to be sent. 

        4. **headers**: This is currently empty but would typically contain any extra headers that need to be added to the request.

        5. **body**: This is the data that is sent with the POST request. The data is in raw format and the mode type is "raw" under the body field.

           **raw**: This is the actual data being sent in the request. It contains:
           
          - `commentText`: The text of the comment that is being created.
          
          - `threadId`: The unique identifier for the thread where the comment is being posted.
          
          - `replyToId`: The id of the comment this new comment is responding to, in case the new comment is a reply.
          
          - `accountId`: The id of the account creating the comment.
          
          - `sessionId`: The id of the current session.

           **options**: In the options field, raw is defined with language as json. It means that the raw data is written in JSON format.

        Remember to replace "BearerToken", "threadId", "replyToId", "accountId", and "sessionId" with actual values when using this endpoint.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                commentText: Hello, this is a comment!
                threadId: threadId
                replyToId: replyToId
                accountId: accountId
                sessionId: sessionId
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/chat/comment/update:
    put:
      tags:
        - ChatComment
      summary: Chat - Comment - Update
      description: |-
        This endpoint "Chat - Comment - Update" is used to update an existing comment in a chat thread.

        It uses the `PUT` method indicating that it's used to update existing resources.

        Here is a detailed breakdown of each data in this endpoint:

        1. `auth`: This is the way your API handles authentication. In this endpoint, it is using `Bearer Token` authentication.
           - `type`: The type of authentication used. Here, it's `bearer`.
           - `bearer`: An array holding bearer token data.
               - `key`: The keyword `token` used to identify this authentication method.
               - `value`: The bearer token which should be replaced with an actual bearer access token.
           
        2. `method`: This is the HTTP method used for the request. The endpoint uses `PUT`, which is used to update existing resources.

        3. `url`: This is the endpoint URL to which the request will be sent. Here, the URL is `http://localhost:3000/api/chat/comment/update`.

        4. `headers`: This array will hold any headers that need to be sent with the request. In this case, no headers are specified.

        5. `body`: This contains the data sent to the server. It is written in raw mode.
           - `mode`: Defines how the body will be sent. Here, it is sent in `raw`.
           - `raw`: This is the raw request body which contains the comment details that are to be updated.
              - `commentId`: The ID of the comment to be updated.
              - `commentText`: The updated text for the comment.
              - `threadId`: The ID of the thread in which this comment is present.
              - `accountId`: The ID of the account making the update.
              - `sessionId`: The ID of the session in which the request is made.
           
        6. `options`: Options for how the data in `raw` should be interpreted.
           - `raw`: Options specific to when the data is sent as `raw`.
               - `language`: The language in which the `raw` data is written. In this case, it's `json`.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                commentId: commentId
                commentText: Updated comment text
                threadId: threadId
                accountId: accountId
                sessionId: sessionId
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/chat/comment/delete:
    post:
      tags:
        - ChatComment
      summary: Chat - Comment - Delete
      description: |-
        This endpoint is known as "Chat - Comment - Delete". It's used to delete a specific comment from a chat. There are several parameters to understand in this endpoint:

        1. "name" - A unique identifier for the endpoint. This endpoint's name is "Chat - Comment - Delete", referring to the task it is specifically designed to perform.

        2. "auth" - This section specifies the authentication method required to access this endpoint. In this case, it uses bearer authentication ("type": "bearer"), meaning you need to provide a token (Bearer token) in the request header to authenticate yourself.

        3. "request" - This is the actual command sent when the API is called. 

        4. "method" - This refers to the type of HTTP request method used. In this case, it's a POST method, which is typically used when you want to send data to be processed to a specified resource.

        5. "url" - The URL is the specific address where the request will be sent. For this endpoint, the request will be sent to "http://localhost:3000/api/chat/comment/delete".

        6. "headers" - Headers let the client and the server pass additional information with an HTTP request or response. This endpoint does not require any additional headers.

        7. "body" - This is the part of the request where you specify the data you want to send. In this endpoint, a raw JSON object is sent in the body, containing following fields:
            - "commentId": The ID of the comment to be deleted.
            - "threadId": The ID of the thread where the comment resides.
            - "accountId": The account ID related to the session making the request.
            - "sessionId": It is the unique id of the session attempting to delete the comment.

        8. "options" - This section provides additional details about how the body of the request is formatted. It specifies that the body is raw data and the language used is JSON.

        Please ensure you replace "BearerToken", "commentId", "threadId", "accountId" and "sessionId" with actual values in your request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                commentId: commentId
                threadId: threadId
                accountId: accountId
                sessionId: sessionId
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/chat/comment/get:
    get:
      tags:
        - ChatComment
      summary: Chat - Comment - Get
      description: |-
        1. **name**: This data point contains the name of the transactions that we are performing. In this case, the name is "Chat - Comment - Get". This is essentially denoting that this API call is to get comments of a chat.

        2. **request**: This data point represents the HTTP request information including the authentication method, HTTP method, URL, and the headers.

           - **auth**: This object includes information about the authorization needed to execute this API call. 
                - **type**: This defines the type of authorization being used. Here, it is "bearer", which suggests that we are using bearer token for authorization.
                - **bearer**: This is an array carrying information about the bearer token
                  - **key**: This is the key used for bearer token. In this case, the key is "token".
                  - **value**: This is the value of the aforementioned key. Here, the value is "BearerToken".
                  - **type**: This defines the data type of the key. Here, it is a string.

           - **method**: This data point tells us about the HTTP method being used for the request. Here, it directs us to use the GET method.

           - **url**: This field contains the URL for the call. The URL is followed by a string of parameters added to the end of the actual URL in the form of a query string. The parameters are `commentId`, `threadId`, `accountId`, and `sessionId`. These parameters represent the comment's id, thread's id, user's account id, and session id respectively.

           - **headers**: This field represents the headers used in your HTTP request. Headers let the client and the server pass additional information with an HTTP request or response. Currently, it is an empty array indicating no header data is added to the request.

        Please note that the `BearerToken` and the values in the `url` query string are placeholders and should be replaced with actual data for the API call to be successful.
      security:
        - bearerAuth: []
      parameters:
        - name: commentId
          in: query
          schema:
            type: string
          example: commentId
        - name: threadId
          in: query
          schema:
            type: string
          example: threadId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/chat/comment/all:
    get:
      tags:
        - ChatComment
      summary: Chat - Comment - Get All With Deleted
      description: "The endpoint, Chat - Comment - Get All With Deleted, fetches all chat comments including the deleted ones from the server. It comprises the following elements:\n\n1. \"name\": This is the name of the endpoint that's used to describe its purpose. For this endpoint, the name is \"Chat - Comment - Get All With Deleted\", implying its function to retrieve all chat comments, including those deleted.\n\n2. \"request\": This object consists of the specifications for the HTTP request that's made to the endpoint. \n\n   \ti. \"auth\": This object signifies an authorization method is used for the endpoint, the \"type\" indicates it's a bearer token authentication. \n\n   \tii. \"bearer\": This array holds an object containing details about the bearer token used for authentication. The \"key\" is the identifier for the token found in the request header. The \"type\" field specifies the data type of the token, here it is of \"string\" type. The \"value\", is the actual token value; \"BearerToken\" is just a placeholder indicating where the token should go.\n\n   \tiii. \"method\": This field specifies the HTTP method associated with the request. The value \"GET\" implies data is being fetched from the server.\n\n   \tiv. \"url\": This is the URL of the endpoint where the request is being sent. It is formatted as follows: \n\"localhost:3000/api/chat/comment/all?threadId=threadId&accountId=accountId&sessionId=sessionId&deleted=1\". The parameters after \"?\" are called query parameters and are used to filter the results. Here, \"threadId\", \"accountId\", \"sessionId\" are used to specify which thread's, account's, session's chat comments you want to retrieve, while \"deleted=1\" indicates also to include deleted comments.\n\n   \tv. \"headers\": This is an empty array, which signifies no additional HTTP headers are included in the request.\n\nPlease replace \"BearerToken\", \"threadId\", \"accountId\", \"sessionId\" with actual values before making a request."
      security:
        - bearerAuth: []
      parameters:
        - name: threadId
          in: query
          schema:
            type: string
          example: threadId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: deleted
          in: query
          schema:
            type: integer
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/chat/message/create:
    post:
      tags:
        - ChatMessage
      summary: Chat - Message - Create
      description: |-
        This endpoint, named "Chat - Message - Create", is a method to create a new chat message on the server. 

        It uses the 'POST' method, aiming at the URL "http://localhost:3000/api/chat/message/create". The authentication type required for this endpoint is "bearer". We use the BearerToken as the authentication token provided under "auth" property with key "token".

        The body of the request contains raw JSON data with the following fields:

        1. "messageText": This should contain the text of the chat message being sent. Type for this field is a string.
           
        2. "messagePriority": This is to mark the priority of the message. It's a string where "0" could perhaps denote a standard message.
           
        3. "fromAccountId": This refers to the account id from which the message is originating. It should be a string presenting an accountId.
           
        4. "toAccountId": This is the account id to which the message should be sent. A string is expected here as well.
           
        5. "threadId": This could be used for threading or grouping messages. The current message will belong to this thread. It's expected to be represented as a string.
           
        6. "replyToId": If the current message is a reply to any other message, that message's id should be specified here. This field should be a string.
           
        7. "accountId": This could denote the user who is currently logged in and performing the action. The representation of this field is a string.
           
        8. "sessionId": It may be used to maintain the session of the user who is making the request. The value here is expected to be a string.

        All these fields are marked as strings wrapped in JSON format, according to "options -> raw -> language". This endpoint doesn't require any specific headers to be set.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                messageText: Hello, this is a message!
                messagePriority: '0'
                fromAccountId: fromAccountId
                toAccountId: toAccountId
                threadId: threadId
                replyToId: replyToId
                accountId: accountId
                sessionId: sessionId
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/chat/message/update:
    put:
      tags:
        - ChatMessage
      summary: Chat - Message - Update
      description: |-
        This endpoint, named "Chat - Message - Update", is used to update an existing message in the chat. Details of this endpoint are:

        1. Authentication: It uses 'bearer' authentication, which requires a token. This token is a string and should be passed in the 'BearerToken' field.

        2. Request Method: PUT is the HTTP method used. PUT is used to update an existing resource.

        3. URL: The URL where this request will be sent is 'http://localhost:3000/api/chat/message/update'. It is the location of the server that will process the request.

        4. Headers: There are no additional headers required in this request.

        5. Request Body: The body of the request contains the data to be updated and it should be in 'raw' mode. The data should be provided as a JSON object with the following properties:

            - messageId : The unique identifier of the message to be updated.
            - messageText : The updated text for the message.
            - messagePriority : The new priority of the message. This is represented as a string, such as "2".
            - threadId : The unique identifier of the chat thread to which the message belongs.
            - accountId : The unique identifier of the account initiating the update.
            - sessionId : The unique identifier of the user session in which the update is being made.

        The format of the request body is JSON, as specified under the 'options' section of the request body.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                messageId: messageId
                messageText: Updated message text
                messagePriority: '2'
                threadId: threadId
                accountId: accountId
                sessionId: sessionId
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/chat/message/delete:
    post:
      tags:
        - ChatMessage
      summary: Chat - Message - Delete
      description: |-
        This API endpoint is called "Chat - Message - Delete". It facilitates the deletion of a specific chat message from a thread. Below are the detailed descriptions of each data:

        1. **Name**: The name of the endpoint, which signifies its purpose. Here, "Chat - Message - Delete" suggests that it is used for deleting a chat message.

        2. **Request**: This contains all the information required to make an API call. 

           - **Auth**: The "Auth" field specifies the type of authentication used. It has a "type" sub-field that denotes the kind of authorization, which in this case is a "Bearer" token authorization. The "bearer" sub-field is an array that holds the token information. Each array element has a "key", a "value", and a "type". The "key" is "token", the "value" is "BearerToken", which should be replaced with the actual bearer token for authentication, and the "type" is "string", indicating the data type of the token.

           - **Method**: The HTTP method used for sending the request. Here, the method is "POST", denoting that it is requesting to create or update the resources.

           - **URL**: This is the address to which the request is to be sent. In this case, the request will be sent to "http://localhost:3000/api/chat/message/delete".
           
           - **Headers**: An array for specifying HTTP headers to send with the request. It is empty here, which means no additional headers are required.
           
           - **Body**: This contains the actual content or data to send in the request.
           
             - **Mode**: The setting that defines how to interpret the body of the request. In this case, the mode is "raw", denoting that raw data is sent in the request.

             - **Raw**: It represents the actual data to be sent in the body of the request which is in the raw JSON format. It includes "messageId", "threadId", "accountId", and "sessionId". These are identifiers for the message to be deleted, the thread where the message resides, the account that owns the message, and the active session, respectively.

             - **Options**: It is used to specify any additional options. For instance, the "raw" option specifies that the language of the body content is JSON.

        Note: All the string placeholders in this data should be replaced with actual values when making a request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                messageId: messageId
                threadId: threadId
                accountId: accountId
                sessionId: sessionId
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/chat/message/get:
    get:
      tags:
        - ChatMessage
      summary: Chat - Message - Get
      description: |-
        This API endpoint is called "Chat - Message - Get". It retrieves a specific chat message from the server. Here's a detailed description of each data included in the endpoint:

        1. "**name**": This represents the name of the API endpoint, in this case - "Chat - Message - Get".

        2. "**request**": This contains all the details related to the API request to be made.

        3. "**auth**": This object is used for providing authorization details that are sent with the request.
          - "**auth.type**": It indicates the type of authorization used for the radio request. In this case, it is set to "bearer".
          - "**auth.bearer**": This is an array containing information about the bearer token.
            - "**auth.bearer[0].key**": The key for the bearer token, here it is "token".
            - "**auth.bearer[0].value**": The value of the bearer token that you have generated.
            - "**auth.bearer[0].type**": The datatype of the bearer token, in this case, it's a string.

        4. "**method**": This is the HTTP method used for the request. For this API endpoint, the GET method is being used. This means it is intended to retrieve data from the server.

        5. "**url**": This represents the URL endpoint where the request is sent. It involves server address, API path, and query parameters. In this case, these parameters include:
          - "**messageId**": The unique identifier of the message.
          - "**threadId**": The unique identifier for the thread in which the message is located.
          - "**accountId**": The unique identifier associated with the user account. 
          - "**sessionId**": The unique identifier representing the session.

        6. "**headers**": This is a list containing any headers that should be included with the request. In this API endpoint, there are no additional headers set.
      security:
        - bearerAuth: []
      parameters:
        - name: messageId
          in: query
          schema:
            type: string
          example: messageId
        - name: threadId
          in: query
          schema:
            type: string
          example: threadId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/chat/message/all:
    get:
      tags:
        - ChatMessage
      summary: Chat - Message - Get All With Deleted
      description: |-
        This API endpoint is named `Chat - Message - Get All With Deleted`. It is designed for retrieving all chat messages in a given thread, including those messages that have been deleted.

        1. `Auth`: This section describes the type of authorization used by this endpoint i.e., Bearer Authentication. This type of authorization validates requests based on the bearer token included in the header. A bearer token must be provided, the key should be `token`, and the value must be the assigned `BearerToken` for the current session.

        2. `Method`: The HTTP method used for this request is `GET`. This method is typically used for retrieving data from a server.

        3. `URL`: The URL where the endpoint is available is `http://localhost:3000/api/chat/message/all`. Note that some query parameters are required in the URL:

            - `threadId`: This parameter is expected to be replaced with the real ID of the thread of interest.
          
            - `accountId`: This represents the ID of an account or user. You need to replace this with the actual account ID.
          
            - `sessionId`: This represents the ID of a chat session. You must replace this with the valid session ID.
          
            - `deleted`: This query parameter is a flag which specifies whether to include deleted messages in the response or not. If it's set to `1`, deleted messages will be included.

        4. `Headers`: This field is currently empty, which means that there are no additional headers required for this request. In case of changes, new headers such as `Content-Type` or `Accept` may be needed in future.
      security:
        - bearerAuth: []
      parameters:
        - name: threadId
          in: query
          schema:
            type: string
          example: threadId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: deleted
          in: query
          schema:
            type: integer
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/chat/thread/create:
    post:
      tags:
        - ChatThread
      summary: Chat - Thread - Create Video
      description: |-
        This endpoint is labeled "Chat - Thread - Create Video." It's used to create a new chat thread for video comments using a POST request.

        1. `auth`: This indicates the type of authentication used for this endpoint. The auth type is "bearer", which usually involves a bearer token provided in the headers of the HTTP request for user identification. Its key is "token," which holds the value "BearerToken."

        2. `method`: It states the HTTP request method that we're using. In this case, "POST," which is generally used for sending data to the API server to create a new resource.

        3. `url`: This is the URL to where the API request is sent. This particular endpoint is "http://localhost:3000/api/chat/thread/create".

        4. `headers`: Headers allow the client and server to share additional information with the HTTP request or response. The request doesn't include any specific headers in this case. 

        5. `body`: This contains the data we're sending with our POST request. In this case, it's in the "raw" mode, meaning the data is sent as a string in JSON format. 

           Included in the request body are: 
            - `ownerId`: A string that refers to the account ID of the owner of this chat thread. 
            - `accountId`: A string that specifies the account ID attempting to create this chat thread.
            - `sessionId`: This could be a unique identifier for the specific session during which this chat thread is created.
            - `threadName`: A string that provides the name for this chat thread. For this endpoint, it seems to be specified as "Video Comments."
            - `threadType`: This indicates the type of thread being created. In this case, it's a "video".
            - `threadTypeId`: A string that refers to the ID of the video associated with this thread.

        6. `options`: This contains extra payload options for the "raw" request body. They're set to indicate the language of the request body is JSON. Note this doesn't affect the API request itself, but can make it easier for people to understand the data if they're reading it.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                ownerId: accountId
                accountId: accountId
                sessionId: sessionId
                threadName: Video Comments
                threadType: video
                threadTypeId: videoId
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/chat/thread/update:
    put:
      tags:
        - ChatThread
      summary: Chat - Thread - Update
      description: |-
        This endpoint is named "Chat - Thread - Update". It uses the HTTP method PUT and is used to update the information in a chat thread.

        The endpoint requires bearer authentication, specified through a token. The "auth" field requires an object with the "type" field as "bearer". Under the "bearer" array, a key-value pair is given, with the "key" as "token" and its relevant value being "BearerToken".

        The request is made to the URL: "http://localhost:3000/api/chat/thread/update".

        The request carries with it headers. One such header is "Client-UUID", with its value being "ClientUUID". This UUID represents a universal identifier for the client using this API endpoint.

        The request also includes a body with the "mode" key set to "raw", indicating that the data being sent in raw format(i.e., just a sequence of characters). The raw data being sent in the body is in JSON format {"threadId":"threadId","accountId": "accountId","sessionId": "sessionId","threadName": "General Discussion 3"} which includes:

        - "threadId": The unique identifier of the thread that you want to update
        - "accountId": The unique identifier of the user account making the update
        - "sessionId": The unique identifier of the session within which the update is made
        - "threadName": The new name that you want to assign to the thread

        The "options" key in the body contains an object, with "raw" key containing another object {"language": "json"} which is specifying the format of data that we have in the body, which in this case is JSON.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                threadId: threadId
                accountId: accountId
                sessionId: sessionId
                threadName: General Discussion 3
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/chat/thread/get:
    get:
      tags:
        - ChatThread
      summary: Chat - Thread - Get By Owner With Deleted
      description: |-
        This endpoint, called "Chat - Thread - Get By Owner With Deleted," is designed to allow you retrieve chat threads from the database. It specifically fetches chat threads that are owned by a specific user and considers both active and deleted threads. 

        Here's a breakdown of the components:

        1. **name**: This is the title or name of the endpoint, which describes what the endpoint does. In this case, "Chat - Thread - Get By Owner With Deleted" suggests that this endpoint retrieves chat threads (both deleted and active) owned by a user.

        2. **request**: This details the actual request that will be made to the endpoint.

        3. **auth**: This section contains authentication details required to get access to the endpoint. It's using Bearer authentication, which expects a token to be provided. 

           - **type**: It indicates the type of authorization being used which is "bearer" in this case.
           
           - **bearer**: This is an array containing a single object that describes the token needed for authorization:
             - **key**: This field indicates that a "token" is required.
             - **value**: It shows the placeholder for the value of the bearer token.
             - **type**: The data type of the "token", which is a "string".

        4. **method**: The type of HTTP request that is being made. In this case, it's a "GET" request, meaning it retrieves data from the server.

        5. **url**: This is the actual URL where the request will be sent. It includes three query parameters: threadType, threadTypeId, and deleted, which respectively represent the type of thread, ID related with the thread, and the status of deletion.

        6. **headers**: The headers field is currently empty and disabled. When enabled, it can contain additional information which will be sent with the HTTP request. For now, no additional information is being passed.

        7. **body**: The body carries essential data needed in processing the request. However, for a GET request, no additional body data is required, hence it remains empty.

        Remember to replace the "BearerToken" with a valid token while making an actual API call. Also, replace the query parameters in the URL with valid threadType, threadTypeId and deleted status to get the desired result.
      security:
        - bearerAuth: []
      parameters:
        - name: threadType
          in: query
          schema:
            type: string
          example: account
        - name: threadTypeId
          in: query
          schema:
            type: string
          example: accountId
        - name: deleted
          in: query
          schema:
            type: integer
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/chat/thread/all:
    get:
      tags:
        - ChatThread
      summary: Chat - Thread - Get All By Thread With Deleted
      description: |-
        This endpoint, "Chat - Thread - Get All By Thread With Deleted", allows you to retrieve all threads, including deleted ones, associated with a specific chat. There are different components of the data in this endpoint.

        1. "auth": This represents the authentication section. It uses bearer token authentication. 
           - "type" denotes the type of the authorization, here it is "bearer".
           - "bearer" denotes the array containing authentication token, with three properties: "key", "value", and "type". 
           - "key" is "token".
           - "value" - This should hold the value of the bearer token required for authorization.
           - "type" indicates the data type of token, which is "string".

        2. "method": This property denotes the HTTP method used for the request. Here, "GET" method is used which is typically for retrieving data.

        3. "url": This is the URL for the API endpoint. It points to the specific location in your application where the request should go. Here, it's "http://localhost:3000/api/chat/thread/all/?threadId=threadId&deleted=1". The URL contains two query parameters "threadId" and "deleted". 
           - "threadId" is parameter used to specify the particular Thread you're looking to access.
           - "deleted" parameter is set to 1, indicating that deleted messages are also to be fetched.

        4. "headers": Contains an array of objects with information to be sent as headers with the request. Currently, it is empty and disabled. 

        5. "body": Contains the format and content of the body of the request. In this endpoint, it's indicated as 'raw' mode, which means you can send whatever data you wish. But here the raw data is empty string denoting no additional data is sent with this request. 

        Please remember to replace 'BearerToken' and 'threadId' with your actual bearer token and thread ID while using it.
      security:
        - bearerAuth: []
      parameters:
        - name: threadId
          in: query
          schema:
            type: string
          example: threadId
        - name: deleted
          in: query
          schema:
            type: integer
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/chat/thread/delete:
    post:
      tags:
        - ChatThread
      summary: Chat - Thread - Delete
      description: |-
        Endpoint Name: Chat - Thread - Delete

        1. Authentication: This API request requires a bearer token for authentication. The token should be a session ID which is to be provided as a string data type.

        2. Method: This API uses a POST method. POST is used to send data to the server to create/update a resource.

        3. URL: This is the uniform resource locator (URL) to which the API request is sent. In this case, it is "http://localhost:3000/api/chat/thread/delete". It suggests that this API endpoint is used to delete a chat thread.

        4. Headers: In this request, there aren't any additional headers required as suggested by the empty key-value pair. The "disabled" field set as true signifies that this property is not currently in use.

        5. Body: This contains the information that needs to be sent to the server. The mode is set as "raw" which suggests the format of the body content is in raw JSON format. The raw JSON is a stringified object that needs three properties to perform the operation.

            - sessionId: The session ID for which the chat thread will be deleted. This should be a string that corresponds to a valid session in your application.
            
            - accountId: The account ID who is a part of this thread. This ID helps ensure that the requester has the authority to delete the thread.
            
            - threadId: The specific ID of the chat thread that is to be deleted. This should correspond to a valid thread in your application.

        Please ensure your request adheres to this specification for successful operation.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"threadId\":\"threadId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/ad/create:
    post:
      tags:
        - ConnectAd
      summary: Connect - Ads - Create
      description: |-
        This is a 'POST' request named "Connect - Ads - Create", used for creating advertisement data. 

        1. **Authentication:** Uses 'Bearer' token authentication. You have to provide a 'token' in the bearer authorization field. The value of this token is 'BearerToken' string.

        2. **Headers:** There's a header field provided in the request, but it's disabled by default, so it won't have any effect on your request.

        3. **Request Body:** The needed data with their types and typical values are:

            - **sessionId (String):** The ID of the session. 
            - **accountId (String):** The ID of the account creating the advertisement.
            - **name (String):** The name of the advertisement e.g., 'MyNikeAds'.
            - **description (String):** A brief description about the advertisement.
            - **tags (String):** Tags associated with the advertisement separated by commas.
            - **profilePhotoUrl (String):** The URL of the profile picture for the advertisement.
            - **coverPhotoUrl (String):** The URL of the cover picture for the advertisement.
            - **minimumTipAmount (Number):** The minimum tip amount for the advertisement.
            - **unlockAmount (Number):** The amount to unlock the advertisement.
            - **category (String):** The category for the advertisement.
            - **subCategory (String):** The subcategory of the advertisement.
            - **searchType (String):** The type of search to be made.
            - **isEnabled (Boolean):** Indicating if the advertisement is enabled or not.
            - **isAdsPrivate (Boolean):** Indicating if the advertisement is private or not.
            - **isTournamentOnly (Boolean):** True if the advertisement is only for tournaments else false.
            - **isAdsDefault (Boolean):** If true, makes this advertisement the default one.
            - **isPreLiveConnectAds (Boolean):** Check if this is a pre-live ad.
            - **isPostLiveConnectAds (Boolean):** Check if this is a post-live ad.
            - **breakPreLiveConnectUrl (String):** URL for the pre-live break media.
            - **breakLivePauseConnectUrl (String):** URL for the paused-live break media.
            - **breakPostLiveConnectUrl (String):** URL for the post-live break media.

        The request body is JSON formatted. Please make sure you input the correct types against each key. 

        Finally, you can send the request to the provided URL: 'http://localhost:3000/api/connect/ad/create'.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: MyNikeAds
                description: This ad is my second ad
                tags: second,ad
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                unlockAmount: 1
                category: General
                subCategory: Specific
                searchType: Game
                isEnabled: true
                isAdsPrivate: true
                isTournamentOnly: false
                isAdsDefault: true
                isPreLiveConnectAds: true
                isPostLiveConnectAds: true
                breakPreLiveConnectUrl: https://example.com/break-pre-live.mp4
                breakLivePauseConnectUrl: https://example.com/break-paused-live.mp4
                breakPostLiveConnectUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/ad/update:
    put:
      tags:
        - ConnectAd
      summary: Connect - Ads - Update
      description: |
        1. "name": This is the name of the API endpoint. For this particular endpoint, the name is "Connect - Ads - Update". This indicates that the endpoint is used to update ads within a connect feature.
          
        2. "request": This specifies the details needed to make the HTTP request. 

        3. "auth": This indicates the type of authorization used to access this endpoint. This endpoint uses Bearer Token for authorization.

        4. "bearer": This contains the bearer token details. The "key" is "token", the "value" is "BearerToken", and the "type" is "string".

        5. "method": This denotes the HTTP method to be used for the request. The endpoint uses the PUT method, used for updating the resource.

        6. "url": This is where the request will be sent. The API link is "http://localhost:3000/api/connect/ad/update".

        7. "headers": This contains additional parameters sent with the request. There's one header where the "key" is "Client-UUID", the "value" is "ClientUUID", and the "type" is "default".

        8. "body": This is the data to be sent as the request body. The request body should be sent in the raw format.

        9. "mode": This indicates the format of the body data. The "mode" is "raw".

        10. "raw": This contains the data to be sent for an update. The data to be sent here includes adId, sessionId, accountId, name, description, tags, profilePhotoUrl, coverPhotoUrl, minimumTipAmount, unlockAmount, category, subCategory, searchType, isEnabled, isAdsPrivate, isTournamentOnly, isAdsDefault, isPreLiveConnectAds, isPostLiveConnectAds, breakPreLiveConnectUrl, breakLivePauseConnectUrl, and breakPostLiveConnectUrl. All these parameters are contained in a JSON object.

        11. "options": This indicates the options for processing the body data. In this case, only the "raw" option is specified and the "language" is "json". This means the incoming data is expected to be a raw JSON. 

        Please note: All bool parameters (isEnabled, isAdsPrivate, etc.) accept true or false. URL parameters (profilePhotoUrl, etc.) accept valid URL strings. Other parameters accept mostly string values. Numeric parameters like minimumTipAmount and unlockAmount accept integer values.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                adId: adId
                sessionId: sessionId
                accountId: accountId
                name: MyNikeAds
                description: This ad is my second ad
                tags: second,ad
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                unlockAmount: 100
                category: General
                subCategory: Specific
                searchType: Game
                isEnabled: true
                isAdsPrivate: true
                isTournamentOnly: false
                isAdsDefault: true
                isPreLiveConnectAds: true
                isPostLiveConnectAds: true
                breakPreLiveConnectUrl: https://example.com/break-pre-live.mp4
                breakLivePauseConnectUrl: https://example.com/break-paused-live.mp4
                breakPostLiveConnectUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/ad/get:
    get:
      tags:
        - ConnectAd
      summary: Connect - Ads - Get
      description: |-
        This endpoint is named "Connect - Ads - Get". This is a call to fetch specific advertisement data based upon the adId provided. Here is a more detailed explanation of its components:

        1. `name`: The name of the endpoint. It is denoted as "Connect - Ads - Get". It indicates the operation of connecting and fetching data related to ads.

        2. `request`: This indicates an HTTP request that is to be sent. 

        3. `auth`: The authentication type used for this request. It is using 'bearer' authentication which means that a bearer token will be used to validate the request. The `token` key is the actual location where the bearer token must be inserted. The token value should be of string type.

        4. `method`: This is the HTTP method type. The "GET" method is used which means this request fetches data from the server at the specified resource.

        5. `url`: This is the URL where the request will be sent. The base URL is `http://localhost:3000/api/connect/ad/get/` and it should be appended by `?adId=` followed by the actual id of the ad you want to retrieve.

        6. `headers`: This section is for specifying additional HTTP request options. No key-value pair is provided in this request so, by default, no additional headers will be included in the request.

        7. `body`: This is the part of HTTP request where additional data is sent along with the request. In this case, `mode` is set to 'raw' but no actual data is being sent as the `raw` field is empty. So, 'raw' body mode will not affect this request.
      security:
        - bearerAuth: []
      parameters:
        - name: adId
          in: query
          schema:
            type: string
          example: adId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/ad/all:
    get:
      tags:
        - ConnectAd
      summary: Connect - Ads - Get All
      description: |-
        This endpoint, named "Connect - Ads - Get All", is designed to fetch all ads associated with a specified account. 

        Below are the details of the endpoint parameters:

        - The `name` field signifies the title of the endpoint, here it is "Connect - Ads - Get All", indicating that this endpoint is used to retrieve all the ads from a destination (typically a server or cloud).

        - The `request` field contains the characteristics of the API request. This request type is a "GET" method as indicated in the `method` field. A GET request is used to retrieve data from a server. 

        In the `auth` subfield:  

        - `type` indicates which type of authorization is used. Here it's "bearer", which represents Bearer Authentication, often used for authentication requests with tokens.
          
        - Under `bearer`:
             - `key`: Refers to what kind of authorization detail is required. In this case, it is a "token".
             - `value`: Displays the value of the authorization detail required; place your Bearer token here (represented by "BearerToken").
             - `type`: Defines the data type of the `value`, it's a "string" in this case.  

        - The `url` field provides the endpoint for the API request, here it is "http://localhost:3000/api/connect/ad/all/?accountId=accountId". This is the link to your local server or cloud where the request will fetch all the ads based on the 'accountId' provided.

        - The `headers` subfield contains an array of objects where you can specify additional HTTP headers. In this case, the input is blank and set to "default" with the disabled status set to true. It indicates that the header is not participating in the current API request.

        - The `body` field is used for data that needs to be sent to the server. Since this is a GET request, there is typically no need to send a body. Here, `mode` is set to "raw", indicating that unprocessed data will be sent, however its `raw` value is currently set to an empty string ("").
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/ad/delete:
    post:
      tags:
        - ConnectAd
      summary: Connect - Ads - Delete
      description: |-
        This endpoint is named "Connect - Ads - Delete". It is designed to delete specific advertisements using a specific URL and requires a bearer authentication type. Here are detailed descriptions of each of its data components:

        1. `name`: This parameter determines the endpoint's name. In this case, the name is "Connect - Ads - Delete". This name indicates that the action supported by this endpoint is the deletion of ads.

        2. `request`: This object envelops all the necessary information required to make a valid request to the endpoint.

        3. `auth`: This is a security configuration that enforces the type of authentication required by this endpoint. The current authorization type is "bearer". It necessitates you to provide a token in order to access the endpoint.

           - `type`: Specifies the type of authentication. Value is "bearer".
           - `bearer`: This is an array that contains all the bearer token details:
                - `key`: Specifies the name of the token, which in this case is "token".
                - `value`: The actual placeholder for the token value. The current placeholder is "sessionId".
                - `type`: The type of value the key holds, which in this case is string.

        4. `method`: The HTTP method that this endpoint uses. It currently uses the "POST" method, implying that this endpoint is used to send data to be processed to the specified resource.

        5. `url`: This is the actual URL at which the endpoint resides. The current URL is "http://localhost:3000/api/connect/ad/delete".

        6. `headers`: This is an array that would typically hold any additional header elements required by the endpoint. Currently, there are no additional headers needed, and hence everything has been set to blank or disabled.

        7. `body`: This marks where the payload of the request should be defined.
           - `mode`: Relevantly indicates the format of the body payload. It's set to "raw", which means you can send anything in the body, but most often it is used to send JSON formatted string in unprocessed format.
           - `raw`: Contains the actual information payload that will be sent to the server. This needs to be a string. The included information are "sessionId", "accountId" and "adId".

        In summary, this endpoint deletes an ad by taking the adId from the user, and it authorizes using bearer tokens. The endpoint URL is "http://localhost:3000/api/connect/ad/delete", and it follows a POST HTTP method.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"adId\":\"adId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/comment/create:
    post:
      tags:
        - ConnectComment
      summary: Connect - Comment - Create
      description: |-
        "Connect - Comment - Create" API endpoint:

        This endpoint is given a name "Connect - Comment - Create". This suggests the API endpoint is used for creating a new comment in the connect section of the application.

        Authentication:

        The "auth" field defines the type of authorization required to access this API endpoint. Authentication is done through a "bearer" token that has a key-value format, with a key of "token" and a string value of the actual token.

        Request Type:

        The "method" field defines the HTTP method used for this API endpoint. In this case, the POST method is used which means that the client is sending data to the server to create a new resource.

        API URL:

        The "url" field explains the address where a request is being sent. For this endpoint, it is "http://localhost:3000/api/connect/comment/create". The 'localhost' suggests that the API is local to the server.

        Headers:

        In the "headers" array, it's specified that no additional headers are provided for the request. The default headers are disabled.

        Request Body:

        The API receives the request body in a "raw" format, meaning the body content is presented as a string. The language of the raw string content is JSON.

        The raw data contains information necessary to create a new comment, including:
        - User's session and account IDs.
        - Comment's name, description, tags, photo URL, and cover photo URL.
        - Minimum tip amount and unlock amount for the comment.
        - The category and subcategory of the comment.
        - Type of search associated with the comment.
        - Various state flags suggesting if the comment is enabled, private, part of a tournament only, default, has pre/post/live ads.
        - The URLs for pre-live, paused-live, and post-live breaks for the comment.

        Options:

        The "options" field indicates optional configurations for request body. It specifies that the raw data uses "json" language format.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: MyNikeComment
                description: This comment is my second comment
                tags: second,comment
                commentPhotoUrl: https://example.com/comment.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                unlockAmount: 1
                category: General
                subCategory: Specific
                searchType: Game
                isEnabled: true
                isCommentPrivate: true
                isTournamentOnly: false
                isCommentDefault: true
                isPreLiveConnectAds: true
                isPostLiveConnectAds: true
                breakPreLiveConnectUrl: https://example.com/break-pre-live.mp4
                breakLivePauseConnectUrl: https://example.com/break-paused-live.mp4
                breakPostLiveConnectUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/comment/update:
    put:
      tags:
        - ConnectComment
      summary: Connect - Comment - Update
      description: |-
        This endpoint is named "Connect - Comment - Update". It uses the PUT method, suggesting that it's used for updating existing records. The URL for this endpoint is "http://localhost:3000/api/connect/comment/update". 

        It requires Bearer token authentication, where the token needs to be provided as a string in the 'token' key.

        The 'Client-UUID' which is of default type needs to be provided in the headers. It uniquely identifies the client making the request.

        In the body of the request, the data needs to be in raw JSON format. Below is a description of each field that is expected in the request body:

        - `commentId`: The unique identifier of the comment that is being updated.
        - `sessionId`: The unique identifier of the session.
        - `accountId`: The unique identifier of the account.
        - `name`: The name of the comment.
        - `description`: A descriptive text about the comment.
        - `tags`: Related tags for the comment separated by commas.
        - `commentPhotoUrl`: The URL of the photo related to the comment.
        - `coverPhotoUrl`: The URL of the cover photo.
        - `minimumTipAmount`: The minimum amount for tipping.
        - `unlockAmount`: The amount required to unlock.
        - `category`: The category of the comment.
        - `subCategory`: A more specific category under the main category.
        - `searchType`: The type of game related to the comment.
        - `isEnabled`: A boolean field to indicate if the comment is enabled or not.
        - `isCommentPrivate`: A boolean field to indicate if the comment is private or not.
        - `isTournamentOnly`: A boolean field to indicate if the comment is for tournaments only.
        - `isCommentDefault`: A boolean field to indicate if the comment is the default.
        - `isPreLiveConnectAds`: A boolean field to indicate if ads should be displayed before the live connect.
        - `isPostLiveConnectAds`: A boolean field to indicate if ads should be displayed after the live connect.
        - `breakPreLiveConnectUrl`: The URL where the break pre-live connect would be directed.
        - `breakLivePauseConnectUrl`: The URL where the paused live connect would be directed.
        - `breakPostLiveConnectUrl`: The URL where the break post-live connect would be directed.

        The language used for raw data in options is JSON.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                commentId: commentId
                sessionId: sessionId
                accountId: accountId
                name: MyNikeComment
                description: This comment is my second comment
                tags: second,comment
                commentPhotoUrl: https://example.com/comment.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                unlockAmount: 100
                category: General
                subCategory: Specific
                searchType: Game
                isEnabled: true
                isCommentPrivate: true
                isTournamentOnly: false
                isCommentDefault: true
                isPreLiveConnectAds: true
                isPostLiveConnectAds: true
                breakPreLiveConnectUrl: https://example.com/break-pre-live.mp4
                breakLivePauseConnectUrl: https://example.com/break-paused-live.mp4
                breakPostLiveConnectUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/comment/get:
    get:
      tags:
        - ConnectComment
      summary: Connect - Comment - Get
      description: |-
        This endpoint is labeled "Connect - Comment - Get". It provides a functionality to retrieve a comment from the connect API. 

        1. "auth": This is the authorization method required for the API. It uses a 'bearer token' for authorization. A bearer token is a type of access token that is sent as a part of the header in API requests to authenticate the user making the request. 
            - "type": Is "bearer", indicating the type of authorization method in use.
            - "bearer": This is an array containing bearer token information.
                - "key": Specifies "token" as the key.
                - "value": The value is expected to be the actual "BearerToken" to authenticate the request.
                - "type": Is "string", specifying that the value of the token will be a string.

        2. "method": The method to be used to request the particular endpoint. In this case, it is "GET", meaning the request will retrieve information from the API.

        3. "url": This is the address where the API is located. Here it is "http://localhost:3000/api/connect/comment/get/?commentId=commentId". It also includes a parameter "commentId", which allows users to specify the comment they want to retrieve information about.

        4. "headers": This field is used to send additional information in the request header. In this endpoint, it is set to empty (both key and value) and is also disabled.

        5. "body": This section contains any data that needs to be sent with a request. Here, the "mode" is set to "raw", indicating that the body content should be taken 'as is'. In this endpoint, no body data (raw content) should be sent as it's a GET request and so, "raw" is set to an empty string.
      security:
        - bearerAuth: []
      parameters:
        - name: commentId
          in: query
          schema:
            type: string
          example: commentId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/comment/all:
    get:
      tags:
        - ConnectComment
      summary: Connect - Comment - Get All
      description: |-
        This endpoint is named "Connect - Comment - Get All". It is designed to retrieve all comments associated with a specified account ID from a Connect application. The request sent to this endpoint involves several data components:

        - "auth": This required field specifies the authentication method for accessing this endpoint. For this case, it uses bearer authentication, where the credentials are sent in the HTTP header. The bearer token is expected to be a string data type. A valid token is required to access this resource.

        - "method": This endpoint utilizes the GET method. It's primarily designed to retrieve data from a server.

        - "url": This is where the server needs to send the request. The URL is 'http://localhost:3000/api/connect/comment/all/?accountId=accountId'. It is designed to run on the local server on port 3000. The path '/api/connect/comment/all' indicates it's accessing the Connect application's comment feature to get all comments. It requires an 'accountId' query parameter representing the user's account ID.

        - "headers": Headers can be used to pass additional information to/from a server. In this case, the field is left empty and disabled, indicating no extra header information is transmitted with the request.

        - "body": Defines the data to be sent to the server. The 'mode' signifies how the information is sent, 'raw' means the information is sent unformatted. However, in this case, the 'raw' data is empty, indicating this GET request does not send any data in the body since it's only retrieving comments.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/comment/delete:
    post:
      tags:
        - ConnectComment
      summary: Connect - Comment - Delete
      description: |
        This endpoint is called "Connect - Comment - Delete". 

        1. **name**: This field denotes the name of the endpoint. It indicates that this API endpoint is used to manage (delete) comments within a connect feature set.

        2. **request**: This field contains all the necessary components to make a HTTP request such as the authentication process, the HTTP method, the URL of the request, headers (if any), and the body of the request.

        3. **auth**: This is part of the request that deals with the authentication process to access the endpoint. Here, it uses Bearer Token authentication. This type of authentication is an HTTP authentication scheme that involves security tokens called Bearer Tokens.
            - **type**: The type of token required is called a "bearer".
            - **bearer**: An array containing an object that holds information about the token.
            - **key**: The name of the token which is "token".
            - **value**: The value of the token is "sessionId", which indicates that a session id will be used for the authentication process.
            - **type**: Indicates that the field requires a string value.

        4. **method**: This specifies the HTTP method for the request, which is 'POST' in this case. It is used here because we are deleting information on the server. 

        5. **url**: This the URL where the server will receive the HTTP request. Here, the request is sent to a local server 'http://localhost:3000/api/connect/comment/delete'.

        6. **headers**: This is an array that contains an object which could potentially hold information to be sent as part of the request header. Though in this case, there is no key-value pair provided and has been disabled.

        7. **body**: This is the part where additional information or data that is needed to complete the HTTP request is provided.
            - **mode**: Tells the mode of the data/input sent with the request. Here it is 'raw', which indicates that the data/input is not processed and is sent as is.
            - **raw**: This is actual data being sent with the request. For this endpoint, the raw data includes a JSON object containing a "sessionId", "accountId", and a "commentId" all of which have respective values. The values need to be replaced with a valid session id, account id, and comment id respectively before sending the request.
          
        Note: It is very important that you have the necessary authorization and follow the description precisely to successfully make a request to this endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"commentId\":\"commentId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/contact/create:
    post:
      tags:
        - ConnectContact
      summary: Connect - Contact - Create
      description: |-
        This API endpoint, `Connect - Contact - Create`, creates a new contact using the `POST` method. The URL of the endpoint is `http://localhost:3000/api/connect/contact/create`.

        The `auth` object specifies the type of authentication: Bearer Token. The `token` key needs to hold the value of the Bearer Token. This should be of `string` data type.

        In `request headers`, there's a default key-value pair which is disabled. You can add necessary headers if needed.

        The `body` of the request contains raw JSON data, specified by the `mode`. It contains several key-value pairs:

        - `sessionId`: This should hold the session id.
        - `accountId`: This should hold the account id.
        - `name`: This represents the name of the contact we are trying to create.
        - `description`: A short description about the contact.
        - `tags`: Labels or keywords related to the contact.
        - `profilePhotoUrl`: The URL of the profile photo.
        - `coverPhotoUrl`: The URL of the cover photo.
        - `minimumTipAmount`: The minimum amount of tip that can be given to the contact.
        - `unlockAmount`: The amount required to unlock something regarding the contact.
        - `category`: The general category of the contact.
        - `subCategory`: The more specific category inside the general category.
        - `searchType`: The type of search associated with the contact.
        - `isEnabled`: A boolean indicating whether the contact is enabled.
        - `isContactPrivate`: A boolean indicating whether the contact is private.
        - `isTournamentOnly`: A boolean indicating whether the contact is only for tournaments.
        - `isContactDefault`: A boolean indicating whether the contact is set as default.
        - `isPreLiveConnectAds`: A boolean indicating whether pre-live connect ads are enabled.
        - `isPostLiveConnectAds`: A boolean indicating whether post-live connect ads are enabled.
        - `breakPreLiveConnectUrl`: The URL to the pre-live connect ad break content.
        - `breakLivePauseConnectUrl`: The URL to the paused-live connect ad break content.
        - `breakPostLiveConnectUrl`: The URL to the post-live connect ad break content.

        You should format the body as JSON before sending the request, as indicated by the `language` option inside the `options` object of the `body`.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: MyNikeContact
                description: This contact is my second contact
                tags: second,contact
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                unlockAmount: 1
                category: General
                subCategory: Specific
                searchType: Game
                isEnabled: true
                isContactPrivate: true
                isTournamentOnly: false
                isContactDefault: true
                isPreLiveConnectAds: true
                isPostLiveConnectAds: true
                breakPreLiveConnectUrl: https://example.com/break-pre-live.mp4
                breakLivePauseConnectUrl: https://example.com/break-paused-live.mp4
                breakPostLiveConnectUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/contact/update:
    put:
      tags:
        - ConnectContact
      summary: Connect - Contact - Update
      description: |-
        1. **name**: The name of the function or endpoint. Here, it represents an operation to update contact in the 'Connect' functionality.

        2. **request**: This object contains data relevant to making HTTP requests.

        3. **auth**: The authorization method to be used. Here, it is 'bearer' token-based auth.

           - **type**: The type of authorization used. In this case, it is 'bearer'.
           - **bearer**: An array that includes the token details to be sent along with an API request.
             - **key**: The label of the auth token that we are sending. Here it is "token".
             - **value**: This is the actual auth token which is called 'BearerToken'.
             - **type**: Specifies the data type of the value, here it is 'string'.

        4. **method**: The HTTP method to be used for the request. Here it is PUT, which means we're updating existing data.

        5. **url**: The URL to hit for the API endpoint. The given endpoint is for updating contact in the 'Connect' functionality.

        6. **headers**: An array that includes additional data to be sent along with an API request.
           - **key**: The label of the header that we are sending. Here it is "Client-UUID".
           - **value**: This is the actual header value which is 'ClientUUID'.
           - **type**: Specifies how the header is to be utilized, here it is 'default'.

        7. **body**: This provides data that is sent as the body of the request.
           - **mode**: Specifies how the body data is presented, here it is 'raw'.
           - **raw**: The raw format of the data to be sent. It is in JSON format and contains various keys describing the contact's details like 'contactId', 'sessionId', 'accountId'.
           - **options**: This provides additional settings for how the body data should be handled.
             
             Following are some of the essential parameters in the body you should be mindful of:
             
             - **contactId**: Uniquely identifies a contact to be updated.
             - **sessionId**: Represents the unique Id for current session.
             - **accountId**: The unique identifier of the user making the request.
             - **name**: The name of the contact.
             - **description**: Gives a brief about the contact.
             - **tags**: Comma-separated values to categorize contacts. 
             - **profilePhotoUrl**: URL of the profile image of the contact.
             - **coverPhotoUrl**: URL of the cover image of the contact.
             - **minimumTipAmount**: Smallest amount a user can tip the contact.
             - **unlockAmount**: The amount required to unlock the contact.
             - **category**: The general category under which the contact falls.
             - **subCategory**: More specific category of the contact.
             - **searchType**: Specifies the search type for the contact.
             - **isContactPrivate**: A boolean indicating if the contact is private or not.
             - **isTournamentOnly**: A boolean indicating if the contact is only for tournaments.
             - **isEnabled**: A boolean indicating if the contact is enabled or not.
             - **isContactDefault**: A boolean indicating if the contact is a default contact or not.
             - **isPreLiveConnectAds**: A boolean indicating if pre-live connect ads are enabled for this contact.
             - **breakPreLiveConnectUrl**: URL of the break pre-live connect video.
             - **breakLivePauseConnectUrl**: URL of the break live pause connect video.
             - **breakPostLiveConnectUrl**: URL of the break post-live connect video.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                contactId: contactId
                sessionId: sessionId
                accountId: accountId
                name: MyNikeContact
                description: This contact is my second contact
                tags: second,contact
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                unlockAmount: 100
                category: General
                subCategory: Specific
                searchType: Game
                isEnabled: true
                isContactPrivate: true
                isTournamentOnly: false
                isContactDefault: true
                isPreLiveConnectAds: true
                isPostLiveConnectAds: true
                breakPreLiveConnectUrl: https://example.com/break-pre-live.mp4
                breakLivePauseConnectUrl: https://example.com/break-paused-live.mp4
                breakPostLiveConnectUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/contact/get:
    get:
      tags:
        - ConnectContact
      summary: Connect - Contact - Get
      description: |-
        1. "name": This contains the descriptive name of the API request. Here, the name is "Connect - Contact - Get" which signifies the functionality of this specific endpoint. This endpoint is used to establish a connection, specifically targeting the 'contact' part of an application/database to get information related to it.

        2. "request": This object encapsulates all the details of the API request.

            a. "auth": This represents the type of authorization used for transactions. It is an object that specifies the authorization type and the required credentials. Here, bearer authentication is used where the type is marked as "bearer".
            
                i. "type": This field describes the type of authorization being used. In this case, it is 'bearer'.
                
                ii. "bearer": This is an array of objects where each object represents an authorization parameter. Here, there's only one authorization parameter.
                
                    - "key": It is the name of the authorization parameter, in this case, it's 'token'.
                    
                    - "value": It represents the value of the authorization parameter, in this case, it indicates 'BearerToken'.
                    
                    - "type": This is the type of the authorization parameter, and here, it is a string.
            
            b. "method": This parameter refers to the HTTP method used for the request. Here the method is 'GET', which is typically used to retrieve data.
            
            c. "url": This is the link to the resource you are trying to access. Here, 'http://localhost:3000/api/connect/contact/get/?contactId=contactId' is the url.
            
            d. "headers": This is an array used for passing additional information to the server. There is one header object that doesn't contain any data and it is disabled by default.
            
                i. "key": The header’s name/key. In this case, it's empty.
                
                ii. "value": The value assigned to the specified key. This field is also empty.
                
                iii. "type": Describes the type of header, with 'default' as a common example. Here, it is 'default'.
                
                iv. "disabled": A switch indicating the state of the header. If 'true', the header is not applied during API requests. Here it is set to 'true', indicating that this header is disabled.
            
            e. "body": This object contains details of what data to send in the API request.
            
                i. "mode": This parameter describes the format the body data is sent as. In this case, it is 'raw'.
                
                ii. "raw": This field is used to include raw input (when 'mode' is 'raw'). Currently, it is blank, indicating no raw data is included in the request.
      security:
        - bearerAuth: []
      parameters:
        - name: contactId
          in: query
          schema:
            type: string
          example: contactId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/contact/all:
    get:
      tags:
        - ConnectContact
      summary: Connect - Contact - Get All
      description: |-
        This endpoint `Connect - Contact - Get All` is a GET Request which retrieves all the contact information tied to the specified `accountId`. Below is the detailed description of each element in the endpoint:

        - `name`: The title of the endpoint. It's called "Connect - Contact - Get All", which suggests that we are retrieving all the contact details associated with an account in the Connect service.

        - `request`: This is the main part that defines what the request does.

          - `auth`: This section represents the type of authentication required for this endpoint. The "auth" stands for "authentication".
            
            - `type`: The type of the token used for the authentication. In this case, it is a "bearer" which is a method to send authentication data to the server.
            
            - `bearer`: This is an array that holds the authentication token details. The `key` attribute indicates how this token is referred in the headers - as 'token'. While the `value` attribute holds the variable 'BearerToken' which stores the actual token value. The `type` must always be a string.

          - `method`: This refers to the HTTP verb used for this request. Here, it's a "GET" request, meaning you are retrieving information from the server.

          - `url`: It contains the location to which the request is sent. `http://localhost:3000/api/connect/contact/all/?accountId=accountId` indicates that request is sending to the localhost on port 3000. The path `/api/connect/contact/all` indicates that we are accessing the 'all' operation in the 'contact' resource of the 'connect' service. The `accountId` is a query parameter that should hold the actual id of the account for which we want to fetch the contact information. 

          - `headers`: The headers that should be included in the HTTP request. In this case, there's a `key` and `value` pair which is set to empty by default and has been `disabled`. It means, we can disregard this from request headers as it has no impact on the current request

          - `body`: This is usually where you specify the content of your request. However, for this GET Request, the body has `mode` set to 'raw' and `raw` set to an empty string, meaning, it doesn't need to send any additional data in the request body.
          
        This endpoint will respond with all the contact information related to the provided `accountId`.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/contact/delete:
    post:
      tags:
        - ConnectContact
      summary: Connect - Contact - Delete
      description: |-
        This endpoint is named "Connect - Contact - Delete". It's a POST request intended to delete a contact in the system. The detailed description for each field in the endpoint is as follows:

        1. **`name`**: The name of the endpoint, i.e., "Connect - Contact - Delete". It describes the operation performed by the endpoint.

        2. **`request`**: This object contains all the information needed to make the HTTP request. It is divided into several fields:
           
            a. **`auth`**: The method of authorization required to access this endpoint is set in this object.
           
                - **`type`**: The value "bearer" indicates the type of authorization is Bearer Token Authentication.
                 
                - **`bearer`**: A list of objects specifying the details of the bearer token.
                  
                    - **`key`**: This is the term used in the header for the authentication token; in this case it's "token".
                  
                    - **`value`**: The value to be replaced by the actual session Id.
                    
                    - **`type`**: The data type of the value, in this case, it is "string".
           
            b. **`method`**: This field denotes the HTTP method to be used for the request. "POST" allows data to be sent as a body of the request.

            c. **`url`**: This represents the endpoint where the request will be sent. In this case, it's http://localhost:3000/api/connect/contact/delete.

            d. **`headers`**: A list of objects specifying the HTTP headers to be sent to the request. In this case, all fields are empty or default indicating no additional headers are needed for the request.

            e. **`body`**: This contains the actual data to be sent with the request.

                - **`mode`**: The mode of the body content, in this case, it's "raw", meaning the content will be sent as a raw string.
                
                - **`raw`**: The raw request payload, composed of key-value pairs represented as a string. The keys are: "sessionId", "accountId", and "contactId". Their values need to be replaced with the actual session id, account id, and contact id respectively.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"contactId\":\"contactId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/event/create:
    post:
      tags:
        - ConnectEvent
      summary: Connect - Event - Create
      description: |-
        This endpoint, "Connect - Event - Create", is a Postman request for creating an event in application.

        1. "name": This is the name of the endpoint being defined.

        2. "request": Which includes the main properties of the request.

           - "auth": The section that contains the security parameters required for the connection.
             - "type": This specifies the used authorization type which is a "bearer" in this case.
             - "bearer": This is an array that contains the bearer token needed for authentication.
               - "key": This specifies the header field name for the token, which is "token".
               - "value": This specifies the value of the token as "BearerToken".
               - "type": The format of the token specified here, which is a "string".
          
           - "method": This specifies the HTTP method being used, which is "POST" in this case.
           
           - "url": The URL where the request will be sent, specifically: "http://localhost:3000/api/connect/event/create".

           - "headers": Additional headers to be sent as part of the request. In this case, it's empty and is disabled.

           - "body": The body of the request.
             - "mode": This specifies the format of the body, which is "raw" in this case.
             - "raw": It includes the raw JSON data to be sent in the request body.
                 The different properties include: sessionId, accountId, name, description, tags, profile photo URL, cover photo URL, minimum tip amount, unlock amount, category, subcategory, search type, and various boolean flags.
             - "options": further options for body processing.
               - "raw": Allows specifying the language to be used when processing the raw body, which is "json" in this case.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: MyNikeEvent
                description: This event is my second event
                tags: second,event
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                unlockAmount: 1
                category: General
                subCategory: Specific
                searchType: Game
                isEnabled: true
                isEventPrivate: true
                isTournamentOnly: false
                isEventDefault: true
                isPreLiveConnectAds: true
                isPostLiveConnectAds: true
                breakPreLiveConnectUrl: https://example.com/break-pre-live.mp4
                breakLivePauseConnectUrl: https://example.com/break-paused-live.mp4
                breakPostLiveConnectUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/event/update:
    put:
      tags:
        - ConnectEvent
      summary: Connect - Event - Update
      description: |-
        This API endpoint, titled "Connect - Event - Update", is used to update the details of a specific event in your application. It is a PUT request, which typically is used to update existing resources.

        This endpoint requires Bearer token authentication. The "BearerToken" is expected to be provided in the request header as the "token". 

        The request is sent to the following URL: "http://localhost:3000/api/connect/event/update". Alongside the standard headers, there is an additional header with the key "Client-UUID" which can be changed to the specific Client UUID.

        In the body of the request, property values are provided in raw JSON format. Let's break down each of these:

        - "eventId": This is the unique identifier of the event that is to be updated.
        - "sessionId": This is the session ID associated with the user or event.
        - "accountId": This is the user account ID associated with the event.
        - "name": This refers to the name of the event.
        - "description": This is the description of the event.
        - "tags": This field can be used to apply searchable tags to the event.
        - "profilePhotoUrl" & "coverPhotoUrl": These are URLs of the event's profile and cover pictures.
        - "minimumTipAmount": This is the minimum tip amount for this event.
        - "unlockAmount": This is the amount required to unlock the event.
        - "category" & "subCategory": This categorizes the event within the system.
        - "searchType": This specifies the search type for the event.
        - "isEnabled" & "isEventPrivate" & "isTournamentOnly" & "isEventDefault" & "isPreLiveConnectAds" & "isPostLiveConnectAds": These boolean flags enable or disable certain features of the event.
        - "breakPreLiveConnectUrl", "breakLivePauseConnectUrl" & "breakPostLiveConnectUrl": These are the URLs where the break clips for pre-live, live paused, and post-live moments of the event are located.

        All of these details are provided in raw JSON format, as specified in the "options" property.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                eventId: eventId
                sessionId: sessionId
                accountId: accountId
                name: MyNikeEvent
                description: This event is my second event
                tags: second,event
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                unlockAmount: 100
                category: General
                subCategory: Specific
                searchType: Game
                isEnabled: true
                isEventPrivate: true
                isTournamentOnly: false
                isEventDefault: true
                isPreLiveConnectAds: true
                isPostLiveConnectAds: true
                breakPreLiveConnectUrl: https://example.com/break-pre-live.mp4
                breakLivePauseConnectUrl: https://example.com/break-paused-live.mp4
                breakPostLiveConnectUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/event/get:
    get:
      tags:
        - ConnectEvent
      summary: Connect - Event - Get
      description: |-
        The given data is essentially the structure and details of an API endpoint named 'Connect - Event - Get'. It is broken down as follows:

        - **name**: A string value, which represents the name of the endpoint. In this case, the name of the endpoint is "Connect - Event - Get". 

        - **request**: An object containing the details of the request that will be sent to the API endpoint. 

          - **auth**: The authentication method used for the API request. Here, it is set to "bearer", which is a popular method used for API authentication.
            
              - **bearer**: An array where each element is an object representing the authentication token. 
                  - **key**: Describes what sort of value the system should expect, here it is "token".
                  - **value**: The actual value for the key parameter is "BearerToken". The type of the value is a string, as indicated by the "type" field.

          - **method**: A string that represents the HTTP method to use for the request. The method of this request is "GET", meaning this request is used to retrieve data from the server.

          - **url**: Specifies the server URL that will receive the API request. Here, it's retrieving from an API 'event' with a query parameter of 'eventId' on a local server (http://localhost:3000/api/connect/event/get/).

          - **headers**: An array that can contain multiple objects that represent the API request headers. Here, though, there is a single, blank, object within the array. The 'key', 'value' are empty, the 'type' is 'default', and this header is 'disabled'.

          - **body**: Contains the details of the body contents of the HTTP request. In this case, the 'mode' is set to 'raw', meaning the contents of the 'body' would normally be presented in plain text format. However, the 'raw' field is empty, indicating that no body data is being sent with this request.
          
        All these fields contribute to the configuration of this API and have an integral part in the successful sending and receiving of data.
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: query
          schema:
            type: string
          example: eventId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/event/all:
    get:
      tags:
        - ConnectEvent
      summary: Connect - Event - Get All
      description: |-
        This endpoint refers to "Connect - Event - Get All", implying that it aims to retrieve all events related to a particular account. Here's detailed information on each data:

        - `name`: This field represents the name of the endpoint. In this case, the endpoint name is "Connect - Event - Get All".

        - `request`: This is where we specify details about the HTTP request that is to be sent.

            - `auth`: This indicates the type of authentication required to access the endpoint. The shown type here is "bearer", denoting bearer token authentication. A bearer token is a security token that gives the holder access to the API.
                - `bearer`: An array of bearer tokens. A bearer token is represented as an object having a "key", "value", and "type". The "key" is `token`, the bearer token's value is going to replace "BearerToken", and the "type" which is `string`.

            - `method`: This stipulates the type of HTTP method used for this request. In this case, it is a "GET" method which is used to fetch data from the server.

            - `url`: This refers to the endpoint that the request will be sent to. The specified url is `http://localhost:3000/api/connect/event/all/?accountId=accountId`. The `accountId` will be replaced by a specific account ID to fetch all related events.

           - `headers`: An array containing the information that the client (or browser) needs to send to the server in the header of the HTTP request. In the provided data, there are no explicit headers set, as both "key" and "value" are empty strings and "disabled" is set to true.

           - `body`: This houses the content that you want to send to the API. Given that we're dealing here with a "GET" method, the body is typically not needed, and as shown here, the "mode" is set to "raw" but the "raw" value is provided as an empty string. There isn't any particular content sent within the body of the request.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/event/delete:
    post:
      tags:
        - ConnectEvent
      summary: Connect - Event - Delete
      description: |-
        "name": This field, with the value "Connect - Event - Delete", represents the name of the endpoint. It signifies the operation carried out by this API, which is deleting an event in the "Connect" module. 

        "request": This field is an object containing all the necessary data to make the API request.

        Within "request":

          "auth": This is an object specifying the authorization method required for the API request. 
            "type": This is the type of authentication used, "bearer" in this case. Bearer authentication scheme is where the sender and receiver of an HTTP request agree on a secret key. 
            "bearer": This is an array containing the details of the bearer authentication, in this case, the token. 

          "key": This represents the name of the authentication parameter, in this case, "token". 
          "value": This contains the value of the authentication parameter. For our discussion, the value is "sessionId". 
          "type": This specifies the data type of the value of the authentication parameter, which is "string" in our case. 

        "method": This field represents the HTTP method used for the request. For our case, the method is "POST". 

        "url": This is the URL where the API request will be sent. For our case, the URL is "http://localhost:3000/api/connect/event/delete".

        "headers": This is an array that holds an object of key-value pairs of all header requests. In our case there is a single header object which is empty and disabled.

        "body": This object holds the details of the body of the request. In this case, the body is sent in 'raw' mode and contains a JSON string.

        "mode": This tells how the body data will be sent with the request. Possible values are "raw", "urlencoded" etc and in this case, it's "raw". 

        "raw": This field holds the actual raw string data that is going to be sent in the body of the request. In our case, it consists of "sessionId", "accountId", and "eventId" fields that are crucial in deleting an event for a particular account.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"eventId\":\"eventId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/message/create:
    post:
      tags:
        - ConnectMessage
      summary: Connect - Message - Create
      description: |-
        Here's a detailed description of each data in this endpoint:

        - "name": This field represents the name of the endpoint, in this case, it is "Connect - Message - Create".

        - "request": This field contains all the details regarding the http request. It includes authentication details, the request method, the URL for the request, headers, and the body of the request.

        - "auth": This field contains the details about the authentication. Here, the authentication type is 'bearer'.

        - "type" under "auth": This signifies the type of authentication. In this case it is a bearer authentication.

        - "bearer": This field contains a list of bearer tokens used for authentication. It consists of a key-value pair, where the key is 'token' and the value will be the bearer token string.

        - "method": This field signifies the HTTP request method. In this case, it is 'POST'.

        - "url": This field is the endpoint to which the request will be sent.

        - "headers": This field contains a list of all headers sent with the request. Each header is represented by a key-value pair. Here, no header information is provided.

        - "body": This field contains the data sent along with the request. The payload is in raw format.

        - "mode" under "body": It signifies in which format the payload/body is provided. It is in 'raw' format in this case.

        - "raw" under "body": This is the actual payload or body of the request which needs to be sent to the server. It consists of multiple key-value pairs, which include sessionId, accountId, provider, messageText, findUsername, and isEnabled. 

            - "sessionId": This corresponds to a unique identifier for the session.
          
            - "accountId": This corresponds to a unique identifier for a specific account.
          
            - "provider": This indicates the provider of the service. In this case, the provider is 'whatsapp'.
          
            - "messageText": This field contains the actual text of the message to be sent.
          
            - "findUsername": This field holds the username. In this case, it is 'Usama AUH'.
          
            - "isEnabled": This is a boolean value indicating whether the service is enabled or not.

        - "options" under "body": These are additional configurations for the payload. Here, the language option is set to 'json' specifying that the raw data provided in the body should be interpreted as a JSON object.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                provider: whatsapp
                messageText: This message is my second test message
                findUsername: Usama AUH
                isEnabled: true
      security:
        - bearerAuth: []
      responses:
        undefined:
          content:
            text/plain:
              schema:
                type: string
              examples:
                example-0:
                  summary: slack
                  value: null
                example-1:
                  summary: facebook page
                  value: null
                example-2:
                  summary: facebook profile
                  value: null
                example-3:
                  summary: google chat
                  value: null
                example-4:
                  summary: linkedIn
                  value: null
                example-5:
                  summary: snapchat
                  value: null
                example-6:
                  summary: telegram
                  value: null
                example-7:
                  summary: x
                  value: null
                example-8:
                  summary: tiktok
                  value: null
  /api/connect/message/search:
    post:
      tags:
        - ConnectMessage
      summary: Connect - Message - Search
      description: |-
        The endpoint named "Connect - Message - Search" is designed to search for messages using various filtering criteria. It is a POST method API that sends requests to the URL "http://localhost:3000/api/connect/message/search". 

        In the request, the user will need to be authenticated with the backend server via the 'bearer' auth type. A token must be provided with the key as "token" and its respective value as "BearerToken". This token is a string type of data which is usually generated by the server upon successful login and sent to the client.

        In the headers section, no specific values are required and the default is shown as being disabled.

        Within the "body" section, a "raw" mode with JSON language set is used This raw body content should be a JSON string containing several items. 

        - The "sessionId" key requires the corresponding ID of the session.
        - The "accountId" key requires the given account's ID. 
        - The "provider" key requires the name of the social media provider like 'facebook' for this example. 
        - The "findUsername" key is used to specify the username that you're trying to find messages for, like 'ahsan' as shown in the example. 
        - The "isEnabled" key is a boolean field which, when set to true, indicates that this search operation is currently enabled.

        Remember that each key-value pair in the raw body content needs to be wrapped in double quotes ("") to adhere to the JSON format. It will help avoiding errors while parsing the data on the server side.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                provider: facebook
                findUsername: ahsan
                isEnabled: true
      security:
        - bearerAuth: []
      responses:
        undefined:
          content:
            text/plain:
              schema:
                type: string
              examples:
                example-0:
                  summary: slack
                  value: null
                example-1:
                  summary: facebook page
                  value: null
                example-2:
                  summary: facebook profile
                  value: null
                example-3:
                  summary: google chat
                  value: null
                example-4:
                  summary: linkedIn
                  value: null
                example-5:
                  summary: snapchat
                  value: null
                example-6:
                  summary: telegram
                  value: null
                example-7:
                  summary: x
                  value: null
                example-8:
                  summary: Youtube
                  value: null
                example-9:
                  summary: tiktok
                  value: null
  /api/connect/message/update:
    put:
      tags:
        - ConnectMessage
      summary: Connect - Message - Update
      description: |-
        This endpoint is named "Connect - Message - Update" and it uses the HTTP PUT method. Its purpose is to update a message in the "Connect" system. This operation needs Authorization, which is a Bearer token, passed in the Authorization header of the request.

        The request URL is "http://localhost:3000/api/connect/message/update". It communicates with the api on the localhost server at port 3000.

        There's a unique identifier for the client making the request, labeled as "Client-UUID". This refers to a unique identifier for the client application and it's passed as a default type header in the request.

        The body of the request needs to be a raw JSON object with the specific properties as follows:

        1. messageId : Unique identifier of the message that needs to be updated.
        2. sessionId: Unique identifier for the current session.
        3. accountId: ID associated with the account.
        4. name: Name of the message, as a string.
        5. description: Description related to the message.
        6. tags: A string of tags related to the message.
        7. profilePhotoUrl: A URL leading to the profile picture associated with this message.
        8. coverPhotoUrl: A URL to a cover photo related to this message.
        9. minimumTipAmount: This is the minimum amount of tip that can be given.
        10. unlockAmount: The necessary amount to unlock.
        11. category: The general category the message falls under.
        12. subCategory: A more specific category within the general category for the message.
        13. searchType: This is the type of search.
        14. isEnabled: Flag indicating if the message is enabled or not.
        15. isMessagePrivate: A boolean indicating if the message is private.
        16. isTournamentOnly: This field determines if the message is only for tournament.
        17. isMessageDefault: Flag showing whether this message is set as default.
        18. isPreLiveConnectAds: This flag indicates if there are ads before live connect.
        19. isPostLiveConnectAds: Flag indicating if there are ads after live connect.
        20. breakPreLiveConnectUrl: This is the URL for pre-live break ads.
        21. breakLivePauseConnectUrl: URL for break ads during paused live session.
        22. breakPostLiveConnectUrl: URL for post-live break ads.

        Those details in the JSON body of the request provide information about the message being updated in the system. The request body also has language option set to JSON as it accepts JSON formatted data.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                messageId: messageId
                sessionId: sessionId
                accountId: accountId
                name: MyNikeMessage
                description: This message is my second message
                tags: second,message
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                unlockAmount: 100
                category: General
                subCategory: Specific
                searchType: Game
                isEnabled: true
                isMessagePrivate: true
                isTournamentOnly: false
                isMessageDefault: true
                isPreLiveConnectAds: true
                isPostLiveConnectAds: true
                breakPreLiveConnectUrl: https://example.com/break-pre-live.mp4
                breakLivePauseConnectUrl: https://example.com/break-paused-live.mp4
                breakPostLiveConnectUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/message/get:
    get:
      tags:
        - ConnectMessage
      summary: Connect - Message - Get
      description: |-
        "Connect - Message - Get" is the name of the API endpoint. This name is used to identify the specific API operation.

        The "request" object stands for the details of the HTTP request being made to the endpoint. 

        Under the "request" object, "auth" specifies the authentication method for the API request. The "type" is set to "bearer", which means that it uses bearer token authentication. The "bearer" array contains an object with "key" as "token" and "value" as "BearerToken". The "type" is set to "string". This means a token string called "BearerToken" is expected as a part of the API access token for authentication.

        The "method" denotes that this HTTP request is a "GET" method. 

        The "url" is the actual endpoint where the request will hit. In this case, it's "http://localhost:3000/api/connect/message/get/?messageId=messageId". The "messageId" is a dynamic value which you can replace with the actual message Id you want to fetch.

        Under "headers", the "key" and "value" fields are empty in the provided object, and it is currently disabled. This typically serves to provide additional information for HTTP requests.

        Lastly, "body" is used for the data sent by a HTTP request. In this case, the "mode" is set to "raw", and the "raw" field is empty. This implies there is no data body being sent with the request. This is not unusual for a GET request as these usually retrieve data from the specified URL, rather than sending information to it.
      security:
        - bearerAuth: []
      parameters:
        - name: messageId
          in: query
          schema:
            type: string
          example: messageId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/message/createsettings:
    post:
      tags:
        - ConnectMessage
      summary: Connect - Message - Create Settings
      description: |-
        This API endpoint is titled "Connect - Message - Create Settings". It is primarily used to create settings for messages in the connection.

        Authentication for this API is implemented via the bearer authentication scheme. You will need a bearer token for authentication. 

        The bearer token is a string and is passed in the 'token' field in the authorization section.

        This is a POST method API and is expected to receive a payload in the body part of the request. This endpoint's URL is - http://localhost:3000/api/connect/message/createsettings

        There is a default header provided for this POST call. However, it is disabled and does not need to be filled with any data.

        In the body of the request, there are numerous data fields, summarized below:

        - "sessionId" should be the Session ID of the user.
        - "accountId" holds the Account ID of the user.
        - "name" refers to the name of the user.
        - "displayName" is the username or the other form of user's name.
        - "tags" can contain tags related to this user setting.
        - "title" is the user's professional title (like 'Developer').
        - "website" is the link to the user's personal or professional website.
        - "description" field holds a brief description about the user.
        - "identifierKey" refers to the user's unique identifier key.
        - "apiKey", "apiSecret", and "apiClientId" are user's API access credentials.
        - "authToken" is the user's authentication token.
        - "refreshToken" is the token to refresh the authToken after it's expired.
        - "providerName" and "providerId" fields are to establish OAuth, api connection or other relevant sources.
        - "uniqueKey" is an additional unique identifier key for user.
        - "authUsername", "authPassword", "authEmail" are for user authentication.
        - "authSecurity" may be used for any additional security measure, currently, it's null.
        - "recaptchaCode" is for user validation process.

        Please note that the 'body mode' has been set to 'raw', meaning it will accept a stringified JSON and also note that request-body content type is expected to be in JSON format.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: Usama Nasir
                displayName: usamanasir
                tags: example, test, api
                title: Developer
                website: https://www.johndoe.com
                description: This is a sample description for John Doe.
                identifierKey: id123456
                apiKey: api_key_1234567890
                apiSecret: api_secret_0987654321
                apiClientId: client_id_abcdef123456
                authToken: auth_token_abcdef123456
                refreshToken: refresh_token_123456abcdef
                providerName: linkedin
                providerId: beladed_id_123456
                uniqueKey: unique_key_abcdef123456
                authUsername: usamanasir052@gmail.com
                authPassword: hearti001
                authEmail: usamanasir052@gmail.com
                authSecurity: null
                recaptchaCode: recaptcha_code_abcdef123456
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/message/getsettings:
    get:
      tags:
        - ConnectMessage
      summary: Connect - Message - Get Settings
      description: |-
        1. "name": This field indicates the name of the operation that is being performed. In this case, the name is "Connect - Message - Get Settings", implying that the operation intends to get settings from a connect message.

        2. "request": This field encapsulates all the information pertaining to the actual request to be made to the target URL.

            a. "auth": This field represents the authentication mechanism in use. Currently, it is set to "bearer" denoting bearer authentication.
            
                i. "type": The authentication type, which here is "bearer". Bearer authentication (also known as token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens.
              
                ii. "bearer": Contains the bearer token for authenticating the request.
                
                    - "key": This field specifies the key for the authentication header field. Here, it is set as "token".
                    
                    - "value": This is the actual token used for bearer authentication. It is named as "BearerToken" in this instance.
                    
                    - "type": Here, the type indicates the datatype of the value. In this case, it is a string.

            b. "method": This field refers to the HTTP method to be used for making the request. In this case, it is "GET", which would get data from the server.

            c. "url": It specifies the target endpoint where the request is to be sent. In this case, the URL is "http://localhost:3000/api/connect/message/getsettings?accountId=accountId&sessionId=sessionId&providerName=meetup". This endpoint is expected to fetch the respective settings pertaining to a given accountId, sessionId, and providerName.

            d. "headers": It's an array of headers that can be sent along with a request. In this case, the array has only one object which is empty with no headers defined for this request as the "disabled" property is set to true.

        Take note that the URL contains parameters that need to be replaced with appropriate values like 'accountId', 'sessionId', and 'providerName' for successful requests. Further, an appropriate 'BearerToken' needs to be provided.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: providerName
          in: query
          schema:
            type: string
          example: meetup
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/message/all:
    get:
      tags:
        - ConnectMessage
      summary: Connect - Message - Get All
      description: |-
        This endpoint is named "Connect - Message - Get All". It is designed to retrieve all messages related to a specific account ID from the 'Connect' application. 

        Here are details of each data point: 

        1. `name`: "Connect - Message - Get All" - This defines the custom name of the endpoint. Its purpose is for humans to easily identify what the endpoint does.

        2. `request`: This object includes concrete details on what the request should contain and how it will be made.

        3. `auth`: Inside the `request` object, the `auth` key mentions that the request type is a bearer token authentication. This type of authentication uses security tokens called bearer tokens.

           - `type`: Specifies the type of authentication required. In this case, it is 'bearer'.
           - `key`: This represents the token name "token" which will be used for authentication.
           - `value`: This should be the valid bearer token provided to be authenticated against the server. The placeholder here is 'BearerToken'.
           - `type`: Specifies the datatype of the key-value pair, which is a string in this case.

        4. `method`: The HTTP method used for this request is "GET". It is used to fetch or get the data from a specified resource.

        5. `url`: This is the route where the request will be sent. In this case, it's "http://localhost:3000/api/connect/message/all/?accountId=accountId" where the accountId in the URL will be replaced by the actual account Id for which we want to retrieve messages.

        6. `headers`: In this case, it is an empty header and is disabled by default. If enabled and assigned with valid 'key' and corresponding 'value', it would provide additional information about the client or the request body.

        7. `body`: For this 'GET' request, the body is 'raw' and empty, as data is not sent via the body in this case. 'GET' requests usually contain all information in the URL itself.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/message/delete:
    post:
      tags:
        - ConnectMessage
      summary: Connect - Message - Delete
      description: |-
        This endpoint corresponds to the deletion of a message in a connection. The details for each data are as follows:

        1. `"name"`: This is the name of the endpoint. In this case, it is named "Connect - Message - Delete", meaning it's used to delete a message within a connection.

        2. `"request"`: This object contains the details of the request to be sent to the server.

        3. `"auth"`: This object houses the type and details of the authorization required for this endpoint. This uses bearer token authentication. The bearer token is typically generated by the server and must be sent with every request. 

           `"key"`: This is the key for the bearer token, which is 'token' in this case.
           
           `"value"`: This contains the placeholder value for the bearer token, 'sessionId'.
           
           `"type"`: This signifies the type of data for the bearer token, which in this case is a string.

        4. `"method"`: This is the HTTP method used for the request. Here it's 'POST', which is typically used for sending data to create/update a resource.

        5. `"url"`: This is the URL where the HTTP request will be sent. Here it is 'http://localhost:3000/api/connect/message/delete'.

        6. `"headers"`: This array represents any custom HTTP headers to be sent with the request. Currently it's empty and disabled. 

        7. `"body"`: This object contains information that will be sent to the server. In this endpoint, it's sending raw JSON data.

           `"mode"`: This refers to the format of the data being sent. In this case, it's 'raw' - the data will be sent exactly as it is.

           `"raw"`: The raw field contains the raw data to be sent in the request. It's a JSON string with `sessionId`, `accountId` and `messageId`. Every field in the JSON string signifies -
           - `sessionId`: The ID of the current session.
           - `accountId`: The ID of the account from which the message is to be deleted.
           - `messageId`: The ID of the message to be deleted.

        Each of these data points are integral in making an appropriate call to this endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"messageId\":\"messageId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/post/create:
    post:
      tags:
        - ConnectPost
      summary: Connect - Post- Create
      description: |-
        1. "name" - This field represents the name of the endpoint. In this case, the name is "Connect - Post- Create", which indicates that it might be an endpoint used for creating a new post in a connection.

        2. "request" - This field contains all the information related to the request being made to the endpoint.

        3. "auth" - Represents the authorization needed to make a request to the endpoint. It has a "type" field which indicates the type of authorization, in this case, "bearer". The "bearer" field contains an array of objects each containing a "key", "value", and "type." Here, the key is "token", and it requires a string value which is "BearerToken".

        4. "method" - Specifies the HTTP method used for the request. Here, "POST" method is used which is typically used for sending data to a server to create/update a resource.

        5. "url" - This is the URL of the endpoint where the request will be made. 

        6. "headers" - Contain additional information that the client needs to pass along with the request. In this case, no headers are mentioned, just an empty default header is given which is also disabled.

        7. "body" - It includes the actual data that has to be sent in the request. Here, the "mode" is "raw" which specifies that the data is sent in raw text and the language used is JSON. It contains fields like "sessionId", "accountId", "provider", "postText", "title", and "isEnabled" which need to be passed in the request body. 

        Let's know about data in the body section:
        - "sessionId": An identifier for the current user session.
        - "accountId": Identifier for the user account.
        - "provider": The blog provider's name, in this example it is mentioned as 'blogger'.
        - "postText": The text of the blog post.
        - "title": The title of the blog post.
        - "isEnabled": A flag to specify whether the post is enabled or not. This is a boolean field that accepts either true or false.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                provider: blogger
                postText: This message is my second test message
                title: test title
                isEnabled: true
      security:
        - bearerAuth: []
      responses:
        undefined:
          content:
            text/plain:
              schema:
                type: string
              examples:
                example-0:
                  summary: instagram
                  value: null
                example-1:
                  summary: facebook page
                  value: null
                example-2:
                  summary: facebook profile
                  value: null
                example-3:
                  summary: Facebook Group
                  value: null
                example-4:
                  summary: linkedIn
                  value: null
                example-5:
                  summary: medium
                  value: null
                example-6:
                  summary: google review
                  value: null
                example-7:
                  summary: pinterest
                  value: null
                example-8:
                  summary: reddit
                  value: null
                example-9:
                  summary: slack
                  value: null
                example-10:
                  summary: threads
                  value: null
                example-11:
                  summary: tumblr
                  value: null
                example-12:
                  summary: whatsapp
                  value: null
                example-13:
                  summary: weebly
                  value: null
                example-14:
                  summary: wordpress
                  value: null
                example-15:
                  summary: x
                  value: null
                example-16:
                  summary: patreon
                  value: null
                example-17:
                  summary: g2
                  value: null
                example-18:
                  summary: trustpilot
                  value: null
                example-19:
                  summary: yelp
                  value: null
  /api/connect/post/update:
    put:
      tags:
        - ConnectPost
      summary: Connect - Post - Update
      description: |-
        This API endpoint "Connect - Post - Update" is used to update an existing post. The update method uses the HTTP PUT verb. The URL of this API endpoint is "http://localhost:3000/api/connect/post/update".

        The API uses "Bearer" type authentication. Bearer token is passed in the "BearerToken" key as a string type value.

        It includes the "Client-UUID" in the headers. The client Universally Unique Identifier (UUID) is used to uniquely identify a client. The value for "Client-UUID" goes in the "ClientUUID" key.

        The request body contains information about the post that needs to be updated. This information includes:
        - postId : The unique identifier of the post.
        - sessionId : Identifier of the session
        - accountId : Identifier of the account
        - name : Name of the post
        - description : Brief description of the post
        - tags : Tags associated with the post for better searchability, separated by commas.
        - profilePhotoUrl : URL of the profile photo
        - coverPhotoUrl : URL of the cover photo
        - minimumTipAmount : Minimum tip amount for the post
        - unlockAmount : Amount needed to unlock the post
        - category : Category to which the post belongs
        - subCategory : Specific sub-category within the main category
        - searchType : Type of search ("Game" in this case).
        - isEnabled : Flag indicating whether the post is enabled or not
        - isPostPrivate : Flag indicating whether the post is private or not
        - isTournamentOnly : Flag indicating whether the post is only for tournament or not
        - isPostDefault : Flag indicating whether the post is default or not
        - isPreLiveConnectAds : Flag indicating whether connect ads are established pre-live or not
        - isPostLiveConnectAds : Flag indicating whether connect ads are established post-live or not
        - breakPreLiveConnectUrl: URL for pre-live break video
        - breakLivePauseConnectUrl: URL for paused live break video
        - breakPostLiveConnectUrl : URL for post-live break video

        The request body is sent in raw mode and the raw data is in JSON language. This is specified in the options field of the body.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                postId: postId
                sessionId: sessionId
                accountId: accountId
                name: MyNikePost
                description: This post is my second post
                tags: second,post
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                unlockAmount: 100
                category: General
                subCategory: Specific
                searchType: Game
                isEnabled: true
                isPostPrivate: true
                isTournamentOnly: false
                isPostDefault: true
                isPreLiveConnectAds: true
                isPostLiveConnectAds: true
                breakPreLiveConnectUrl: https://example.com/break-pre-live.mp4
                breakLivePauseConnectUrl: https://example.com/break-paused-live.mp4
                breakPostLiveConnectUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/post/getsettings:
    get:
      tags:
        - ConnectPost
      summary: Connect - Post- Get Settings
      description: |-
        1. "name": This is the name of endpoint that is being called. In this case, the endpoint name is "Connect - Post- Get Settings".

        2. "request": This value contains all the information required to make the HTTP request. It includes authentication details, the HTTP method, the URL of the request, and any headers.

        3. "auth": This is the authentication structure used for this endpoint. It specifies the type of authentication and the authentication details.
           
            a. "type": This field specifies the type of authorization required for this endpoint. In this case, it uses 'bearer' authorization.
           
            b. "bearer": This is an array of bearer tokens required for this endpoint.
               
               i. "key": The key for the bearer token needed for authorization - here, it is named 'token'.
               
               ii. "value": The value of the bearer token, defined here as 'BearerToken'.
               
               iii. "type": The type of bearer token used, which is a 'string'.

        4. "method": It specifies the HTTP method to be used for this request, which is 'GET'.

        5. "url": This is the URL where the request will be sent. It is 'http://localhost:3000/api/connect/post/getsettings?accountId=accountId&sessionId=sessionId&providerName=pinterest'. In this URL:
            
            a. 'accountId': The account ID used for this request.
            b. 'sessionId': The session ID used for this request.
            c. 'providerName': The provider name used in this request, which is 'pinterest' in this case.

        6. "headers": These are extra details sent with the request to provide additional information. In this case, the headers are not defined (empty) and are disabled.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: providerName
          in: query
          schema:
            type: string
          example: pinterest
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/post/createsettings:
    post:
      tags:
        - ConnectPost
      summary: Connect - Post - Create Settings
      description: |-
        This is the description of each data in the endpoint:

        1. "name": This is the identifier of the endpoint, in this case it is "Connect - Post - Create Settings".
        2. "request": This holds the details about the http request sent to the server.
        3. "auth": This section contains information about the authorization, where "bearer" authorization type is used in this case. The bearer token is passed as a string in the "token" field.
        4. "method": This is the http method used to send the request to the server. In this case, the "POST" method is used.
        5. "url": This is the URL of the server where the request will be sent.
        6. "headers": These are the additional information sent with the http request. Here, a default empty header is being sent which is currently disabled.
        7. "body": This contains the payload that is sent with the http request. Here, body is sent in "raw" format.
        8. "raw": This contains the JSON payload which includes various parameters like `sessionId`, `accountId`, `name`, `displayName`, `tags`, `title`, `website`, `description`, `identifierKey`, `apiKey`, `apiSecret`, `apiClientId`, `authToken`, `refreshToken`, `providerName`, `providerId`, `uniqueKey`, `authUsername`, `authPassword`, `authEmail`, `authSecurity`, `recaptchaCode`.
        9. "options": Contain settings for the body of the http request. The "language" option is set to "json" for this request, since JSON data is being sent in the body.

        Please ensure that the appropriate values are put in place of placeholders for all the parameters in the body of the request before making the request. Also, the `authSecurity` field currently holds a null value and should be filled with a suitable value if required.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: Usama Nasir
                displayName: usamanasir
                tags: example, test, api
                title: Developer
                website: https://www.globalexpressdelivery.org
                description: This is a sample description for John Doe.
                identifierKey: id123456
                apiKey: api_key_1234567890
                apiSecret: api_secret_0987654321
                apiClientId: client_id_abcdef123456
                authToken: auth_token_abcdef123456
                refreshToken: refresh_token_123456abcdef
                providerName: wordpress
                providerId: beladed_id_123456
                uniqueKey: unique_key_abcdef123456
                authUsername: beladeddev
                authPassword: Demopass1?
                authEmail: beladeddev
                authSecurity: null
                recaptchaCode: recaptcha_code_abcdef123456
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/post/get:
    get:
      tags:
        - ConnectPost
      summary: Connect - Post - Get
      description: |-
        1. "name": The "name" field refers to the title or alias for the API endpoint which is "Connect - Post - Get". It is a string that typically indicates the purpose of this endpoint.

        2. "request": This section contains data related to the API request itself. 

        3. "request.auth": This part specifies the type of authorization needed to access this endpoint. Authorization can vary depending on the security standards of the API.

           - "type": "bearer" means the authorization requires a Bearer token which must be sent in the header of the HTTP request.
           
           - "bearer": This is an array of bearer tokens needed for the authentication.
           
           - "key": "token", signifies the key of the bearer token which is "token" in this case.
           
           - "value": "BearerToken", This field contains the actual value of the API token. Replace "BearerToken" with the real valid token.
           
           - "type": "string", It indicates that the bearer token value should be of string type.
           
        4. "request.method": The HTTP method used for this API request. In this case, it is "GET" which means retrieving data from the server.

        5. "request.url": This is the URL where the API request will be sent. "http://localhost:3000/api/connect/post/get/?postId=postId" is the base URL followed by the specific endpoint and query parameter.

        6. "request.headers": This section contains information that helps the server route the request, determine what response to provide, and other metadata. In this case, empty key-value pair suggests no additional headers are required.

        7. "request.body": The body of the HTTP request. Given the method of this request is "GET" and not "POST", the body might be blank.
           
           - "mode": "raw", specifies the type of data in the body.
           
           - "raw": "", since this is a GET request, there is no additional data provided in the body.
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: query
          schema:
            type: string
          example: postId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/post/all:
    get:
      tags:
        - ConnectPost
      summary: Connect - Post - Get All
      description: |-
        1. "name": This field represents the title or identifier of the endpoint, which in this case is "Connect - Post - Get All". This is a descriptive title which gives an idea about the functionality of this endpoint.

        2. "request": This field contains all the essential data needed to make the API request.

        3. "auth": This field defines the authorization method utilized for the API request. Here, the "bearer" token authentication type is used.

          i. "type": The authorization type. It is set to "bearer" in this context.
          
          ii. "bearer": This is an array of bearer tokens. It contains "key-value" pairs. Here, the key is "token" and its value is "BearerToken".

          iii. "key": This denotes the type of token used to authenticate the request. It's set to "token".
          
          iv. "value": It's the actual token used to authenticate the request, Its provided value here is "BearerToken".
          
          v. "type": It denotes the type of value. In this case, it's a "string".

        4. "method": This field defines the HTTP method used for the request. Here, it's a "GET" request, typically used to retrieve data.

        5. "url": The URL where the request will be sent. It's set to "http://localhost:3000/api/connect/post/all/?accountId=accountId", where "accountId" is an expected parameter.

        6. "headers": An array containing all the headers that will be sent along with the request. In this case, the headers field is empty and "disabled" is set to "true", meaning no additional headers will be sent with this request.

        7. "body": This field represents the body of the HTTP request.

          i. "mode": The formatting type of the request body, which is "raw" in this case, indicating that no specific format is applied to the body data.
          
          ii. "raw": The actual content of the request body. Here, it's empty as there's no body data to be sent for this GET request.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/post/delete:
    post:
      tags:
        - ConnectPost
      summary: Connect - Post - Delete
      description: |-
        This endpoint is called 'Connect - Post - Delete'. It's a POST method, meaning it is used to send data to the server to create a resource.

        The 'auth' field indicates the type of authentication being used, which is 'bearer' type. The 'bearer' array contains a 'token' key needing a 'sessionId' value. It's of 'string' type, which indicates that the 'sessionId' must be a sequence of characters.

        The 'method' is 'POST', which is typically used to submit data to be processed by the identified resource.

        The 'url' is the web address where the POST request is sent. In this case, it's 'http://localhost:3000/api/connect/post/delete', which is an API related to deleting a post on a server running on your own machine (or localhost) at port 3000.

        The 'headers' field includes a default key-value pair that is currently empty and disabled. Headers are used for additional parameters that need to be sent with the API request. 

        The 'body' field contains the Data that will be sent with the POST request, which is in 'raw' mode. 'Raw' mode in Postman allows you to send data as a string in the format that you choose. This requires an object containing sessionId, accountId, and postId as strings in a JSON format. 

        'sessionId' is an unique identifier for a browser session and can be used to manage a user's interaction with the application. 'accountId' refers to the unique identifier of a user's account while 'postId' is the unique identifier of a specific post on the platform. All of these identifiers are sent in the request body indicating the specific user, session and post involved in the interaction.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"postId\":\"postId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/profile/create:
    post:
      tags:
        - ConnectProfile
      summary: Connect - Profile - Create
      description: |-
        Here's a detailed description of each of the data points in this endpoint:

        - `name`: Identifies the name of the endpoint. In this case, it's used for the creation of a profile in Connect.
        - `auth`: Object defining the type of the authorization required for the endpoint. Bearer token authorization is used here.
          - `type`: Specifies the type of the authorization, which is "bearer" in this case.
          - `bearer`: Array containing information about the token.
            - `key`: Field for specifying the key of bearer token.
            - `value`: The value of the bearer token is represented here.
            - `type`: Represents the format of the bearer token value, which is a string in this case.

        - `request`: It's an object that contains necessary information to make a request to the API.
          - `method`: Specifies the HTTP method for the request, which is "POST" in this case.
          - `url`: The endpoint URL where the request will be sent.

        - `headers`: Array used to send additional information with the HTTP request. In this case, no key-value pairs are defined; it's an empty default object.

        - `body`: Contains the details sent with the request.
          - `mode`: The mode of the request body, which is "raw" in this case.
          - `raw`: Contains the raw data to be sent with the request, constructed as JSON format.
          - `options`: Object contains extra configuration for the body.
            - `raw`:  Choose the programming language used to display the request's raw body. In this case, JSON is used.

        The `raw` key covers the main profile details:
        - `sessionId`: User's session identifier.
        - `accountId`: The user's account identifier.
        - `name`: The name of the profile.
        - `description`: A brief description of the profile.
        - `tags`: Additional tags associated with the profile.
        - `profilePhotoUrl`: URL link for the profile photo.
        - `coverPhotoUrl`: URL link for the cover photo.
        - `minimumTipAmount`: The minimum tip amount for the user.
        - `unlockAmount`: The unlock amount associated with the profile.
        - `category`: The category of the profile.
        - `subCategory`: A more specific subcategory of the profile, if applicable.
        - `searchType`: The method used for searching the profile.
        - `isEnabled`: A boolean indicating if the profile is enabled.
        - `isProfilePrivate`: A boolean indicating if the profile is private.
        - `isTournamentOnly`: A boolean indicating whether the profile is for tournament use only.
        - `isProfileDefault`: A boolean specifying if this is the default account profile.
        - `isPreLiveConnectAds`: Boolean indicating if there are ads before live connection.
        - `isPostLiveConnectAds`: Boolean indicating if there are ads after live connection.
        -  `breakPreLiveConnectUrl`: A link to the video advert playing before the live connection.
        -  `breakLivePauseConnectUrl`: A link to the video advert playing during live pauses.
        -  `breakPostLiveConnectUrl`: A link to the video advert playing after the live connection ends.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: MyNikeProfile
                description: This profile is my second profile
                tags: second,profile
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                unlockAmount: 1
                category: General
                subCategory: Specific
                searchType: Game
                isEnabled: true
                isProfilePrivate: true
                isTournamentOnly: false
                isProfileDefault: true
                isPreLiveConnectAds: true
                isPostLiveConnectAds: true
                breakPreLiveConnectUrl: https://example.com/break-pre-live.mp4
                breakLivePauseConnectUrl: https://example.com/break-paused-live.mp4
                breakPostLiveConnectUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/profile/update:
    put:
      tags:
        - ConnectProfile
      summary: Connect - Profile - Update
      description: |-
        "Connect - Profile - Update" is the name of the endpoint. It is designed to update user profiles. 

        1. "request" - It encapsulates the details of the request made to this endpoint.
             
        2. "auth" - Specifies the authentication type the API uses, here it’s bearer token authentication.
           
        3. "bearer" - An array containing details about the bearer token used.
           
        4. "key" - Represents the name of a particular bearer token required for authorization, here it’s "token".

        5. "value" - Represents the value of the bearer token which is "BearerToken".

        6. "type" - Specifies the type of the bearer token which is a string.

        7. "method" - Specifies the HTTP method used, here method is "PUT".

        8. "url" - Specifies the URL of the API endpoint which is "http://localhost:3000/api/connect/profile/update".

        9. "headers" - Contains all headers required by this endpoint with its corresponding value. Here, "Client-UUID" (the unique identifier for the client making the request).

        10. "body" - Contains the details to be passed in the request body. The "mode" is set to "raw" which accepts a string containing data in JSON format.

        Within the "raw" field, we have different pieces of information to be updated:

        - "profileId": Unique identifier for the profile.
        - "sessionId": Unique identifier for the current session.
        - "accountId": Unique identifier for account.
        - "name": Name of the profile.
        - "description": Descriptive information about the profile.
        - "tags": Tags associated with the profile.
        - "profilePhotoUrl": Link to the profile's photo.
        - "coverPhotoUrl": Link to the profile's cover photo.
        - "minimumTipAmount": Minimum amount for tips.
        - "unlockAmount": Amount to unlock something.
        - "category": Category field for profile.
        - "subCategory": Specific sub-category for profile.
        - "searchType": Type of search related to profile.
        - "isEnabled": Whether the profile is enabled.
        - "isProfilePrivate": Status of the profile. If it’s set to true, it’s private.
        - "isTournamentOnly": Whether the profile is for tournament only.
        - "isProfileDefault": Status of profile's default setting.
        - "isPreLiveConnectAds": Whether to display Ads before live connection.
        - "isPostLiveConnectAds": Whether to display Ads after disconnected.
        - "breakPreLiveConnectUrl": Link to the video to be displayed during break before connecting live.
        - "breakLivePauseConnectUrl": Link to the paused video during live streaming.
        - "breakPostLiveConnectUrl": Link to the video to be displayed during break after live connection finished.
           
        11. "options" - Specifies other options. Here, we are specifying the language of the raw data, which is JSON.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                profileId: profileId
                sessionId: sessionId
                accountId: accountId
                name: MyNikeProfile
                description: This profile is my second profile
                tags: second,profile
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                unlockAmount: 100
                category: General
                subCategory: Specific
                searchType: Game
                isEnabled: true
                isProfilePrivate: true
                isTournamentOnly: false
                isProfileDefault: true
                isPreLiveConnectAds: true
                isPostLiveConnectAds: true
                breakPreLiveConnectUrl: https://example.com/break-pre-live.mp4
                breakLivePauseConnectUrl: https://example.com/break-paused-live.mp4
                breakPostLiveConnectUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/profile/get:
    get:
      tags:
        - ConnectProfile
      summary: Connect - Profile - Get
      description: |-
        This endpoint is identified as "Connect - Profile - Get". It is a GET method which is principally utilized for retrieving data.

        The Request:
        1. "auth" - This specifies the type of authentication required for this API. It uses a bearer token, which is a common method for authorizing API calls.

             "type": "bearer" - This specifies that the type of authentication to be implemented is a bearer token. 
             
             "bearer": [{"key": "token","value": "BearerToken","type": "string"}] - This contains the token information where the "key" is 'token', and the value of this 'token' is 'BearerToken'. The type is a string, which implies that the value must be provided in a text format.

        2. "method": "GET" - It's the HTTP Method, and in this case, it's a GET method which is used to retrieve resources.

        3. "url": "http://localhost:3000/api/connect/profile/get/?profileId=profileId" - It is the API's URL. In this endpoint, it fetches data from the 'profile' resource of the 'connect' API which resides locally on port 3000. The 'profileId' is passed as a query parameter which is used to retrieve specific profile data.

        4. "headers": [{"key": "", "value": "", "type": "default", "disabled": true}] - This part comprises the request headers. This is currently disabled and empty by default, hence it doesn't contain any additional instructions or information for the request.

        5. "body": {"mode": "raw", "raw": ""} - This refers to the body of the API request. As it's a GET request, typically there will be no request body. The 'mode' is set to 'raw' but no data (raw: "") is sent across in the body.
           
        This sums up each part of the data in this endpoint, providing a comprehensive understanding for users who intend to use this API.
      security:
        - bearerAuth: []
      parameters:
        - name: profileId
          in: query
          schema:
            type: string
          example: profileId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/profile/all:
    get:
      tags:
        - ConnectProfile
      summary: Connect - Profile - Get All
      description: |-
        1. "name": This field indicates the name of the API endpoint, which in this case is "Connect - Profile - Get All". This will help users understand the purpose of this API endpoint.

        2. "request": This field contains information about the HTTP request that is sent to the endpoint.

        3. "auth": This nested field under request specifies the authentication method and the necessary details for accessing the endpoint.

            a. "type": The type of authentication used. Here, it's a "bearer" token.
            
            b. "bearer": A list of tokens used for bearer authentication.
            
            c. "key": The key for the token is set to "token".
            
            d. "value": The value field of the bearer token is set to "BearerToken".
            
            e. "type": This indicates the data type of the bearer token, which is "string".

        4. "method": This field defines the HTTP method used to send requests to the server. In this case, it is a "GET" request, which retrieves information from the server.

        5. "url": The URL field provides the exact address where the API request is being sent. Here, it includes a placeholder 'accountId' which should be replaced with the actual account Id.

        6. "headers": This is an array of headers that are being sent along with the API request. There is a default header which is currently disabled in the provided data.

        7. "body": This field represents the data being sent with the request. 

            a. "mode": It describes the format of the data being sent in "body". In this case, the data format is "raw" meaning that no specific formatting is being utilized.
            
            b. "raw": This field contains the raw body content sent with the request. Currently, it is empty implying no specific content is being sent with the body of the request.
           
        Remember to replace placeholders like "BearerToken" and "accountId" with actual values before making the request.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/profile/delete:
    post:
      tags:
        - ConnectProfile
      summary: Connect - Profile - Delete
      description: |-
        This endpoint is called "Connect - Profile - Delete". It's responsible for deleting a profile in the application. This endpoint expects a POST request and uses Bearer token authentication. Detailed description of each part is as follows:

        1. "name": The name of the endpoint. This is used for identifying and sorting the endpoint in the collection.

        2. "request": Contains all the necessary details for making the request.

        3. "auth": Specifies the authentication type to be used in the request.
           
           a. "type": The type of authentication. Here, it's "bearer".
           
           b. "bearer": It's an array containing the bearer token details.
              
              i. "key": The name of the key. Here it is "token".
              
              ii. "value": The value for the key. Here it is "sessionId".
              
              iii. "type": Specifies the type of data. It's a "string" in this case.

        4. "method": The HTTP method to be used when making the request. For this endpoint, "POST" method is used.

        5. "url": The URL where the request will be sent. Here, it's "http://localhost:3000/api/connect/profile/delete".

        6. "headers": An array holding the headers for the request. In this case, it's default and is disabled. Meaning, no additional headers are sent with the request.

        7. "body": Describes the body of the request.
           
           a. "mode": Shows the mode of the body in the request. Here it's "raw", which means that the body contains raw data.
           
           b. "raw": The actual data in the body as a raw string. This string should be a JSON object and it contains "sessionId", "accountId", and "profileId".

        In summary, to use this endpoint, you should have a valid session Id, account Id, and profile Id (all of type string). The endpoint then takes these details, included as raw data in the body of the request, and uses it to delete a profile within the application.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"profileId\":\"profileId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/video/create:
    post:
      tags:
        - ConnectVideo
      summary: Connect - Video - Create
      description: |-
        This endpoint is named "Connect - Video - Create". The purpose of this endpoint is to create a new video connection. It functions through a POST method, signifying data being sent to the server to create a new resource.

        1. "auth": This part of the endpoint specifies the type of authentication to be used. In this case, it's "bearer", which means it uses bearer tokens for authentication. There's a key named "token" and its value is expected to be a string, typically an encrypted string unique to each user session.

        2. "method": This refers to the HTTP method used. Here, it's a POST request that is used when you want to send some data to the server, like when you submit a form. 

        3. "url": This is the specific URL at which the request is to be made. Here, it is to 'http://localhost:3000/api/connect/video/create'.

        4. "headers": These are the request headers which contain aspects regarding the request and its requirements. In this case, the headers have been left blank and are disabled, indicating that no additional metadata is required in the headers for the request.

        5. "body": This section contains the data that is being sent to the URL. It's in 'raw' mode, which means the text will be sent as it is with no additional formatting. It's written in JSON format. 

        The request body contains several items:

           a. "sessionId": This is presumably a unique identifier for the given user's session.

           b. "accountId": A unique identifier for the user's account.

           c. "provider": Here, the provider is stated as 'facebookpage'. It signifies the video provider platform.

           d. "streamAction": Represents the action to be taken on the stream, it takes arguments such as 'details', 'start', or 'stop'.

           e. "streamTitle": Title for the video stream. In this case, it's 'test'.

           f. "pageName": Name of the page where the video will be streamed, here it's 'unpictures'.

           g. "description": This data contains a brief about the live stream and here it says, 'this is to test live streaming automation on belading'.

           h. "isEnabled": This is a boolean flag used for enabling or disabling the body. Here, its value is true which means the body is enabled.

        6. "options": This is where you would specify any additional options for the 'body'. Here, the 'raw' body data is specified to be in 'json' language.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                provider: facebookpage
                streamAction: details
                streamTitle: test
                pageName: unpictures
                description: this is to test live streaming automation on beladed
                isEnabled: true
      security:
        - bearerAuth: []
      responses:
        undefined:
          content:
            text/plain:
              schema:
                type: string
              examples:
                example-0:
                  summary: Afreecatv
                  value: null
                example-1:
                  summary: BreakersTv
                  value: null
                example-2:
                  summary: Facebook
                  value: null
                example-3:
                  summary: Instagram
                  value: null
                example-4:
                  summary: Kick
                  value: null
                example-5:
                  summary: Linkedin
                  value: null
                example-6:
                  summary: Mixcloud
                  value: null
                example-7:
                  summary: picarto
                  value: null
                example-8:
                  summary: restream
                  value: null
                example-9:
                  summary: Rumble
                  value: null
                example-10:
                  summary: steam
                  value: null
                example-11:
                  summary: telegram
                  value: null
                example-12:
                  summary: trovo
                  value: null
                example-13:
                  summary: vaughn
                  value: null
                example-14:
                  summary: vimeo
                  value: null
                example-15:
                  summary: x
                  value: null
                example-16:
                  summary: Youtube
                  value: null
  /api/connect/video/createsettings:
    post:
      tags:
        - ConnectVideo
      summary: Connect - Video - Create Settings
      description: |
        This endpoint is named "Connect - Video - Create Settings". It uses the POST method to save new video settings. The request URL for the endpoint is "http://localhost:3000/api/connect/video/createsettings".

        A bearer token is required for authentication.

        The body of the request needs to be a RAW JSON object with the following fields:

        1. "sessionId": This is required and should be the session ID string for the user.
        2. "accountId": This is required and should be the account ID string for the user.
        3. "name": A string to represent the name of the video stream.
        4. "displayName": The name that will be displayed for the stream.
        5. "tags": A comma-separated string of keywords related to the stream.
        6. "title": The title of the streaming event.
        7. "website": The URL where the stream will be hosted.
        8. "description": A brief description of the streaming event.
        9. "identifierKey": A unique identifier key.
        10. "apiKey": The API key for the streaming server.
        11. "apiSecret": The secret key paired with the API key.
        12. "apiClientId": Client ID for the API.
        13. "authToken": An authorization token for streaming server authentication.
        14. "refreshToken": Token used to refresh the authorisation token.
        15. "providerName": Name of the video streaming service provider.
        16. "providerId": Unique identifier for the video streaming service provider.
        17. "uniqueKey": A unique key specific to the video stream.
        18. "authUsername": Username needed for the authentication process.
        19. "authPassword": Password needed for the authentication process.
        20. "authEmail": Email used for authentication process.
        21. "authSecurity": Security code for authentication.
        22. "recaptchaCode": The re-captcha validation code.
        23. "rtmpUrl": The URL of the RTMP server where the stream is broadcasted.
        24. "streamKey": A unique key for the video stream.
        25. "region": The geographic region of the RTMP server.
        26. "channelUrl": The URL for the video streaming channel.
        27. "server": The specific server used to handle the stream.
        28. "createdAt": Timestamp representing when the video stream settings were created.
        29. "updatedAt": Timestamp representing when the video stream settings were last updated.
        30. "createdBy": Identifier for the user who created the video stream settings.
        31. "updatedBy": Identifier for the user who last updated the video stream settings.

        Ensure that all date and time values are represented in a valid ISO 8601 format (i.e., "YYYY-MM-DDTHH:mm:ssZ"). All keys must be enclosed by double quotes as per the JSON standard, and all string values must also be enclosed by double quotes.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Video Stream
                displayName: My Stream Display Name
                tags: live,streaming,video
                title: Live Streaming Event
                website: https://example.com
                description: This is a live streaming event for our new product launch.
                identifierKey: uniqueIdentifier123
                apiKey: API_KEY_ABC123
                apiSecret: SECRET_KEY_DEF456
                apiClientId: CLIENT_ID_XYZ789
                authToken: AUTH_TOKEN_123456
                refreshToken: REFRESH_TOKEN_789012
                providerName: rumble
                providerId: yt_provider_001
                uniqueKey: uniqueKey_001
                authUsername: labourkamail69@gmail.com
                authPassword: Demopass1?
                authEmail: labourkamail69@gmail.com
                authSecurity: securityCode123
                recaptchaCode: recaptcha123
                rtmpUrl: rtmp://stream.example.com/live
                streamKey: streamKey_ABC123
                region: us-west-1
                channelUrl: https://youtube.com/channel/xyz
                server: server_001
                createdAt: '2024-08-31T12:34:56Z'
                updatedAt: '2024-08-31T12:34:56Z'
                createdBy: user123
                updatedBy: user123
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/video/update:
    put:
      tags:
        - ConnectVideo
      summary: Connect - Video - Update
      description: |-
        This endpoint is named "Connect - Video - Update". It's used to update video connect details with the method PUT. 

        1. "auth": Represents the authentication part of the request.
          - "type": The type of authentication used. In this case, it's "bearer" which means it uses bearer token authentication.
          - "bearer": An array with the authentication information bearing the key, value, and type. The key is the "token", the value should be the actual "BearerToken", and the type is "string".

        2. "method": Represents the HTTP method used which is "PUT" in this case.

        3. "url": The URL where the request will be sent. Here, it is "http://localhost:3000/api/connect/video/update".

        4. "headers": An array of objects that represents any custom headers to be sent along with the request. A "Client-UUID" header is given which should have the client's UUID as the value.

        5. "body": Contains the data to be sent along with the request.
          - "mode": The mode of sending body data. "raw" indicates data will be sent in a string format.
          - "raw": The actual data. It contains multiple parameters to update connect information like connectId, sessionId, accountId, name, description, tags, profilePhotoUrl, coverPhotoUrl, minimumTipAmount, unlockAmount, category, subCategory, searchType, isEnabled, isConnectPrivate, isTournamentOnly, isConnectDefault, isPreLiveConnectAds, isPostLiveConnectAds, breakPreLiveConnectUrl, breakLivePauseConnectUrl, breakPostLiveConnectUrl. All parameters are represented as keys in JSON format.
          - "options": Specifies that the raw body contains JSON data.

        Please ensure to replace key values in "bearer" authentication and "headers", as well as all the parameters in "raw" body with actual values.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                connectId: connectId
                sessionId: sessionId
                accountId: accountId
                name: MyNikeConnect
                description: This connect is my second connect
                tags: second,connect
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                unlockAmount: 100
                category: General
                subCategory: Specific
                searchType: Game
                isEnabled: true
                isConnectPrivate: true
                isTournamentOnly: false
                isConnectDefault: true
                isPreLiveConnectAds: true
                isPostLiveConnectAds: true
                breakPreLiveConnectUrl: https://example.com/break-pre-live.mp4
                breakLivePauseConnectUrl: https://example.com/break-paused-live.mp4
                breakPostLiveConnectUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/video/getsettings:
    get:
      tags:
        - ConnectVideo
      summary: Connect - Video - Get Settings
      description: |-
        This endpoint description details the "Connect - Video - Get Settings" API request. Here's what you need to know about the data provided:

        - `name`: This is the name of the endpoint, which is "Connect - Video - Get Settings". It uniquely identifies this endpoint for any function or operation it might serve in a given API.

        - `request`: This is a JSON object containing all the details of the HTTP request to be made. Said request is broken down into several components as follows:

        - `auth`: The authentication method used for this API endpoint. It employs Bearer Authentication (token-based) method, which is a type of HTTP authentication.
          - `type`: It is "bearer" denoting the Bearer Authentication being used.
          - `bearer`: An array that holds the authentication token. The `key` is "token" and its `value` contains the Bearer Token needed for accessing this endpoint. The `type` indicates that the token is a string.

        - `method`: This indicates the type of HTTP method used for the request. Here it is "GET", that means data is being retrieved from the server at the provided URL.

        - `url`: This is the endpoint's URL and holds the server address and path where the Get request will be sent. It includes query parameters for `accountId`, `sessionId`, and `providerName` whose values need to be supplied when making the API request.

        - `headers`: This is an array of header fields to be included in the HTTP request. The descriptions of the properties are as below.
          - `key`: The name of the header field.
          - `value`: The value of the header field.
          - `type`: This indicates the type of the header. Here it is a "default" header.
          - `disabled`: It denotes whether or not the header is disabled. In this case, the value is set as "true" which means the header is disabled and it will not be sent with the HTTP request. 

        Bear in mind that the token's value in 'auth', 'accountId', 'sessionId', and 'providerName' in the URL, are placeholders and need to be replaced with real values when making a request to the API.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: providerName
          in: query
          schema:
            type: string
          example: youtube
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/video/get:
    get:
      tags:
        - ConnectVideo
      summary: Connect - Video - Get
      description: |-
        This endpoint is used to retrieve video related data on a specific connection. The endpoint's description is as follows:

        - **name**: Represents the name of the endpoint. In this case, it is "Connect - Video - Get". This name shows the purpose of the endpoint, which is to fetch video data for a specific connection.

        - **request**: Contains all the requirements for making a request to the server. 

            - **auth**: This field is for authenticating the request. In this case, the type of authentication required is a bearer token. The bearer token needs to be placed within this field with the key `token` and the value `BearerToken`. It must be a string.

            - **method**: This represents the HTTP method used for this endpoint. In this case, the 'GET' method is used which retrieves data from the server.

            - **url**: This is the URL to which the request is made. In this case, it is `http://localhost:3000/api/connect/video/get/?connectId=connectId`. The `connectId` should be replaced with the actual connection ID for which the video data needs to be fetched.

            - **headers**: Here you can place any additional information needed for the request, but currently there is a default empty header set which is disabled.

            - **body**: This is where the content of the request is stored. In some endpoints, you would place additional information needed for a successful request. For this 'GET' method, there isn't any body present, hence 'mode' is set to 'raw' and 'raw' is kept empty.
      security:
        - bearerAuth: []
      parameters:
        - name: connectId
          in: query
          schema:
            type: string
          example: connectId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/video/all:
    get:
      tags:
        - ConnectVideo
      summary: Connect - Video - Get All
      description: |-
        1. "name": This field denotes the name of the API endpoint. In this case, it is named "Connect - Video - Get All". It signifies that this API is used to fetch all video connections.

        2. "request": It contains all the information related to the HTTP request that will be sent.

        3. "auth": It contains the authentication data, which is used to authenticate the request.

           a. "type": This signifies the type of authentication. Here, it is "bearer", which represents bearer token authentication.
           
           b. "bearer": This field represents an array of bearer tokens that will be used for authentication.
            
           c. "key": Represents the key name. Here the key used is "token".
           
           d. "value": This field contains the actual token value. Here it is "BearerToken".
           
           e. "type": Specify the data type of the value. In this case, the data type is "string".

        4. "method": This field specifies the HTTP method used for the request. Here, the "GET" method means the request is trying to retrieve data from specified URL.

        5. "url": This field holds the URL to which the HTTP request will be sent. "http://localhost:3000/api/connect/video/all/?accountId=accountId" is the API's endpoint.

        6. "headers": This field is an array that contains the headers that needs to be sent along with the HTTP request. In this particular example, an empty default header is defined, with a "disabled" field set to true, hence it's not used in the request.

        7. "body": This section contains the body of the HTTP request.  Here the "mode" is set to "raw", which means the request body data is sent as it is. The "raw" field is empty, which indicates there is no data sent in the body.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/connect/video/delete:
    post:
      tags:
        - ConnectVideo
      summary: Connect - Video - Delete
      description: |-
        1. "name": This field represents the name of the endpoint. Here, the endpoint is named as "Connect - Video - Delete", indicating it is related to deleting a video connection within some service.

        2. "request": This field includes all the necessary details for making the API request.

        3. "auth": The auth section contains details about the authorization required for the endpoint. The type indicates it's a Bearer token system. A bearer token is required to authenticate each request to this endpoint. 

        4. "bearer token": The token is a property of the bearer authentication method. Here, the key for the token is "token", indicating you pass the token under this key. The value is the sessionId, which means the sessionId is used as token. The type tells us the token is a string.

        5. "method": The request method used by this API endpoint is "POST". The POST method is typically used to send data to a server to create a resource.

        6. "url": It refers to the specific address on the internet where the request is being sent. This API request is pointing to "http://localhost:3000/api/connect/video/delete".

        7. "headers": Headers let the client and the server pass additional information along with an HTTP request or response. The given header here is disabled and there are no key-value pairs.

        8. "body": The body field is intended for the additional data you want to send with your request. Here, it's in raw JSON format with "sessionId", "accountId", and "connectId" as keys.

            - "sessionId": Represents the id of the user's session.
            
            - "accountId": Specifies the user's account id.
            
            - "connectId": Denotes the id of the connect feature/module within the service.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"connectId\":\"connectId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/events/category/create:
    post:
      tags:
        - EventsCategory
      summary: Events - Category - Create
      description: |-
        This endpoint is named "Events - Category - Create" and is utilized to create a category within an events context.

        The request is made via the "POST" method to the URL "http://localhost:3000/api/events/category/create".

        A bearer token is required for authentication, denoted by the "auth" field. It requires a "token" key whose value should be your unique BearerToken. This value will be expected as a string type.

        The headers are set to default and have no defined keys or values. The disabled field set to true means the default headers are not functional unless defined.

        The "body" of the request should be in raw mode with a raw JSON data containing the following key-value pairs:

        1. "sessionId": This is a required string that stands for the unique session ID.
        2. "accountId": This represents the unique account ID involved in the creation of the event and is also a required string.
        3. "name": This refers to the technical name of the event category you wish to create. It is expected in string format.
        4. "displayName": This represents the show name for the event category. This name can be user-friendly and more descriptive. The value should be a string.
        5. "description": A brief text providing information about the event category. This should be a concise summary of what the category is about. This field accepts a string type value.
        6. "tags": This is to include any labels or keywords related to the event category. These tags make the event more searchable and should be sent as a comma-separated string.

        The option for the body mode is set to 'raw' and language is expected to be in 'json' format which implies that the body values need to be in valid JSON syntax.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: Miami Art Week 5
                displayName: Miami Art Week 2024
                description: An immersive celebration of art and culture during Miami Art Week.
                tags: Art,Exhibition,Miami,Culture
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/events/category/update:
    put:
      tags:
        - EventsCategory
      summary: Events - Category - Update
      description: |-
        This endpoint is named "Events - Category - Update" and is a service URL to update the details of a specific event category. 

        1. The `request` object has several properties within it like `auth`, `method`, `url`, `headers`, & `body`.

           - The `auth` object describes the authentication method used for this endpoint. This API uses Bearer Token authorization. The field named `token` should contain the actual Bearer Token needed as authorization credentials to connect to the API.

           - The request `method` is `PUT`, which is typically used for updating resources.

           - The `url` is the endpoint's URL to which the request should be sent. This URL is used to update the event category.

           - The `headers` object contains additional elements sent along with the request. This API requires a `Client-UUID` for identification purposes.

        2. The `body` object inside the `request` object carries all the data needed to update an event category.

           - The `mode` is `raw`, meaning the data is sent exactly as entered.

           - The `raw` field contains the actual data to be sent. This should be a JSON containing: 
               - `categoryId`: The unique identifier for the category.
               - `sessionId`: The active session's identifier.
               - `accountId`: The user's account identifier.
               - `name`: The new name for the event.
               - `displayName`: The new display name for the event.
               - `description`: A detailed description of the event.
               - `tags`: Relevant tags to associate with the event, separated by commas.

           - The `options` object provides metadata about the body content. It indicates that the language used in the `raw` body is `json`.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                categoryId: eventCategoryId
                sessionId: sessionId
                accountId: accountId
                name: Miami Art Week 3
                displayName: Miami Art Week 2024
                description: An immersive celebration of art and culture during Miami Art Week.
                tags: Art,Exhibition,Miami,Culture
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/events/category/get:
    get:
      tags:
        - EventsCategory
      summary: Events - Category - Get By Account ID
      description: |-
        This endpoint corresponds to `Events - Category - Get By Account ID`. It is used to fetch specific event categories linked to a particular account ID.

        1. `name`: This data field represents the name of the endpoint. In this case, it is 'Events - Category - Get By Account ID'. This indicates that the data retrieved via this endpoint relates to specific categories of events linked to a provided account ID.

        2. `request`: This data field encapsulates all the information pertaining to the API call being made. 

        3. `auth`: This data object within the request field specifies the kind of authorization required for this API call. For this endpoint, 'bearer' authorization is used.

            - `type`: The type of authorization used. Here, it's a 'bearer' type authorization.
            
            - `bearer`: It's an array having bearer token details.
            
                - `key`: The key referring to type of the authorization. Here it's 'token'.
                
                - `value`: Value field for the key, i.e., the actual Bearer token value goes here.

                - `type`: Specifies the type of value that's expected for this token. In this case, it's a 'string'.

        4. `method`: This data field specifies the HTTP method being employed for this API call. For this endpoint, the 'GET' method is used, which is typically used to retrieve data.

        5. `url`: This data field represents the Uniform Resource Locator (URL) which is the endpoint being hit by this API call. For this endpoint, it's 'http://localhost:3000/api/events/category/get/?accountId=accountId', where 'accountId' is a variable part of the URL and it should be replaced by the real account ID value while making request.

        6. `headers`: This is an array of objects where each object represents a key-value pair of headers being sent in the request. In this case, there's a default header defined but since 'disabled' is set to true, this header will not be sent in the request.

        7. `body`: This data object encapsulates any information provided to the particular API endpoint. In this case, it contains a 'raw' mode but no actual raw body has been specified hence it defaults to an empty string.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/events/category/all:
    get:
      tags:
        - EventsCategory
      summary: Events - Category - Get All By Account ID
      description: |-
        Here is the detailed description of each element in this endpoint:

        - `"name"`: This is the name of the endpoint. It's labelled as "Events - Category - Get All By Account ID". It suggests that this endpoint would fetch all the events in a category, filtered by the provided account ID.

        - `"request"`: This describes the details of the HTTP request that will be made to the specified URL.

          - `"auth"`: This represents the authorization needed for this request.
          
            - `"type"`: This indicates the type of authorization which is "Bearer" in this case.
              
            - `"bearer"`: This is an array which contains the details of the Bearer token.
              
              - `"key"`: This indicates the name of the parameter which is "token".
                
              - `"value"`: This contains the value of the parameter. You are supposed to fill "BearerToken" here.
                
              - `"type"`: This indicates the datatype. In this case, it's a string.

          - `"method"`: This indicates the HTTP method used for the request. Here, it's "GET" which means that data is being fetched from the server.

          - `"url"`: This represents the URL to which the request will be sent. In this case, the base URL is 'http://localhost:3000/api/events/category/all/' with a query parameter 'accountId' where you must provide the 'accountId' with which you want to filter the results.

          - `"headers"`: This is an array that contains a list of headers to be sent with the request. No headers are set in this case as the type is "default" and it's disabled.

          - `"body"`: This part contains the body of the request. There is no body for this request because it's a GET request and the 'mode' is set to 'raw'.
          
        Make sure to replace 'BearerToken' and 'accountId' with actual values while using this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/events/category/delete:
    post:
      tags:
        - EventsCategory
      summary: Events - Category - Delete
      description: |-
        This endpoint is named "Events - Category - Delete". As the name denotes, this API is generally used for deleting categories under events. The comprehensive details of the data in this endpoint are as defined as follows:

        1. "name": This data represents the name of the API endpoint. In this given context, the endpoint name is "Events - Category - Delete". 

        2. "request": This is the primary body of the API call which contains all the necessary data to perform the action.

        3. "auth": It stands for Authorization. This API uses the Bearer token method for authorization. This data contains authorization type and bearer token information.

            - "type": This signifies the Type of Authorization being used. Here, it's Bearer Authorization, representing an HTTP authentication scheme that involves security tokens called bearer tokens.
            - "bearer": This is an array of data for the bearer token.
                - "key": The bearer token key, referenced as "token".
                - "value": The value of the key, here referred as "sessionId".
                - "type": Signifies the data type of the bearer token. Here, it is a string.

        4. "method": The HTTP method used for the API call. Here, it is POST that usually means data will be sent to the server creating a new resource.

        5. "url": The URL where the API request will be sent to. The given URL in this case is http://localhost:3000/api/events/category/delete.

        6. "headers": With a key-value pair structure, this field contains the additional data sent with the request. In this case, it appears empty and is disabled.

        7. "body": The body of the request. This contains all the information that needs to be sent to the server.

            - "mode": The mode of the body denotes how the data is being sent. Here, it is in "raw" format that could include text or JSON or XML.
            - "raw": It holds the raw data that need to be sent. Here, the data consists of three different keys i.e., sessionId, accountId, and a categoryId. These hold the values of Session ID, Account ID and Event's Category ID respectively. The server will use this data to delete the specific category.
          
        Each field plays a crucial role in successfully making a request and getting a response from the server.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"categoryId\":\"eventsCategoryId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/events/general/create:
    post:
      tags:
        - EventsGeneral
      summary: Events - General - Create Auto
      description: |-
        1. `name`: This is the title of the API endpoint. This endpoint is labeled as "Events - General - Create Auto".

        2. `request`: This section contains all the details necessary to make a network request.

        3. `auth`: This part encloses information about the authentication type required by the API endpoint. This particular endpoint requires `Bearer` type authentication. You need to input the `BearerToken` to access this endpoint successfully. The type of the value is a string.

        4. `method`: It specifies the HTTP method used for the request. This particular request requires the `POST` method.

        5. `url`: This is the actual URL where the request will be sent. For this endpoint, it's "http://localhost:3000/api/events/general/create".

        6. `headers`: This section comprises the headers to be sent along with the request. Currently, the default headers value is disabled and not defined.

        7. `body`: This is where the actual data to be sent with the request is defined. For the current request, the "raw" mode is used and is defined with certain fields in a JSON format. Here, the following list of attributes are defined:
           - `accountId`: Identifies the account. Replace it with your actual account ID.
           - `sessionId`: Represents the session ID. You should replace this with your actual session ID.
           - `category`: Specifies the category of the event. Replace it with the desired category.
           - `subCategory`: Provides details about the event's subcategory.
           - `title`: This is the title of the event.
           - `description`: It is a short summary of the event, explaining what it's about.
           - `tags`: Contains the tags for the event, divided by comma. This labels the event for easy searching and classification.
           - `date`: Indicates the date of the event in the format YYYY-MM-DD.
           - `time`: Specifies the time of the event in the format HH:MM:SS.
           - `details`: Could hold additional, more detailed information. For this instance, it's left empty but could be populated if required.

        8. `options`: Specifies additional particulars about the request body. It's set to JSON language for the format of the raw input.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                category: My New Category
                subCategory: My Shiny SubCategory
                title: Invisible Luggage Exhibition
                description: An exhibition exploring the unseen burdens of social justice, gender identity, and immigration.
                tags: Art,Exhibition,SocialJustice,GenderIdentity,Immigration
                date: '2024-12-31'
                time: '01:00:00'
                details: {}
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/events/general/update:
    put:
      tags:
        - EventsGeneral
      summary: Events - General - Update Auto
      description: |-
        This endpoint, named 'Events - General - Update Auto', allows you to update the details of an event. The request requires several pieces of information categorized into four main sections: 'auth', 'method', 'url', and 'body'.

        1. Authentication ('auth'): It uses the bearer token authentication method, taking in a string type token under the key 'token'.

        2. Method: The HTTP method being used is PUT, indicating this endpoint is used to update existing data.

        3. URL: The URL where the request is sent is 'http://localhost:3000/api/events/general/update'.

        4. Headers: There is an additional header provided via the 'Client-UUID', which presumably carries a unique identifier for the client sending the request.

        5. Request Body: The body of the request contains the information being updated. It's written in raw JSON, with the following fields:
           
           -  'eventId': The unique identifier for the event you want to update.
           
           -  'accountId': The unique identifier of the account associated with this event.
           
           -  'sessionId': The unique identifier of the session associated with this operation.
           
           -  'category' and 'subCategory': The new event's overall category and specific subcategory, respectively.
           
           -  'title': The title of the event.
           
           -  'description': A brief description of what the event is about.
           
           -  'tags': List of keywords associated with the the event, separated by commas.
           
           -  'date' and 'time': The date and exact time of the event.
           
           -  'details': More detailed properties associated with the event represented as objects, including:
              
              -  'startDate' and 'endDate': The starting and ending date of the event, respectively.
              
              -  'location': Where the event will take place.
              
              -  'featuredArtists': A list of featured artists at the event.
              
              -  'collections': The collections featured at the event.
              
              -  'events': List of auxiliary events taking place, each with its 'type', 'date', 'time', and its unique fields like 'activities', 'topic', or 'chef'.

        Please note that all these details are required in the exact order as mentioned above. Make sure to replace the placeholder values with your data for a successful update.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                eventId: eventId
                accountId: accountId
                sessionId: sessionId
                category: My New Category
                subCategory: My Shiny SubCategory
                title: New Years Celebration
                description: An exhibition exploring the unseen burdens of social justice, gender identity, and immigration.
                tags: Art,Exhibition,SocialJustice,GenderIdentity,Immigration
                date: '2024-12-31'
                time: '01:00:00'
                details:
                  startDate: '2024-12-02'
                  endDate: '2024-12-15'
                  location: Historic Hampton House, Miami, FL
                  featuredArtists:
                    - Beth Rudin DeWoody
                    - Zoe Lukov
                    - Laura Dvorkin
                    - Maynard Monrow
                  collections:
                    - Rubell Family Collection
                    - Bernard Lumpkin Collection
                    - Joy Simmons Collection
                  events:
                    - type: Opening Night
                      date: '2024-12-02'
                      time: '18:00'
                      activities:
                        - Cocktails
                        - Preview Dinner
                        - Artist Introductions
                    - type: Panel Discussion
                      date: '2024-12-05'
                      time: '15:00'
                      topic: Art and Social Justice
                    - type: VIP Dinner
                      date: '2024-12-10'
                      time: '19:00'
                      chef: Jessica Harris
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/events/general/get:
    get:
      tags:
        - EventsGeneral
      summary: Events - General - Get By Short ID
      description: |-
        The provided data describes an HTTP GET request under the name "Events - General - Get By Short ID". This suggests an API endpoint that fetches data related to a general event via its unique Short ID.

        1. `"name"`: It's the title of your API endpoint. The name specifies what this endpoint is meant for. It's called "Events - General - Get By Short ID" which implies this endpoint is for fetching the details of a general event by its short ID.

        2. `"request"`: This contains the specifications for the HTTP request being made.

        3. `"auth"`: This describes the authentication type used for the request. The `type` is "bearer", it means the request needs a bearer token to get authorized access.

           - `"bearer"`: This is a list where each object consists of a `key`, `value` and `type`. The `key` here is "token", the `value` is placeholder for the actual bearer token, and the `type` is "string" indicating the data type of the token.

        4. `"method"`: The HTTP method used for the request. It is a "GET" method, meaning this request is attempting to retrieve data from the server.

        5. `"url"`: The URL to which the request is directed. It's "http://localhost:3000/api/events/general/get" with a query parameter `shortId=eventShortId` which is a placeholder for a specific event's short identifier.

        6. `"headers"`: This contains the headers to be attached to the request. A list of objects but the provided object is empty and has default type which is flagged as disabled. This indicates there are no additional headers required for the request.

        7. `"body"`: Describes the body of the request. The mode is "raw", which implies that the body of the request will be sent as raw data. However, the `raw` field is an empty string, suggesting that this GET request does not require a request body.
      security:
        - bearerAuth: []
      parameters:
        - name: shortId
          in: query
          schema:
            type: string
          example: eventShortId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/events/general/all:
    get:
      tags:
        - EventsGeneral
      summary: Events - General - Get All By Sub Category ID
      description: |+
        This endpoint is named "Events - General - Get All By Sub Category ID". It is utilized to fetch all events belonging to a specific sub-category.

        Let's take a deeper look at its elements:

        1. `name`- This is the name of endpoint which communicates its purpose, in this case, to retrieve all general events by their sub category ID.

        2. `request`- This section describes the details of the HTTP request. Here's what each data means:

            - `auth`: This speaks about the authorization method used for the request. The type is `bearer`. A bearer token named "BearerToken" is used for authorization.

            - `method`: The HTTP method used for this request is `GET`, which is usually used for retrieving data.

            - `url`: This is the URL endpoint to which the request is sent. It consists of subCategoryId as a query parameter to filter events by their sub-category. Replace `eventSubCategoryId` with the actual sub-category ID for which you want to fetch the events.

            - `headers`: This is an array of headers required by the request. There are no specific headers required for this request as it's empty and disabled by default.

            - `body`: This is the body of the request. However, for this GET request, the body mode is set to `raw`, which means you can send unstructured data. But in this case, there's no data to send so the raw field is empty.

        In conclusion, this endpoint uses a GET method to fetch all general events under a specific sub-category identified by its sub-category ID from the specified URL. It uses a Bearer Token for authorization. The response will contain all the general events data related to the sub-category.






      security:
        - bearerAuth: []
      parameters:
        - name: subCategoryId
          in: query
          schema:
            type: string
          example: eventSubCategoryId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/events/general/delete:
    post:
      tags:
        - EventsGeneral
      summary: Events - General - Delete
      description: |-
        The given data specifies details of an HTTP endpoint:

        1. **Name**: The unique identifier of the endpoint. In this case, the name is "Events - General - Delete," indicating this endpoint is used to delete general event data.

        2. **Request**: This represents the details of the HTTP request made to this endpoint.

            - **Auth**: This field describes the authorization type that the endpoint uses. In this case, the `type` is set to "bearer", meaning that it uses Bearer Authentication. Bearer Authentication is a schema where the sender and the recipient of an HTTP request can authenticate to each other by a bearer token. Here, the key for the token is named "token" and its value is "sessionId".
            
            - **Method**: This describes the HTTP method used for the request. Here, the method is "POST", which is typically used to send data to a server to create a new resource.

            - **URL**: This field contains the access link of the API. The present URL is "http://localhost:3000/api/events/general/delete", which indicates the server is currently running locally on port 3000.

            - **Headers**: This is typically used to provide additional information about the request. In this case, it is not utilized; the `key` and `value` fields are empty, and its `type` is set as "default", but it is `disabled`.

            - **Body**: This contains the data that is sent to the server. The mode here is "raw," meaning that the data is sent in a string format. The raw string contains a JSON string with keys "sessionId", "accountId", and "eventId" whose values would need to be instantiated by the user.

        In summary, this endpoint, "Events - General - Delete", is a POST Request that uses Bearer Authentication. It deletes events for the account specified by the "accountId", and the event specified by the "eventId". The session is specified by "sessionId". The API is currently hosted locally on port 3000.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"eventId\":\"eventId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/events/subcategory/create:
    post:
      tags:
        - EventsSubCategory
      summary: Events - SubCategory - Create Auto
      description: |-
        This endpoint is titled "Events - SubCategory - Create Auto". It uses POST method which typically implies creation of new data on the backend system.

        Here is a description of each data:

        1. **"name"**: The name of the endpoint, it represents the functionality of creating subcategory automatically in an Events system.

        2. **"request"**: Contains all the necessary details required to make a request.

        3. **"auth"**: Holds the authentication type and detail necessary to gain access to the API. It uses 'bearer' type authentication and expects a 'token' - a string which must be valid for successful access.

        4. **"method"**: The HTTP method used for request, in this case, it's a 'POST' method used for creating data.

        5. **"url"**: The URL where the request will hit to perform desired operation. Here, the request will hit 'http://localhost:3000/api/events/subcategory/create' to create an event subcategory.

        6. **"headers"**: Headers can contain additional information for the request. In this case, no headers are being sent, this field is left blank and disabled.

        7. **"body"**: It contains the information that will be attached to the request when sent. The mode 'raw' is used here which facilitates sending of data in unprocessed form, and the language used is 'json'.

        8. Within the body, some important parameters are passed:

           - **"sessionId"**: The session ID currently active.
           - **"accountId"**: The account ID of the user/session.
           - **"name"**: The name of the new subcategory that is to be created. 
           - **"displayName"**: The display name of the new subcategory that will be visible to users.
           - **"description"**: A brief description of the new subcategory.
           - **"tags"**: Tags associated with the new subcategory, separated by commas.
           - **"category"**: The parent category to which the new subcategory belongs.
           
        Remember to change these parameters as per the business or application scenario when making the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: Historic Hampton House 13
                displayName: Miami Art Week 2024
                description: An immersive celebration of art and culture during Miami Art Week.
                tags: Art,Exhibition,Miami,Culture
                category: A Special New Category 2
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/events/subcategory/update:
    put:
      tags:
        - EventsSubCategory
      summary: Events - SubCategory - Update Auto
      description: |-
        This endpoint, named "Events - SubCategory - Update Auto", is designed to handle HTTP PUT requests to update an existing sub-category of events. This is achieved by sending a PUT request to the endpoint url "http://localhost:3000/api/events/subcategory/update".

        Authentication for the request is handled using bearer token authentication, with the key "token" and the value is a "BearerToken" string. This security layer ensures that only authorized users can interact with the API.

        The request also includes a unique client identifier baked into the headers with 'key' as "Client-UUID" and 'value' as the 'ClientUUID' to trace requests back to the clients that made them. This value is of "default" type.

        The request payload or body is presented in raw mode using JSON language containing all the necessary information to update the sub-category of an event:

        - "subCategoryId": A unique identifier for the sub-category that you wish to update.
        - "sessionId": A unique identifier associated with the session of the user making this request.
        - "accountId": A unique identifier associated with the account of the user making this request.
        - "name": The new name you want to assign to the sub-category.
        - "displayName": A more user-friendly title for the sub-category that will be shown to users (different from the main 'name').
        - "description": A brief explanation or summary of what this sub-category represents.
        - "tags": A set of keywords associated with the sub-category to aid searchability or categorization of the sub-category. Tags are provided in string form, separated by commas.
        - "category": The main category to which this sub-category belongs. This could be any meaningful string that describes the type of events the sub-category belongs to. 

        Please input appropriate values for each key before sending the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                subCategoryId: eventSubCategoryId
                sessionId: sessionId
                accountId: accountId
                name: Miami Art Week 3
                displayName: Miami Art Week 2024
                description: An immersive celebration of art and culture during Miami Art Week.
                tags: Art,Exhibition,Miami,Culture
                category: A Special Shiny Category
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/events/subcategory/get:
    get:
      tags:
        - EventsSubCategory
      summary: Events - SubCategory - Get By Name
      description: |-
        This endpoint, which is titled "Events - SubCategory - Get By Name", is responsible for retrieving subcategories of events by their particular names. Here's a detailed description of each field and its data.

        1. "name" : This field denotes the name of the API endpoint which is "Events - SubCategory - Get By Name". This is useful for identifying and categorizing the endpoint in the collection.

        2. "request" : This field contains all the information needed to make a request to this endpoint.

        3. "auth": This section deals with the authorization needed to access the endpoint. It has three sub-fields:
          - "type": The type of authorization used, which in this case is a "bearer" token.
          - "bearer": This is an array of tokens required for bearer authorization:
            - "key": The name of the bearer token which is "token" in this case.
            - "value": The value of the bearer token.
            - "type": Specifies the datatype of the bearer token, as "string".

        4. "method": It indicates the HTTP verb that should be used when accessing this endpoint. Here, you should use a "GET" request.

        5. "url": It describes the address where the request should be sent. For this endpoint, the URL is "http://localhost:3000/api/events/subcategory/get/?name=eventSubCategoryName". Here, "eventSubCategoryName" parameter is passed along with the URL to fetch the specific subcategory data by name.

        6. "headers" : This is a list of headers that should be sent along with the request. The default header key and value are left empty and set to disabled as it's not necessary for this request.

        7. "body": This section concerns the body of the request. 
          - "mode": Indicates how the body should be sent. In this case, it has the value "raw", which means the body should be sent as a raw data string.
          - "raw": This sub-field is used to send raw data. However, as it's a GET request, there's no need to send any data in the body and hence it is left as an empty string.

        Please ensure to replace the "BearerToken" and "eventSubCategoryName" values with valid information before making the request to the endpoint.
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: query
          schema:
            type: string
          example: eventSubCategoryName
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/events/subcategory/all:
    get:
      tags:
        - EventsSubCategory
      summary: Events - SubCategory - Get All By Category ID
      description: |-
        Name: This is the label of the endpoint, which in this case is "Events - SubCategory - Get All By Category ID". This label is used to identify the endpoint in the API collection.

        Auth: This pertains to the authentication method required for the endpoint. In this case, a bearer token is needed for authentication. The 'key' specifies the type of token, which is a 'BearerToken'. The 'type' tells you that the token should be a string.

        Method: This field shows the HTTP method used by the endpoint. Here it is 'GET'. This method is usually used to retrieve data from the server.

        URL: This field specifies the URL where the request is sent. In this case, it is "http://localhost:3000/api/events/subcategory/all/?categoryId=eventCategoryId". This URL gets all sub categories by Category ID.

        Headers: Headers can be used to provide additional information about the request. In this case a default header is included but it is disabled and both the 'key' and 'value' fields are empty. 

        Body: This field contains the data that is sent to the server in a 'raw' format. However, for this endpoint the 'raw' body is empty as the data required ('categoryId') is passed as a parameter within the URL.
      security:
        - bearerAuth: []
      parameters:
        - name: categoryId
          in: query
          schema:
            type: string
          example: eventCategoryId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/events/subcategory/delete:
    post:
      tags:
        - EventsSubCategory
      summary: Events - SubCategory - Delete
      description: |-
        This endpoint is titled "Events - SubCategory - Delete". Its primary function is to delete a particular sub-category from the events category.

        Key details about this endpoint are listed below:

        1. Auth Type: This endpoint uses Bearer Token authentication. The specific token required in this case is referred to as a 'sessionId', and it must be of type 'string'.

        2. Request Method: The request method used for this endpoint is 'POST'.

        3. URL: The specific URL that needs to be hit for accessing this endpoint is "http://localhost:3000/api/events/subcategory/delete".

        4. Headers: The endpoint includes an empty, disabled default header. If needed, headers such as Content-Type could be added, but be aware that the current configuration does not require any.

        5. Body: The body of this request carries raw data. The raw data needs to have three key-value pairs:

            - "sessionId" which should correspond to the active session's ID.
            - "accountId" which corresponds to the account ID where the command is to be exercised.
            - "subCategoryId", which corresponds to the ID of the sub-category to be deleted from the events.

        It is important to ensure that the data is properly structured and all fields are filled in correctly before the request is sent to the designated URL.

        In summary, this represents a request to delete an events sub-category using the provided account and session details. The request is executed via POST method, and it requires Bearer Token authorization.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"subCategoryId\":\"eventSubCategoryId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/incentive/advertisement/create:
    post:
      tags:
        - IncentiveAdvertisement
      summary: Incentive - Advertisement - Create
      description: |-
        This endpoint titled as "Incentive - Advertisement - Create", is used to create new advertisements in the Incentive system. 

        It uses the POST method and the URL for this endpoint is "http://localhost:3000/api/incentive/advertisement/create". 

        The authentication required for this endpoint is type "bearer", with the bearer token used as the authorization key. 

        The request body is in raw JSON format, composed of details related to the advertisement including:

        - "accountId" is a string representing the account identifier under which the advertisement is created.
        - "sessionId" is a string, which represents the session in which the advertisement is created.
        - "title" represents the title of the advertisement.
        - "description" provides a brief about the advertisement.
        - "tags" are specific words or phrases that describe the advertisement.
        - "coverPhotoUrl" represents an online URL where the cover photo of the advertisement is hosted.
        - "websiteUrl" is the link to the company or product's website that the ad is promoting.
        - "tokenAmount" represents the amount of tokens assigned to this advertisement.
        - "scheduleDate" and "scheduleTime" specifies when the advertisement should be scheduled to go live.
        - "pageType" describes the type of page where the advertisement will be displayed.
        - "city", "region", and "country" describe the location targeting of the advertisement.
        - "keywords" are specific words or phrases related to the theme and category of advertisement.
        - "category" is the overall category to which the advertisement belongs.
        - "voteButtonQuantity" represents the number of voting buttons in the ad, and "voteButtonText1", "voteButtonText2" are the respective button texts.
        - "crossPlatformBudget" is an array representing the budget allocation for different platforms over a specific number of days.
        - "adShareSettings" indicates how the ad revenue will be split. 
        - "isPaused" is a boolean indicating whether the ad is currently paused or not. 

        The endpoint does not accept any specific header values by default. The response of the endpoint would need to be captured separately and is not included in this information.

        This document helps in understanding the data within the "POST" request for the "Incentive - Advertisement - Create" API endpoint. For each specific use-case, entries in the request body may need to be modified.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                title: Converse Shoes Campaign
                description: Promote the latest Converse shoes.
                tags: shoes,fashion,trending
                coverPhotoUrl: https://example.com/images/converse-shoes.jpg
                websiteUrl: https://example.com/converse
                tokenAmount: 10
                scheduleDate: '2024-11-25'
                scheduleTime: '10:00:00'
                pageType: Livestream
                city: Henderson
                region: Nevada
                country: United States
                keywords:
                  - category: Fashion
                    themes:
                      - Trending
                      - Shoes
                category: Electronics & Gadgets
                voteButtonQuantity: 2
                voteButtonText1: Buy Now
                voteButtonText2: Learn More
                crossPlatformBudget:
                  - platform: google
                    perDay: 100
                    numberOfDays: 7
                  - platform: meta
                    perDay: 50
                    numberOfDays: 14
                adShareSettings: 2 Way Split
                isPaused: false
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/incentive/advertisement/update:
    put:
      tags:
        - IncentiveAdvertisement
      summary: Incentive - Advertisement - Update
      description: |-
        The endpoint provides an avenue to update an existing advertisement incentive. It uses a PUT request to execute this operation. Below are the details of the endpoint and its various elements:

        1. **Name**: Identifies the endpoint, in this case, "Incentive - Advertisement - Update".

        2. **Request**: Contains various components for the PUT request:

            a. **Auth**: The authorization required to access this endpoint, which is of type "bearer". It includes a token which has to be provided for access.

            b. **Method**: Specifies the HTTP method used, which is PUT for updates in RESTful APIs.

            c. **URL**: The endpoint's URL where the request is sent- "http://localhost:3000/api/incentive/advertisement/update"

            d. **Headers**: Headers that have to be included in the request. Here, 'Client-UUID' is a compulsory header.

            e. **Body**: Contains the detailed data for the update request. It is sent in "raw" mode and should follow the JSON language. 
            
               i. The elements of an advertisement to be updated are: `accountId`, `sessionId`, `advertisementId`, `title`, `description`, `tags`, `coverPhotoUrl`, `websiteUrl`, `tokenAmount`, `scheduleDate`, `scheduleTime`, `pageType`, `city`, `region`, `country`, `keywords`, `category`, `voteButtonQuantity`, `voteButtonText1`, `voteButtonText2`, `crossPlatformBudget`, `adShareSettings`, `isPaused`. More details can be found in the request body.

        3. **Response**: It is not shown in the provided data, but it usually contains the data returned by the server in response to the request.

        Please note that all the keys in the body are mandatory for the endpoint to work correctly. Also, some values may require specific formatting(e.g. `scheduleTime` needs the format 'hh:mm:ss' and `scheduleDate` needs the format 'YYYY-MM-DD'). Make sure to replace the placeholder values with real ones when making actual requests.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                advertisementId: advertisementId
                title: Converse Shoes Campaign
                description: Promote the latest Converse shoes 2.0
                tags: shoes,fashion,trending
                coverPhotoUrl: https://example.com/images/converse-shoes.jpg
                websiteUrl: https://example.com/converse
                tokenAmount: 10
                scheduleDate: '2024-11-25'
                scheduleTime: '10:00:00'
                pageType: Livestream
                city: Henderson
                region: Nevada
                country: United States
                keywords:
                  - category: Fashion
                    themes:
                      - Trending
                      - Shoes
                category: Electronics & Gadgets
                voteButtonQuantity: 2
                voteButtonText1: Buy Now
                voteButtonText2: Learn More
                crossPlatformBudget:
                  - platform: google
                    perDay: 100
                    numberOfDays: 7
                  - platform: meta
                    perDay: 50
                    numberOfDays: 14
                adShareSettings: 2 Way Split
                isPaused: false
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/incentive/advertisement/get:
    get:
      tags:
        - IncentiveAdvertisement
      summary: Incentive - Advertisement - Get
      description: |-
        "name" : This field specifies the name of the API endpoint. Here, it is called "Incentive - Advertisement - Get".

        "request" : This field comprises the details of the API request.

        "auth" : This field represents the authentication method used for the API endpoint. It uses the bearer type authentication.

        "auth.type" : Shows the type of authentication used for the request. In this case, bearer token is used.

        "auth.bearer" : It is an array of authentication information.
           
        "auth.bearer.key" : Represents the specific key in the bearer token to be used for authentication, in this case "token".

        "auth.bearer.value" : Provides the value associated with the key used in the bearer token. The value is named "BearerToken".

        "auth.bearer.type" : Specifies the type of data the bearer token is, which is a string.

        "method" : This refers to the HTTP method used for the API request. Here, it is a "GET" method.

        "url" : This field contains the URL of the API endpoint. In this case, it is "http://localhost:3000/api/incentive/advertisement/get/?advertisementId=advertisementId&sessionId=sessionId&accountId=accountId"

        "url parameters" : The URL parameters in the endpoint are advertisementId, sessionId, and accountId.

        "headers" : This array holds the information for any headers to be sent in the request.
          
        "headers.key" : The key for a header item. In this case it is empty.

        "headers.value" : The value associated with the key in a header item. In this case it is empty.

        "headers.type" : Defines the type of a header item. Here, it is "default".

        "headers.disabled" : Shows the status of a header. Here, it is set as true, which means it is disabled and won't be added into the request headers.

        "body" : This field represents the body of the request which contains the data sent to the API endpoint. For this "GET" request, the body is empty.

        "body.mode" : Specifies the mode of data in the body of the request. In this case, it is set to "raw".

        "body.raw" : Holds the raw data in the body of the request. In this case, it is empty as there is no data being sent in the body for this GET request.
      security:
        - bearerAuth: []
      parameters:
        - name: advertisementId
          in: query
          schema:
            type: string
          example: advertisementId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/incentive/advertisement/all:
    get:
      tags:
        - IncentiveAdvertisement
      summary: Incentive - Advertisement - Get All
      description: |-
        The endpoint "Incentive - Advertisement - Get All" contains property details that are explained one by one as follows:

        "name": This is a title or summarizing description of the specified endpoint. In this case, "Incentive - Advertisement - Get All," indicates that endpoint receives all the incentive advertisements.

        "request": This object holds the information about the various properties of the network request that we're making.

          "auth": This specifies the type of authentication needed for the endpoint. Here, the type is 'bearer', which is a method for an HTTP client to provide a security token associated with them to the server.
          
            "bearer": An array where each object provides the key and value needed for authentication. Here the key is 'token' with the value as 'BearerToken'. The type defines the data type of value, i.e., it's a string.
          
          "method": This specifies the HTTP verb. In this case, it is a 'GET' request, which means this endpoint is used to retrieve resources.

          "url": This is the API endpoint where the request is being sent. The 'http://localhost:3000/api/incentive/advertisement/all/' is the URL of the endpoint. 

        Two query parameters 'sessionId' and 'accountId' are appended to the URL. These likely aid in fetching specific sets of data related to a given session and account. 

          "headers": An array of objects where each object represents a header's key-value pair to be included in the HTTP request. In this case, it's an empty header.

          "body": This defines the data that is sent through the HTTP request. Here, the mode is raw, which means the request is being sent as an unstructured bundle. As there's nothing in this endpoint's raw body, it's likely the data sent in body is empty.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/incentive/advertisement/delete:
    post:
      tags:
        - IncentiveAdvertisement
      summary: Incentive - Advertisement - Delete
      description: |-
        1. `"name"`: This is the name of your API endpoint. In this case, the `name` is "Incentive - Advertisement - Delete". This implies that this endpoint is used to delete an incentive advertisement.

        2. `"request"`: This outlines the details of the request made to the endpoint. It includes the authentication used, the request method, the url where the request should go to, headers if any, and the body of the request.

        3. `"auth"`: This describes the type of authentication used for this endpoint. In this case, it uses `bearer` authentication. When making a request to this endpoint, you must supply a "token" in the request headers. The `value` given here, "sessionId", suggests that you would replace this placeholder with the actual session ID for authentication.

        4. `"method"`: This is the HTTP Request method used for the endpoint. In this case, it is `POST`, meaning this endpoint is used for sending data to be processed to a resource on the server.

        5. `"url"`: This is the URL of the endpoint. It specifies where the request is sent when the endpoint is called. 

        6. `"headers"`: These are additional settings included with the HTTP request. Here, no specific key-value header pairs are given, and the only listed header is disabled, meaning it won't be sent with the request.

        7. `"body"`: This contains the data that you want to send to the route. It is in `raw` format, and for this endpoint, it contains a sessionId, accountId, and advertisementId. These would usually be replaced with actual values when making a request.

           - `"sessionId"`: The session ID which is likely used as a part of bearer 
             authentication.
           - `"accountId"`: Identifier for the specific account related to the request.
           - `"advertisementId"`: Identifier for the specific advertisement the request is focused on.

        Remember to replace "sessionId", "accountId" and "advertisementId" in the request body with actual values when using this endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"advertisementId\":\"advertisementId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/incentive/loyalty/create:
    post:
      tags:
        - IncentiveLoyalty
      summary: Incentive - Loyalty - Create NFT
      description: |-
        This endpoint represents the creation of a non-fungible token (NFT) in a loyalty incentive program with the following detailed specification:

        1. **Endpoint name:** Incentive - Loyalty - Create NFT

        2. **Authorization:** It requires a Bearer token for authorization. This token must be provided in the request header as a string format.

        3. **HTTP Method:** It's a POST request, indicating the creation or addition of a resource.

        4. **URL:** The service can be accessed via http://localhost:3000/api/incentive/loyalty/create.

        5. **Request Body:** Contains the attributes of the NFT to be created and it is written in raw JSON format.

            - **accountId:** Represents the account ID of the user.
            - **sessionId:** Defines the unique session ID.
            - **teamId:** Identifier for a particular team.
            - **category:** Represents the category of the NFT, in this case it is "Fashion & Accessories".
            - **loyaltyType:** Describes the nature of the reward, which is NFT here.
            - **title:** Title of the reward.
            - **description:** Brief details regarding the reward.
            - **tags:** Keywords related to the reward.
            - **price:** Cost of the reward.
            - **tokenAmount:** The number of tokens associated with the reward.
            - **isProcessPayment:** A boolean indicating if payment needs to be processed.
            - **isShipping:** A boolean indicating if the reward requires shipping.
            - **redirectUrl:** The URL user will be redirected to upon successful creation of NFT.
            - **couponCode:** Any applicable coupon code.
            - **websiteUrl:** Website where the reward can be redeemed.
            - **buttonText:** Text to show on the redeem button.
            - **releaseDate:** The date when the reward will be released.
            - **expiresDate:** The date when the reward will expire.
            - **activationType:** The method whereby the reward is activated.
            - **coverPhotoUrl:** The URL of the cover photo for the reward.
            - **videoPlaybackUrl:** The URL where a video demonstration of the reward can be viewed.
            - **galleryPhotos:** URLs of photos showcasing the reward.
            - **didInviteUsers:** Boolean to specify if users were invited to view the reward.
            - **invitedData:** Details about invitees.
            - **didShareItem:** Boolean to specify if the reward was shared.
            - **sharedData:** Details about where and how many times the reward was shared.
            - **didPromoteItem:** Boolean to specify if the reward was promoted.
            - **promotedData:** Array carrying details about the promotion if didPromoteItem is true.
            - **createdBy:** Identification of the creator.
            - **createdAt:** The precise time the reward was created.
            - **updatedBy:** Identification of the updater.
            - **updatedAt:** The precise time the reward was last updated. 

        6. **Response:** The endpoint doesn't specify a response structure, it probably sends back the created resource along with a success status.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                teamId: teamId
                category: Fashion & Accessories
                loyaltyType: NFT
                title: Exclusive Membership Reward
                description: Get access to premium features with this reward.
                tags: premium, membership, reward
                price: '29.99'
                tokenAmount: 250
                isProcessPayment: true
                isShipping: false
                redirectUrl: https://example.com/redeem
                couponCode: ''
                websiteUrl: https://example.com
                buttonText: Activate Reward
                releaseDate: '2024-11-25'
                releaseTime: '10:00:00'
                expiresDate: '2024-12-25'
                expiresTime: '23:59:59'
                activationType: auto
                coverPhotoUrl: https://example.com/images/reward-cover.jpg
                videoPlaybackUrl: https://example.com/videos/reward.mp4
                galleryPhotos:
                  - https://example.com/images/gallery1.jpg
                  - https://example.com/images/gallery2.jpg
                didInviteUsers: true
                invitedData:
                  - targetType: email
                    targetId: user001@example.com
                  - targetType: accountId
                    targetId: u12345bc-d87e-890f-gh12-ijk345678xyz
                didShareItem: true
                sharedData:
                  - platform: Facebook
                    shareCount: 50
                  - platform: Twitter
                    shareCount: 30
                didPromoteItem: false
                promotedData: []
                createdBy: admin123
                createdAt: '2024-11-20T14:30:00'
                updatedBy: admin123
                updatedAt: '2024-11-20T14:30:00'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/incentive/loyalty/update:
    put:
      tags:
        - IncentiveLoyalty
      summary: Incentive - Loyalty - Update
      description: |-
        This is the detailed description of the given endpoint data:

        Endpoint Name: "Incentive - Loyalty - Update"

        It is a put request type, meaning it's used to update an existing resource.

        Authentication:
        It uses bearer authentication. The bearer token should be passed in the token key.

        URL:
        This is the URL where the API request will be sent: "http://localhost:3000/api/incentive/loyalty/update".

        Headers:
        Client-UUID is being passed in the request header. Client-UUID identifies a client device or session.

        Body: 
        The body is in raw JSON format including the following fields:

        - "accountId": A unique ID for the account.
        - "sessionId": The ID of the current session.
        - "teamId": The ID of the the team.
        - "loyaltyId": The unique ID for the loyalty program.
        - "category": The category for the incentive, in this case it's electronics.
        - "loyaltyType": The type of the loyalty, here it is a Coupon.
        - "title": The title of the incentive. 
        - "description": A brief description about the incentive.
        - "tags": Relevant tags associated with the incentive.
        - "price": The price of the incentive.
        - "tokenAmount": The number of tokens required to claim the incentive.
        - "isProcessPayment": Flag to indicate if payment processing is required.
        - "isShipping": Flag to indicate if shipping is required.
        - "redirectUrl": The URL for redeeming the incentive.
        - "couponCode": The code for the coupon.
        - "websiteUrl": Website address where the incentive can be claimed.
        - "buttonText": Text displayed on the activation button.
        - "releaseDate", "releaseTime": The date and time when the incentive will be released.
        - "expiresDate", "expiresTime": The date and time till when the incentive can be claimed.
        - "activationType": How this incentive will be activated. It's automatic in this case.
        - "coverPhotoUrl": The URL of the image used as a cover for the incentive.
        - "videoPlaybackUrl": The URL of the video explaining the incentive details.
        - "galleryPhotos": A list of the URLs of photos which will be displayed in a gallery view.
        - "didInviteUsers": Flag indicating if invitees have been added to the incentive.
        - "invitedData": Data detailing who was invited to the incentive.
        - "didShareItem": Flag indicating if the incentive was shared.
        - "sharedData": Detailed data of where the incentive was shared (which platform and how many times).
        - "didPromoteItem": Flag indicating if the incentive was promoted.
        - "promotedData": Data detailing where the incentive was promoted.
        - "createdBy": Username of the user who created the incentive.
        - "createdAt": Timestamp indicating when the incentive was created.
        - "updatedBy": Username of the user who updated the incentive.
        - "updatedAt": Timestamp indicating when the incentive was last updated.

        These are all the fields that you can likely update on this endpoint. You will need to provide the valid data types in the request body.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                teamId: teamId
                loyaltyId: loyaltyId
                category: electronics
                loyaltyType: Coupon
                title: Exclusive Membership Reward 2.0
                description: Get access to premium features with this reward.
                tags: premium, membership, reward
                price: '29.99'
                tokenAmount: 250
                isProcessPayment: true
                isShipping: false
                redirectUrl: https://example.com/redeem
                couponCode: PREMIUM20
                websiteUrl: https://example.com
                buttonText: Activate Reward
                releaseDate: '2024-11-25'
                releaseTime: '10:00:00'
                expiresDate: '2024-12-25'
                expiresTime: '23:59:59'
                activationType: auto
                coverPhotoUrl: https://example.com/images/reward-cover.jpg
                videoPlaybackUrl: https://example.com/videos/reward.mp4
                galleryPhotos:
                  - https://example.com/images/gallery1.jpg
                  - https://example.com/images/gallery2.jpg
                didInviteUsers: true
                invitedData:
                  - targetType: email
                    targetId: user001@example.com
                  - targetType: accountId
                    targetId: u12345bc-d87e-890f-gh12-ijk345678xyz
                didShareItem: true
                sharedData:
                  - platform: Facebook
                    shareCount: 50
                  - platform: Twitter
                    shareCount: 30
                didPromoteItem: false
                promotedData: []
                createdBy: admin123
                createdAt: '2024-11-20T14:30:00'
                updatedBy: admin123
                updatedAt: '2024-11-20T14:30:00'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/incentive/loyalty/get:
    get:
      tags:
        - IncentiveLoyalty
      summary: Incentive - Loyalty - Get
      description: |-
        This API endpoint is called "Incentive - Loyalty - Get". This uses the HTTP 'GET' method to retrieve loyalty incentive information.

        #### Authentication
        The authentication required for this endpoint is of the type 'bearer'. This requires a valid token to authenticate the requests made to the endpoint. This token field key is "token" and should hold the bearer token string.

        #### Method
        The HTTP method used for this endpoint is GET. This HTTP method is used to retrieve data from the server.

        #### URL
        The 'url' is where the request is being sent. This is where the server is located to handle this specific endpoint. This URL format is http://localhost:3000/api/incentive/loyalty/get and it's parameterized with loyaltyId, sessionId, accountId. 

        'loyaltyId' - This parameter is used to specify the loyalty program's ID.
        'sessionId' -This parameter is used to maintain the session information.
        'accountId' - This parameter is used to specify the account ID.

        #### Headers
        Headers can be added to amend the request. In the provided data, a header template is included, but it is disabled by default. Hence, this field can be left empty or can be filled with necessary request header info such as content-type, auth-token etc.

        #### Body
        The 'body' carries the bulk of the request information. This endpoint uses 'raw' mode for the body, but as it is a GET request, it doesn't require a body. Therefore, the 'raw' field is left empty. 

        So, primarily you need to authenticate yourself and pass the user 'loyaltyId', 'sessionId' and 'accountId' as parameters in the request URL to get the required information.
      security:
        - bearerAuth: []
      parameters:
        - name: loyaltyId
          in: query
          schema:
            type: string
          example: loyaltyId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/incentive/loyalty/all:
    get:
      tags:
        - IncentiveLoyalty
      summary: Incentive - Loyalty - Get All
      description: |-
        In this endpoint, there are multiple data points which have been included:

        1. **name**: The 'name' attribute refers to the name of the endpoint. Here, 'Incentive - Loyalty - Get All' indicates that this endpoint is aimed at retrieving all incentives related to loyalty.

        2. **request**: The 'request' attribute denotes the HTTP request being sent to the server. This includes the details about the authentication, method, URL, headers, and body of the API request.

            - **auth**: The 'auth' field specifies the type of authentication being used. Here, the 'bearer' authentication type is used. 
                - **bearer**: This field includes an array of bearer tokens used for authentication. Each token has a 'key', 'value', and 'type'. Here, the 'key' is 'token', the 'value' is 'BearerToken', and the 'type' is 'string'.
               
            - **method**: The 'method' attribute describes the HTTP method being utilized for this API request. In this case, it is a 'GET' request, which requests data from a specified resource.

            - **url**: The 'url' field refers to the API's endpoint URL. Here, the URL is 'http://localhost:3000/api/incentive/loyalty/all/?sessionId=sessionId&accountId=accountId'. This URL includes query parameters such as 'sessionId' and 'accountId', which are used to retrieve specific data.
            
            - **headers**: The 'headers' attribute contains an array of HTTP headers to be included in the API request. Here, a default header, which is currently disabled (as indicated by 'disabled: true'), is provided. Its 'key' and 'value' are both blank.
            
            - **body**: The 'body' field is where the main content of the HTTP message goes. However, since the 'mode' is 'raw' and the 'raw' content is blank, no body content is being sent with this 'GET' request. In other request methods like 'POST', this field would contain the data being sent to the server.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/incentive/loyalty/delete:
    post:
      tags:
        - IncentiveLoyalty
      summary: Incentive - Loyalty - Delete
      description: |-
        This endpoint is named as "Incentive - Loyalty - Delete". It is used to delete a particular loyalty incentive in your application.

        1. Authentication: This endpoint uses 'Bearer' authentication. The bearer token (also known as a security token) must be provided to authenticate the session. 
            - Key: "token"
            - Value: "sessionId"
            - Type: This is a 'string' data type.

        2. Method: This endpoint uses the 'POST' method which is usually used to send data to the server.

        3. URL: "http://localhost:3000/api/incentive/loyalty/delete"; This is the endpoint URL, which contains the server's address and the specific route to the 'Incentive - Loyalty - Delete' API.

        4. Headers: The headers data is currently empty, but this location usually contains additional information that client must pass to the server.

        5. Body: This is where you specify the data that is to be sent to the server. 

            It uses 'raw' mode for the body, which allows you to send data without any encoding. The raw data string sent to this endpoint should be in JSON format and contains the following fields:
            
            - "sessionId": The session ID for logged-in user session. This should be a string.
            - "accountId": The account ID related to the user who wishes to delete a loyalty incentive. This should be a string.
            - "loyaltyId": The ID of the specific loyalty incentive that is to be deleted. This should be a string.

        Note: Make sure you replace "sessionId", "accountId", and "loyaltyId" with actual values when making a request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"loyaltyId\":\"loyaltyId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/incentive/promotion/create:
    post:
      tags:
        - IncentivePromotion
      summary: Incentive - Promotion - Create
      description: |
        This endpoint is called "Incentive - Promotion - Create" and it is used to create a new incentive promotion. It is a POST method which requires bearer authentication with the key as "token" and the value would be the allocated BearerToken.

        The URL for this endpoint is "http://localhost:3000/api/incentive/promotion/create". The request can also contain headers, if required.

        The body of this request is in raw JSON format and contains various fields:

        1. "sessionId" - A unique identifier for the session.
        2. "accountId" - A unique identifier for the account.
        3. "title" - The title of the promotion.
        4. "description" - Brief details about the promotion.
        5. "tags" - Keywords associated with the promotion.
        6. "category" - The promotion's relevance industry/sector.
        7. "price" - The price included in the promotion.
        8. "tokenAmount" - Number of promotion specific tokens.
        9. "redirectUrl" - The URL where users are redirected after clicking.
        10. "couponCode" - The promotional coupon code.
        11. "websiteUrl" - The main webpage for the promotion.
        12. "buttonText" - The text displayed on the promotion's action button.
        13. "releaseDate" - When the promotion is to start.
        14. "releaseTime" - The time for the promotion to start on releaseDate.
        15. "expiresDate" - The date when the promotion ends.
        16. "expiresTime" - The exact time when the promotion, which is scheduled for the expiresDate, will finish.
        17. "activationType" - The method by which the promotion is activated.
        18. "profilePhotoUrl" - The URL of the promotion's profile photo.
        19. "coverPhotoUrl" - The URL of the promotion's cover photo.
        20. "videoPlaybackUrl" - The URL of any promotional video.
        21. "audioPlaybackUrl" - The URL of any promotional audio.
        22. "quantityTotal" - The total amount of promotions available.
        23. "quantityLeft" - How many promotions are left.
        24. "livestreamsNeeded" - Number of live streams required for redeeming the incentive.
        25. "subscribersNeeded" - Number of subscribers required for redeeming the incentive.
        26. "followersNeeded" - Number of followers required for redeeming the incentive.
        27. "connectAccountsNeeded" - Number of interconnected accounts necessary for redeeming the incentive.
        28. "tournamentsPlaysNeeded" - The number of tournament plays required for the incentive.
        29. "tournamentsWinsNeeded" - The number of tournament wins required for the incentive.
        30. "universityToursNeeded" - Number of university tours needed to redeem the incentive.
        31. "sharesNeeded" - Necessary shares for redeeming the incentive.
        32. "votesNeeded" - The required votes for the incentive.
        33. "isActive" - Denoting if the promotion is currently active or not.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                title: Summer Special Promotion
                description: Enjoy exclusive discounts during our Summer Sale!
                tags: sale,summer,discount
                category: Retail & E-Commerce
                price: '19.99'
                tokenAmount: 50
                redirectUrl: https://example.com/special-promotion
                couponCode: SUMMER2024
                websiteUrl: https://example.com
                buttonText: Shop Now
                releaseDate: '2024-06-01'
                releaseTime: '08:00:00'
                expiresDate: '2024-08-31'
                expiresTime: '23:59:59'
                activationType: auto
                profilePhotoUrl: https://example.com/images/profile.jpg
                coverPhotoUrl: https://example.com/images/cover.jpg
                videoPlaybackUrl: https://example.com/videos/promotion.mp4
                audioPlaybackUrl: https://example.com/audio/promotion.mp3
                quantityTotal: 1000
                quantityLeft: 900
                livestreamsNeeded: 50
                subscribersNeeded: 500
                followersNeeded: 600
                connectAccountsNeeded: 300
                tournamentsPlaysNeeded: 20
                tournamentsWinsNeeded: 10
                universityToursNeeded: 5
                sharesNeeded: 400
                votesNeeded: 800
                isActive: true
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/incentive/promotion/update:
    put:
      tags:
        - IncentivePromotion
      summary: Incentive - Promotion - Update
      description: |-
        This endpoint, `Incentive - Promotion - Update`, is designed to update an existing promotion incentive in the system using the `PUT` HTTP method. The endpoint URL is `http://localhost:3000/api/incentive/promotion/update`. 

        The request requires `Bearer Token` authentication, which should be provided in the `token` parameter in the `auth` object. 

        There is one mandatory header, `Client-UUID`, which should have the UUID of the client making the request.

        The body of the request must be a raw JSON object which contains following parameters:

        - `sessionId`: A string representing the session ID.
        - `accountId`: A string representing user's account ID.
        - `promotionId`: A string representing the ID of the promotion.
        - `title`: The title of the promotion.
        - `description`: Brief details about the promotion.
        - `tags`: Tag the promotion using relevant keywords (separated with commas).
        - `category`: The category of the promotion.
        - `price`: The price details of the promotion.
        - `tokenAmount`: Number of tokens involved in promotion.
        - `redirectUrl`: URL to which users will be directed.
        - `couponCode`: A string representing the code for any coupon active in the promotion.
        - `websiteUrl`: The URL of the website hosting the promotion details.
        - `buttonText`: Text that should be displayed on the button.
        - `releaseDate`: The date when the promotion will be released.
        - `releaseTime`: The time when the promotion will be released. 
        - `expiresDate`: The date when the promotion will expire.
        - `expiresTime`: The time when the promotion will expire. 
        - `activationType`: The type of promotion activation (auto or manual).
        - `profilePhotoUrl`: URL of profile photo of promotion.
        - `coverPhotoUrl`: URL of cover photo of promotion.
        - `videoPlaybackUrl`: URL of promotion video.
        - `audioPlaybackUrl`: URL of promotion audio.
        - `quantityTotal`: Total quantity available for the promotion.
        - `quantityLeft`: Quantity left for the promotion.
        - `livestreamsNeeded`: Number of livestreams needed to qualify for the promotion.
        - `subscribersNeeded`: Number of subscribers needed to qualify for the promotion.
        - `followersNeeded`: Number of followers needed to qualify for the promotion.
        - `connectAccountsNeeded`: Number of connected accounts needed to qualify for the promotion.
        - `tournamentsPlaysNeeded`: Number of tournament plays needed to qualify for the promotion.
        - `tournamentsWinsNeeded`: Number of tournament wins needed to qualify for the promotion.
        - `universityToursNeeded`: Number of university tours needed to qualify for the promotion.
        - `sharesNeeded`: Number of shares needed to qualify for the promotion.
        - `votesNeeded`: Number of votes needed to qualify for the promotion.
        - `isActive`: A boolean indicating whether the promotion is currently active.

        The JSON has to be submitted in raw format.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                promotionId: promotionId
                title: Summer Special Promotion
                description: Enjoy exclusive discounts during our Summer Sale 2.0!
                tags: sale,summer,discount
                category: Retail & E-Commerce
                price: '19.99'
                tokenAmount: 50
                redirectUrl: https://example.com/special-promotion
                couponCode: SUMMER2024
                websiteUrl: https://example.com
                buttonText: Shop Now
                releaseDate: '2024-06-01'
                releaseTime: '08:00:00'
                expiresDate: '2024-08-31'
                expiresTime: '23:59:59'
                activationType: auto
                profilePhotoUrl: https://example.com/images/profile.jpg
                coverPhotoUrl: https://example.com/images/cover.jpg
                videoPlaybackUrl: https://example.com/videos/promotion.mp4
                audioPlaybackUrl: https://example.com/audio/promotion.mp3
                quantityTotal: 1000
                quantityLeft: 900
                livestreamsNeeded: 50
                subscribersNeeded: 500
                followersNeeded: 600
                connectAccountsNeeded: 300
                tournamentsPlaysNeeded: 20
                tournamentsWinsNeeded: 10
                universityToursNeeded: 5
                sharesNeeded: 400
                votesNeeded: 800
                isActive: true
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/incentive/promotion/get:
    get:
      tags:
        - IncentivePromotion
      summary: Incentive - Promotion - Get
      description: |-
        This is the "Incentive - Promotion - Get" endpoint. It's structured as follows:

        1. `name`: It's the name used to identify this endpoint. For this case, it's called "Incentive - Promotion - Get".

        2. `request`: This section contains all the information about the HTTP request that will be sent to this endpoint.

        - `auth`: This part stores the authentication details. The type of authentication used here is the bearer. You have to pass a token as the bearer authorization header.
            - `key`: It's the way the value is referred to in the authentication protocol. Here, it's the string "token".
            - `value`: It refers to the actual value that is required for authorization. It should be replaced with the actual Bearer Token value when sending the request.
            - `type`: Indicates what data type the "value" should have. In this case, it's a string.

        - `method`: This represents the HTTP method used for the request. For this instance, "GET" is used, which retrieves whatever information in the form of an entity which is identified by the `url`.

        - `url`: It's the network address where the request will be sent. In this case, it's "http://localhost:3000/api/incentive/promotion/get". Additional parameters are also included such as `promotionId`, `sessionId` and `accountId` which need to be replaced with actual values when sending the request.

        - `headers`: These are HTTP headers you can use to provide additional information about the request. In this endpoint, the header is currently disabled and contains no key or value.

        - `body`: Contains any additional data you want to send with your request. In this scenario, the `mode` is set as "raw", meaning you can include raw data (like a string of JSON) in your request. Currently, no `raw` data is provided.
      security:
        - bearerAuth: []
      parameters:
        - name: promotionId
          in: query
          schema:
            type: string
          example: promotionId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/incentive/promotion/all:
    get:
      tags:
        - IncentivePromotion
      summary: Incentive - Promotion - Get All
      description: |-
        1. `name`: This is the title or label for this API endpoint. It provides a short brief of what the endpoint does. Here, the name `Incentive - Promotion - Get All` suggests that this endpoint retrieves all the promotions under an incentive.

        2. `request`: This is the main part of the endpoint where the request details are defined.

        3. `request.auth`: This section contains the type of authentication needed to access the endpoint. 

            - `type`: The type of authentication. In this case, `bearer` type implies that the API uses bearer authentication.
          
            - `bearer.token`: This is where you provide your bearer token to authenticate your request. Bearer token is like a password in the form of a token sent to the server to authenticate the user. Here, `BearerToken` should be replaced with the actual bearer token.

        4. `request.method`: This defines the HTTP method used for the request. It is `GET` in this case which means the request will retrieve information from the server.

        5. `request.url`: This is the URL to which the request is made. `http://localhost:3000/api/incentive/promotion/all/?sessionId=sessionId&accountId=accountId` is the URL of the promotion to get all incentives and it requires `sessionId` and `accountId` as parameters.

        6. `request.headers`: This is an array where additional parameters can be added to further customize the request if needed.

        7. `request.body`: This section is used to specify the request payload. In this case, it is set to `raw`, meaning that the request doesn't contain any data payload. The `raw` field is left empty as it's a `GET` request which usually does not need a request body.

        Remember that the bearer token must be replaced with an actual valid token for successful authentication. Please replace `sessionId` and `accountId` in the URL with actual session ID and account ID values respectively, as these are placeholders.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/incentive/promotion/delete:
    post:
      tags:
        - IncentivePromotion
      summary: Incentive - Promotion - Delete
      description: |-
        The data includes information about an API endpoint named 'Incentive - Promotion - Delete'. Here's what each part of the data indicates:

        1. "name": This field indicates the name of the endpoint, which in this case, is 'Incentive - Promotion - Delete'.

        2. "request": Information regarding the request to the endpoint is contained in this object. 

           - "auth": The type of authentication required for this endpoint is specified here. In this case, it uses 'bearer' token authentication. You'll need to provide a token in the 'bearer' array and the value of the key 'value' should be passed as "sessionId". This session ID is a string type data.

           - "method": This indicates the HTTP method that's used to make the request. Here, the 'POST' method is chosen.

           - "url": This is the URL to make the request to. Here, it's 'http://localhost:3000/api/incentive/promotion/delete'.

           - "headers": This represents the additional information that you can send with your request through HTTP headers. Currently, it's empty and disabled.

           - "body": Specifies the data that you are sending to the endpoint in the request body. In this case, the 'mode' field's value 'raw' indicates the body contains raw data in the form of a JSON object. The 'raw' field contains detailed JSON with keys as "sessionId", "accountId", and "promotionId" that you are expected to substitute with their respective values before making the request.
           
        Please make sure you update all the placeholders with the correct information pertaining to your application before sending out the requests.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"promotionId\":\"promotionId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/incentive/reward/create:
    post:
      tags:
        - IncentiveReward
      summary: Incentive - Reward - Create Points Reward
      description: |-
        The endpoint "Incentive - Reward - Create Points Reward" contains several data points that aid in creating a reward system using points for users of a certain platform. Here is a detailed description of each:

        1. `name`: The name of the endpoint. This particular endpoint creates a point reward for an incentive program.

        2. `request`: This represents the specific API request being made.

        3. Within `request`, the `auth` field specifies the type of authentication needed for this endpoint. It uses a Bearer Token method for authentication. The `token` should be provided and will be sent as a string value.

        4. The `method` within `request` is POST, indicating that this request is made to add or create new information.

        5. `url`: The endpoint URL to which the request is made. Here, it is: "http://localhost:3000/api/incentive/reward/create".

        6. The `headers` field contains metadata about the API request. In this case, it is set to default, and is currently disabled.

        7. The `body` section contains the actual content of the request. It includes several properties:

          - `sessionId`: Unique identifier for the current user session.
          
          - `accountId`: Unique identifier of the account.
          
          - `name`: The name of the reward - it's "Tournament Points" in this case.
          
          - `description`: Further details about the reward. Here, it mentions that the points are rewarded for participating in a tournament.
          
          - `tags`: Keywords related to the reward for better categorization or searching.
          
          - `rewardType`: The type of reward being created. This field denotes that the reward will be given in the form of points.
          
          - `tokenAmount`: The number of points the user is rewarded. Here, it's 500.

        8. The `mode` within `body` is `raw`, meaning the data are sent in a sequence of bits when making a POST request.

        9. The `options` field allows you to manipulate certain facets of the request. It is set to json language in raw mode.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: Tournament Points
                description: You've been rewarded points for this tournament
                tags: tournament,point
                rewardType: point
                tokenAmount: 500
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/incentive/reward/update:
    put:
      tags:
        - IncentiveReward
      summary: Incentive - Reward - Update
      description: |-
        This API endpoint is named "Incentive - Reward - Update". It is designed to update an existing reward in the incentive program. Here are the main components:

        Authentication ("auth"): This endpoint uses bearer token authentication. You need to provide a token in the 'BearerToken' field to authenticate your request.

        Request Type ("method"): The type of the request is PUT which means it is used to update or replace an existing resource.

        URL ("url"): The URL to send the request to is "http://localhost:3000/api/incentive/reward/update".

        Headers: This request contains one header, "Client-UUID". This is presumably uniquely identifying your client to the server.

        Request Body ("body"): This contains all the information needed to update a reward. It is in raw JSON format. The fields are:

        - "sessionId": The unique identifier of the current session.
        - "accountId": The unique identifier of the account.
        - "rewardId": The unique identifier of the reward.
        - "name": The name of the reward.
        - "description": A short explanation about the reward.
        - "tags": A list of tags describing the reward, which can be used for search or categorisation.
        - "rewardType": The type of reward (in this case, "token").
        - "rewardTypeId": A unique identifier for the reward type.
        - "tokenAmount": The amount of tokens provided by the reward.
        - "profilePhotoUrl": A URL referencing an image which represents the reward.
        - "coverPhotoUrl": A URL pointing to the reward's cover photo.
        - "videoPlaybackUrl": If there is any video associated with the reward, its URL will be placed here.
        - "audioPlaybackUrl": URL for any audio file related to the reward.

        Options ("options"): These specify that the body is to be interpreted as raw JSON input.

        Remember, the values provided here - such as "BearerToken", "ClientUUID", and the placeholder values in the body - are just placeholders. You need to replace them with your actual data before making a request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                rewardId: rewardId
                name: Exclusive Loyalty Reward 2
                description: Reward your loyal customers with exclusive perks.
                tags: loyalty,exclusive,offer
                rewardType: token
                rewardTypeId: ''
                tokenAmount: 500
                profilePhotoUrl: https://example.com/images/reward-profile.jpg
                coverPhotoUrl: https://example.com/images/reward-cover.jpg
                videoPlaybackUrl: https://example.com/videos/reward-intro.mp4
                audioPlaybackUrl: https://example.com/audio/reward-theme.mp3
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/incentive/reward/get:
    get:
      tags:
        - IncentiveReward
      summary: Incentive - Reward - Get
      description: |-
        1. **name**: "Incentive - Reward - Get". This is the name for this specific endpoint that fetches the reward data related to an incentive program. Use it to conveniently identify this request among others in your collection.

        2. **request.auth.type**: "bearer". This denotes the type of authorization used for this request which is 'bearer' token in this case. Bearer token authorization leverages a security token for authorization management.

        3. **request.auth.bearer**: It is an array of object. The object contains three properties:
            - **key**: "token". It is the type of authorization value you are going to use.
            - **value**: "BearerToken". This would be the actual token value. Replace 'BearerToken' with the actual token when making a real API call.
            - **type**: "string". It represents the data type of token and it is a string.

        4. **request.method**: "GET". This is the HTTP method used for this request. 'GET' method is used to retrieve information from the server.

        5. **request.url**: "http://localhost:3000/api/incentive/reward/get/?rewardId=rewardId&sessionId=sessionId&accountId=accountId". This is the URL where the request will be sent. The URL contains three query parameters - rewardId, sessionId and accountId. Replace these parameters with actual values when making a real API call.

        6. **request.headers**: An array used to define any headers to be sent along with the request. In this case, no headers are required as the object inside the array is empty and disabled.

        7. **request.body.mode**: "raw". Indicates that the request body will be sent as a raw string. However, in this GET request, there is no need to send a body, hence the raw value is an empty string.

        8. **request.body.raw**: ""(empty string). As it's a GET request, it does not contain a body. It means no additional data is sent to the server.
      security:
        - bearerAuth: []
      parameters:
        - name: rewardId
          in: query
          schema:
            type: string
          example: rewardId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/incentive/reward/all:
    get:
      tags:
        - IncentiveReward
      summary: Incentive - Reward - Get All
      description: |-
        This endpoint, named "Incentive - Reward - Get All", is designed to retrieve all types of promotional incentives offered to users, such as loyalty bonuses, referrals, discount codes, gift vouchers, etc.

        It works with the GET method, meaning it's a read-only view which retrieves and displays data from server. This operation is authenticated using the "Bearer" type of token authorization. The place of the token is marked as "BearerToken", which is meant to hold the actual API client's bearer token as a string to grant access level.

        The request is delivered to the URL: "http://localhost:3000/api/incentive/reward/all/", and requires two query parameters: 'sessionId' and 'accountId'. 'sessionId' refers to the unique ID of the user's current session, and 'accountId' is a unique identifier for the user's account. Both are mandatory and should be passed in the URL to ensure the proper functioning of the endpoint by tailoring the response to the specific user and session.

        The endpoint does not require any specific headers, as indicated by the empty key-value pair, and it is also disabled, meaning it can be disregarded entirely in the request.

        In terms of the request body, since this endpoint is using the GET method, no data needs to be sent through the body. It's set to the 'raw' mode, yet the 'raw' body field is left blank. This is to be expected, as GET methods typically do not have a request body. If there's any change in the type of request made to this endpoint, then the body parameters would need to be added under the 'raw' field.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/incentive/reward/delete:
    post:
      tags:
        - IncentiveReward
      summary: Incentive - Reward - Delete
      description: |-
        This endpoint named "Incentive - Reward - Delete" is designed to remove an incentive reward from a certain account. Below are the detailed descriptions of each data field:

        - `name`: The name of the endpoint. It's called "Incentive - Reward - Delete", indicating its function is to delete an incentive reward.

        - `request`: Contains the details of the HTTP request. 

          - `auth`: Specifies the authentication type and details for accessing this endpoint. This endpoint uses Bearer Token authentication.
          
             - `type`: The authentication type. In this case, it's "bearer".
         
             - `bearer`: The array which has details of the bearer token being used.

                - `key`: The name of the authorization token. It's referred to as "token".

                - `value`: The value of the authorization token. It is expected to be the "sessionId".

                - `type`: The data type of the token value. It's a "string".

          - `method`: Specifies the HTTP method to be used, which is "POST".
          
          - `url`: The URL to which the request is being sent. Here, it's the local host address running on port 3000 with the route "api/incentive/reward/delete".
          
          - `headers`: This is currently disabled and not set to any specific value.
          
          - `body`: Contains the payload of the request. 

            - `mode`: Defines the formatting of the body data. Here it's set as "raw".
            
            - `raw`: The raw body data to be sent with the request. It includes:
                - `sessionId`: Identifies the session.
                - `accountId`: Identifies the account from which the reward is to be deleted.
                - `rewardId`: Identifies the specific reward to be deleted.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"rewardId\":\"rewardId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/manage/admin/create:
    post:
      tags:
        - ManageAdmin
      summary: Manage - Admin - Create
      description: |-
        This is the description of each data on the `Manage - Admin - Create` endpoint:

        1. `name`: This denotes the name of the endpoint, which is 'Manage - Admin - Create'.

        2. `request`: This object contains the actual details of the HTTP request.

        3. Within `request`:
            - `auth`: Specifies the authentication method and details. The `type` is 'Bearer' indicating Bearer token authentication.
           
               - `bearer`: Array containing details of the bearer token. 
                  - `key`: This is the key which is supposed to be 'token' in this case.
                  - `value`: The value of the key is 'BearerToken'. It should be your actual bearer token.
                  - `type`: The type of the value, which is 'string' in this case.
           
            - `method`: The HTTP method to be used. Here, 'POST' method is used meaning that it is used to send data to a server to create a resource.
           
            - `url`: The endpoint of the API where the request will be sent. In this case, it is 'http://localhost:3000/api/manage/admin/create'.
           
            - `headers`: An array that is meant to contain any headers to be sent with the request. In this case, no additional headers are sent thus its `disabled` status is `true`.

            - `body`: The details of the request body.
               
               - `mode`: The mode of the body data. Here, it is 'raw', meaning it is presented as is, and not as form data or file.
               - `raw`: Represents the JSON data to be sent with the API request. It contains several key-value pairs including session ID, account ID, name, description, tags, profile photo URL, cover photo URL, minimum tip amount, category ID, category, subcategory ID, subcategory, privacy feature, tournament option, default settings,  ad management settings, URLs for pre- and post-live ad breaks.
               - `options`: Details about the 'raw' data.
                   
                   - `language`: The language in which the data is written. In this case it is 'json'.

        Please replace placeholders with actual values (like 'sessionId', 'accountId', 'BearerToken') to make this endpoint work correctly.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second General
                description: This admin is my second admin
                tags: second,admin
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isGeneralPrivate: true
                isTournamentOnly: false
                isGeneralDefault: true
                isPreLiveManageAds: true
                isPostLiveManageAds: true
                breakPreLiveManageUrl: https://example.com/break-pre-live.mp4
                breakPostLiveManageUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/manage/admin/update:
    put:
      tags:
        - ManageAdmin
      summary: Manage - Admin - Update
      description: |-
        This endpoint updates an admin's information in the management system.

        Here are the details of each data:

        1. `"name"`: This depicts the name of the endpoint which is "Manage - Admin - Update". It signifies that the endpoint is for updating admin details.

        2. `"request"`: The outer block that holds all of the HTTP request information.

        3. `"auth"`: Details of the authorization needed to access this endpoint. It uses the bearer token authorization type indicated by `"type": "bearer"`. The `"bearer"` array contains a `"token"` key, the value `"BearerToken"` should be replaced with the actual auth token you want to use when making a request.

        4. `"method"`: The HTTP method used for this request. `"PUT"` indicates that this endpoint is used to update existing information.

        5. `"url"`: The URL where the API request is sent. In this case, the request is sent to http://localhost:3000/api/manage/admin/update.

        6. `"headers"`: This array contains the necessary headers to make a request. In this case, it includes `"Client-UUID"`, which should be replaced with the unique identifier for the client making the request.

        7. `"body"`: The data sent with the HTTP request. It uses raw JSON data. Each key-value pair in `"raw"` field represents a different data point related to the admin being updated. Replace these with the respective value each key indicates.

        - `"adminId"`: The unique identifier for the admin that needs to be updated.
        - `"sessionId"` and `"accountId"`: The session and account identifiers, respectively.
        - `"name"`: The updated name of the admin.
        - `"description"`, `"tags"`, `"profilePhotoUrl"`, and `"coverPhotoUrl"`: The updated information about the admin's description, tags, and image URLs for profile and cover respectively.
        - `"minimumTipAmount"`: It suggests the minimum tip amount that can be applied.
        - `"categoryId"`, `"category"`, `"subCategoryId"` and `"subCategory"`: These represent the category and sub-category identifiers and names the admin falls under.
        - `"isGeneralPrivate"`: This boolean field shows whether the admin has a private setting applied.
        - `"isTournamentOnly"`, `"isGeneralDefault"`, `"isPreLiveManageAds"` and `"isPostLiveManageAds"`: These are boolean fields that indicate whether the admin is only for tournament, set as default, allowed to manage ads pre-live or post-live.
        - `"breakPreLiveManageUrl"` and `"breakPostLiveManageUrl"`: URLs for the pre-live and post-live break times.

        Please replace the corresponding key values with actual data when making a request. The changes will be committed once the request is successfully processed.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"adminId\":\"adminId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second General 2.0\",\"description\":\"This admin is my second admin\",\"tags\":\"second,admin\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isGeneralPrivate\":true,\"isTournamentOnly\":false,\"isGeneralDefault\":true,\"isPreLiveManageAds\":true,\"isPostLiveManageAds\":true,\"breakPreLiveManageUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveManageUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/manage/admin/get:
    get:
      tags:
        - ManageAdmin
      summary: Manage - Admin - Get
      description: |-
        This endpoint is named 'Manage - Admin - Get'. It is a HTTP 'GET' request used to retrieve administrator data from the server. Below is the detailed description of each data field included in this endpoint:

        1. `auth`: This is the authorization method for this request. Here, the system uses a token authorization by Bearer. You need to include the Bearer token in the header to authenticate and authorize the outgoing request.

        2. `type`: This specifies the type of authorization, which in this case is Bearer.
           
        3. `bearer`: This holds an array of key-value pairs used for the token authorization. 
           
           - `key`: The key is 'token' which confirms that the authorization uses a token.
           
           - `value`: The value is 'BearerToken' which should be replaced with the actual bearer token for authenticating the request.
           
           - `type`: The type here is a string which tells that the authentication token will be a type of string.

        4. `method`: This defines the HTTP method used for the request, which in this case is 'GET'. A 'GET' method is used to retrieve data from a server.

        5. `url`: This is the server URL where the 'GET' request is made. It includes parameters for 'adminId', 'sessionId', and 'accountId', which have to be replaced with actual values to fetch the specific details from the server.

        6. `headers`: These are the default headers sent with the HTTP request. It appears these headers have no value currently and are disabled.

        7. `body`: This refers to the body of the HTTP request. 
           
           - `mode`: The mode is set to 'raw', indicating that the body contains data that hasn't been processed in any specific manner. 

           - `raw`: The raw field is currently empty indicating that no extra data is being sent along with the request.

        Ensure to replace all placeholders (like 'BearerToken' and the parameters in the 'url') with actual values according to your application's needs before sending the request.
      security:
        - bearerAuth: []
      parameters:
        - name: adminId
          in: query
          schema:
            type: string
          example: adminId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/manage/admin/all:
    get:
      tags:
        - ManageAdmin
      summary: Manage - Admin - Get All
      description: |-
        This endpoint named "Manage - Admin - Get All" is designed to retrieve specific information related to the admin from the local server.

        - `name`: This key suggests the specific name of the endpoint. The given name here is "Manage - Admin - Get All".

        - `request`: A container for everything that makes up an HTTP request, this section includes fields like `auth`, `method`, `url`, `headers`, and `body`.

        - `auth`: Defines the authentication method and details required to connect with the service. 

            - `type`: Indicates which kind of authentication is used. In this case, it uses the "bearer" authentication type.
          
            - `bearer`: Contains the bearer token details.
          
                - `key`: Indicates the key field of the bearer token. The key field here is "token".
          
                - `value`: Defines the value of the bearer token. Here, "BearerToken" is the placeholder value.
          
                - `type`: It specifies the data type of the value. The type here is "string".

        - `method`: This key signifies HTTP method used for the request. The value "GET" indicates that it retrieves information.

        - `url`: The URL field describes the endpoint where the request will be sent. Here, it's "http://localhost:3000/api/manage/admin/all/?sessionId=sessionId&accountId=accountId", with query parameters `sessionId` and `accountId`.

        - `headers`: Defines HTTP headers key-value pairs to include in the request.

          - `key`: The name of the header field. Currently, it's kept empty.
          
          - `value`: The corresponding value of the header key. Currently, it's also empty.
          
          - `type`: Describes the type of the header. Here, it's "default".
          
          - `disabled`: A boolean to toggle the header on or off. Here, it is set as 'true' making it non-functional.

        - `body`: This is the data sent by the request. There are no specific details provided in this request since 'body' type is set as 'raw', but no raw data is provided. 'Mode' describes how the data is sent; in this instance, it is raw data.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/manage/admin/delete:
    post:
      tags:
        - ManageAdmin
      summary: Manage - Admin - Delete
      description: |-
        This API endpoint is named "Manage - Admin - Delete". It's designed for managing the deletion of admins in your application.

        The API uses the `POST` method to delete information. This action is performed by sending a request to this URL: `http://localhost:3000/api/manage/admin/delete`.

        The endpoint is secured using Bearer Authentication. This means the client must send a Bearer token, which is typically a cryptic string, associated with the request. The key for this token is "token" and the value is "sessionId". The value will need to be replaced with an actual sessionId for it to work.

        The headers object has been left empty for now but is there in case you need to include required headers in the future.

        The part of the API that does the heavy lifting is the "body". Here, the mode is set to "raw", meaning that the JSON payload will be sent as a raw block of data. This block includes three pieces of information:
        - "sessionId": a unique identifier for your session
        - "accountId": a unique identifier for the account under which the admin resides
        - "adminId": a unique identifier for the specific admin you want to delete

        Each field takes a string as a value and these strings need to be replaced with actual values in order to send the request properly. Also, during the deletion, the system uses these identifiers to ensure that the correct admin is deleted from the right account and session.

        Please replace `"sessionId"`, `"accountId"`, and `"adminId"` with actual values when using this API endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"adminId\":\"adminId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/manage/analytics/create:
    post:
      tags:
        - ManageAnalytics
      summary: Manage - Analytics - Create
      description: |-
        The data provided represents an API request endpoint titled "Manage - Analytics - Create". The following is a detailed breakdown of each data field:

        1. `name`: This string field indicates the name of the endpoint, which is "Manage - Analytics - Create".

        2. `request`: This object represents the entire HTTP request.

        3. `auth`: This object holds the authentication details required to access the endpoint.
             - `type`: Specifies the type of authentication being used, in this case "bearer".
             - `bearer`: This is an array containing bearer token information, which includes:
                  - `key`: The key name for the bearer token, here it's "token".
                  - `value`: The bearer token placeholder value.
                  - `type`: The data type of the bearer token value, which is a "string".

        4. `method`: The string value representing the HTTP method to be used for the request, which is "POST".

        5. `url`: This string represents the full URL to which the request is to be sent.

        6. `headers`: This array currently contains an empty object since there are no specified headers for the request.

        7. `body`: The body of the request.
             - `mode`: Represents how the body of the request will be sent. Here, it's set as "raw".
             - `raw`: Contains the raw JSON body of the request. It includes fields such as `sessionId`, `accountId`, `name`, `description`, `tags`, `profilePhotoUrl`, `coverPhotoUrl`, `minimumTipAmount`, `categoryId`, `category`, `subCategoryId`, `subCategory`, `isAnalyticsPrivate`, `isTournamentOnly`, `isAnalyticsDefault`, `isPreLiveManageAds`, `isPostLiveManageAds`, `breakPreLiveManageUrl` and `breakPostLiveManageUrl`. All keys are explained by their names.
             - `options`: Settings for how the body of the request is to be treated. In this case, it specifies the language of the raw body as JSON.

        Please make sure to replace all placeholder values like "BearerToken", "sessionId", "accountId" and others with actual values before making the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Analytics
                description: This analytics is my second analytics
                tags: second,analytics
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isAnalyticsPrivate: true
                isTournamentOnly: false
                isAnalyticsDefault: true
                isPreLiveManageAds: true
                isPostLiveManageAds: true
                breakPreLiveManageUrl: https://example.com/break-pre-live.mp4
                breakPostLiveManageUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/manage/analytics/update:
    put:
      tags:
        - ManageAnalytics
      summary: Manage - Analytics - Update
      description: |-
        This endpoint, named "Manage-Analytics-Update", is designed to update details about an existing analytics data using the PUT method.

        A bearer token is required in the `auth` field for authorization. The format expected is a string including the `BearerToken` to be replaced with your bearer token.

        The request URL is `http://localhost:3000/api/manage/analytics/update` by default, but you must replace `localhost:3000` with your server's domain name and port number.

        In the `headers`, a "Client-UUID" key must be provided containing a unique client user identifier. 

        In the request `body`, it expects raw JSON data with the following keys:

        - `analyticsId`: The unique identifier for the analytics.
        - `sessionId`: The unique identifier for the session.
        - `accountId`: The ID of the account that registered analytics.
        - `name`: The name of your analytics.
        - `description`: A textual description of your analytics.
        - `tags`: Keywords separated by commas, to identify your analytics.
        - `profilePhotoUrl`: The URL of the profile photo related to your analytics.
        - `coverPhotoUrl`: The URL of the cover photo related to your analytics.
        - `minimumTipAmount`: The minimum amount for tipping.
        - `categoryId`: The ID of the category the analytics belongs to.
        - `category`: The name of the category.
        - `subCategoryId`: The ID of the sub-category the analytics falls under.
        - `subCategory`: The name of the sub-category
        - `isAnalyticsPrivate`: A boolean value indicating if the analytics is private.
        - `isTournamentOnly`: A boolean value indicating if the analytics is for tournament purposes only.
        - `isAnalyticsDefault`: A boolean value indicating if the analytics is set to default.
        - `isPreLiveManageAds`: A boolean value indicating if the pre-live manage ads are on.
        - `isPostLiveManageAds`: A boolean value indicating if the post-live manage ads are on.
        - `breakPreLiveManageUrl`: The URL of the pre-live manage ads' break video.
        - `breakPostLiveManageUrl`: The URL of the post-live manage ads' break video.

        Replace the placeholders in the key-value pairs with your actual data.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"analyticsId\":\"analyticsId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Analytics 2.0\",\"description\":\"This analytics is my second analytics\",\"tags\":\"second,analytics\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isAnalyticsPrivate\":true,\"isTournamentOnly\":false,\"isAnalyticsDefault\":true,\"isPreLiveManageAds\":true,\"isPostLiveManageAds\":true,\"breakPreLiveManageUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveManageUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/manage/analytics/get:
    get:
      tags:
        - ManageAnalytics
      summary: Manage - Analytics - Get
      description: |-
        Here's a detailed description of each data point in this endpoint:

        1. `"name": "Manage - Analytics - Get"`: This is the name given to the endpoint function. It suggests that this API is used to manage and fetch analytics data.

        2. `"request": {}`: This encapsulates all the necessary details required for an API request. It contains: 
           * `"auth": {}`: Determines the method of authentication for the API request.
           * `"type": "bearer"`: Specifies the type of authentication. In this case, a 'Bearer' token is used for authentication.
           * `"bearer": [...]`: This is an array of bearer tokens. It consists of:
             * `"key": "token"`: The name of the header field to be sent with the request.
             * `"value": "BearerToken"`: The actual bearer token value that authenticates the request.
             * `"type": "string"`: Indicates the data type of the token, which is a string.
         
        3. `"method": "GET"`: The HTTP method used for the request. In this case, we are using a GET request to retrieve data.

        4. `"url": "http://localhost:3000/api/manage/analytics/get/?..."`: This is the endpoint of the API. The data to be fetched (analyticsId, sessionId, accountId) are passed as query parameters.

        5. `"headers": [...]`: Includes an array of objects that represent HTTP headers to be sent along with the request. In this case, there is no active header as it is disabled by setting `"disabled":true`.

        6. `"body": {}`: Represents the message body of the request.
           * `"mode": "raw"`: This specifies that the option to input the body content is in raw format.
           * `"raw": ""`: Since the method used is GET and it does not transmit a payload, this raw string is empty.
         
        This endpoint is designed to fetch specific analytics data pertaining to the provided 'analyticsId', 'sessionId', and 'accountId'. The API uses Bearer Token authentication to validate requests.
      security:
        - bearerAuth: []
      parameters:
        - name: analyticsId
          in: query
          schema:
            type: string
          example: analyticsId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/manage/analytics/all:
    get:
      tags:
        - ManageAnalytics
      summary: Manage - Analytics - Get All
      description: |-
        "name": This is the title or label of the API endpoint. In this case, "Manage - Analytics - Get All" identifies the endpoint responsible for fetching all analytics records under the manage category.

        "auth": This specifies the type of authorization required to access the endpoint. This API endpoint uses the Bearer authentication scheme, as denoted by the type attribute.

          "Bearer": This is an array of objects that holds important information related to the Bearer authentication:

            "key": This indicates the name of the item of the bearer authentication. Here, the key is a "token".
            
            "value": This represents the value of the BearerToken to be used in the API request.
            
            "type": This indicates the data type of the value of the bearer token which is a string here.

        "method": This refers to the HTTP request method used to access the endpoint. Here, it's using the GET method, which retrieves data from a server based on specified parameters.

        "url": This is the Uniform Resource Locator (URL) of the server that hosts the API. This endpoint can be accessed via "http://localhost:3000/api/manage/analytics/all". It also contains query parameters "sessionId" and "accountId" that could be substituted with valid values during actual API calls.

        "headers": This array represents additional parameters that can be included in the header section of the HTTP request. The default header is disabled here as denoted by the "disabled" key.

        "body": The body of the HTTP request is specified in this section:

          "mode": This indicates how to interpret the data in the "raw" key. In this case, "raw" mode is used. 
          
          "raw": It contains the body content for the API request, which is empty here as designated by "". This would mean that no additional data is being sent in the body of the request. Usually, this is where you'd input the necessary request payload depending on the API's requirements.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/manage/analytics/delete:
    post:
      tags:
        - ManageAnalytics
      summary: Manage - Analytics - Delete
      description: |-
        This endpoint is named "Manage - Analytics - Delete". It's designed to handle the deletion of analytic data. 

        Here are the details for each part of the endpoint: 

        1. **auth**: This object contains information about the required authorization method for this endpoint.
           - **type**: This field should hold the string "bearer", specifying that a bearer token is necessary for authorization.
           - **bearer**: This array lists all bearer tokens required for access; in this case, there is only one: "token".
              - **key**: "token": This indicates that the bearer token's name is "token".
              - **value**: "sessionId": This shows that the token should hold the value "sessionId".
              - **type**: "string" indicates that the token would be of string data type.

        2. **method**: This field shows that a "POST" HTTP method is used for this API endpoint.

        3. **url**: This field contains the URL "http://localhost:3000/api/manage/analytics/delete" where the request will be sent.

        4. **headers**: This is an array that usually contains details about key and value of the headers to be included in the request. However, in this case, it is empty, meaning no extra headers are required.

        5. **body**: This object contains information about the body of the request.
           - **mode**: This field should hold the string "raw", indicating that the body is in raw format.
           - **raw**: This field contains a JSON object with three properties: "sessionId", "accountId", and "analyticsId". Each of these properties should have string values. These values are used to identify the session, the account, and the specific analytics data point that is to be deleted respectively.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"analyticsId\":\"analyticsId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/media/audio/create:
    post:
      tags:
        - MediaAudio
      summary: Media - Audio - Create - For Reward
      description: |-
        This endpoint is named "Media - Audio - Create - For Reward". It consists of several components such as authentication, request method, URL, headers, and body.

        1. Authentication: The authentication type is bearer, utilizing a token with the key "token" and its value placeholder as "BearerToken". The data type of the bearer token is a string. This token will likely need to be replaced with a valid bearer token for actual use.

        2. Request method: The request method for this endpoint is POST. POST is typically used to send data to a server to create/update a resource.

        3. URL: The URL where this request is being sent is "http://localhost:3000/api/media/audio/create". It likely represents a local development server's address for the audio creation operation.

        4. Headers: The headers field is set to "default" type and is disabled. It has blank key and value fields, indicating no additional information is being sent in the header.

        5. Body: The request body is in raw format, with the language being JSON. The properties in the JSON object are:
           - "sessionId": Represents the ID of the session.
           - "accountId": Denotes the account's unique Id.
           - "rewardId": Signifies the unique Id of the reward.
           - "name": Name of the media file.
           - "description": Description about the media file.
           - "tags": Tags associated with the media file.
           - "contentType": The type of the content, in this case, it's an "application/mp3", indicating it's an MP3 audio file.
           - "contentLength": The length of the content, currently set to 0.
           - "targetKey": A key to target, currently set to "profilePhotoUrl".
           - "compressUsing": The method used to compress the file, currently set to "Base64".
           - "isCompressed": A boolean indicating whether the file is compressed or not.
           - "isPrivate": A boolean indicating whether the file is private or not.
           - "data": Placeholder for the actual data of the file.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                rewardId: rewardId
                name: My Second Media
                description: This media is my second media
                tags: second,media
                contentType: application/mp3
                contentLength: 0
                targetKey: profilePhotoUrl
                compressUsing: Base64
                isCompressed: true
                isPrivate: false
                data: ...
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/media/audio/update:
    put:
      tags:
        - MediaAudio
      summary: Media - Audio - Update - For Reward
      description: |-
        The given endpoint "Media - Audio - Update - For Reward" is designed to update audio media and associate it with a reward in the system. The endpoint interacts with the media audio update service and operates through a PUT method.

        - `"name"`: This is the name of the endpoint, and it provides a brief description of the endpoint's function.

        - `"request"`: This specifies the permissible HTTP method, in our case, it's PUT. It is used to update existing information.

        In the request object, we have:

        - `"auth"`: This authenticates the user making the request. It uses bearer token authorization. The `"bearer"` array implements this authentication method, where `"token"` is the label for the token value, `"BearerToken"`, which is a placeholder for your actual token.

        - `"url"`: This is the URL where the request will be sent. 

        - `"headers"`: This contains additional parameters that are needed by the API to process the request. Here `Client-UUID` is used as a unique identifier to identify the client sending the request.

        The request `"body"` contains the data to be updated:

        - `"raw"`: This contains all the data passed for the update function in JSON format. Key-value pairs inside the JSON object include:

          - `"audioId"`: The unique identifier associated with the audio that needs to be updated.
          - `"sessionId"`: Identifies user session.
          - `"accountId"`: Account identity to which the audio belongs.
          - `"rewardId"`: Reward identity with which the audio needs to be associated.
          - `"name"`: New name for the audio.
          - `"description"`: New textual description about the audio.
          - `"tags"`: Keywords associated with the audio for categorization or identification.
          - `"contentType"`: The format of the audio file (i.e., application/mp3).
          - `"contentLength"`: The size of the audio file.
          - `"targetKey"`: The attribute in the database where the audio URL is stored (i.e., profilePhotoUrl).
          - `"compressUsing"`: The algorithm used for compression (i.e., Base64).
          - `"isCompressed"`: Boolean variable indicating compression status.
          - `"isPrivate"`: Boolean variable indicating whether the updated media is private or public.
          - `"data"`: The raw audio data.

        - `"options"`: Additional communication options. Used here to specify the language of the raw data in the body (Json in this case).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                audioId: audioId
                sessionId: sessionId
                accountId: accountId
                rewardId: rewardId
                name: My Second Media
                description: This media is my second media
                tags: second,media
                contentType: application/mp3
                contentLength: 0
                targetKey: profilePhotoUrl
                compressUsing: Base64
                isCompressed: true
                isPrivate: false
                data: ...
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/media/audio/get:
    get:
      tags:
        - MediaAudio
      summary: Media - Audio - Get - For Public
      description: |-
        This endpoint is named "Media - Audio - Get - For Public". It is a GET request used to fetch audio data for the public based on the provided audio ID.

        1. **Authentication:** The endpoint uses Bearer authentication. A token ("BearerToken") should be provided in order to authenticate the request. The token should be a string type. 

        2. **Method:** GET: This method is used when you are trying to get data from a specified resource. 

        3. **URL:** The URL where the request is sent is "http://localhost:3000/api/media/audio/get/". Two URL parameters are required, 'audioId' and 'public'. 
           - 'audioId' represents the unique identifier for each audio and should be replaced with the actual audio id.
           - 'public' is a flag to denote whether the audio is available for the public. If it's set to 1, it means the audio is available for the public.

        4. **Headers:** Although a key-value pair for headers is provided, it is currently empty and is disabled, which means it will not be sent along with your request.

        5. **Body:** The body of the request is set to be in raw mode. However, as this is a GET request, no actual body data is sent in the request. The provided 'raw' field is empty and will be ignored.
      security:
        - bearerAuth: []
      parameters:
        - name: audioId
          in: query
          schema:
            type: string
          example: audioId
        - name: public
          in: query
          schema:
            type: integer
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/media/audio/all:
    get:
      tags:
        - MediaAudio
      summary: Media - Audio - Get All
      description: |-
        This endpoint is called "Media - Audio - Get All" and it falls under the GET method. This endpoint's purpose is to fetch all data related to an audio media in the database by querying with specific parameters.

        The main elements of this endpoint are:

        - **Name**: This signifies the name of the API endpoint which in this context is "Media - Audio - Get All". It's used for pulling all audio media data.

        - **Request**: This object contains the details for the server request.

        - **Auth**: Authorization details are contained within this object and it has several components:
            - **Type**: The type of authentication used, which is 'bearer' in this case.
            - **Bearer**: It contains an object that has the authentication token, `BearerToken` and its type which is string.

        - **Method**: This attribute specifies the HTTP request method to be used when making the request to the endpoint, in this case, it's `GET`.

        - **URL**: This is the address to which the HTTP request is being sent. It features query parameters that can be dynamically set and used for unique identification while returning the data. The URL here is `http://localhost:3000/api/media/audio/all/?sessionId=sessionId&accountId=accountId`. This endpoint should return all audio files for the provided `sessionId` and `accountId`.

        - **Headers**: They are used to send additional information along with the request. No specific `key-value` pair has been provided here. They are disabled in this case.

        - **Body**: This attributes hold any extra data that needs to be sent to the server. In this case, it is empty (`raw: ""`) because GET request doesn’t use the body to send data to the server.

        Remember to replace `"BearerToken"`, `"sessionId"` and `"accountId"` with actual values while testing or running this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/media/audio/delete:
    post:
      tags:
        - MediaAudio
      summary: Media - Audio - Delete
      description: |-
        This endpoint is titled "Media - Audio - Delete". It features a request method of "POST", which implies this endpoint is used for deleting a specified audio media from the web server.

        The authentication required for this endpoint is of type "bearer". This entails providing a token in the bearer field with the key "token" that's linked with your "sessionId". This is a string type field and represents the session ID of the user making the request.

        The URL, "http://localhost:3000/api/media/audio/delete", is where the request is sent. This path signifies that the endpoint is intended for deleting audio media.

        In the headers section, a default type header is mentioned. Its key-value pairs are undefined and this header is disabled indicating it may not be necessary for the request.

        The main data that is required while making the request is embedded in the raw body of the request payload. It takes the "raw" form and needs to be sent as a JSON string.

        The raw body needs to include three properties: "sessionId", "accountId", "audioId". The "sessionId" is a repeat of the session ID that is assigned during logging in. This identifies the client's session.

        The "accountId" property is also a string and represents the user's account ID. It is necessary to ensure that the operation is performed for the correct user's account. 

        Last but not least, the "audioId" is another string property in the raw payload. This should correlate to the specific ID of the audio media file that you want to be deleted. The system uses this to know the exact audio file to remove in the database or storage.

        Remember to appropriately replace the "sessionId", "accountId", and "audioId" placeholders with actual values when you intend to execute the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"audioId\":\"audioId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/media/image/create:
    post:
      tags:
        - MediaImage
      summary: Media - Image - Create - For Reward
      description: |-
        - "name": This refers to the name of the endpoint. In this case, the endpoint is named as 'Media - Image - Create - For Reward.' This endpoint is used to create new media for rewards.

        - "request": It signifies the HTTP request specifics. 

             - "auth": It represents the authentication mechanism for the request. Here, 'Bearer' token is being used for authorization. 

                     - "key": The key value here is named 'token'.
                       
                     - "value": The representing value for the given key, in this case, it's 'BearerToken.'

                     - "type": Specifies the type of data that the 'token' is, which is a 'string' in the present case.

            - "method": This indicates the HTTP method that the endpoint uses. Here, it is 'POST', meaning the endpoint is designed to send new information to the server.

            - "url": This is the URL to which the request is sent. Here, the POST request is sent to `http://localhost:3000/api/media/image/create`.

            - "headers": An array containing the header information. The default value of the header key-value pair in this case is empty and is disabled.

            - "body": Refers to the payload that is being sent with the request.

                - "mode": The mode in which the body is being sent. Here, it is in 'raw' mode implying that the data hasn't been altered from its original state.

                - "raw": The actual data being sent with the request. It contains several properties as mentioned below:

                    - "sessionId": User's session ID.

                    - "accountId": User's account ID.

                    - "rewardId": ID referring to the specific reward.

                    - "name": The name of the new media, 'My Second Media' in this case.

                    - "description": A brief description of the media.

                    - "tags": Tags that are associated with the media. For example, 'second, media'.

                    - "contentType": Specifies the media type format, which is 'image/jpeg' in this case.

                    - "contentLength": Length of the content. It is 0 in this example.

                    - "targetKey": The key targeting the location where the image will be saved, 'profilePhotoUrl' in this case.

                    - "compressUsing": The method used to compress the image, 'Base64' in this context.

                    - "isCompressed": A boolean value indicating if the image is compressed. It's set to true in this example.

                    - "isPrivate": A boolean value to indicate whether the media is private (true) or public (false). Here, it is set to false, meaning it's public.

                    - "data": The actual image data which is not shown here but denoted as `...`.

                - "options": Contains options for the request. In this case, the 'raw' payload is specified to be in JSON format.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                rewardId: rewardId
                name: My Second Media
                description: This media is my second media
                tags: second,media
                contentType: image/jpeg
                contentLength: 0
                targetKey: profilePhotoUrl
                compressUsing: Base64
                isCompressed: true
                isPrivate: false
                data: ...
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/media/image/update:
    put:
      tags:
        - MediaImage
      summary: Media - Image - Update - For Reward
      description: |-
        This endpoint, named "Media - Image - Update - For Reward," is designed for updating the image associated with a reward. Here's what each piece of data represents:

        1. `auth`: This denotes the authentication method for this endpoint. It's set to the bearer method, which is a way to authorize and certify the identity of the server.

        - `type`: The type of authentication, in this case, it is `bearer`.

        - `bearer`: Contains the `token` to authenticate the server. The `value` `BearerToken` is a placeholder for the actual token.

        2. `method`: This is the HTTP method used for the request. Here, the `PUT` method is used, which typically is used to update existing resources.

        3. `url`: This is the URL to which the request is sent.

        4. `headers`: This contains additional data sent with the request. Here, `Client-UUID`, which uniquely identifies a client, is being sent.

        5. `body`: This contains the data you want to put in the request body. It is often used with `PUT`, `POST`, etc., methods.

        In the `body`:

        - `mode`: The mode of the content to send. Here it is set to `raw`, which means you're sending raw data.

        - `raw`: This contains the JSON object being sent with the request.

        Inside the `raw`:

        - `imageId`: Identifier for the image to be updated.

        - `sessionId`: The session identifier.

        - `accountId`: Identifier for the user's account.

        - `rewardId`: Identifier for the reward.

        - `name`: The new name for the image.

        - `description`: A description of the image.

        - `tags`: Relevant tags for the image, separated by commas.

        - `contentType`: The format of the image. Here it's `image/jpeg`.

        - `contentLength`: The size of the image. Here it's `0`, but you'd replace that with the actual size.

        - `targetKey`: This is likely the location where the image would be stored.

        - `compressUsing`: The method of compression used for the image. Here it's `Base64`.

        - `isCompressed`: A boolean indicating if the image is compressed or not.

        - `isPrivate`: A boolean indicating if the image is private or not.

        - `data`: This likely contains the actual image data.

        - `options`: Additional options for this request.

        Inside `options`:

        - `raw`: Only option available here is `language` which is set to `json`, indicating the format of data sent in the `raw` field.
          
        Note: All the placeholder values like `BearerToken`, `imageId`, `sessionId` etc., should be replaced with actual values while using this endpoint.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                imageId: imageId
                sessionId: sessionId
                accountId: accountId
                rewardId: rewardId
                name: My Second Media
                description: This media is my second media
                tags: second,media
                contentType: image/jpeg
                contentLength: 0
                targetKey: profilePhotoUrl
                compressUsing: Base64
                isCompressed: true
                isPrivate: false
                data: ...
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/media/image/get:
    get:
      tags:
        - MediaImage
      summary: Media - Image - Get - For Public
      description: |-
        1. "name": This is the name of the endpoint. In this case, it's called "Media - Image - Get - For Public", indicating that this endpoint is used to retrieve images for public viewers.

        2. "request": This is the main request object that contains all the necessary information to perform a HTTP request. 

        3. "auth": The authentication mechanism used by this endpoint. Here we are using the "bearer" type, indicating that we'll be using Bearer authentication, a HTTP authentication scheme that involves security tokens called bearer tokens.

        4. "bearer": This object contains details of the bearer token. The "key" is the name of the token (in this case, "token"), "value" is the token string that you must replace with actual token when making a request (here it's, "BearerToken"), and "type" is the data type of this token, which is a string.

        5. "method": This shows that the HTTP method used for the request is "GET". This method is used to retrieve data from a server.

        6. "url": This is the URL endpoint where the request will be sent. In this case, `http://localhost:3000/api/media/image/get/?imageId=imageId&public=1`. Replace `imageId` with an actual id of the image you want to retrieve.

        7. "headers": This is an array of headers to be sent along with the request. In this instance, no headers are included as the "disabled" field is set to true. The "key" and "value" fields are left empty, suggesting no extra information is sent in the header.

        8. "body": This section is for the information sent through the HTTP request. The "mode" is set to "raw", indicating that the information should be sent in raw format. However, the "raw" field is an empty string, indicating there's no additional data to be sent in the body of the request.
      security:
        - bearerAuth: []
      parameters:
        - name: imageId
          in: query
          schema:
            type: string
          example: imageId
        - name: public
          in: query
          schema:
            type: integer
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/media/image/all:
    get:
      tags:
        - MediaImage
      summary: Media - Image - Get All
      description: |-
        This API is named "Media - Image - Get All". It is a GET request intended to retrieve all images from the media section of this application. Below are the details regarding each part of the request.

        - **Auth**: This request uses bearer token authentication. In order to authenticate yourself, you need to provide a string value called "BearerToken".

        - **Method**: This is a GET request. This kind of request is generally used to retrieve resources from a server. 

        - **URL**: The endpoint where the request is made is `http://localhost:3000/api/media/image/all`. Two query parameters should be attached to the URL – `sessionId` & `accountId`. The values of these query parameters should be replaced with actual session ID and account ID for the user's session respectively.

        - **Headers**: There is a placeholder for a header field in the request but it is currently disabled and doesn't contain any value or key, means it isn't used.

        - **Body**: The body mode is set to "raw" but there is currently no content in the body of the request. Generally, for GET requests, the body is left empty as we are not sending any data to the server, we just retrieve it.

        Remember to replace "BearerToken", "sessionId", and "accountId" with actual values when testing or using this endpoint in an application context.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/media/image/delete:
    post:
      tags:
        - MediaImage
      summary: Media - Image - Delete
      description: |-
        Below, you will find detailed descriptions for each part of the API endpoint data:

        - **name**: This represents the name of the current API endpoint. Here, "Media - Image - Delete" suggests that this endpoint is used to delete a specific image from some media.

        - **request**: This is a general term for all the operations that have been requested. All of the API requirements are set here.

          - **auth**: This refers to the authentication system of this endpoint. This helps to check if the incoming request is from an authenticated source.

            - **type**: This refers to the type of authentication being used; in this case, it's "bearer" authentication, which relies on a token for identification and access management.

            - **bearer**: It's an array of bearer tokens used for authentication. The bearer token, described as "token", is a string type and its value is identified by "sessionId".

          - **method**: This represents the HTTP method being enforced. Here, it's "POST", which means the endpoint will be used to send data to the server.

          - **url**: This is the URL of the server where the API request will be sent. In this case, it's "http://localhost:3000/api/media/image/delete".

          - **headers**: These define the operating parameters of an HTTP request or response. However, in this data set, there are no set values for any header.

          - **body**: Body content refers to the main part of the HTTP request or response.

            - **mode**: The API request mode is set as "raw", which means you send a direct sequence of characters as it is in the body.

            - **raw**: Here, you will send a raw input with specific parameters to the API. These parameters are sessionId, accountId, and imageId, all are string type. The server will use these parameters to identify the necessary image to be deleted for the account associated with the provided sessionId and accountId.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"imageId\":\"imageId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/media/video/create:
    post:
      tags:
        - MediaVideo
      summary: Media - Video - Create - For Reward
      description: |-
        This endpoint is named "Media - Video - Create - For Reward" and its function is to create a new video media for a particular reward. The request is authenticated using a bearer token, which is a type of HTTP authentication method. 

        The request method is POST, which means it's used to send data to the server to create a new resource. The endpoint URL where this data is sent is "http://localhost:3000/api/media/video/create".

        There are headers included in the request but they are currently disabled and not holding any key-value pair.

        The body of the request contains the data that you are sending to the server. This data is being sent in raw JSON format which has the following elements:

        - `sessionId`: The unique ID for the session. This is a string.
        - `accountId`: The unique ID for the account involved in creating the media. This also is a string.
        - `rewardId`: The unique ID for the reward for which this media is being created. This is also a string.
        - `name`: The name of the media being created.
        - `description`: A brief description of the media being created.
        - `tags`: Tags attached to the media for categorizing or labeling. Multiple tags are separated by comas.
        - `contentType`: The MIME type of the content. In this case, it's `application/webm` which is typically used for web video files.
        - `contentLength`: The length of the content, expressed in bytes. In this case, it's set to 0, indicating the length is yet to be determined.  
        - `targetKey`: The key specifying where the media is to be used in the user's profile.
        - `compressUsing`: The method of compression used, in this case 'Base64'.
        - `isCompressed`: Determines if the media file is compressed. A boolean value, true indicates that it is compressed.
        - `isPrivate`: Determines if the media file is private or publicly accessible. A boolean value, false indicates that it is publicly accessible.
        - `data`: The actual content of the media in string format, represented by '...'. 

        Finally, the body has additional options for raw data wherein the language being used is specified, in this case, JSON. 

        Keep in mind when using this endpoint, always replace placeholders with actual data to be sent for proper functioning.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                rewardId: rewardId
                name: My Second Media
                description: This media is my second media
                tags: second,media
                contentType: application/webm
                contentLength: 0
                targetKey: profilePhotoUrl
                compressUsing: Base64
                isCompressed: true
                isPrivate: false
                data: ...
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/media/video/update:
    put:
      tags:
        - MediaVideo
      summary: Media - Video - Update - For Reward
      description: |
        This endpoint, named "Media - Video - Update - For Reward", is used to update a specific video related to a reward. It's a PUT request, which suggests it's used to update existing information. This API will need to be called using Bearer Token Authentication, hence, a token value will be supplied in the form of 'BearerToken' under the type of bearer authentication.

        There are certain metadata passed as headers, specifically 'Client-UUID' which will be the unique identifier for the client invoking the request.

        The body of the request includes several key-value pairs:

        1. 'sessionId': The unique identifier of the session.
        2. 'accountId': The unique identifier of the user's account.
        3. 'rewardId': The unique identifier of the reward for which the video is being updated.
        4. 'videoId': The unique identifier of the video which is being updated.
        5. 'name': The new name that you want to assign to the video.
        6. 'description': A brief detail about the video.
        7. 'tags': Keywords related to the video which will be updated separated by commas.
        8. 'contentType': The specific filetype of the content being uploaded, in this case 'application/webm'.
        9. 'contentLength': The size of the video file. Although it's set to zero now, it's expected to be filled with the actual size of the file.
        10. 'targetKey': Presumably the key where the URL of the video will be stored, in this case 'profilePhotoUrl'.
        11. 'compressUsing': The method used for compression, in this case 'Base64'.
        12. 'isCompressed': A flag indicating whether the video is compressed or not. Here, it's true indicating the video is compressed.
        13. 'isPrivate': A flag indicating the privacy status of the media, where false indicates that it is public.
        14. 'data': The content of the video as a string, shown here as '...'.

        Note: The JSON data for the request is sent as raw data, indicated by the "mode" key in the body of the request. The language of the raw data is JSON, indicated by "language" key under "options" on "raw".
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                rewardId: rewardId
                videoId: videoId
                name: My Second Media
                description: This media is my second media
                tags: second,media
                contentType: application/webm
                contentLength: 0
                targetKey: profilePhotoUrl
                compressUsing: Base64
                isCompressed: true
                isPrivate: false
                data: ...
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/media/video/get:
    get:
      tags:
        - MediaVideo
      summary: Media - Video - Get - For Public
      description: |-
        This endpoint is named as "Media - Video - Get - For Public". It refers to a functionality which retrieves media, specifically videos for public viewing. 

        1. Auth: This is the authorization part of the endpoint. It uses bearer token type authorization.
           - Key: It identifies the name of the token, which is "token" here.
           - Value: It is the actual token value, here represented as 'BearerToken'. 
           - Type: This tells us what type of data the bearer token is. The type here is string.

        2. Request Method: The HTTP method used for this endpoint is 'GET'. This method is primarily designed to retrieve data from the server.

        3. URL: "http://localhost:3000/api/media/video/get/?videoId=videoId&public=1". This is the URL that will be hit when sending the endpoint request. It contains two parameters:
           - videoId: This parameter is to provide the unique identifier of the video you want to retrieve.
           - public: This parameter determines if the video is meant for public viewing. The value of 1 implies it is for the public.

        4. Headers: The header fields are not currently used in this endpoint request. It contains an empty key and value. The 'disabled' attribute set to true indicates that this header field may have future uses but is currently not being used.

        5. Body: Here the mode is set as 'raw' which means it can send data without any processing. But currently, no data is to be sent in the body, hence it is empty.
      security:
        - bearerAuth: []
      parameters:
        - name: videoId
          in: query
          schema:
            type: string
          example: videoId
        - name: public
          in: query
          schema:
            type: integer
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/media/media/all:
    get:
      tags:
        - MediaVideo
      summary: Media - Video - Get All
      description: |-
        **Endpoint Description:**

        **Name: "Media - Video - Get All"**
        This is the label or identifier of the endpoint. It suggests that this endpoint's primary task is to retrieve (Get) all video media.

        **Request:**
        It covers various aspects regarding the API request that will be made.

        **Auth-->Type: "bearer"**
        This refers to the authentication method that is employed for this request. Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. The name "Bearer authentication" can be understood as "give access to the bearer of this token".

        **Auth-->Bearer-->Key: "token"**
        This is the key information required for bearer authorization. It's typically named 'token'.

        **Auth-->Bearer-->Value: "BearerToken"**
        This is the actual bearer token for authentication. Replace "BearerToken" with the real bearer token.

        **Auth-->Bearer-->Type: "string"**
        This indicates the data type of the bearer token. In this case, it is a string.

        **Method: "GET"**
        This defines the HTTP method to be used when making the API request. A 'GET' request is used to request data from a resource.

        **URL: "http://localhost:3000/api/media/media/all/?sessionId=sessionId&accountId=accountId"**
        This is the API's endpoint URL. The parameters 'sessionId' and 'accountId' should be replaced with actual session and account id values.

        **Headers:**
        These are additional parameters that can be sent with the request. At present, there isn't any specific key-value pair given.

        **Body-->Mode: "raw"**
        This indicates the data mode for the body of the request. The 'raw' mode allows you to write text, JSON, XML or HTML requests directly in the text editor.

        **Body-->Raw: ""**
        Since it's a GET request, no body data needs to be sent, which is why this field is empty.

        Remember to replace all placeholder values with actual data before making the request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/media/media/delete:
    post:
      tags:
        - MediaVideo
      summary: Media - Video - Delete
      description: |-
        - `"name": "Media - Video - Delete"`: This represents the name of the API endpoint. It indicates that this endpoint is used to delete media, specifically videos, in the application.

        - `"request":`: This object contains details about the HTTP request made to the endpoint.

        - `"auth":`: This object contains authentication information required to access the endpoint. 
          - `"type": "bearer"`: Indicates that the endpoint uses Bearer token authentication.
          - `"bearer":`: This array contains objects representing individual bearer tokens.
            - `"key": "token"`: The string that should be used as a key for the bearer token in request headers.
            - `"value": "sessionId"`: The string that should be used as the value of the bearer token. In this case, it indicates that the session id should be provided as the token.
            - `"type": "string"`: The data type of the value - sessionId is a string.

        - `"method": "POST"`: This instructs the HTTP request to use the POST method, indicating that information will be sent to the server to create or update a resource.

        - `"url": "http://localhost:3000/api/media/media/delete"`: This is the URL where the HTTP request will be sent to perform the operation.

        - `"headers":`: This array contains objects representing individual HTTP headers to be included in the request.
          - Note that the `"key": ""` and `"value": ""` are empty. This might be a template for users to include any other headers needed for the request.
          - `"type": "default"`: The type of HTTP header. It is set to default, meaning it is not any special, predefined type of header.
          - `"disabled": true` This header is disabled, and will not be sent along with the HTTP request.

        - `"body":`: This object contains data that will be sent to the server.
          - `"mode": "raw"`: The body data will be sent in raw format, meaning it is a string of text exactly as it appears in the `"raw"` field.
          - `"raw": "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"videoId\":\"videoId\"}"`: This is the actual data to be sent. Keys (`sessionId`, `accountId`, `videoId`) represent parameter names, and the corresponding values are placeholders, indicating that actual session ID, account ID, and video ID should be provided when making the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"videoId\":\"videoId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/channels/create:
    post:
      tags:
        - NotificationChannels
      summary: Notification - Channels - Create
      description: |-
        Endpoint Name: The provided `name` attribute represents the specific title or identifier for the API endpoint. Here, "Notification - Channels - Create" signifies that this API is designed to create new channels for notifications.

        Authentication: The `auth` attribute encapsulates the method and details of authentication. In this case, the `bearer` method type is applied and the `token` key needs to be set as "BearerToken".

        HTTP Method: The `method` attribute presents the HTTP request type. In this case, a 'POST' method is being used to create new data in your database.

        Endpoint URL: The `url` attribute provides the address where the API request is sent. Here, "http://localhost:3000/api/notification/channels/create" is the endpoint to which you'd be navigating to undertake the procedure.

        Headers: The `headers` represent any additional parameters that might be required in the request. For this instance, no specific headers are required.

        Request Body: The `body` contains all the data sent with the HTTP request during the API call. The given `raw` mode indicates the request data is sent as a raw string. This Request body contains the data for the new channel to be created, in JSON format.

        - `sessionId`: Identifier for the session.
        - `accountId`: Identifier for the account.
        - `name`: Name of the channel.
        - `description`: Description for the newly created channel.
        - `tags`: Related tags to the channel.
        - `profilePhotoUrl`: URL of the profile photo for the channel.
        - `coverPhotoUrl`: URL for the cover photo of the channel.
        - `minimumTipAmount`: Minimum tip amount that would be allowed in the channel.
        - `categoryId` and `category`: Identifier and name for the category of the channel.
        - `subCategoryId` and `subCategory`: Identifier and the name of the subcategory of the channel.
        - `isChannelsPrivate`: A boolean which states whether the channel is private.
        - `isTournamentOnly`: A boolean value stating whether the channel is designated only for tournaments.
        - `isChannelsDefault`: A boolean denoting if the channel is default.
        - `isPreLiveNotificationAds` and `isPostLiveNotificationAds`: Booleans representing whether to show ads before or after live notifications.
        - `breakPreLiveNotificationUrl` and `breakPostLiveNotificationUrl`: URLs for the break notifications before and after live streams.

        Finally, `options` in the `body` suggests that the enclosed data is in JSON format.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Channels
                description: This channels is my second channels
                tags: second,channels
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isChannelsPrivate: true
                isTournamentOnly: false
                isChannelsDefault: true
                isPreLiveNotificationAds: true
                isPostLiveNotificationAds: true
                breakPreLiveNotificationUrl: https://example.com/break-pre-live.mp4
                breakPostLiveNotificationUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/channels/update:
    put:
      tags:
        - NotificationChannels
      summary: Notification - Channels - Update
      description: |-
        This endpoint, named "Notification - Channels - Update", is designed to manage the process of updating information related to channels within the notification system. 

        - **Auth**: This is the authorization method for the endpoint. It uses type "bearer" which means you need to supply a bearer token to authenticate. The `token` value under the bearer section should hold this bearer token.

        - **Request method**: The method of this endpoint is "PUT" which is typically used to update an existing resource.

        - **URL**: It shows the location of the endpoint which is "http://localhost:3000/api/notification/channels/update" in this case.

        - **Headers**: It uses a custom header named `Client-UUID`, the value for it should be the 'UUID' that uniquely identifies the client.

        - **Body**: This contains the data to be updated.
          
          - `channelsId`: The unique identifier of the channels. 
                                               
          - `sessionId`: Different sessions are assigned unique identifiers.

          - `accountId`: This represents the unique identifier of the account making the request.
          
          - `name`: Name of the channel.

          - `description`: Description about the channel.
          
          - `tags`: Tags associated with the channel. They need to be comma-separated values.
          
          - `profilePhotoUrl`: Url of the profile photo for the channel.

          - `coverPhotoUrl`: Url of the cover photo for the channel.
          
          - `minimumTipAmount`: The minimum tip amount that the channel accepts.

          - `categoryId` and `category`: Category ID and descriptive string to classify where in the server's system the channel belongs to.
          
          - `subCategoryId` and `subCategory`: Sub category ID and a descriptive string for further classifying the channel within its category.
          
          - `isChannelsPrivate`: A boolean flag which signifies whether the channels are private or not.
          
          - `isTournamentOnly`: A boolean flag indicating whether the channel is only for tournaments.
          
          - `isChannelsDefault`: A boolean flag indicating if the channel is a default one.
          
          - `isPreLiveNotificationAds`, `isPostLiveNotificationAds`: Boolean flags indicating whether pre-live and post-live notification ads are allowed on this channel.
          
          - `breakPreLiveNotificationUrl`, `breakPostLiveNotificationUrl`: URLs where the pre-live and post-live break notification adverts will play.
          
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"channelsId\":\"channelsId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Channels 2.0\",\"description\":\"This channels is my second channels\",\"tags\":\"second,channels\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isChannelsPrivate\":true,\"isTournamentOnly\":false,\"isChannelsDefault\":true,\"isPreLiveNotificationAds\":true,\"isPostLiveNotificationAds\":true,\"breakPreLiveNotificationUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveNotificationUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/channels/get:
    get:
      tags:
        - NotificationChannels
      summary: Notification - Channels - Get
      description: |-
        "name": This parameter refers to the name of the endpoint. In this case, the name of the endpoint is "Notification - Channels - Get."

        "request": This describes the details of the HTTP request call. 

        "auth": It indicates the authentication type and info required for the endpoint. 
        "type": This parameter within "auth" refers to the type of authentication mechanism that is used. In this case, "bearer" authentication is used. 
        "bearer": This contains information about "bearer token" authentication. 
        "key": The key field under bearer authentication specifies the name of the key that is used. In this case, it is "token." 
        "value": The value field refers to the static token value which in this case set as "BearerToken".
        "type": The type field indicates the data type of token which here is "string".

        "method": This parameter indicates the HTTP method to be used when sending a request to the server. In this case, "GET" method is used.

        "url": This parameter provides the URL or the endpoint to which the request needs to be made. Parameters within the URL are specified - channelsId, sessionId, and accountId which need to be replaced by appropriate values.

        "headers": This portion of the request contains the information to be passed in the headers. In this case, it is empty set to default type and it's not necessary as it is disabled.

        "body": The body portion within the request contains information that needs to be sent as the body of the request. In this case, there is no body content - it is set to "raw" mode and it's empty.
      security:
        - bearerAuth: []
      parameters:
        - name: channelsId
          in: query
          schema:
            type: string
          example: channelsId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/channels/all:
    get:
      tags:
        - NotificationChannels
      summary: Notification - Channels - Get All
      description: |-
        1. `name`: This is the identifier for the endpoint. In this case, the name of the endpoint is "Notification - Channels - Get All". It's used to locate the specific endpoint within the API.

        2. `request`: This object contains the details of the API request. Inside the request object, there are several properties such as `auth`, `method`, `url`, `headers`, and `body`. 

        3. `auth`: This is the authentication method required to access the endpoint. It uses the "bearer" type, indicating the request requires a bearer token for authorization. 

        4. `bearer`: This contains the specific details of the bearer token required for the request. It has a `key` "token", `value` "BearerToken", and `type` which is "string". This means that you need to replace "BearerToken" with the actual token value in your requests.

        5. `method`: This is the HTTP method used for the request. Here, it's "GET", which is typically used to retrieve data from an API.

        6. `url`: This is the address of the API endpoint. In this case, it's "http://localhost:3000/api/notification/channels/all". The URL also contains two query parameters `sessionId` and `accountId`, which you would replace with your specific session and account identifiers when making requests.

        7. `headers`: This is a list which contains information that the client (i.e., the sender of the request) passes to the server to provide additional details about the request. In this case, it's an empty default header that's disabled.

        8. `body`: This is where you would put the data you want to send to the API. Since the `method` is "GET", which doesn't usually send any data to the API, the `mode` is set as "raw" and `raw` field is empty, meaning no actual data is included in the body of the request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/channels/delete:
    post:
      tags:
        - NotificationChannels
      summary: Notification - Channels - Delete
      description: |-
        This endpoint is titled "Notification - Channels - Delete". As the name suggests, it is made for deleting a notification channel.

        The endpoint requires "bearer" type authorization. Here, the bearer token must be provided to handle authentication and authorization to use this endpoint. The key for the bearer token is "token" and the value should be the "sessionId". The "sessionId" should be a string type value, representing the ID of the active session.

        This endpoint is accessed via the "POST" method indicating that you're supplying information to be processed by the server.

        The URL to send this POST method is "http://localhost:3000/api/notification/channels/delete". Upon successful operation, this endpoint will remove the respective notification channel.

        There are headers in the request but they are disabled and empty by default. Though they are present, they aren't required or being used currently.

        Inside the "body" of the request, you'll notice it's in "raw" mode meaning you can enter any text. However, it expects a JSON object that contains three fields:

        1. The "sessionId" field, which should be a string type value, stands for the session identifier.
        2. The "accountId" field is also a string type value. This represents the account identifier from which you want to delete the notification channel.
        3. The "channelsId" field denotes the identifier of channels that is to be deleted from the account.

        Please remember, while filling out the data in the body, ensure that you're following the provided JSON format.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"channelsId\":\"channelsId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/coins/create:
    post:
      tags:
        - NotificationCoins
      summary: Notification - Coins - Create
      description: |-
        This endpoint is called "Notification - Coins - Create". Let me provide the details about each part of the data provided.

        1. `name`: It is the name of the endpoint. 

        2. `request`: This object represents the request to be made.

        3. `auth`: The `auth` object contains information related to the authentication method used for this request. 

           - `type` is "bearer" indicating that bearer token is used for authentication.
           
           - `"bearer"` is an array that holds an object with the `key` of `"token"`, and the `value` of `"BearerToken"`, indicating where the bearer token is to be added for authentication.

        4. `method`: The HTTP method for the request is `POST`.

        5. `url`: The URL where the request is to be sent. In this case, it is `"http://localhost:3000/api/notification/coins/create"`.

        6. `headers`: An array containing the HTTP headers to be sent with the request. Here, it is set to default and disabled.

        7. `body`: The `body` object includes the body payload for the request.

           - `mode`: The mode of the inputted body, which here is "raw".
           
           - `raw`: It includes the JSON string to be sent with the request.
           
           - `options`: An object that specifies the options for the body payload. Here, it shows that the language for the `raw` payload is json.

        Inside the `raw` field we have the payload to the `POST` request. The payload contains various properties:

        - `sessionId`: A session identifier.

        - `accountId`: An account identifier.

        - `name`: Name of the coins.

        - `description`: Description about the coins.

        - `tags`: Keywords related to the coins.

        - `profilePhotoUrl`: URL of the profile image for these coins.

        - `coverPhotoUrl`: URL of the cover image for these coins.

        - `minimumTipAmount`: The minimum amount for which the coins can be tipped.

        - `categoryId & category`: Identifier and name of the category to which these coins belong.

        - `subCategoryId & subCategory`: Identifier and name of the sub-category to which these coins belong.

        - `isCoinsPrivate`: Boolean flag to indicate whether these coins are private or not.

        - `isTournamentOnly`: Boolean flag to indicate whether the coins are only for tournaments.

        - `isCoinsDefault`: Boolean flag for marking the coins as default.

        - `isPreLiveNotificationAds & isPostLiveNotificationAds`: These boolean flags are for indicating if there are Pre-Live and Post-Live Notification Ads.

        - `breakPreLiveNotificationUrl & breakPostLiveNotificationUrl`: These are URLs for the break pre-live and break post-live notifications respectively. 

        Please note that the actual value for these properties may vary based on your requirement.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Coins
                description: This coins is my second coins
                tags: second,coins
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isCoinsPrivate: true
                isTournamentOnly: false
                isCoinsDefault: true
                isPreLiveNotificationAds: true
                isPostLiveNotificationAds: true
                breakPreLiveNotificationUrl: https://example.com/break-pre-live.mp4
                breakPostLiveNotificationUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/coins/update:
    put:
      tags:
        - NotificationCoins
      summary: Notification - Coins - Update
      description: |-
        This endpoint is named "Notification - Coins - Update". It's a PUT request used to alter the details of certain coin notifications.

        The "Auth" field specifies the type of authentication required, which is of "bearer" type. There's also a "bearer" attribute that holds an array of objects. In that array, there's an object which has a key "token", with value being "BearerToken" of a string type.

        "Method" field indicates that the HTTP method used here is "PUT".

        "Url" field describes the URL where the API request is sent. The given URL here is "http://localhost:3000/api/notification/coins/update".

        In the "Headers", there's a key named "Client-UUID" with a value of "ClientUUID". This is of default type.

        In the "Body" section, the "Mode" field specifies that the data sent to the server is raw JSON data. 

        The "Raw" field contains the actual data sent to the server in JSON format. It includes:
        - "coinsId": ID of the coin.
        - "sessionId": It refers to ID of the current session.
        - "accountId": An account identifier.
        - "name": Name of the coin.
        - "description": Detailed info about the coin.
        - "tags": Relevant tags for the coin.
        - "profilePhotoUrl": URL of the profile picture for the coins.
        - "coverPhotoUrl": URL of the cover picture for the coins.
        - "minimumTipAmount": Smallest amount of tip allowed.
        - "categoryId" and "category": Unique ID and name of the category the coin falls under respectively.
        - "subCategoryId" and "subCategory": ID and name of the subcategory the coin pertains to.
        - "isCoinsPrivate": Boolean to indicate if the coins are private or not.
        - "isTournamentOnly": Boolean field to indicate if the coins are only for tournaments.
        - "isCoinsDefault": Boolean field that shows if the given coins are assigned as default.
        - "isPreLiveNotificationAds" and "isPostLiveNotificationAds": Boolean fields to indicate if pre-live and post-live notification ads are enabled.
        - "breakPreLiveNotificationUrl" and "breakPostLiveNotificationUrl": URLs to the media files that should be played during pre-live and post-live notification breaks.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"coinsId\":\"coinsId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Coins 2.0\",\"description\":\"This coins is my second coins\",\"tags\":\"second,coins\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isCoinsPrivate\":true,\"isTournamentOnly\":false,\"isCoinsDefault\":true,\"isPreLiveNotificationAds\":true,\"isPostLiveNotificationAds\":true,\"breakPreLiveNotificationUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveNotificationUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/coins/get:
    get:
      tags:
        - NotificationCoins
      summary: Notification - Coins - Get
      description: |-
        The data provided represents a GET request endpoint for the "/api/notification/coins/get/" route, and includes authentication, request method, url, headers, and body. Let's analyze each separately:

        1. "name": This defines the name of the API endpoint, which in this case, is "Notification - Coins - Get". This is used for easy understanding and identification of this particular endpoint.

        2. "request": This is the object that contains all the request details.

           - "auth": Describes the method used for the authentication of the request.

             - "type": Here "bearer" indicates the type of authentication method used, which signifies that a bearer token is required.

             - "bearer": An array with an object that contains the key-value pair for the bearer token.

               - "key": The key is named "token", which will be used to pass in the bearer token.

               - "value": The value is "BearerToken", indicating that a bearer token should be provided here.

               - "type": Defines the data type of this field, which in this case, it's a string.

           - "method": Represents the HTTP method for the request, which is GET in this scenario.

           - "url": Contains the exact URL to be hit for the API to respond. The string includes in it placeholder tokens representing "coinsId", "sessionId", and "accountId" these will need to be replaced by actual values.

           - "headers": An array of key-value pairs meant to provide additional context or input to the request. Currently empty and disabled by default. These can include data like 'Content-Type' or 'Accept-Language'.

           - "body": Defines the data that will be sent as the request body. 

             - "mode": Defines the mode of the body, which is "raw" in this case.

             - "raw": This is where you'd place the raw data to be sent in the body of the request, currently, it's empty.

        Each of the elements in this data set has a unique and specific purpose, and understanding each one is crucial when creating or debugging API requests. It can be edited to match the specific demands of the specific API request.
      security:
        - bearerAuth: []
      parameters:
        - name: coinsId
          in: query
          schema:
            type: string
          example: coinsId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/coins/all:
    get:
      tags:
        - NotificationCoins
      summary: Notification - Coins - Get All
      description: |
        The endpoint "Notification - Coins - Get All", as its name suggests, is used to retrieve all coin notifications data. Here's a detailed description of each data in this endpoint:

        1. **name**: This is the identifier or name of the endpoint. In this case, the endpoint's name is "Notification - Coins - Get All".

        2. **request**: This object contains all the details of the request to be made to the endpoint.

           - **auth**: This attribute contains the authentication type and details required by the endpoint.
            
             - **type**: This declares the type of authentication needed for the endpoint. In this case, it is "bearer".
            
             - **bearer**: This is an array that carries the authentication key and values.
                
               - **key**: Specifies the key for authentication which is "token" in this case.
                
               - **value**: Contains the actual value of the bearer token authentication, known as "BearerToken".
                
               - **type**: The type of the value, in this case, the BearerToken value is a string.

           - **method**: Defines the HTTP method required for the request. In this case, it's "GET", which is used to retrieve data from the server.

           - **url**: This is the Uniform Resource Locator where the request will be sent. Parameters/sessions could be appended to these URLs. Here, "sessionId" and "accountId" are the query parameters used.

           - **headers**: This contains any headers that should be included in the request. The headers are currently empty and disabled in this case.

           - **body**: This contains the body of the request. It is set to "raw" mode, meaning any data inside "raw" will be sent as is; however, the "raw" field is currently empty for this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/coins/delete:
    post:
      tags:
        - NotificationCoins
      summary: Notification - Coins - Delete
      description: |-
        This endpoint, titled "Notification - Coins - Delete", is designed for sending a POST request to delete a certain coin notification. 

        To begin with, you'll find the `auth` object which requires a "bearer" type token for authentication. Within the `auth` object, there is a single `bearer` item which holds three attributes: "key", "value", and "type". 

        - "key": It holds the value "token", which identifies the type of the bearer token. 
        - "value": It holds the placeholder "sessionId", indicating the actual token value should be the user session ID. 
        - "type": Defines the type of the value; here it's identified as a "string".

        The `method` field is set to "POST", indicating that this is a POST request.

        The `url` field signifies the location at where the request is to be sent, with this API endpoint being located at "http://localhost:3000/api/notification/coins/delete".

        Under the `headers` section, there is an empty default value. The "key" and the "value" are both blank and it's currently disabled. Most likely used for adding any additional information if required in the future.

        Lastly, we have the `body` section. 

        - It is in RAW mode which means you can input JSON data directly. 
        - The `raw` field contains a JSON object string. This JSON object has three properties: "sessionId", "accountId" and "coinsId". 

          - "sessionId": Represents the session ID of the currently logged-in user making the request; it must match the token used in the auth field.
          - "accountId": Identifies the account for which the coin notification is to be deleted.
          - "coinsId": This indicates the specific ID of the coin notification to be deleted from the mentioned accountId. 

        For these properties to function correctly, they must be replaced with actual values before sending the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"coinsId\":\"coinsId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/comments/create:
    post:
      tags:
        - NotificationComments
      summary: Notification - Comments - Create
      description: |-
        This endpoint is named "Notification - Comments - Create". It is used to create comments on notifications.

        - The `"auth"` field requires bearer token authentication. The bearer token should be provided in the `"token"` field with the key as `"BearerToken"` and the value would be the token itself.
        - The `"request"` field specifies that this is a POST method.
        - The `"url"` field defines the endpoint URL which is "http://localhost:3000/api/notification/comments/create".
        - The `"headers"` field is left blank and has been disabled in this case.

        The data for the comments to be created should be included in the `"body"` of the request. The `"body"` field should include:

        - `"mode"`: The type of body content, which is raw in this case.
        - `"raw"`: This is where the actual details of the comments would go, formatted in JSON. The data should include the following:

          - `"sessionId"`: The session ID
          - `"accountId"`: The account ID
          - `"name"`: The name of the comments
          - `"description"`: The description of the comments
          - `"tags"`: The tags for the comments, separated by commas
          - `"profilePhotoUrl"`: The URL of the profile photo
          - `"coverPhotoUrl"`: The URL of the cover photo
          - `"minimumTipAmount"`: The minimum tip amount
          - `"categoryId"`: The category ID
          - `"category"`: The category name
          - `"subCategoryId"`: The subcategory ID
          - `"subCategory"`: The subcategory name
          - `"isCommentsPrivate"`: A boolean indicating if the comments is private
          - `"isTournamentOnly"`: A boolean indicating if the comments is tournament only
          - `"isCommentsDefault"`: A boolean indicating if the comments is default
          - `"isPreLiveNotificationAds"`: A boolean indicating if pre live notification ads are enabled
          - `"isPostLiveNotificationAds"`: A boolean indicating if post live notification ads are enabled
          - `"breakPreLiveNotificationUrl"`: The URL for the pre-live break notification
          - `"breakPostLiveNotificationUrl"`: The URL for the post-live break notification

        - `"options"`: Specifies that the `"raw"` body content should be in JSON language.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Comments
                description: This comments is my second comments
                tags: second,comments
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isCommentsPrivate: true
                isTournamentOnly: false
                isCommentsDefault: true
                isPreLiveNotificationAds: true
                isPostLiveNotificationAds: true
                breakPreLiveNotificationUrl: https://example.com/break-pre-live.mp4
                breakPostLiveNotificationUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/comments/update:
    put:
      tags:
        - NotificationComments
      summary: Notification - Comments - Update
      description: |-
        This endpoint is named "Notification - Comments - Update". It uses the PUT method to update comments in a notification system. 

        1. `Auth`: 
        This endpoint uses bearer token authentication. The token key should be added in the headers under the key "token". 

        2. `Method`: 
        "PUT" is the HTTP method that is used in this endpoint. PUT is typically used to update an existing resource.

        3. `URL`: 
        The URL to call the endpoint is http://localhost:3000/api/notification/comments/update. It should be replaced with the relevant URL if necessary.

        4. `Headers`: 
        The "Client-UUID" key is required which will be used to uniquely identify the client request. It appears in the headers and its type is "default". 

        5. `Body`: 
        The body of the request is sent in raw JSON format. Specific keys include
        - `commentsId`, `sessionId`, `accountId`: These are identifiers for the comment, session and account respectively.
        - `name`: Name of the comment being updated.
        - `description`: Description of the comment.
        - `tags`: Tags related to the comment. 
        - `profilePhotoUrl`, `coverPhotoUrl`: URLs of profile and cover photos. 
        - `minimumTipAmount`: Minimum amount for tipping. 
        - `categoryId`, `category`, `subCategoryId`, `subCategory`: Category and subcategory details of the comment. 
        - `isCommentsPrivate`: Boolean entity indicating whether the comment is private. 
        - `isTournamentOnly`, `isCommentsDefault`: Boolean entities related to whether the comment is intended for tournament only, or it is a default comment. 
        - `isPreLiveNotificationAds`, `isPostLiveNotificationAds`: Boolean entities indicating whether ads should be shown before or after live notification respectively.
        - `breakPreLiveNotificationUrl`, `breakPostLiveNotificationUrl`: URLs for the break notifications before or after the live session. 

        After sending the request,  the endpoint updates the comment in the system identified by the `commentsId`.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"commentsId\":\"commentsId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Comments 2.0\",\"description\":\"This comments is my second comments\",\"tags\":\"second,comments\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isCommentsPrivate\":true,\"isTournamentOnly\":false,\"isCommentsDefault\":true,\"isPreLiveNotificationAds\":true,\"isPostLiveNotificationAds\":true,\"breakPreLiveNotificationUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveNotificationUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/comments/get:
    get:
      tags:
        - NotificationComments
      summary: Notification - Comments - Get
      description: |-
        Endpoint Name: This is called "Notification - Comments - Get". It defines the purpose of this endpoint. It is used to retrieve notifications related to comments.

        Request Method: The 'GET' method is used. This method means you are retrieving some kind of data.

        Authentication: The authentication required for this endpoint is 'Bearer token'. This means that the server requires a bearer token to authenticate the user making the request.

          - Token: A bearer token for authentication. It needs to be sent in the 'Bearer token' field. The type of the token is a string.

        URL: The URL field contains the API endpoint path. This particular endpoint is for 'http://localhost:3000/api/notification/comments/get/'. The endpoint requires three parameters that need to be specified - 'commentsId', 'sessionId', and 'accountId'. 

          - 'commentsId': The identification number for the comments you are looking for notifications for.
          - 'sessionId': The session ID from which the API request is made.
          - 'accountId': The account ID which is linked to the session.

        Headers: Headers in HTTP requests hold additional information sent with the request. Currently, there aren't any specified headers for this API endpoint.

        Request Body: The request body contains data to be sent to the server. For this endpoint, the body mode is set to 'raw', which means you can send unstructured data. However, currently, no data is meant to be sent in the body for this request.
      security:
        - bearerAuth: []
      parameters:
        - name: commentsId
          in: query
          schema:
            type: string
          example: commentsId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/comments/all:
    get:
      tags:
        - NotificationComments
      summary: Notification - Comments - Get All
      description: |-
        This endpoint named "Notification - Comments - Get All" retrieves all notifications related to comments. Following are the data provided in the endpoint:

        1. `name`: The name of the endpoint. In this case, it's set as "Notification - Comments - Get All", indicating that it's used to fetch all comment related notifications.

        2. `request`: This represents the actual request for the API endpoint:
           
          - `auth`: Defines the type of authorization needed for this request. This request requires "bearer" authorization, meaning you will need to include a bearer token in the request.

            - `bearer`: This is an array containing information about authorization: 
              - `key`: The key used for authorization, which is "token" in this case. 
              - `value`: Here, it represents the value of the token which is "BearerToken". 
              - `type`: Specifies the data type of the value, which is a "string".

          - `method`: This is the HTTP method to use for the request. Here it is "GET", meaning the request will retrieve data from the given URL.

          - `url`: Specifies the URL where the request will be made. The endpoint is hosted on localhost running on port 3000. URL parameters include "sessionId" and "accountId".

          - `headers`: An array that specifies HTTP headers to include in the request. In this case, there is a single, disabled default header with empty key and value.

          - `body`: This refers to the content sent with the request. For this request, the mode is set to "raw" with no data in the body, indicating there is no additional data to be sent with this API request. It is common for GET requests to not send any additional data in the body as they are used to retrieve data only.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/comments/delete:
    post:
      tags:
        - NotificationComments
      summary: Notification - Comments - Delete
      description: |
        - `name`: This field states the name of the endpoint we are discussing, which in this case is "Notification - Comments - Delete". This means this endpoint is used to delete comments from notifications.

        - `request`: This field contains details about the HTTP request that needs to be made to execute the endpoint. 

            - `auth`: This field refers to the authorization required to access this endpoint. The type of authentication used here is "bearer". It contains a single object under the bearer property that takes in a token in form of a session ID as a value. This session ID serves as the token needed for bearer authentication.
               
            - `method`: This denotes the HTTP method to be used for the request, which in this case is "POST". Post method usually means that data is being sent to be processed to a specified resource. 

            - `url`: This represents the URL where the request will be sent. The given url is "http://localhost:3000/api/notification/comments/delete".
                 
            - `headers`: This is an array meant to contain any headers that are to be sent along with the request. It's currently just a placeholder with no key or value.
                
            - `body`: This field contains the data to be sent along with the POST request. The data is sent in raw JSON format. The raw data includes a "sessionId", "accountId", and "commentsId". These refer to the session ID, account ID, and comments ID respectively that should be included in the body of the request.

        In summary, this endpoint requires a POST request to be made to "http://localhost:3000/api/notification/comments/delete". The required authorization is bearer token authentication, with the session ID acting as the token. Headers are currently left empty. The body of the POST request should contain a session ID, an account ID, and a comments ID in raw JSON format. These three pieces of information are likely used to identify the user, their account, and specifically which comments they are looking to delete.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"commentsId\":\"commentsId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/invites/create:
    post:
      tags:
        - NotificationInvites
      summary: Notification - Invites - Create
      description: |-
        This endpoint is called "Notification - Invites - Create". It's a POST request, which means it's intended to create a new content for notification invites and send the information to the server. 

        The endpoint URL is "http://localhost:3000/api/notification/invites/create". 

        It uses 'Bearer token' authentication. To reach the endpoint, you need to provide a valid 'Bearer token' under the "token" key. If you don't, your request will be rejected.

        The request headers are currently empty and disabled by default. They are not required to successfully complete the request.

        In the body of the request, it requires various data:

        - `sessionId`: A string that represents the session ID.
        - `accountId`: A string that represents the account ID.
        - `name`: The name of the invite.
        - `description`: A string describing the invite.
        - `tags`: The tags associated with the invite.
        - `profilePhotoUrl`: A URL leading to the profile photo for the invite.
        - `coverPhotoUrl`: A URL leading to the cover photo for the invite.
        - `minimumTipAmount`: The minimum amount required for a tip.
        - `categoryId` & `category`: These represent the category of the invite. 
        - `subCategoryId` & `subCategory`: These represent the sub-category of the invite. 
        - `isInvitesPrivate`: A boolean variable indicating whether the invite is private (true) or not (false).
        - `isTournamentOnly`: A boolean variable indicating whether the invite is only for a tournament (true) or not (false).
        - `isInvitesDefault`: A boolean variable indicating whether the invite is default (true) or not (false).
        - `isPreLiveNotificationAds`: A boolean variable indicating whether pre-live notification ads are enabled (true) or not (false).
        - `isPostLiveNotificationAds`: A boolean variable indicating whether post-live notification ads are enabled (true) or not (false).
        - `breakPreLiveNotificationUrl`: A URL leading to a notification break before the invite goes live.
        - `breakPostLiveNotificationUrl`: A URL leading to a notification break after the invite goes live.

        All the data should be sent in the raw, JSON format.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Invites
                description: This invites is my second invites
                tags: second,invites
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isInvitesPrivate: true
                isTournamentOnly: false
                isInvitesDefault: true
                isPreLiveNotificationAds: true
                isPostLiveNotificationAds: true
                breakPreLiveNotificationUrl: https://example.com/break-pre-live.mp4
                breakPostLiveNotificationUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/invites/update:
    put:
      tags:
        - NotificationInvites
      summary: Notification - Invites - Update
      description: |-
        This endpoint, named "Notification - Invites - Update", uses the `PUT` method and is dedicated to updating invite notifications. Here are the details of each field in the context of this API:

        - **auth**: The authentication method for this API is bearer token. You have to include a `key` named `token` and its `value` should be the bearer token. The `type` of this value is `string`.
        - **method**: The method used for this request is `PUT`, indicating that it's used to update data.
        - **url**: The URL endpoint to which the request will be sent. The route to update invites notification is: `http://localhost:3000/api/notification/invites/update`.
        - **headers**: The headers contain a `Client-UUID` key with its `value` as `ClientUUID`. It is the unique identifier for a client.
        - **body**: A set of keys included in the raw body of the request. Here's what each key represents:
          - `invitesId`: The ID of the invites to be updated.
          - `sessionId`: The ID of the session.
          - `accountId`: The ID of the account.
          - `name`: The new name of the invites.
          - `description`: The new description for the invites.
          - `tags`: The new tags for the invites.
          - `profilePhotoUrl`: The new URL of the profile photo.
          - `coverPhotoUrl`: The new URL of the cover photo.
          - `minimumTipAmount`: The new minimum tip amount for the invites.
          - `categoryId` & `category`: The new category ID and name.
          - `subCategoryId` & `subCategory`: The new sub-category ID and name.
          - `isInvitesPrivate`: A boolean value. If `true`, the invites are private.
          - `isTournamentOnly`: A boolean value. If `true`, the invites are tournament only.
          - `isInvitesDefault`: A boolean value. If `true`, the invites are set as default.
          - `isPreLiveNotificationAds`: A boolean value. If `true`, pre-live notification ads are enabled.
          - `isPostLiveNotificationAds`: A boolean value. If `true`, post-live notification ads are enabled.
          - `breakPreLiveNotificationUrl`: The URL of the pre-live notification break ad.
          - `breakPostLiveNotificationUrl`: The URL of the post-live notification break ad.

        To use this endpoint, update the required fields with the necessary values under body, headers, and auth accordingly.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"invitesId\":\"invitesId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Invites 2.0\",\"description\":\"This invites is my second invites\",\"tags\":\"second,invites\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isInvitesPrivate\":true,\"isTournamentOnly\":false,\"isInvitesDefault\":true,\"isPreLiveNotificationAds\":true,\"isPostLiveNotificationAds\":true,\"breakPreLiveNotificationUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveNotificationUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/invites/get:
    get:
      tags:
        - NotificationInvites
      summary: Notification - Invites - Get
      description: |-
        This endpoint is named 'Notification - Invites - Get'. It is designed to retrieve information about invites through a GET request. 

        AUTHENTICATION
        The authentication for this endpoint requires a 'bearer' type which means the request requires a bearer token for authorization. The key is 'token' and its associated value is named 'BearerToken' and is a string format. This token is typically generated through an authorization server and is passed in the header of the HTTP request. 

        METHOD
        The HTTP method for this endpoint is 'GET'. A GET request is used to retrieve data from a server.

        URL
        The URL for this endpoint is "http://localhost:3000/api/notification/invites/get/?invitesId=invitesId&sessionId=sessionId&accountId=accountId". InvitesId, sessionId and accountId are parameters in the URL.

        HEADERS
        A default header is included in the request, but it's disabled and contains no key and value.

        BODY
        The body of the request is in 'raw' mode but contains no data. The raw mode allows you to write down the request body as it is. In this case, no specific data is required by the endpoint.

        Remember that the user needs to replace the 'BearerToken', 'invitesId', 'sessionId' and 'accountId' with actual values while making a request.
      security:
        - bearerAuth: []
      parameters:
        - name: invitesId
          in: query
          schema:
            type: string
          example: invitesId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/invites/all:
    get:
      tags:
        - NotificationInvites
      summary: Notification - Invites - Get All
      description: |-
        This endpoint is named "Notification - Invites - Get All". It is a GET request and its primary purpose is to retrieve all invites' notifications. 

        The request made to this endpoint requires bearer authentication. The Bearer Token should be inserted in the 'token' field to ensure authorized access to this endpoint. This token is a string value and will act as an authorization key.

        The base URL for this endpoint is "http://localhost:3000/api/notification/invites/all/". It accepts two parameters which are included in the URL: 'sessionId' and 'accountId'. 
        - 'sessionId' is expected to be filled with the reference to the specific session related to the notifications. 
        - 'accountId' is to be filled with the account's unique identifier related to the notifications to be fetched. 

        In headers, a default key-value pair is given, but it is disabled by default and is not contributing any additional information to the request.

        The body of the request uses the 'raw' mode, but it doesn't contain any data (signified by the 'raw' field being empty). This means no additional data is sent within the request body for this endpoint. 

        Please ensure to replace 'BearerToken', 'sessionId', and 'accountId' with your actual bearer token, session id, and account id respectively while making a request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/invites/delete:
    post:
      tags:
        - NotificationInvites
      summary: Notification - Invites - Delete
      description: |-
        This endpoint is named "Notification - Invites - Delete". It is designed to handle the deletion of invite notifications.

        Let's break down the contents:

        1. **Auth** - The endpoint uses bearer authentication, implying that it requires a token for validation. The key for this token is "token" and the value expected is "sessionId". The type of the token is specified as a "string". You need to provide a valid session ID as your token to access this endpoint.

        2. **Method** - The HTTP method used is "POST", meaning this endpoint is used to send data to the server to create a new resource.

        3. **URL** - The endpoint's URL, where the request is sent, is specified as "http://localhost:3000/api/notification/invites/delete". Bear in mind this is a local URL and might be different in production or other environments.

        4. **Headers** - Headers can be used to provide additional information about the request. In this case, the key and value are empty, and the type is set as "default". Also, this option is currently disabled.

        5. **Body** - The request body here is in raw format. This contains the actual information that is to be sent to the server. It's a JSON with the keys "sessionId", "accountId", and "invitesId" which presumably refer to the session, account, and invites identifiers, respectively.

        Remember that incorrect auth tokens, URLs or body parameters could lead to unsuccessful requests. Use valid information according to your database to avoid such issues.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"invitesId\":\"invitesId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/loyalty/create:
    post:
      tags:
        - NotificationLoyalty
      summary: Notification - Loyalty - Create
      description: |-
        This endpoint is called "Notification - Loyalty - Create". It is used to create a new loyalty notification. The request is set up to be sent as a POST method to the URL "http://localhost:3000/api/notification/loyalty/create".

        The request requires Bearer Authentication, which is specified in the auth property. The user must replace the placeholder "BearerToken" with a valid authentication token.

        The body of the request contains various properties, which are sent in raw JSON format:

        - "sessionId": A string representing the unique identifier of the current session.
        - "accountId": A string representing the unique identifier of the account.
        - "name": The name of the loyalty. 
        - "description": A brief description of the loyalty. 
        - "tags": Tags associated with the loyalty.
        - "profilePhotoUrl": The URL of the profile photo.
        - "coverPhotoUrl": The URL of the cover photo.
        - "minimumTipAmount": The minimum tip amount.
        - "categoryId": A string representing the unique identifier for the category.
        - "category": The name of the category.
        - "subCategoryId": A string representing the unique identifier for the subcategory.
        - "subCategory": The name of the subcategory.
        - "isLoyaltyPrivate": A boolean indicating whether the loyalty is private.
        - "isTournamentOnly": A boolean indicating whether the loyalty is only for tournaments.
        - "isLoyaltyDefault": A boolean indicating if the loyalty is the default.
        - "isPreLiveNotificationAds": A boolean indicating whether pre-live notification ads are enabled.
        - "isPostLiveNotificationAds": A boolean indicating whether post-live notification ads are enabled.
        - "breakPreLiveNotificationUrl": The URL of the video for pre-live notification break.
        - "breakPostLiveNotificationUrl": The URL of the video for post-live notification break.

        All these fields are required and must be filled with appropriate data format before sending the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Loyalty
                description: This loyalty is my second loyalty
                tags: second,loyalty
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isLoyaltyPrivate: true
                isTournamentOnly: false
                isLoyaltyDefault: true
                isPreLiveNotificationAds: true
                isPostLiveNotificationAds: true
                breakPreLiveNotificationUrl: https://example.com/break-pre-live.mp4
                breakPostLiveNotificationUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/loyalty/update:
    put:
      tags:
        - NotificationLoyalty
      summary: Notification - Loyalty - Update
      description: |-
        This API endpoint is named "Notification - Loyalty - Update", which utilizes the "PUT" method to update data related to loyalty notifications.

        1. `auth`: This shows the authorization type used which is "bearer". It uses a bearer token to authenticate the user. The key field is "token" and the bearer token is provided in the value field as "BearerToken".

        2. `method`: The method used to send the request is "PUT". This method is used to update the existing loyalty notification details.

        3. `url`: This field is the address to which the PUT request is sent. The local host URL for the endpoint is "http://localhost:3000/api/notification/loyalty/update".

        4. `headers`: This contains header information for the request. The given header is Client-UUID with its value as ClientUUID. This is typically used for identifying the client.

        5. `body`: Contains the content of the request. "mode" is "raw" which means the data is in raw format.
         The JSON formatted raw data comprises of several elements:

            - `loyaltyId`: Unique identifier of the loyalty program.
            - `sessionId`: Session identifier.
            - `accountId`: Account identifier.
            - `name`: Name of the loyalty program.
            - `description`: A brief description of the loyalty program.
            - `tags`: Tags related to the loyalty program.
            - `profilePhotoUrl`: URL of the loyalty program's profile photo.
            - `coverPhotoUrl`: URL of the loyalty program's cover photo.
            - `minimumTipAmount`: Minimum tip amount set for the loyalty program.
            - `categoryId`: Unique identifier of the category the program belongs to.
            - `category`: Name of the main category.
            - `subCategoryId`: Unique identifier of the sub-category.
            - `subCategory`: Name of the sub-category.
            - `isLoyaltyPrivate`: A boolean field to check whether the loyalty is private or not.
            - `isTournamentOnly`: A boolean field to check whether the loyalty is intended for tournaments only.
            - `isLoyaltyDefault`: A boolean field to check whether the loyalty is set as default.
            - `isPreLiveNotificationAds`: A boolean field to check if pre-live notification ads are available.
            - `isPostLiveNotificationAds`: A boolean field to check if post-live notification ads are available.
            - `breakPreLiveNotificationUrl`: URL for the pre-live notification break advertisement.
            - `breakPostLiveNotificationUrl`: URL for the post-live notification break advertisement.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"loyaltyId\":\"loyaltyId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Loyalty 2.0\",\"description\":\"This loyalty is my second loyalty\",\"tags\":\"second,loyalty\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isLoyaltyPrivate\":true,\"isTournamentOnly\":false,\"isLoyaltyDefault\":true,\"isPreLiveNotificationAds\":true,\"isPostLiveNotificationAds\":true,\"breakPreLiveNotificationUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveNotificationUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/loyalty/get:
    get:
      tags:
        - NotificationLoyalty
      summary: Notification - Loyalty - Get
      description: |-
        1. "name": This key's value is "Notification - Loyalty - Get", which is a title indicating that the endpoint's function is to get loyalty-related notifications.

        2. "request": This is a top-level key that contains information related to the request being made to the API.

        2.1. "auth": Indicates the type of authorization/ authentication method that this endpoint is using. 

        2.1.1. "type": The type of authentication used by this API, which is 'bearer' in this case.

        2.1.2 "bearer": This key contains an array of objects that detail the bearings for this endpoint's authentication, here it uses a bearer token for authorization.

        2.1.2.1. "key": Key represents the type of authorization, which is Token.

        2.1.2.2. "value": This is where you put the value of the "key", in this case, it's the bearer token.

        2.1.2.3. "type": This indicates that the value should be sent as a string.

        3. "method": The HTTP method used by this request, which in this case is "GET", it is used to retrieve data from the server.

        4. "url": The endpoint's URL, which in this case is a localhost URL. Also it has three query parameters - loyaltyID, sessionID and accountID.

        5. "headers": This is a list of headers to be sent with the request. Currently it's empty and has been marked as disabled.

        6. "body": This key contains information about the body of the request. 

        6.1. "mode": The mode for body here is "raw", which means the body content will be sent as it is written.

        6.2. "raw": As the mode is "raw", this is where the content that will be sent in the request body should be written. Currently, it's empty which means no data is being sent in the request body.
      security:
        - bearerAuth: []
      parameters:
        - name: loyaltyId
          in: query
          schema:
            type: string
          example: loyaltyId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/loyalty/all:
    get:
      tags:
        - NotificationLoyalty
      summary: Notification - Loyalty - Get All
      description: |-
        This endpoint is named "Notification - Loyalty - Get All", which suggests it is likely used to retrieve all loyalty notifications.

        In the `request` key, several details about the nature of this API call are specified:

        - `auth`: Specifies the type of authentication used. Here, `Bearer` authentication is being used, and the bearer token should be placed in the value of the `token` key. 

        - `method`: Specifies the HTTP method used, in this case, `GET`, meaning the API call will retrieve data from the server.

        - `url`: Specifies the URL the request will be sent to. In this case, it looks like the URL is calling an API locally and is intended to fetch all loyalty notifications. There are two query parameters, `sessionId` and `accountId`, which likely need to be populated with a valid session ID and account ID respectively when calling this API. 

        - `headers`: Contains information that the client (user's browser, for instance) sends to the server. In this case, it appears that headers are not necessarily required to call the given endpoint as the key and value are empty and the header is disabled.

        - `body`: Contains information sent to the server if data needs to be sent along with the `GET` request. For this particular request, no raw data is being sent in the body. The `mode` is set as `raw`, but the `raw` value is an empty string. However, in cases when data needs to be sent, it would likely contain further parameters or JSON objects. 

        Please ensure to replace `BearerToken`, `sessionId` and `accountId` with the actual valid data before sending the request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/loyalty/delete:
    post:
      tags:
        - NotificationLoyalty
      summary: Notification - Loyalty - Delete
      description: |-
        This endpoint, named "Notification - Loyalty - Delete", is designed to receive a POST request in order to delete a specific loyalty notification. Here are the details:

        - **name**: This is simply the name of the endpoint which is "Notification - Loyalty - Delete".

        - **auth**: It houses information for authentication. It's a bearer type, which means the authorization is based on a bearer token. It holds a key-value pair, where the key is `token` and the value is a `sessionId`.

        - **request**: This corresponds to the HTTP request. It contains the authentication, method, url, headers, and body data.

        - **method**: It is a `POST` method. This means data will be sent to a server to create a certain resource.

        - **url**: This is the URL where the API request will be sent. In this case, the URL is [http://localhost:3000/api/notification/loyalty/delete](http://localhost:3000/api/notification/loyalty/delete).

        - **headers**: Holds the headers that are sent alongside the request. Currently, no headers are sent and any existing ones are disabled, hence the empty value and the `disabled` set to `true`.

        - **body**: This has the actual data/content you'll send with your API request. The mode is set to `raw`, which means you can enter the data as it is, without any additional encoding.

        - **raw**: Contains the raw JSON data that is to be sent in the request body. It contains three strings: `sessionId`, `accountId`, and `loyaltyId`. 

          - `sessionId`: This should be replaced with the actual session ID.
          - `accountId`: Should be replaced with the target account ID of the loyalty scheme.
          - `loyaltyId`: The identifier for the specific loyalty scheme to be deleted.
          
        Please ensure to replace fields with appropriate values when making a request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"loyaltyId\":\"loyaltyId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/messages/create:
    post:
      tags:
        - NotificationMessages
      summary: Notification - Messages - Create
      description: |-
        This endpoint is named "Notification - Messages - Create". It uses the POST method to create a new message in the notification system. The endpoint URL is http://localhost:3000/api/notification/messages/create.

        The authentication method for this endpoint is bearer token. You will need to provide the "token" in the bearer array, and the provided token should be a string. 

        The body of the POST request should be in raw JSON format. It consists of the following fields:

        - "sessionId": A string that represents the ID of the current session.
        - "accountId": The ID associated with the account of the user creating the message.
        - "name": The name of the message you are creating.
        - "description": A brief explanation about the message.
        - "tags": Keywords or labels associated with the message.
        - "profilePhotoUrl": The URL of the user's profile photo.
        - "coverPhotoUrl": The URL of the cover photo for the message.
        - "minimumTipAmount": The minimum amount of tip acceptable. 
        - "categoryId": The ID associated with the category of the message.
        - "category": The category that the message belongs to.
        - "subCategoryId": The ID of the subcategory of the message (if any).
        - "subCategory": The sub-category that the message belongs to (if any).
        - "isMessagesPrivate": A boolean that indicates whether the message is private or not.
        - "isTournamentOnly": A boolean to indicate if the message is only available for tournaments or not.
        - "isMessagesDefault": A boolean flag that indicates if this message is the default.
        - "isPreLiveNotificationAds": A boolean flag to indicate if there are pre-live ads on the notification.
        - "isPostLiveNotificationAds": A boolean flag to indicate if the post-live notification includes ads.
        - "breakPreLiveNotificationUrl": The URL for the pre-live notification break video.
        - "breakPostLiveNotificationUrl": The URL for the post-live notification break video.

        Please note that the headers key-value are set to default and is disabled. This suggests that there are currently no standard or custom headers in use for this API endpoint. 

        Remember to replace the placeholders (e.g., BearerToken, sessionId, accountId) with actual values when calling the endpoint.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Messages
                description: This messages is my second messages
                tags: second,messages
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isMessagesPrivate: true
                isTournamentOnly: false
                isMessagesDefault: true
                isPreLiveNotificationAds: true
                isPostLiveNotificationAds: true
                breakPreLiveNotificationUrl: https://example.com/break-pre-live.mp4
                breakPostLiveNotificationUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/messages/update:
    put:
      tags:
        - NotificationMessages
      summary: Notification - Messages - Update
      description: |-
        This is an endpoint named "Notification - Messages - Update," which uses the `PUT` method to update notification messages on the server. 

        1. **Authentication**: The authentication type is "bearer". This means it passes a bearer token in the header of the request for authorization. The `key` is "token" and the `value` should be the bearer token to authenticate the request.

        2. **Method**: The method used is `PUT`. This is used to update an existing resource on the server.

        3. **URL**: The endpoint URL is "http://localhost:3000/api/notification/messages/update". This is the location where the request will be made.

        4. **Headers**: 

           - "Client-UUID" is a unique identifier for the client making the request. Its type is `default`.

        5. **Body**: The body of the request is in raw JSON format and consists of the details about the message that is being updated:

           - `messageId`: Identifier for the message.
           
           - `sessionId`: Identifier for the session. 

           - `accountId`: Identifier for the account.

           - `name`: The name of the message.

           - `description`: A brief description of the message.

           - `tags`: Additional tags associated with the message, separated by commas.

           - `profilePhotoUrl`: The URL of the profile photo.

           - `coverPhotoUrl`: The URL of the cover photo.

           - `minimumTipAmount`: The minimum tip amount for the message.

           - `categoryId` & `category`: The category ID and name.

           - `subCategoryId` & `subCategory`: The sub-category ID and name.

           - `isMessagesPrivate`: A boolean indicating whether the message is private.

           - `isTournamentOnly`: A boolean indicating whether the message is only for tournaments.

           - `isMessagesDefault`: A boolean indicating whether the message is the default message.

           - `isPreLiveNotificationAds`: A boolean indicating if pre-live notifications are advertisements.

           - `isPostLiveNotificationAds`: A boolean indicating if post-live notifications are advertisements.

           - `breakPreLiveNotificationUrl`: The URL for the break pre-live notification.

           - `breakPostLiveNotificationUrl`: The URL for the break post-live notification.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"messagesId\":\"messagesId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Messages 2.0\",\"description\":\"This messages is my second messages\",\"tags\":\"second,messages\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isMessagesPrivate\":true,\"isTournamentOnly\":false,\"isMessagesDefault\":true,\"isPreLiveNotificationAds\":true,\"isPostLiveNotificationAds\":true,\"breakPreLiveNotificationUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveNotificationUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/messages/get:
    get:
      tags:
        - NotificationMessages
      summary: Notification - Messages - Get
      description: |-
        This endpoint is called "Notification - Messages - Get". This endpoint is primarily used to retrieve notification messages. 

        1. **Authentication**: 
           This endpoint uses Bearer token authentication. The key for the token is "token", which needs to be a string value. Provide the authentication token with the "BearerToken" value to get authorized access.

        2. **Request Method**: 
           This endpoint uses the GET HTTP method. GET is used to request data from a specified resource on a server.

        3. **URL**: 
           The URL for this endpoint is "http://localhost:3000/api/notification/messages/get". It takes three parameters i.e., "messagesId", "sessionId", and "accountId". All three parameters should be added to the URL, right after the "?" mark, each separated by an "&".

        4. **Headers**: 
           The headers field is currently set to default and disabled. When enabled, it gets set to a key-value pair specifying characteristics of the data being sent or requested.

        5. **Body**: 
           The current body mode for this endpoint is set to "raw". At this mode, the endpoint does not expect any data to be sent within the body of the request. 

        Please replace the 'BearerToken', 'messagesId', 'sessionId', and 'accountId' with actual values before using it. The 'BearerToken' needs to be replaced with a valid authentication token. 'messagesId', 'sessionId', and 'accountId' are specific to individual accounts and sessions.
      security:
        - bearerAuth: []
      parameters:
        - name: messagesId
          in: query
          schema:
            type: string
          example: messagesId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/messages/all:
    get:
      tags:
        - NotificationMessages
      summary: Notification - Messages - Get All
      description: |-
        This endpoint is called "Notification - Messages - Get All". It is used to fetch all the notification messages from the provided `sessionId` and `accountId`. Here's the breakdown of the data:

        1. Auth: This endpoint requires bearer authentication, meaning appropriate credentials must be presented before accessing this endpoint. The `token` is passed as bearer authentication in the request header. Replace `BearerToken` with your actual bearer token string.

        2. Method: This endpoint uses the 'GET' method, that is it's used for retrieving data.

        3. URL: The endpoint URL is `http://localhost:3000/api/notification/messages/all/`. Two query parameters `sessionId` and `accountId` need to be passed. Replace `sessionId` and `accountId` in the url with your actual session ID and account ID respectively.

        4. Headers: There is a default header included in the request but it's disabled and doesn't contain any key or value. Feel free to add any headers if needed.

        5. Body: The request body is in 'raw' JSON format. However, the 'raw' field is currently empty, indicating that this GET request does not require a body as it's primarily used to retrieve data.

        Note: Make sure you replace `BearerToken`, `sessionId` and `accountId` with your actual values before making the request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/messages/delete:
    post:
      tags:
        - NotificationMessages
      summary: Notification - Messages - Delete
      description: |-
        1. "name": This value corresponds to the name of the endpoint. In this case, the name of the endpoint is "Notification - Messages - Delete". This indicates that this endpoint is used to delete messages from the Notification.

        2. "request": This section contains all the information regarding the request sent to the endpoint.

        3. "auth": This section details the authentication required for the request. It is using a "bearer" type authentication, which uses encrypted security tokens. 

        4. "bearer": An array representing the bearer token in the authentication process. It has an object containing:

           - "key": Name of the authorization token, in this case, it's "token".
           - "value": The required value for the key, here it's "sessionId".
           - "type": Specifies the data type of the value. Here it indicates that the session ID should be a string.

        5. "method": This indicates the HTTP method for the request. Here, the method is "POST". This means that the request wants to send data to the server to create/update a resource.

        6. "url": The URL where the request is to be sent. The endpoint for this request is "http://localhost:3000/api/notification/messages/delete".

        7. "headers": This section contains additional parameters that you need to send with request header. In this case, it's empty by default, meaning no additional header parameters are sent.

        8. "body": This section represents the data sent to the server with the HTTP request. Here, it's in "raw" format indicating JSON request body. It includes:

           - "mode": This specifies the format of the body. The value "raw" specifies that the body contains raw data.
           - "raw": This includes the raw request body. It consists of a JSON object with the "sessionId", "accountId" and "messagesId". These values represent the session identifier, user's account identifier and identifier for the messages that need to be deleted respectively.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"messagesId\":\"messagesId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/streamers/create:
    post:
      tags:
        - NotificationStreamers
      summary: Notification - Streamers - Create
      description: |-
        This endpoint is named "Notification - Streamers - Create". It's a HTTP POST request that is used to create new streamers.

        1. `"auth"`: This object contains authentication information. The authentication type used is Bearer token authentication.
           - `"type"` : The type of authentication which is bearer in this case.
           - `"key"` : The key value for the bearer auth token.
           - `"value"` : The actual token used for bearer authentication.

        2. `"method"` : The HTTP method used for the request which is POST.

        3. `"url"` : The URL of the API endpoint. This endpoint resides on localhost at port 3000.

        4. `"headers"` : The headers object is currently empty and disabled.

        5. `"body"`: The request body is in raw JSON format and contains the following keys:
           - `"sessionId"` : The unique identifier for the session.
           - `"accountId"` : The unique identifier for the account.
           - `"name"` : The name of the streamer.
           - `"description"` : Brief description of the streamers.
           - `"tags"` : Tags associated with the streamers.
           - `"profilePhotoUrl"` : The URL for the profile photo of the streamers.
           - `"coverPhotoUrl"` : The URL for the cover photo of the streamers.
           - `"minimumTipAmount"` : The minimum tip amount for the streamers.
           - `"categoryId"` and `"category"` : The unique identifier and name of the category.
           - `"subCategoryId"` and `"subCategory"` : The unique identifier and name of the sub category.
           - `"isStreamersPrivate"` : A boolean to determine if the streamers is private.
           - `"isTournamentOnly"` : A boolean to determine if the streamers is for tournament-only.
           - `"isStreamersDefault"` : A boolean to determine if these settings should be the default for the streamers.
           - `"isPreLiveNotificationAds"` : A boolean to determine if there are pre-live notification ads.
           - `"isPostLiveNotificationAds"` : A boolean to determine if there are post-live notification ads.
           - `"breakPreLiveNotificationUrl"` : The URL for the pre-live notification break advertisement.
           - `"breakPostLiveNotificationUrl"` : The URL for the post-live notification break advertisement.

        These fields are provided in a raw JSON object in the body of the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Streamers
                description: This streamers is my second streamers
                tags: second,streamers
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isStreamersPrivate: true
                isTournamentOnly: false
                isStreamersDefault: true
                isPreLiveNotificationAds: true
                isPostLiveNotificationAds: true
                breakPreLiveNotificationUrl: https://example.com/break-pre-live.mp4
                breakPostLiveNotificationUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/streamers/update:
    put:
      tags:
        - NotificationStreamers
      summary: Notification - Streamers - Update
      description: |-
        Endpoint Name: "Notification - Streamers - Update" - This endpoint updates streamers details in the notifications.

        Authentication: 
        The request requires Bearer Token authentication. 

        Request Method: PUT 

        URL: The endpoint URL is http://localhost:3000/api/notification/streamers/update.

        Headers: There's one header key ("Client-UUID") which should hold a default type value known as ClientUUID.

        Request Payload:
        The payload should be a raw JSON with below keys -

        1. streamersId: A unique identifier for the streamer.
        2. sessionId: Session identifier for the current user session.
        3. accountId: Identifier for the account associated with the streamer.
        4. name: The updated name of the streamer.
        5. description: An updated description about the streamer.
        6. tags: Updated, comma-separated tags associated with the streamer.
        7. profilePhotoUrl: The URL of the streamer's updated profile photo.
        8. coverPhotoUrl: The URL of the streamer's updated cover photo.
        9. minimumTipAmount: The minimum amount of tip that can be given to the streamer.
        10. categoryId: The identifier of the new category the streamer belongs to.
        11. category: The name of the new category the streamer belongs to.
        12. subCategoryId: The identifier of the new sub-category the streamer belongs to.
        13. subCategory: The name of the new sub-category the streamer belongs to.
        14. isStreamersPrivate: A boolean indicating whether the streamer's stream is private.
        15. isTournamentOnly: A boolean indicating whether the streamer only participates in tournaments.
        16. isStreamersDefault: A boolean indicating whether the streamer is set as the default streamer.
        17. isPreLiveNotificationAds: A boolean indicating whether ads will be shown in pre-live notifications of the streamer.
        18. isPostLiveNotificationAds: A boolean indicating whether ads will be shown in post-live notifications of the streamer.
        19. breakPreLiveNotificationUrl: The URL from where the pre-live notification ads video can be fetched.
        20. breakPostLiveNotificationUrl: The URL from where the post-live notification ads video can be fetched.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"streamersId\":\"streamersId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Streamers 2.0\",\"description\":\"This streamers is my second streamers\",\"tags\":\"second,streamers\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isStreamersPrivate\":true,\"isTournamentOnly\":false,\"isStreamersDefault\":true,\"isPreLiveNotificationAds\":true,\"isPostLiveNotificationAds\":true,\"breakPreLiveNotificationUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveNotificationUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/streamers/get:
    get:
      tags:
        - NotificationStreamers
      summary: Notification - Streamers - Get
      description: |-
        This endpoint is titled "Notification - Streamers - Get". It is designed to pull out or "get" notification data related to streamers from the server. Here are the different data components of this endpoint:

        1. **Name**: The name of this endpoint is 'Notification - Streamers - Get'. This is just an identifier to help you remember what this endpoint does.

        2. **Request**: This property holds the information regarding the HTTP request made to the server.

           - **Auth**: The 'auth' attribute suggests that user must have valid authorization to access this endpoint. It requires 'Bearer Token' type authorization. Users should replace string 'BearerToken' with a valid bearer token value to authenticate the request.

           - **Method**: 'GET' is the HTTP request method used. GET is used to request data from a specified resource.

           - **URL**: 'http://localhost:3000/api/notification/streamers/get/?streamersId=streamersId&sessionId=sessionId&accountId=accountId' is the URL which will be hit by the API call. It includes query parameters that need to be replaced with actual 'streamersId', 'sessionId' and 'accountId' based on the user's requirements.

           - **Headers**: These can be used to provide additional information about the request. In this case, the key and value fields are empty, and the 'disabled' field is set to 'true', which means that this header is not actually sent with the request.

           - **Body**: Defines the body of the HTTP request. In this case, it is set to 'raw' mode with the raw field being empty. As it's a GET request, typically there wouldn't be need for any content in the body.

        3. Note: All query parameters ('streamersId', 'sessionId', 'accountId') are required, so please ensure you replace placeholders with valid values before sending the request.
      security:
        - bearerAuth: []
      parameters:
        - name: streamersId
          in: query
          schema:
            type: string
          example: streamersId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/streamers/all:
    get:
      tags:
        - NotificationStreamers
      summary: Notification - Streamers - Get All
      description: |-
        This endpoint is titled "Notification - Streamers - Get All". It is designed to retrieve all streamer notifications.

        The authentication method for this request is a bearer token. This is specified in the 'auth' field. 
        The `"type": "bearer"` indicates the type of authorization used and `"key": "token"`is the keyword that needs to be included in the headers of the API requests. This is accompanied by `"value": "BearerToken"`, which is the actual token value used for authorization and `"type": "string"` specifying the data type of the token.

        The `"method": "GET"` signifies that this request uses the GET HTTP method, which is typically utilized to retrieve data.

        The `"url": "http://localhost:3000/api/notification/streamers/all/?sessionId=sessionId&accountId=accountId"` field indicates the API endpoint URL. The 'sessionId' and 'accountId' are the parameters included in the URL, used to specify the session and account for which notifications are being retrieved.

        The `"headers"` array is currently empty with `"key": ""`, `"value": ""` and `"type": "default"`. This means that by default no additional information is passed in the header of the request and this particular header is `"disabled": true`.

        Lastly, the `"body"` of the request is set to `"mode": "raw"` and `"raw": ""`. This indicates that the request does not contain a body payload, making it unnecessary to include any additional information in the request body.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/streamers/delete:
    post:
      tags:
        - NotificationStreamers
      summary: Notification - Streamers - Delete
      description: |-
        This API endpoint is named "Notification - Streamers - Delete." As the name suggests, it's intended to be used for deleting streamer notifications in the system.

        To authorize this endpoint, a 'Bearer token' is required. The 'token' is represented by 'sessionId' which should be a string value. You need to replace 'sessionId' with the actual session ID value.

        The method used for this API endpoint is 'POST' and the URL is 'http://localhost:3000/api/notification/streamers/delete'. This means it'll delete streamer notifications when this API endpoint is called.

        There are no additional headers required for this API endpoint as shown in 'headers' attribute. The key and value fields are empty and this header field is marked as 'disabled', hence it won't impact your API request.

        The request payload or body should be in 'raw' format. In the raw JSON object, three parameters are required:
        1. 'sessionId': You have to replace this with your actual session ID for valid authorization.
        2. 'accountId': Replace this placeholder with the actual account ID for which you want to delete the streamer notifications.
        3. 'streamersId': Replace this placeholder with the actual ID of the streamer whose notifications you want to delete.

        Make sure the value you replace these placeholders with correspond to the correct data type and are valid in your application context.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"streamersId\":\"streamersId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/teams/create:
    post:
      tags:
        - NotificationTeams
      summary: Notification - Teams - Create
      description: |-
        This is the endpoint for creating a new team in Notifications. The API expects a bearer token for authentication that should be sent in the header of the request.

        Here is the description of each data field:

        - `name`: The name of the API endpoint operation.

        - `request`: The main object that includes all the information required for the request.

        - `auth`: The type of authentication used, which here is of type bearer token. 

        - `key`: The keyword for the authentication type used, which should be "token".

        - `value`: The actual value for the auth, in this case, it refers to "BearerToken".

        - `method`: The HTTP method used for the request, in this case, it's a POST request.

        - `url`: The URL for the API endpoint where the request is to be made.

        - `headers`: The headers that are to be sent with the request. In the provided data, no specific header details are given.

        - `body`: Contains the actual data for the request. It's sent in raw format.

           - `mode`: The mode of body data, which here is "raw".
           
           - `raw`: The actual data string that's sent in the body of the request. It includes parameters like sessionId, accountId, name, description, tags, profilePhotoUrl, coverPhotoUrl, minimumTipAmount, categoryId, category, subCategoryId, subCategory, isTeamsPrivate, isTournamentOnly, isTeamsDefault, isPreLiveNotificationAds, isPostLiveNotificationAds, breakPreLiveNotificationUrl, and breakPostLiveNotificationUrl. All these fields are self-explanatory by their names.

        - `options`: Contains the options for the body data. It specifies the language of the data provided in the body, which here is JSON.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Teams
                description: This teams is my second teams
                tags: second,teams
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isTeamsPrivate: true
                isTournamentOnly: false
                isTeamsDefault: true
                isPreLiveNotificationAds: true
                isPostLiveNotificationAds: true
                breakPreLiveNotificationUrl: https://example.com/break-pre-live.mp4
                breakPostLiveNotificationUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/teams/update:
    put:
      tags:
        - NotificationTeams
      summary: Notification - Teams - Update
      description: |-
        Here is the detailed description of the data fields in this endpoint.

        1. `name` : It specifies the name of the endpoint. In this case, "Notification - Teams - Update".

        2. `request` : It's an object that contains all the required request details for the endpoint.

        3. `auth`: An object containing details of the authentication required for the endpoint. The "type" is "bearer", and a key-value pair for the "token" is provided with a placeholder bearer token value.

        4. `method`: Specifies the HTTP method to be used when making the request. Here, it's "PUT".

        5. `url`: URL of the endpoint, which specifies where the request needs to be sent.

        6. `headers`: An array containing objects representing headers that should be included in the request. This includes a "Client-UUID" key with a default type.

        7. `body`: This contains the data to be sent along with the request. In this case, the data is raw JSON. It has a variety of parameters such as:
           - `teamsId`: A unique identifier for the team.
           - `sessionId`: A unique identifier for the session.
           - `accountId`: A unique identifier for the account.
           - `name`: Name of the team.
           - `description`: Description of the team.
           - `tags`: Tags related to the team.
           - `profilePhotoUrl`: URL for profile photo of the team.
           - `coverPhotoUrl`: URL for cover photo of the team.
           - `minimumTipAmount`: Minimum tip amount that should be given.
           - `categoryId`: Unique identifier for the category in which team falls.
           - `category`: Category name in which team falls.
           - `subCategoryId`: Unique identifier for the sub-category of the team.
           - `subCategory`: Sub-category name of the team.
           - `isTeamsPrivate`: A boolean indicating if team is private.
           - `isTournamentOnly`: A boolean indicating if team is only for tournaments.
           - `isTeamsDefault`: A boolean indicating if this team is set as default.
           - `isPreLiveNotificationAds`: A boolean indicating whether pre-live notification ads are enabled.
           - `isPostLiveNotificationAds`: A boolean indicating whether post-live notification ads are enabled.
           - `breakPreLiveNotificationUrl`: URL for pre-live notification break ad.
           - `breakPostLiveNotificationUrl`: URL for post-live notification break ad.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"teamsId\":\"teamsId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Teams 2.0\",\"description\":\"This teams is my second teams\",\"tags\":\"second,teams\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isTeamsPrivate\":true,\"isTournamentOnly\":false,\"isTeamsDefault\":true,\"isPreLiveNotificationAds\":true,\"isPostLiveNotificationAds\":true,\"breakPreLiveNotificationUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveNotificationUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/teams/get:
    get:
      tags:
        - NotificationTeams
      summary: Notification - Teams - Get
      description: |-
        Here below is the detailed description of each data.

        1. "name": "Notification - Teams - Get"

        This is the name of the API endpoint. It's a descriptive label indicating that this API endpoint is used for retrieving notifications related to specific teams.

        2. "request":

        This gathers all the information needed to make a request to the API. It contains the following sub-fields:

           - "auth": This section describes the type of authentication required to access the API. It shows that the API uses bearer authentication, which is a method designed to assign access tokens to authenticate the requests. 

              - "type": "bearer"
                The authentication required for this API request is a bearer token. 

              - "bearer": 
                Contains the actual information required for bearer token authorization.
               
                - "key": "token"
                  This indicates that the key used by the API for authentication is "token". 

                - "value": "BearerToken"
                  "BearerToken" would be the actual token, which should be provided to gain authorization.

                - "type": "string"
                   The bearer token is of string type, which means it will include alphanumeric values.

        - "method": "GET"
          This is the HTTP method used for this API call. GET is used when retrieving or reading information from the server.

        - "url": 
          This is the location where the API service can be accessed. It includes query parameters for teamsId, sessionId and accountId which further specify the information requested from the server.

        - "headers": 
          This is an array that contains the definition section for request headers. In this case, no key value has been specified and it is also disabled.

        - "body": 
          The body contains the details of the data sent in the HTTP request. Here, the mode is specified as 'raw', meaning raw data will be sent in the body of the request. However, as indicated by the 'raw' field being empty, no actual body data is sent in this request.
      security:
        - bearerAuth: []
      parameters:
        - name: teamsId
          in: query
          schema:
            type: string
          example: teamsId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/teams/all:
    get:
      tags:
        - NotificationTeams
      summary: Notification - Teams - Get All
      description: |-
        This API endpoint named "Notification - Teams - Get All" is a GET request. It is used to retrieve all notification records pertaining to teams from the backend server.

        1. `name`: This value, "Notification - Teams - Get All", is the specific name of the endpoint and describes the main action of the API.

        2. `request`: This object holds all the configurations regarding the HTTP request.

        3. `auth`: The auth object indicates the type of authentication required to interact with this API endpoint. It requires a bearer token authentication.
           - `type`: "bearer" denotes the authorization method for this request.
           - `bearer`: It is an array that holds the bearer token configurations.
             - `key`: "token" implies that you will need a token to access this endpoint.
             - `value`: "BearerToken" represents the placeholder for authentication token.
             - `type`: "string" indicates that the provided token should be a valid string.
           
        4. `method`: "GET". It specifies the HTTP method being used to make the request to the API.

        5. `url`: "http://localhost:3000/api/notification/teams/all/?sessionId=sessionId&accountId=accountId". This is the URL where the request will be sent.
        You have to replace "sessionId" and "accountId" with actual values.

        6. `headers`: It's an array that contains the header configurations for your HTTP request. The default key-value pair here comes disabled; you can add necessary keys if required.

        7. `body`: Defines the data you want to send in the HTTP request. For this GET request, the body mode is set to 'raw', meaning you'll directly write data into the body. However, given this is a GET request, the body does not need to contain any data, hence it's 'raw' and empty in this case. If it were a `POST` or `PUT` request, the `raw` value might contain a JSON, XML or plain text.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/teams/delete:
    post:
      tags:
        - NotificationTeams
      summary: Notification - Teams - Delete
      description: |-
        Here is a detailed description of each data in the endpoint for your Postman API collection:

        1. "name": This field contains the name of the endpoint. In this case, the name is "Notification - Teams - Delete", which suggests that this endpoint is used to delete notifications related to teams.

        2. "request": This field contains all the required information to make a request to the server. It includes authentication information, the HTTP method, the request URL, any necessary headers, and the request body.

        3. "auth": This subfield within the "request" data is responsible for the authentication methods needed to make a request. It's a Bearer type, meaning you have to provide a specific token to authenticate.

        4. "type": This indicates the type of Authentication used. Here the value is "bearer", meaning that the client must send a bearer token for authorization.

        5. "bearer": Contains an array of one object, which has three properties (key, value, and type). The "key" is set as "token", the "value" is set as "sessionId", and the "type" is set as "string".

        6. "method": This determines the kind of request made to the server. Here it's set as "POST", indicating that data is being sent to the server to create/update a resource.

        7. "url": This shows the URL where the request is sent. In this case, the request is being sent to "http://localhost:3000/api/notification/teams/delete", which is likely an endpoint that supports deletion of team notifications.

        8. "headers": This array is used to send additional information with the HTTP request. Here, the object within the array doesn't have any values provided which means no extra headers are sent in the request.

        9. "body": This contains the actual data that you want to send with your POST request. Here, it is being sent as raw JSON data that contains "sessionId", "accountId" and "teamsId".

        10. "mode": Describes how the data in the body is being sent. Here, it's "raw", which means you're sending the data as a string in the exact format you specified.

        11. "raw": This is the actual raw data being sent in the HTTP body. It appears to be a JSON string that includes "sessionId", "accountId", and "teamsId". Each of these properties is very likely used to identify the session, the account and the special team that the notification belongs to.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"teamsId\":\"teamsId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/tokens/create:
    post:
      tags:
        - NotificationTokens
      summary: Notification - Tokens - Create
      description: |-
        Title of Endpoint: "Notification - Tokens - Create"

        This endpoint is responsible for creating a new notification token. 

        Authentication:
        The authentication uses a bearer token that requires the "token" key and its value, specified as "BearerToken".

        Request Method: `POST`

        URL: http://localhost:3000/api/notification/tokens/create

        Headers: This endpoint currently does not require any additional headers as the key and value fields are disabled.

        Body: The body of the request is a raw JSON object with the following properties:

        - "sessionId": It represents the session identifier. 
        - "accountId": It represents the account identifier.
        - "name": This refers to the name of the notification token.
        - "description": This holds a description of the notification token.
        - "tags": This is used to tag the tokens with certain categories or labels.
        - "profilePhotoUrl": This contains the URL of the profile photo associated with the token.
        - "coverPhotoUrl": This contains the URL of the cover photo associated with the token.
        - "minimumTipAmount": Specifies the minimum tip amount required.
        - "categoryId": Represents the category ID for the token.
        - "category": Represents the name of the category the token belongs to.
        - "subCategoryId": Represents the sub category ID.
        - "subCategory": Represents the name of the sub category.
        - "isTokensPrivate": It's a boolean value that indicates if the token is private.
        - "isTournamentOnly": It's a boolean value that indicates if the token is only for the tournament.
        - "isTokensDefault": It's a boolean value that indicates if it's a default token.
        - "isPreLiveNotificationAds": This boolean indicates if there are ads before live notification.
        - "isPostLiveNotificationAds": This boolean indicates if there are ads after live notification.
        - "breakPreLiveNotificationUrl": This URL is used for pre-live break notification.
        - "breakPostLiveNotificationUrl": This URL is used for post-live break notification.

        Options: The language used to write the raw data in the body is JSON.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Tokens
                description: This tokens is my second tokens
                tags: second,tokens
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isTokensPrivate: true
                isTournamentOnly: false
                isTokensDefault: true
                isPreLiveNotificationAds: true
                isPostLiveNotificationAds: true
                breakPreLiveNotificationUrl: https://example.com/break-pre-live.mp4
                breakPostLiveNotificationUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/tokens/update:
    put:
      tags:
        - NotificationTokens
      summary: Notification - Tokens - Update
      description: |-
        The "Notification - Tokens - Update" endpoint is used for updating notification tokens details. This endpoint requires "Bearer" token for authentication and utilizes the PUT method.

        The main keys in this endpoint are:

        - `name`: Name of the endpoint.

        - `request`: The actual request to be made.

        - `auth`: The method to be used for authentication. Its type is `bearer` which uses bearer token for authentication. The object contains `key`, `value` and `type` fields. 

          - `key` is the identifier which in this case is `token`.
          
          - `value` is the token string. Replace "BearerToken" with your actual bearer token.
          
          - `type` is the data type of the value. Here, it's a string.

        - `method`: HTTP method to use for the request. Here, it's `PUT`.

        - `url`: The URL to make the request. Replace `http://localhost:3000/api/notification/tokens/update` with your server URL.

        - `headers`: Additional headers to send with the request. In this case, there's a `Client-UUID` header with a value denoted as "ClientUUID" which needs to be replaced with an actual Client UUID.

        - `body`: The body of the request. 

          - `mode`: This refers to the type of the data in the body. Here, it's `raw`.

          - `raw`: This contains a JSON string with multiple properties that need to be updated:

             - `tokensId`: Unique identifier for your Tokens.

             - `sessionId`: Session ID.

             - `accountId`: Account ID.

             - `name`: Name of your Tokens.

             - `description`: Description of your Tokens.
          
             - `tags`: Tags related to your Tokens.

             - `profilePhotoUrl`: URL of the profile photo.

             - `coverPhotoUrl`: URL of the cover photo.

             - `minimumTipAmount`: Minimum tipping amount.

             - `categoryId` and `category`: ID and name of the parent category.

             - `subCategoryId` and `subCategory`: ID and name of the sub-category.
          
             - `isTokensPrivate`: Boolean to indicate if the Tokens is private.
         
             - `isTournamentOnly`: Boolean to indicate if the Tokens is only for tournaments.

             - `isTokensDefault`: Boolean to indicate if the Tokens is default.
          
             - `isPreLiveNotificationAds`, `isPostLiveNotificationAds`: Booleans to indicate if Ads will be shown before or after the live notification.
          
             - `breakPreLiveNotificationUrl`, `breakPostLiveNotificationUrl`: URLs where the break pre-live and post-live notifications are hosted.

        All of the above-mentioned fields are enclosed in a JSON object and will form the body of the 'PUT' request. Replace each of these placeholder values with actual values.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"tokensId\":\"tokensId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Tokens 2.0\",\"description\":\"This tokens is my second tokens\",\"tags\":\"second,tokens\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isTokensPrivate\":true,\"isTournamentOnly\":false,\"isTokensDefault\":true,\"isPreLiveNotificationAds\":true,\"isPostLiveNotificationAds\":true,\"breakPreLiveNotificationUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveNotificationUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/tokens/get:
    get:
      tags:
        - NotificationTokens
      summary: Notification - Tokens - Get
      description: |-
        This endpoint is titled "Notification - Tokens - Get". It describes a `GET` request to retrieve Notification Tokens.

        Here is a detailed description of its structure:

        1. **Name**: This is the identifier of the endpoint, known as "Notification - Tokens - Get". This is used as a reference for the specific action the endpoint is designed to perform.

        2. **Request**: The main component of the endpoint, encompassing the functionality and parameters of the HTTP request.
           
           - **Auth**: Specifies the authentication method required. In this case, a "Bearer" token is used which must be supplied in the header of the HTTP request.
                
                - **Key**: Refers to the field identifier for the authentication method, which is "token" here.
                
                - **Value**: This should be filled with the specific bearer token value - "BearerToken" here. The data type for this value is string.
                    
           - **Method**: This indicates the HTTP method. It is a `GET` request, meaning data is being retrieved from the server based on the parameters passed in the URL.
            
           - **URL**: This is the specific endpoint on the server where the request will go. It includes placeholders for the "tokensId", "sessionId", and "accountId". These values should be replaced with the user's specific data when the request is made.

           - **Headers**: These are default headers needed for the request, in this case, it is disabled. If further headers are required, they can be added here.

           - **Body**: The body of the request contains additional data sent to the server. In this endpoint, the body is in "raw" mode, meaning it can be any kind of text. However, there's no specific data for the body here, it's left empty.

        Each of these parameters needs to be filled out appropriately by users based on their context to ensure the endpoint works as expected.
      security:
        - bearerAuth: []
      parameters:
        - name: tokensId
          in: query
          schema:
            type: string
          example: tokensId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/tokens/all:
    get:
      tags:
        - NotificationTokens
      summary: Notification - Tokens - Get All
      description: |-
        The provided endpoint fetches all notification tokens. Here's a detailed description of each data point:

        1. `"name"`: This specifies the name of the API endpoint. In this case, "Notification - Tokens - Get All" indicates that this endpoint will retrieve all notification tokens.

        2. `"request"`: Request block holds the information about the type of the request to be sent.

        3. `"auth"`: This is used for authentication. This API uses bearer authentication which is specified in the `"type"` field as `"bearer"`. 

        4. `"bearer"`: This is an array that stores the list of bearer tokens required for authentication.
          
            - `"key"`: Specifies the key related to the bearer token which is `"token"`.
          
            - `"value"`: Here, `"BearerToken"` is placeholder for the actual bearer token to be used in request.
          
            - `"type"`: This field specifies the data type of the `"value"` field which is of the `"string"` data type.
          
        5. `"method"`: This parameter indicates the HTTP method to be used for the request. In this case, `"GET"` method will be used for the request.

        6. `"url"`: Specifies the URL to which the request will be sent. It includes the base URL, route, and query parameters. 

           - `"http://localhost:3000/api/notification/tokens/all/"` is the base URL with specific route.

           - `?sessionId=sessionId&accountId=accountId` are query parameters which include `sessionId` and `accountId` you need to add in the request.

        7. `"headers"`: This is an array that would usually contain any additional headers required for the request. No headers are sent in this request as the only array object is disabled, that's why `"key"` and `"value"` fields are empty.

        8. `"body"`: Contains necessary information required for processing the request.

           - `"mode"`: The mode of the request body, in this case, it's `"raw"`, which means raw data can be written directly in the body.

           - `"raw"`: This is the actual data to be sent along with the request. `"raw"` data is empty for this request because it's a GET request; GET requests do not typically use the request body to send data to the server.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/tokens/delete:
    post:
      tags:
        - NotificationTokens
      summary: Notification - Tokens - Delete
      description: |-
        This endpoint's name is "Notification - Tokens - Delete". 

        The Request section contains the following data:

        - **auth**: This is where the authentication method is described. The type of authentication used here is "bearer". This typically involves sending a token in the HTTP headers to authenticate requests. Here, a token with the key 'token' is used as a bearer token. The value associated with this key is 'sessionId' and its type is a string.

        - **method**: The HTTP method used for this request is 'POST', which is usually used to send data to the server.

        - **url**: This is the URL for the service that handles this request. In this case, it's "http://localhost:3000/api/notification/tokens/delete".

        For the **headers** of this request, the key and value are both empty, and the type is default. This header is disabled, which means it does not add any additional data to the request.

        The **body** contains the actual content of the message. Here, the mode is 'raw', indicating that no special formatting is applied to the data. It includes a raw JSON string that contains three key-value pairs:
        1. "sessionId": The session identifier. This is usually used to recognize the user on subsequent requests.
        2. "accountId": The account identifier, used to specify for which account the notification tokens should be deleted.
        3. "tokensId": The tokens identifier, representing the specific notification tokens to be deleted.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"tokensId\":\"tokensId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/tournaments/create:
    post:
      tags:
        - NotificationTournaments
      summary: Notification - Tournaments - Create
      description: |-
        The given endpoint represents the creation of a notification for tournaments. The data consist of various key-value pairs which are described below:

        1. "name": This field represents the name of the endpoint, which in this case is "Notification - Tournaments - Create".

        2. "request": This field contains the details of the request needed to call the endpoint.

          a) "auth": This field contains authentication methods needed to access the endpoint. It's using bearer token authentication where "key" should be the string "token" and "value" should be the actual bearer token. 

          b) "method": This field contains the HTTP method for the request which is "POST".

          c) "url": This field contains the URL of the endpoint.

          d) "headers": Headers to be included with the request but here it's empty and disabled.

          e) "body": This field contains the payload or data to be sent to the server:

          - "mode": Specifies how the body data is structured, which is "raw" in this case.

          - "raw": Contains the raw body data which will be sent to this endpoint, in JSON format. Each property within the "raw" field is explained below:

            i) "sessionId": This field holds the session Id.

            ii) "accountId": The account id associated with the session.

            iii) "name": Name of the tournament.

            iv) "description": Description of the tournament.

            v) "tags": Tags for the tournament.

            vi) "profilePhotoUrl": URL for the profile photo associated with the tournament.

            vii) "coverPhotoUrl": URL for the cover photo of the tournament.

            viii) "minimumTipAmount": Minimum tip amount for the tournament.

            ix) "categoryId": Id of the category.

            x) "category": Category name.

            xi) "subCategoryId": Id of the subcategory.

            xii) "subCategory": Subcategory name.

            xiii) "isTournamentsPrivate": Boolean value indicating if the tournament is private.

            xiv) "isTournamentOnly": Boolean value indicating if this is tournament only.

            xv) "isTournamentsDefault": Boolean value indicating if this is the default tournament.

            xvi) "isPreLiveNotificationAds": Boolean value indicating if there are pre-live ads.

            xvii) "isPostLiveNotificationAds": Boolean value indicating if there are post-live ads.

            xviii) "breakPreLiveNotificationUrl": URL for the pre-live ads video.

            xix) "breakPostLiveNotificationUrl": URL for the post-live ads video.

          - "options": Specifies additional options for the body of the request. Here, it is specifying that the language used in the "raw" field is JSON.
          
        Each of these properties plays an essential part in the request body and should be filled in appropriately.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Tournaments
                description: This tournaments is my second tournaments
                tags: second,tournaments
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isTournamentsPrivate: true
                isTournamentOnly: false
                isTournamentsDefault: true
                isPreLiveNotificationAds: true
                isPostLiveNotificationAds: true
                breakPreLiveNotificationUrl: https://example.com/break-pre-live.mp4
                breakPostLiveNotificationUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/tournaments/update:
    put:
      tags:
        - NotificationTournaments
      summary: Notification - Tournaments - Update
      description: |-
        This endpoint, named `Notification - Tournaments - Update`, is designed to update the data of a specific tournament on a server running on localhost port 3000. The data is sent via the `PUT` HTTP method to `/api/notification/tournaments/update`.

        Authenticating is done using the `bearer` method requiring a token input as a string.

        The request header must include a `Client-UUID`, a unique identifier for the client.

        The request body must be in `raw` format containing the following data:

        - `tournamentsId`: Unique identifier for the tournament.
        - `sessionId`: Session id reference of active user.
        - `accountId`: Identifier for the related account.
        - `name`: The new name of the tournament.
        - `description`: A brief description about the tournament.
        - `tags`: Tags associated with the tournament.
        - `profilePhotoUrl`: URL of the profile photo for the tournament.
        - `coverPhotoUrl`: URL of the cover photo for the tournament.
        - `minimumTipAmount`: Minimum tip amount if applicable.
        - `categoryId`: Unique identifier for the category.
        - `category`: The General category of the tournament.
        - `subCategoryId`: Unique identifier for the subcategory.
        - `subCategory`: More specific subcategory of the tournament.
        - `isTournamentsPrivate`: Boolean field for tournament's privacy, if it's private this is true.
        - `isTournamentOnly`: Boolean field indicating if the tournament is exclusive.
        - `isTournamentsDefault`: Boolean field, if the tournament is the account's default tournament this is true.
        - `isPreLiveNotificationAds`: Boolean field, if set to true ads are shown before live notifications.
        - `isPostLiveNotificationAds`: Boolean field, if set to true ads are shown after live notifications.
        - `breakPreLiveNotificationUrl`: URL of the pre-live notification break video. 
        - `breakPostLiveNotificationUrl`: URL of the post-live notification break video.

        Make sure to replace placeholder values with the actual data when making the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"tournamentsId\":\"tournamentsId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Tournaments 2.0\",\"description\":\"This tournaments is my second tournaments\",\"tags\":\"second,tournaments\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isTournamentsPrivate\":true,\"isTournamentOnly\":false,\"isTournamentsDefault\":true,\"isPreLiveNotificationAds\":true,\"isPostLiveNotificationAds\":true,\"breakPreLiveNotificationUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveNotificationUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/tournaments/get:
    get:
      tags:
        - NotificationTournaments
      summary: Notification - Tournaments - Get
      description: |-
        1. **name**: The name of the endpoint is 'Notification - Tournaments - Get'. It signifies that this API will fetch the notification related to tournamnets.

        2. **request**: This key contains the main structure of the HTTP request.

        3. **auth**:
            - **type**: The 'type' key states the type of authorization used, which in this case is the 'Bearer'.
            - **bearer**: The 'bearer' key is an array of bearer tokens containing the following information:
                - **key**: 'Token'; it indicates that this value will be used as the authorization token header.
                - **value**: 'BearerToken'; it represents the actual token value you should use to authenticate the API requests.
                - **type**: Specifies that the given token is of type 'string'.

        4. **method**: This is a 'GET' method. It indicates that information is being retrieved from the server.

        5. **url**: The URL key specifies the endpoint to which the request is made. The URL contains parameters after the '?', which are: tournamentsId, sessionId, and accountId.

        6. **headers**: This is an array of objects containing the additional information that is sent along with the request. This API does not contain any headers as the value of both key and value is empty and it is disabled.

        7. **body**: This section contains the data which will be sent to the server. 
            - **mode**: The 'raw' mode indicates that the body content will be sent as a raw data.
            - **raw**: As the 'raw' key is an empty string in this case, no body content is being sent with the request.
      security:
        - bearerAuth: []
      parameters:
        - name: tournamentsId
          in: query
          schema:
            type: string
          example: tournamentsId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/tournaments/all:
    get:
      tags:
        - NotificationTournaments
      summary: Notification - Tournaments - Get All
      description: |-
        This data endpoint is titled `Notification - Tournaments - Get All`. As the name suggests, it is used to retrieve all the notifications related to tournaments. 

        It uses the `GET` method, indicating its primary purpose is to retrieve information. The endpoints URL is `http://localhost:3000/api/notification/tournaments/all/`, where `localhost:3000` is the local server address, and `/api/notification/tournaments/all/` is the specific path to the endpoint.

        This endpoint requires Bearer Token Authentication, which is a method for an HTTP user agent to provide a single-string token to the server. The token is provided as a value in the `BearerToken` field under `auth`. It is a type of `string`.

        Two query parameters are attached to the URL: `sessionId` and `accountId`. These parameters should be replaced with the respective session ID and account ID of the user.

        The `headers` field in the request is currently empty and disabled. Headers are often used to provide additional information about the request or response.

        The `body` of the request contains a `mode` field set to `"raw"`, suggesting that raw data can be sent in the body of the request. However, because this is a `GET` request, there is no body content or `raw` field provided as it's usually used with `POST` or `PUT` requests to send data to the server.

        Please replace `BearerToken`, `sessionId`, and `accountId` with actual values when using this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/tournaments/delete:
    post:
      tags:
        - NotificationTournaments
      summary: Notification - Tournaments - Delete
      description: |-
        This endpoint, named "Notification - Tournaments - Delete", is used to delete notifications pertaining to specific tournaments. 

        The endpoint uses the HTTP POST method. 

        It is authenticated using the Bearer Token method, meaning you will need a valid token for the session, denoted as "sessionId", in order to gain authorised access. 

        The API URL where the request is sent to is "http://localhost:3000/api/notification/tournaments/delete". 

        At this moment, there are no extra headers or specifications included in the request's header field.

        As for the body of the request, it is sent in raw mode with a JSON format payload. The payload contains the following fields: 

        1. "sessionId": It's a string type value that stands for the current session of your interaction with the API.
           
        2. "accountId": This is also a string type value and refers to the ID of the user's account which is associated with the session.
           
        3. "tournamentsId": This value represents the ID of the specific tournament whose notifications you want to delete.

        Please note that all of the three mentioned fields ("sessionId", "accountId", and "tournamentsId") are required to make a valid request to this endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"tournamentsId\":\"tournamentsId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/university/create:
    post:
      tags:
        - NotificationUniversity
      summary: Notification - University - Create
      description: |-
        This endpoint is named "Notification - University - Create". 

        The authentication required is of type "bearer", and it uses a token which is expected to be of string type and assigned to the "Authorization" field in the request headers.

        The request method is a POST, meaning it sends data to the server to create a new resource.

        The URL where the request is sent to is "http://localhost:3000/api/notification/university/create".

        The body type is raw and the data is structured in JSON. 

        Let's walk through each field in the JSON body:

        - "sessionId": This would typically be a unique identifier for the current session.
        - "accountId": This field is likely used for specifying the user's account.
        - "name": It seems this field is used to set the university name.
        - "description": This field is for providing some details about the university.
        - "tags": These are keywords or labels that categorize and identify the university.
        - "profilePhotoUrl": This is the URL of the profile photo of the university.
        - "coverPhotoUrl": The URL of the cover photo of the university.
        - "minimumTipAmount": This appears to set the minimum tip amount. 
        - "categoryId" & "category": These fields are used to set the category for the university.
        - "subCategoryId" & "subCategory": The sub-category to which the university belongs to.
        - "isUniversityPrivate": A boolean indicating whether the university is private or not.
        - "isTournamentOnly": Indicates whether the university is only for tournaments.
        - "isUniversityDefault": Specifies whether the university setting is at its default.
        - "isPreLiveNotificationAds" & "isPostLiveNotificationAds": These fields appear to dictate whether there will be ads shown in notifications.
        - "breakPreLiveNotificationUrl" & "breakPostLiveNotificationUrl": These fields would be used to define the media files to be used during the pre-live and post-live break notifications.

        In the headers, a key-value pair is mentioned, but it's currently disabled and empty. Likely, you would fill in the appropriate header information you need for your request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second University
                description: This university is my second university
                tags: second,university
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isUniversityPrivate: true
                isTournamentOnly: false
                isUniversityDefault: true
                isPreLiveNotificationAds: true
                isPostLiveNotificationAds: true
                breakPreLiveNotificationUrl: https://example.com/break-pre-live.mp4
                breakPostLiveNotificationUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/university/update:
    put:
      tags:
        - NotificationUniversity
      summary: Notification - University - Update
      description: |-
        This endpoint is titled "Notification - University - Update" and facilitates updating a University notification. It utilizes the PUT method indicating that it is for updating information. Here is a breakdown of each data:

        - **auth**: This part deals with the authentication details, specifically using bearer token authorization provided in the string format.

        - **url**: This is the URL where the request is to be sent. It is pointing to a local host and appears to be for a localhost development environment.

        - **headers**: Contains additional information (metadata) to be sent along with the request. A "Client-UUID" header is included in the request.

        - **body**: This is where the actual content to be sent with the request is contained. The mode specified is "raw", which means the data included is not encoded. A JSON object is sent in string format. This object includes:

            - **universityId, sessionId, accountId**: These are identifiers related to the university, session, and account respectively.

            - **name**: Represents the updated name of the university.

            - **description**: Holds the updated description of the university.

            - **tags**: It indicates the tag values associated with the university.

            - **profilePhotoUrl, coverPhotoUrl**: The URLs for the university's profile and cover photos.

            - **minimumTipAmount**: The minimum acceptable tip amount for the university.

            - **categoryId, category, subCategoryId, subCategory**: These are identifiers and names of the category and sub-category, where this university belongs.

            - **isUniversityPrivate, isTournamentOnly, isUniversityDefault, isPreLiveNotificationAds, isPostLiveNotificationAds**: These are boolean values that specify certain attributes or options relevant to the university.

            - **breakPreLiveNotificationUrl, breakPostLiveNotificationUrl**: These variables are URLs which point to resources of Pre-Live and Post-Live notification break videos respectively.

        This endpoint indicates a detailed update setup for a university notification where all aspects related to a university can be updated.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"universityId\":\"universityId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second University 2.0\",\"description\":\"This university is my second university\",\"tags\":\"second,university\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isUniversityPrivate\":true,\"isTournamentOnly\":false,\"isUniversityDefault\":true,\"isPreLiveNotificationAds\":true,\"isPostLiveNotificationAds\":true,\"breakPreLiveNotificationUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveNotificationUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/university/get:
    get:
      tags:
        - NotificationUniversity
      summary: Notification - University - Get
      description: |-
        This endpoint represents a GET request titled 'Notification - University - Get'. Here's a detailed description about each data:

        1. 'name': This is the name assigned to the endpoint. It's used for identifying and organizing the different requests inside your collection.

        2. 'request': This indicates the type of request being made. In this case, it is a GET request which is normally used for read-only operations.

        3. 'auth': This has to do with the authorization required to make the request. It employs a 'bearer' token method of authorization. You must provide a valid 'bearer' token as part of your authorization.

            - 'key': The key for the authorization parameter, which in this case is 'token'.
         
            - 'value': This signifies the value of the bearer token which needs to be replaced with the actual token value while making a request.

            - 'type': This signifies the value type which is string in this case.

        4. 'method': This is the HTTP method used to send the request. This is a GET method which is used to fetch a specific resource from the server.

        5. 'url': This is the URL of the API you are making a request to. This endpoint features query parameters such as 'universityId', 'sessionId', and 'accountId'. Replace these with actual values before making the request.

        6. 'headers': These are additional information about the request. For this particular request, the header is set to 'default' and is disabled. No additional header values are required here.

        7. 'body': This contains data that should be sent along with the request. For this request, there is no data to send, hence the mode is 'raw' and the value is empty. 

        Please replace all the placeholders with appropriate values while trying to use this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - name: universityId
          in: query
          schema:
            type: string
          example: universityId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/university/all:
    get:
      tags:
        - NotificationUniversity
      summary: Notification - University - Get All
      description: |-
        This endpoint named "Notification - University - Get All" serves as a GET request to retrieve all university notifications.

        1. **Auth**: This endpoint utilizes bearer token authentication. It requires a "token" key in which the assigned value should be a "BearerToken". A bearer token is a type of access token which grants the bearer or holder of the token, the authorization to access this endpoint. The value is a string datatype.

        2. **Method**: The type of HTTP request method used is "GET". This method retrieves data from a particular URL. It does not modify or add to the data on the server, it only requests and receives data.

        3. **URL**: This is the unique address where the request will be sent. It's designed for a local server running on port 3000. The full URL structure includes two query string parameters; localhost:3000/api/notification/university/all/?sessionId={sessionId}&accountId={accountId}. 
            - `sessionId` is a parameter which holds the value of the current session. This is mainly used for state management.
            - `accountId` is the unique identifier for a user account. This could be used to retrieve notifications related only to this specific account.

        4. **Headers**: In this case, there are default headers attached to the request that are currently disabled - meaning these headers are not sent along with the request. Since both key and value are not provided, these headers do not carry any additional information for the request.

        5. **Body**: As a GET request, this endpoint does not send any data (raw or form data) in the request body. Hence, the "mode" key is set to "raw" with an empty "raw" key.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/university/delete:
    post:
      tags:
        - NotificationUniversity
      summary: Notification - University - Delete
      description: |-
        This endpoint represents an operation related to the deletion of a university notification. Here is a detailed explanation of the data contained in this endpoint:

        1. "name": This field indicates the title or identifier for this endpoint. The provided string "Notification - University - Delete" suggests that this API allows the user to delete notifications related to universities.

        2. "request": This group of data comprises all the necessary information that the API needs to successfully execute a request.

        3. "auth": This section includes the authentication scheme for the request. The "type" field, having a value of "bearer", tells us this API uses Bearer Token Authentication. 

           - "bearer": An array that holds the token information. 
           - "key" field with the value "token" suggests that the client must send a 'token' field as part of the authentication. 
           - "value" field with the value "sessionId" implies that the value for 'token' should be the session Id. 
           - "type" denotes the data type of the "token" which is in this case, a string.

        4. "method": The HTTP method employed for this request is "POST" which indicates that this API sends data to the server to create a resource.

        5. "url": This string is the URL where the API request is sent. Here, it is specifically directed to the "notification/university/delete" path of the local server running on port 3000.

        6. "headers": This is an array to specify any custom HTTP headers for the request. Currently, it contains a disabled default key-value pair, which implies no additional headers are required for this request.

        7. "body": The body of the request contains the actual data that needs to be sent to the server.

           - "mode": This field defines how the body data should be treated. Its value "raw" explains that the body data will be taken as it is, without further transformation.
           
           - "raw": Contains a JSON formatted string specifying the data to be included in the request. It consists of the "sessionId", "accountId", and "universityId" fields, signifying the session, account, and university identifiers respectively, required for this delete operation.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"universityId\":\"universityId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/users/create:
    post:
      tags:
        - NotificationUsers
      summary: Notification - Users - Create
      description: |-
        This endpoint is called "Notification - Users - Create". It's a POST request used to create a new user in the notification system. The request is authenticated using a bearer token which should be provided in the 'token' field inside the 'auth' object. The endpoint URL is "http://localhost:3000/api/notification/users/create".

        There is an empty key-value pair in the headers object that is disabled by default. However, if any headers are required for your specific situation, you can enter them here.

        The main content of this request is in the 'body' object, which contains several fields. Please ensure that you post the content in the 'raw' mode. 

        The 'raw' body of the request is provided in JSON format and includes the user's session ID, account ID, name, a description of the user, tags associated with the user, URLs for the user's profile and cover photos, the minimum amount that can be tipped to the user, category details (both primary and sub-category), privacy settings, whether the user is only for tournaments, whether the user is default, whether pre-live and post-live ads are displayed during the user's notifications, and URLs for pre and post-live breaks.

        It's essential that these fields are filled out completely and accurately, as they create a full profile for the user in the notification system. Ensure all URLs and IDs are valid, and boolean fields are correctly set to either true or false. The 'minimumTipAmount' field expects a numerical value for the minimum tip amount.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Users
                description: This users is my second users
                tags: second,users
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isUsersPrivate: true
                isTournamentOnly: false
                isUsersDefault: true
                isPreLiveNotificationAds: true
                isPostLiveNotificationAds: true
                breakPreLiveNotificationUrl: https://example.com/break-pre-live.mp4
                breakPostLiveNotificationUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/users/update:
    put:
      tags:
        - NotificationUsers
      summary: Notification - Users - Update
      description: |-
        This endpoint is named "Notification - Users - Update". It requires a PUT HTTP method, which means it's used to update an existing resource on the server. The endpoint URL is 'http://localhost:3000/api/notification/users/update'.

        Authentication for this endpoint is done with a Bearer token. The Bearer token should be provided with the key as 'token', and it's of 'string' type.

        This API also needs a 'Client-UUID' in the header for identifying the client making the request.

        The body of this request is in raw JSON format and contains several properties:

        - 'usersId': The unique identifier for the user.
        - 'sessionId': The session identifier.
        - 'accountId': The account identifier.
        - 'name': The new name of the user.
        - 'description': The description of the user.
        - 'tags': These are tags associated with the user separated by commas.
        - 'profilePhotoUrl': The URL link to the user's profile photo.
        - 'coverPhotoUrl': The URL link to the user's cover photo.
        - 'minimumTipAmount': This is the minimum tip amount that the user can get.
        - 'categoryId': The identifier for the user's category.
        - 'category': The name of the user's category.
        - 'subCategoryId': The identifier for the user's sub-category.
        - 'subCategory': The name of the user's sub-category.
        - 'isUsersPrivate': A boolean value representing whether the user is private.
        - 'isTournamentOnly': A boolean value representing whether the user is only for tournaments.
        - 'isUsersDefault': A boolean value representing whether the user is the default.
        - 'isPreLiveNotificationAds': A boolean value representing whether the user will have ads before live notifications.
        - 'isPostLiveNotificationAds': A boolean value representing whether the user will have ads after live notifications.
        - 'breakPreLiveNotificationUrl': The URL link to the break that happens before the live notification.
        - 'breakPostLiveNotificationUrl': The URL link to the break that happens after the live notification. 

        All these properties should be provided as string values, apart from the ones that specifically marked as boolean, which should be provided as true or false.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"usersId\":\"usersId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Users 2.0\",\"description\":\"This users is my second users\",\"tags\":\"second,users\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isUsersPrivate\":true,\"isTournamentOnly\":false,\"isUsersDefault\":true,\"isPreLiveNotificationAds\":true,\"isPostLiveNotificationAds\":true,\"breakPreLiveNotificationUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveNotificationUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/users/get:
    get:
      tags:
        - NotificationUsers
      summary: Notification - Users - Get
      description: |-
        The given data contains details about an API endpoint. Here's a detailed description of its various components:

        1. "name": The "name" field indicates the name or title of the API endpoint. In this case, the name is "Notification - Users - Get". This could imply that this API endpoint might be used to get notifications pertaining to users.

        2. "request": This contains details about the request that needs to be made to this API endpoint. It contains the following elements:
            - "auth": Contains the authentication specifics that this API needs. The authentication method in this case is "bearer", indicating the presence of a bearer token for user authentication. The bearer token is a string typed key-value pair that needs to be passed in the API call.
            
            - "method": The type of HTTP method to access this endpoint. It is "GET", indicating that data is being retrieved from the server.
            
            - "url": The actual URL or endpoint where the request needs to be made. Query parameters including "usersId", "sessionId", and "accountId" are required.
            
            - "headers": Any additional HTTP headers that should be sent with the request. In this case, an empty key-value pair is set as the default and is disabled, implying that there is no additional header information being sent with this request.
            
            - "body": Contains details about the body of the HTTP request. The mode is set to "raw", indicating that the raw data is sent in the body of the request. However, it appears there is no raw data to be sent as part of this request as the "raw" field is empty.

        Overall, this API seems to be retrieving user notification data by taking a bearer token for authentication and user-specific identifiers like "usersId", "sessionId", and "accountId" as parameters. The request doesn't include additional header or body data.
      security:
        - bearerAuth: []
      parameters:
        - name: usersId
          in: query
          schema:
            type: string
          example: usersId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/users/all:
    get:
      tags:
        - NotificationUsers
      summary: Notification - Users - Get All
      description: |-
        - `name`: This attribute refers to the name of the specific endpoint. In this case, "Notification - Users - Get All". This name serves as a brief description of the endpoint's functionality, i.e., retrieving all notifications for users.

        - `request`: This object encapsulates all the details related to the HTTP request to be made to a specific service. 

          - `auth`: This object describes the authentication method to be used for the request. The `type` specifies the authentication type. Here, a bearer token is used.
          
            - `bearer`: This array includes the details of the bearer token authentication. Each item in the array is an object that contains a `key` (i.e., the name of the field), `value` (i.e., the actual bearer token), and the `type` of the value, which in this instance is a string.
          

          - `method`: This defines the HTTP method to be used for the request. Here, it is GET method.
          
          - `url`: This is the API endpoint to which the request will be sent. The current URL includes query parameters (`sessionId` and `accountId`) which will need to be populated with appropriate values to retrieve notifications for a specific account and session.
          
          - `headers`: This array represents any additional HTTP headers that should be included in the request. It is currently empty and thus disabled, indicating that no extra headers are to be sent.
          
          - `body`: This contains any data that has to be sent in the body of the HTTP request. It contains `mode` and `raw`. The `mode` describes the way data present in the body should be formatted prior to being sent with the request. For instances, `raw` data is sent as it is without any modifications. But in this case, the `raw` value is an empty string indicating that no data is sent with the HTTP request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/users/delete:
    post:
      tags:
        - NotificationUsers
      summary: Notification - Users - Delete
      description: |-
        This endpoint is titled 'Notification - Users - Delete'. 

        The Authentication type used for this endpoint is 'Bearer Authentication'. It has a bearer token field labeled as 'token', which should carry a 'sessionId'. The value of this sessionId is a string type. This ID is critical for user authentication. 

        The HTTP request method for this endpoint is 'POST', implying that you are sending (posting) data to the API.

        The URL for the endpoint is 'http://localhost:3000/api/notification/users/delete'. This is the address that the request will be sent to. 

        In this endpoint, headers are included, but they have been disabled. This means they will be ignored when the request is sent.

        Within the body of the request is the 'raw' mode type. The raw format of the data to be sent within the body of the request is in JSON (JavaScript Object Notation). 

        It contains the following attributes:
        1. 'sessionId': A unique id related to the session of the API consumer. It is assumed to be a unique identifier for tracking session.
        2. 'accountId': This probably refers to the unique id of the account involved in this API operation.
        3. 'usersId': This field likely represents the unique user ids for which the notifications need to be turned off or deleted. 

        Ensure you replace 'sessionId', 'accountId', and 'usersId' with the correct values before sending the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"usersId\":\"usersId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/videos/create:
    post:
      tags:
        - NotificationVideos
      summary: Notification - Videos - Create
      description: |-
        This endpoint is called "Notification - Videos - Create". It uses the POST method, which is typically a method to send data to the server to create a new resource. It uses the URL `http://localhost:3000/api/notification/videos/create`.

        Let's go through the main components of this request data:

        1. `auth`: this is for the authentication details of the request. It uses `Bearer` token authentication. You should insert a valid token in the `BearerToken` field, and it should be in the string format.

        2. `headers`: this is an array but is empty for this request. It generally contains additional details passed with the HTTP request in key-value pairs.

        3. `body`: this is the main data that is to be sent to the server. It's sent in raw format, indicating the data is sent as it is, i.e., without any encoding or encryption. The language of the request body data is JSON.

        Let's take a look at specific fields in the `body`:

        - `sessionId`: replace it with your session identifier.
        - `accountId`: replace it with your account identifier.
        - `name`: replace `My Second Videos` with your video's title.
        - `description`: replace the description for the video.
        - `tags`: put in some relevant tags separated by commas for your video.
        - `profilePhotoUrl`: specify the URL for the profile photo.
        - `coverPhotoUrl`: specify the URL for the cover photo.
        - `minimumTipAmount`: put the minimum tip amount.
        - `categoryId` and `category`: category identifier and category name respectively.
        - `subCategoryId` and `subCategory`: subcategory identifier and subcategory name respectively.
        - `isVideosPrivate`: indicate with true or false if the video is private.
        - `isTournamentOnly`: indicate with true or false if the video is only for tournaments.
        - `isVideosDefault`: indicate with true or false if this video is set as default video. 
        - `isPreLiveNotificationAds`: indicate with true or false if there are ads before the live notification.
        - `isPostLiveNotificationAds`: indicate with true or false if there are ads after the live notification.
        - `breakPreLiveNotificationUrl`: indicate the URL for the ads presented before the live notification.
        - `breakPostLiveNotificationUrl`: indicate the URL for the ads presented after the live notification.

        Please replace all the values in the `body` field as per your requirements before making the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Videos
                description: This videos is my second videos
                tags: second,videos
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isVideosPrivate: true
                isTournamentOnly: false
                isVideosDefault: true
                isPreLiveNotificationAds: true
                isPostLiveNotificationAds: true
                breakPreLiveNotificationUrl: https://example.com/break-pre-live.mp4
                breakPostLiveNotificationUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/videos/update:
    put:
      tags:
        - NotificationVideos
      summary: Notification - Videos - Update
      description: |-
        This endpoint, "Notification - Videos - Update", makes a PUT request to the "http://localhost:3000/api/notification/videos/update" URL, and is used to update the video notification settings.

        The authentication required for this endpoint is the bearer token type. The bearer token to be used should be the string "BearerToken".

        The endpoint expects a header with the key "Client-UUID" and its value should be "ClientUUID".

        In the body of the request, a raw JSON object is sent containing the details of the video notification settings that need to be updated.

        - "videosId": The unique identifier of the video.
        - "sessionId": The session identifier in which the video was created.
        - "accountId": The account identifier to which the video belongs.
        - "name": The updated name of the video.
        - "description": The updated description of the video.
        - "tags": The updated tags associated with the video, separated by commas.
        - "profilePhotoUrl": The updated URL of the profile photo associated with the video.
        - "coverPhotoUrl": The updated URL of the cover photo of the video.
        - "minimumTipAmount": The updated minimum tip amount for the video.
        - "categoryId": The updated category identifier to which the video belongs.
        - "category": The updated category name to which the video belongs.
        - "subCategoryId": The updated sub-category identifier associated with the video.
        - "subCategory": The updated sub-category name associated with the video.
        - "isVideosPrivate": A boolean value indicating whether the video is private (true) or not (false).
        - "isTournamentOnly": A boolean value indicating whether the video is only for tournaments (true) or not (false).
        - "isVideosDefault": A boolean value indicating whether the video is set as default (true) or not (false).
        - "isPreLiveNotificationAds": A boolean value indicating whether pre-live notification ads are enabled (true) or not (false).
        - "isPostLiveNotificationAds": A boolean value indicating whether post-live notification ads are enabled (true) or not (false).
        - "breakPreLiveNotificationUrl": The URL of any pre-live break notification video.
        - "breakPostLiveNotificationUrl": The URL of any post-live break notification video.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"videosId\":\"videosId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Videos 2.0\",\"description\":\"This videos is my second videos\",\"tags\":\"second,videos\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isVideosPrivate\":true,\"isTournamentOnly\":false,\"isVideosDefault\":true,\"isPreLiveNotificationAds\":true,\"isPostLiveNotificationAds\":true,\"breakPreLiveNotificationUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveNotificationUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/videos/get:
    get:
      tags:
        - NotificationVideos
      summary: Notification - Videos - Get
      description: |-
        This endpoint, named "Notification - Videos - Get", is set up for you to retrieve video notifications from a specific account.

        There are several details to the data contained within this API call:

        1. "auth": This field presents the details of the authentication necessary to make the request. The request uses Bearer Authentication, where a bearer token is needed to access this endpoint. The "key" is called 'token', and the value would be the unique "Bearer Token" provided for your use.

        2. "method": This details the HTTP method used for the call. In this case, it is a "GET" request, which retrieves information from the specified resource.

        3. "url": This provides the location from where you are retrieving the data. It is a local server mapped to port 3000. There are several query parameters specified here: 'videosId', 'sessionId', and 'accountId'. These are placeholders for the unique ID of the video, the session, and the account respectively.

        4. "headers": This describes the information to be sent in the header of the request. In the current configuration, there's a header field set up but it's empty and disabled. If there were a need to send additional information in the request header, it could be filled in.

        5. "body": This section shows the data that will be sent as part of the request body. In this 'GET' request, the "body" section is empty. 'Raw' mode is selected, but there's nothing in the 'raw' field, indicating no additional data is being sent in the body of this request.
      security:
        - bearerAuth: []
      parameters:
        - name: videosId
          in: query
          schema:
            type: string
          example: videosId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/videos/all:
    get:
      tags:
        - NotificationVideos
      summary: Notification - Videos - Get All
      description: |-
        This endpoint is called 'Notification - Videos - Get All'. 

        1. "name": This field provides the name of the endpoint. Here, the value "Notification - Videos - Get All" signifies that the endpoint is used to retrieve all video notifications.

        2. "request": This contains all the necessary data required to make a request to the server.

        3. "auth": This field contains information about the authentication method used by the endpoint. 
           
           3.1. "type": Defines the type of authentication used. In this case, a 'bearer' type, which means the access token used is a Bearer token. 
           
           3.2. "bearer": This is a subfield containing more details about the bearer token.
              
              3.2.1. "key": The key refers to the token type, which is a 'token' here.
              
              3.2.2. "value": The value of the key which has to be of type 'string'. Here it is 'BearerToken'.
              
              3.2.3. "type": This is the data type of the value. In this case, it is a string.

        4. "method": Describes the HTTP method used for the request. In this case, it is 'GET', meaning the endpoint requests data from a specified resource.

        5. "url": This field contains the URL where the request will be sent. The specified parameters in the URL are 'sessionId' and 'accountId'.

        6. "headers": These are used to provide additional instructions for the request. Currently all the fields are left empty, and it's disabled.

        7. "body": This contains data that you want to send to the server. 

           7.1. "mode": Its value is 'raw' implying that the body data is not categorized in any specific format.
           
           7.2. "raw": It's used when you want to send plain/unformatted body data. Here, it's empty so no data is sent within the request body.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notification/videos/delete:
    post:
      tags:
        - NotificationVideos
      summary: Notification - Videos - Delete
      description: |-
        "Notification - Videos - Delete" is the name of the API endpoint. This name is significant because it labels what the API endpoint is and what it's for. It indicates the primary functionality of deleting notifications related to videos.

        The `request` field defines the details of the request that will be made to the endpoint. 

        The `auth` field within the request is used for authentication. In this case, it makes use of a "bearer" type token. This token is passed in the headers with the key name 'token' and its value set to 'sessionId'. The 'sessionId' is unique for each session and as such it is essential for authentication.

        The `method` field indicates the HTTP method that will be used for the request. As it is 'POST', it suggests that the endpoint will process the provided data or changes the state based on the data.

        The `url` field: This points to the location of the endpoint which is "http://localhost:3000/api/notification/videos/delete". 

        In the `headers` field, there are options for adding additional headers. In this case, the API does not require any extra headers as the value of the key field and the key itself are both empty and it is disabled.

        The 'body' field contains the actual data that we want to send or process. Inside the body field, we have the 'mode' set to 'raw'. This indicates that the body data will be sent as a raw JSON string. In the 'raw' field, there's a JSON string with the keys 'sessionId', 'accountId', 'videosId'. These likely represent the session ID of the user, the account ID of the user, and the IDs of the videos that need to be deleted from the notifications respectively.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"videosId\":\"videosId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/card/create:
    post:
      tags:
        - PaymentCard
      summary: Card - Zelle - Create
      description: |-
        Endpoint Title: Card - Zelle - Create

        This endpoint describes the API call for creating a new card using the Zelle payment provider. It employs a "POST" method used to create a resource in a database, allowing users to create a new card linked with specific account details.

        Details:

        1. Method: POST 
        The request employs a "POST" method indicating it is used to send data to 'create' a resource on a server-side database. 

        2. URL: http://localhost:3000/api/payment/card/create
        The URL indicates the route to a local server's Create Card API used for creating a new card for a payment gateway.

        3. Name: Card - Zelle - Create
        The name suggests that this endpoint is defined for creating a card using the 'Zelle' payment provider.

        4. Headers: None
        No further header information is required to authorize or give additional details about this request.

        5. Body:
           - Mode: Raw
        It needs raw data input, where you will enter a raw JSON object containing the data to create a new card.

           - accountId: This is a string value representing the owner's account id; it indicates who the newly created card will be associated with.

           - sessionId: This is another string value representing the session id, used to track interactions with the server, ensuring requests come from valid users.

           - source: This value represents the source through which the card creation was initiated. However, here, it is set to null.

           - isSaveCard: This boolean value indicates whether the user desires to save the card for easier future payment interactions. If true, the card details will be stored for future use.

           - isPrimary: Another boolean value that specifies whether this card is a primary card. By default, it is set to false, indicating it's not the main card for this account.

           - provider: This string explicitly states the card's payment service provider. Here, 'Zelle' is used.

        6. Options:
           - Language: JSON
        The request body should be written in JSON format.
           
        In conclusion, this endpoint is used to create a new card using the Zelle payment provider with defined account and session details.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                source: null
                isSaveCard: true
                isPrimary: false
                provider: zelle
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/card/update:
    post:
      tags:
        - PaymentCard
      summary: Card - Square - Update
      description: |-
        This endpoint, 'Card - Square - Update', is used to update the details of an existing card on the Square payment platform. The following describes the individual pieces of data passed in this request.

        1. `name`: This field specifies the name of the API endpoint. Here, the name is 'Card - Square - Update', indicating an update related to a card in the Square payment system.

        2. `request`: This object holds all the information related to the API request.

            * `method`: This field indicates the HTTP verb that is used for the API call. Here, 'POST' is used, which is typically used when you want to send some data to the server.

            * `url`: This is the URL where the API request will be made. In this case, the endpoint is 'http://localhost:3000/api/payment/card/update'.

            * `headers`: This is an empty array, implying that no additional HTTP headers are being sent with this request.

            * `body`: This encapsulates the data sent by a POST request.

                * `mode`: It indicates how the request body is formatted. Here, 'raw' signifies that the body content is unprocessed.
                
                * `raw`: This field includes the raw string of the data to be sent in the body of the HTTP request. This data is structured in the JSON format.

                    * `accountId`: This is a unique identifier for the account.

                    * `sessionId`: This is a unique identifier for a user session.

                    * `source`: This object contains information about the payment source.

                        * `paymentId`: This represents a unique identifier for a particular payment.

                        * `customerId`: This field represents a unique identifier for the customer who made the payment.

                    * `isSaveCard`: This is a boolean value to indicate whether to save the card for future use. If true, the card will be saved.

                    * `isPrimary`: This boolean value indicates whether the card is the primary card. If false, the card is not the primary card.

                    * `provider`: This indicates the payment provider. Here, the provider is 'square'.

                * `options`: This field contains additional settings for the request body.

                    * `raw`: This defines the language setting for the raw data in the body section of the request.

                        * `language`: This specifies the programming language for formatting the raw data. Here, it is set to 'json', indicating that the raw data is in JSON format.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                source:
                  paymentId: D9kDsYIqprluE2rqn2dhjmW4bo5YY
                  customerId: EQ0ZQW60RE4ZXA5JVDVGWV9B3R
                isSaveCard: true
                isPrimary: false
                provider: square
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - PaymentCard
      summary: Card - Zelle - Update
      description: |-
        This endpoint is associated with the name 'Card - Zelle - Update'. It is responsible for making a 'PUT' HTTP request to update the payment card information linked with Zelle. The URL for this request is 'http://localhost:3000/api/payment/card/update'. There are no custom headers involved in this request.

        The request body is strictly in a raw format, containing JSON data. It houses the following pieces of data:

        1. `accountId`: A string type field that provisions the unique identifier of the account where the card is being updated.

        2. `sessionId`: A string that represents the unique identifier of the session in which the card is being updated.

        3. `cardId`: A string that signifies the unique identifier of the card which is being updated.

        4. `source`: A field which can either contain a string or null. In this current setup, it's null. It might be used to specify the source from which the update request is initiated.

        5. `isSaveCard`: A boolean field to indicate whether or not to save the card for future use. In this case, it is set to true, meaning the preference is to save the card.

        6. `isPrimary`: Another boolean field to indicate whether this card is to be set as the primary card or not. Here, it is set to true, meaning this card will be designated as the primary card.

        7. `provider`: A string field that specifies the payment processing provider. In this case, it is set to 'zelle'.

        The `options` object defines the language of the raw request body. In this case, the language is set as 'json'.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                cardId: cardId
                source: null
                isSaveCard: true
                isPrimary: true
                provider: zelle
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/card/get:
    get:
      tags:
        - PaymentPayout
      summary: Payout - Square - Get
      description: |-
        This endpoint represents a GET request to the 'Payout - Square - Get' service.

        1. "name": This field contains the name of the request. It is "Payout - Square - Get", indicating that it is a service to get payout information from the Square payment platform.

        2. "request": This field encapsulates the details about the HTTP request being sent.

        3. "method": This field denotes the HTTP method to be used for the request, which is "GET". GET is used to request data from a resource.

        4. "url": This field contains the URL to which the request will be sent. It is "http://localhost:3000/api/payment/card/get". The query parameters following the "?" in the URL are "provider=square", "accountId=accountId", "sessionId=sessionId" and "cardId=ccof:CA4SEFZspcQ7Py9BTX_j4-bnUPooAg". 

            - "provider=square": This parameter specifies the provider of the card payment service, which is 'square' in this case.
           
            - "accountId=accountId": This is the unique identifier for the user's account. It should be replaced with the user's actual account ID for making the request.
           
            - "sessionId=sessionId": This is the unique identifier for the current session. It should be replaced with the actual session ID when making request.
          
            - "cardId=ccof:CA4SEFZspcQ7Py9BTX_j4-bnUPooAg": This parameter represents the card identifier. Replace it with the actual cardId when making a request. This ID is used by Square to uniquely identify a card.

        5. "headers": This field contains an array that would typically include any HTTP headers to be sent with the request. Right now, it's empty, indicating no extra headers are being sent with this request.
      parameters:
        - name: provider
          in: query
          schema:
            type: string
          example: square
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: cardId
          in: query
          schema:
            type: string
          example: ccof:CA4SEFZspcQ7Py9BTX_j4-bnUPooAg
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/card/getAll:
    get:
      tags:
        - PaymentCard
      summary: Card - Stripe - Get All
      description: |-
        This endpoint is titled `Card - Stripe - Get All`. It's a GET request which means it is used to retrieve information. All data retrieval is handled via this endpoint. 

        The URL for the endpoint is `http://localhost:3000/api/payment/card/getAll/`. It is structured as follows:

        - `http://localhost:3000/` is the base URL which is generally the entry point of the API.

        - `/api/payment/card/getAll/` is the path to the specific resource you are wanting to interact with. In this case, it is to get all cards associated with a particular payment. 

        There are also URL parameters that are needed:

        - `provider` parameter is used to specify the payment provider. In this example, it is set to 'stripe'. This parameter is used to determine which payment provider's API should be used to process the request.

        - `accountId` parameter is used to specify the account the cards are associated with. The accountId is unique for each user's account.

        - `sessionId` parameter is used to maintain a session for the user. It's used for identifying the user's session across multiple requests.

        There are no headers specified in the request. Headers generally include more metadata about the request like authentication tokens, content type etc.

        So, in a nutshell, this endpoint retrieves all the card information of a particular account from the payment provider Stripe.
      parameters:
        - name: provider
          in: query
          schema:
            type: string
          example: stripe
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/card/delete:
    post:
      tags:
        - PaymentCard
      summary: Card - Zelle - Delete
      description: |-
        This endpoint is named "Card - Zelle - Delete". It uses the POST method to delete a Zelle card from the specified account. Its URL is http://localhost:3000/api/payment/card/delete.

        Here's the detailed description of each data:

        1. `name`: This is the name of the endpoint. In this case, the name is "Card - Zelle - Delete". This name usually illustrates the purpose of this endpoint, which is to delete a Zelle card.

        2. `request`: This field envelops all the request-related information for the API call.

        3. `method`: The request type. Here, the method is POST, which is typically used to submit data to be processed.

        4. `url`: This is the endpoint URL to which the request is sent. In this case, the URL is http://localhost:3000/api/payment/card/delete.

        5. `headers`: This is an array that could possibly contain metadata for the HTTP request. In this instance, it is empty.

        6. `body`: This contains data that you want to send to the server.

           * `mode`: Defines the way the data is being sent. As mentioned in the provided data, the mode used here is "raw".

           * `raw`: This field contains all the raw data to be sent with the request in a JSON format. The data it contains includes:
                - `accountId`: The unique identifier of the account where the Zelle card is being deleted from.
                - `sessionId`: The current session's unique identifier.
                - `cardId`: The unique identifier of the card that needs to be deleted.
                - `provider`: The card provider's name, indicating from which provider's list the card needs to be removed.

            * `options`: This field provides options for processing body data.
                * `raw`: Further options specifically for processing raw data.
                   * `language`: The language in which the raw data is written, here it is JSON.

        Please note that the actual values are not provided in the example and need to be replaced with proper values before the request is made.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                cardId: cardId
                provider: zelle
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/card/get/cardId:
    get:
      tags:
        - PaymentCard
      summary: Card - Zelle - Get
      description: |-
        This API endpoint is named "Card - Zelle - Get". 

        1. __Method__: It uses the `GET` method, which typically requests data from a resource without any side-effects.

        2. __URL__: The URL for this endpoint is "http://localhost:3000/api/payment/card/get/cardId". This is the local server address where the API resides. You should replace `cardId` with the actual ID of the card you want to get information about. It represents a specific card that exists in your system.

        3. __Query Parameters__:
            
            - __provider__: This parameter should be set to "zelle". This reveals that the underlying form of payment connected with the card is facilitated by Zelle.
            - __accountId__: This parameter should contain the account ID associated with the user. It is a unique identifier that refers to a specific user in your system.
            - __sessionId__: This parameter should contain a unique session ID generated for a particular user session. It helps in maintaining the state and tracking the behaviour of a user during a session.

        4. __Headers__: As of now, the request doesn't require any specific headers. Headers in HTTP requests provide additional parameters that are needed by the API endpoint to process the request. Since it is empty, no extra data is needed in the headers for this API call. However, based on the requirements like authentication, content type etc., it might be required in the future.

        In summary, this API is designed to retrieve card information associated with a specific account using Zelle as the provider. A unique `cardId`, `accountId`, and `sessionId` needs to be specified in the URL to get the information.
      parameters:
        - name: provider
          in: query
          schema:
            type: string
          example: zelle
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/card/getAll/cardId:
    get:
      tags:
        - PaymentCard
      summary: Card - Zelle - Get All
      description: |-
        This endpoint is named "Card - Zelle - Get All". It's a GET API request which aims to retrieve all the card information related to the payment provider Zelle.

        Here's a detailed breakdown of each data:

        - `name`: The name of this endpoint is "Card - Zelle - Get All". It suggests that this endpoint is used to retrieve all Zelle card information.

        - `method`: This field specifies the request method used which is GET. GET is used when you want to retrieve data from a server.

        - `url`: The URL field provides the path to which the request will be sent. In this case, the URL is "http://localhost:3000/api/payment/card/getAll/cardId". This suggests that the API will be hitting a local server on port 3000 to execute the request. The call is to the 'payment' service, specifically to get all the cards of type 'Zelle'. It also indicates that 'cardId' is passed in the URL as a path parameter.

            - The URL contains a few query parameters:
                - `provider`: It specifies the payment provider which is set as 'zelle'.
                - `accountId`: This query parameter is used to pass the specific account ID for which payment card data is fetched.
                - `sessionId`: This query parameter is to pass the session ID. Most likely, it is used for session management and tracking the user session.

        - `headers`: As of now, there are no custom headers specified in the request. Headers often contain metadata and additional information such as content type, authorization information etc. that the server should know about.
      parameters:
        - name: provider
          in: query
          schema:
            type: string
          example: zelle
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/charge/create:
    post:
      tags:
        - PaymentCharge
      summary: Charge - Zelle - Create
      description: |-
        This endpoint is named "Charge - Zelle - Create". It is designed to create a payment charge using the Zelle payment method. 

        The request uses the "POST" method, which means it's used to submit data to be processed to the identified resource. The URL that the request is sent to is 'http://localhost:3000/api/payment/charge/create'. 

        The request body is in raw mode, representing an unparsed sequence of characters. The data sent via this method is in JSON format (Javascript Object Notation, a human-readable and easy-to-parse data exchange format).

        The data included in the body are as follows:

        - `accountId`: This field is used to specify the unique identifier for the account undertaking the transaction. Replace "accountId" with the actual account ID.
          
        - `sessionId`: This field requires the session ID value. It is the unique identifier for the current transaction session. Replace "sessionId" with the active session ID.
          
        - `source`: This field is for providing the source of the funds for the payment. However, in this given case it's null as Zelle doesn't require any source.
          
        - `isSaveCharge`: This is a boolean (true or false) field. If set to 'true', it means that the charge information for this transaction should be saved for future reference or use.

        - `isPrimary`: This is another boolean field. If set to 'true', it implies that the current payment method (Zelle) is set as the primary method of payment. In this case, it is set to 'false', meaning that Zelle is not the primary method.
          
        - `provider`: This field represents the payment provider. In this case, it is set to "zelle". You may replace this with other providers if needed.

        Inside the 'options' field, the 'language' is set to 'json'. This indicates that the request body is coded in JSON language.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                source: null
                isSaveCharge: true
                isPrimary: false
                provider: zelle
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/charge/update:
    put:
      tags:
        - PaymentCharge
      summary: Charge - Zelle - Update
      description: |-
        `name`: This indicates the name of the API endpoint. In this case, it's "Charge - Zelle - Update". This name typically represents the purpose of the endpoint. For example, this endpoint presumably updates information related to a Zelle charge in some way.

        `request`: This field is an object that defines the HTTP request made to the endpoint.

        - `method`: The HTTP method used for the request. In this case, it's `PUT`, which is typically used for updating an existing resource.

        - `url`: This is the URL where the request is being sent. It points to an API on your local machine (`localhost`) on port `3000`.

        - `headers`: HTTP headers let the client and the server pass additional information with the request or the response. In this case, there are no extra headers defined.

        - `body`: This is the data that is sent with the request. The `body` field here is an object.

            - `mode`: The method of sending the body's data. Here, it's set to `raw` which implies the data would be sent as a string.

            - `raw`: The actual data to be sent in the body. It appears to be in JSON format, contains different fields representing different data parameters. Each of these parameters has different roles:
                - `accountId`: Likely represents the unique identifier for a user's account.
                - `sessionId`: Likely represents the unique identifier for the current session.
                - `chargeId`: Likely represents the unique identifier for the charge that will be updated.
                - `source`: Its value is null. It might usually represent the origin of the charge.
                - `isSaveCharge`: A boolean value, which when true, suggests that the charge should be saved. 
                - `isPrimary`: This could mean that this particular charge is the main or primary charge for the account.
                - `provider`: This signifies the provider of the charge source. Here, it's set to `Zelle`.

            - `options`: Defines any extra settings for the body. Here, it indicates that the language of the raw data is `json`.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                chargeId: chargeId
                source: null
                isSaveCharge: true
                isPrimary: true
                provider: zelle
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - PaymentCharge
      summary: Charge - AuthorizeNet - update
      description: |-
        This endpoint is named "Charge - AuthorizeNet - update" and it uses the POST method. The aim of this endpoint is to update the information related to a charge on AuthorizeNet. The endpoint URL is "http://localhost:3000/api/payment/charge/update".

        Below are the details for each data:

        - "accountId": This represents the unique identifier of the account. It needs to be replaced with the actual account ID.
        - "sessionId": This field represents the session ID and it needs to be replaced with the actual session ID.
        - "source": This object holds information about the payment source.
          - "amount": This is the amount to be charged.
          - "payment": This is an object that holds information about the card used for payment.
            - "cardNumber": This is the card number for the payment card.
            - "expirationDate": This is the expiration date of the card.
            - "cardCode": This is the 3-digit CVV code of the card.
          - "lineItems": This is an array that contains details about the items that are included in the charge.
            - "itemId": This is the unique ID of the item.
            - "name": This is the name of the item.
            - "description": This is the description of the item.
            - "quantity": This is the quantity of the item that was ordered.
            - "unitPrice": This is the price per unit of the item.
          - "tax", "duty", and "shipping": These objects hold information about the tax, duty, and shipping costs respectively. They have similar structure and include "amount", "name", and "description".
          - "poNumber": This corresponds to the purchase order number.
          - "customer": This object holds the customer's identification information.
            - "id": This is the unique ID of the customer.
          - "billTo" and "shipTo": These objects hold the billing and shipping information respectively. They include "firstName", "lastName", "company", "address", "city", "state", "zip", and "country".
          - "userFields": This is an array that can store any additional user-defined data. Each item within the array is an object with "name" and "value" properties.
        - "isSaveCharge": This is a boolean value that indicates whether the charge info should be saved.
        - "isPrimary": This is a boolean that indicates whether this payment method should be set as the primary payment method.
        - "provider": This is a string field to specify the provider name, in this case, it is "authorizenet".
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                source:
                  amount: '5'
                  payment:
                    cardNumber: '5424000000000015'
                    expirationDate: 2025-12
                    cardCode: '999'
                  lineItems:
                    - itemId: '1'
                      name: vase
                      description: Cannes logo
                      quantity: '18'
                      unitPrice: '45.00'
                  tax:
                    amount: '4.26'
                    name: level2 tax name
                    description: level2 tax
                  duty:
                    amount: '8.55'
                    name: duty name
                    description: duty description
                  shipping:
                    amount: '4.26'
                    name: level2 tax name
                    description: level2 tax
                  poNumber: '456654'
                  customer:
                    id: '99999456654'
                  billTo:
                    firstName: Ellen
                    lastName: Johnson
                    company: Souveniropolis
                    address: 14 Main Street
                    city: Pecan Springs
                    state: TX
                    zip: '44628'
                    country: US
                  shipTo:
                    firstName: China
                    lastName: Bayles
                    company: Thyme for Tea
                    address: 12 Main Street
                    city: Pecan Springs
                    state: TX
                    zip: '44628'
                    country: US
                  userFields:
                    - name: MerchantDefinedFieldName1
                      value: MerchantDefinedFieldValue1
                    - name: favorite_color
                      value: blue
                isSaveCharge: true
                isPrimary: false
                provider: authorizenet
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/charge/get:
    get:
      tags:
        - PaymentCharge
      summary: Charge - Stripe - Get
      description: |-
        This endpoint named "Charge - Stripe - Get" is a GET type HTTP request that calls to retrieve specific data from the Stripe payment system. 

        The request is executed through the URL: http://localhost:3000/api/payment/charge/get/ which holds the application host and the API path. This endpoint is related to fetching information about a charge from the Stripe payment system.

        Embedded in the URL are four query parameters which are crucial pieces of data to consider:

        1. "chargeId" - This required query parameter refers to the unique identifier of a specific charge in the Stripe payment system. It helps to retrieve the details for that particular transaction.

        2. "provider" - This required query parameter specifies the payment gateway. In this case, it's set to 'stripe'. This way, the system knows that the Stripe provider should handle the request.

        3. "accountId" - This required query parameter is the unique ID of the user account associated with the charge. It helps to link the charge to a specific user within the system.

        4. "sessionId" - This is a required query parameter which is used for session tracking. It uniquely identifies the user's current active session. 

        At last, this endpoint doesn't contain any specific headers, which means any standard or default headers your HTTP client sets are all that are sent.
      parameters:
        - name: chargeId
          in: query
          schema:
            type: string
          example: chargeId
        - name: provider
          in: query
          schema:
            type: string
          example: stripe
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/charge/getAll:
    get:
      tags:
        - PaymentCharge
      summary: Charge - Stripe - Get All
      description: |-
        This endpoint refers to 'Charge - Stripe - Get All'. This API endpoint is configured to retrieve data from your local server (http://localhost:3000/api/payment/charge/getAll/). This endpoint fetches all the charges related specifically to the Stripe payment provider. 

        Here's a breakdown of the provided data:

        1. `name` - This is the name of the endpoint. It's used to identify this particular API endpoint. The name 'Charge - Stripe - Get All' signifies that this endpoint is designed to get all charge data related to Stripe.

        2. `request` - This object contains all the details necessary to make the API request. 

            a. `method` - The 'GET' method is being used, which means the API endpoint is expected to retrieve or read data.

            b. `url` - This specifies the location where the request is sent. In this case, the local server's /api/payment/charge/getAll/ route is the destination. 
            
            c. `headers` - Currently, no additional headers are being sent with this request.

        3. `url parameters` - The URL contains several parameters:

            a. `provider` - This parameter indicates the payment gateway you are using. In this case, the value is 'stripe'. 

            b. `accountId` - It refers to the unique identifier of the account in question. You need to replace 'accountId' with the actual account ID.

            c. `sessionId` - This parameter represents the unique identifier of the session during which the transactions were made. You should replace 'sessionId' with the actual session ID. 

        Please replace the placeholders 'accountId' and 'sessionId' with actual values when using this endpoint. 

        This endpoint doesn't include any request body or additional headers which means it relies solely on the URL parameters to perform the action. It's a straight-forward API call meant to retrieve all the charge data associated with the given Stripe account and session.
      parameters:
        - name: provider
          in: query
          schema:
            type: string
          example: stripe
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/charge/delete:
    post:
      tags:
        - PaymentCharge
      summary: Charge - Zelle - Delete
      description: |-
        This endpoint is named "Charge - Zelle - Delete". The main function of this endpoint is to delete a previously created Zelle charge from an account. Following are the details about the data in this endpoint:

        1. **Name**: Name here signifies the title or the identity of the endpoint. In this case, it is 'Charge - Zelle - Delete'.

        2. **Request**: It refers to the details of the HTTP request to be made against this endpoint.

            a. **Method**: This indicates the HTTP request method to use. For this endpoint, it is POST, which is typically used to send data to the server, creating a new resource.

            b. **URL**: This indicates the endpoint's location or address, which in this case is 'http://localhost:3000/api/payment/charge/delete'.

            c. **Headers**: Headers can contain more info about the request. Currently, the headers array is empty.

            d. **Body**: Contains the data you want to send to the API. 
            
                i. **Mode**: The mode here is 'raw,' signifying that you can enter the data you want to send with the request directly.

                ii. **Raw**: This field contains the actual data that is to be sent along with the POST request in a JSON format. The `accountId` is the ID of the account where the charge is located, `sessionId` is the ID of the current session, `chargeId` is the ID of the charge that needs to be deleted, and `provider` is the type of payment provider which in this case is 'zelle'.
               
                iii. **Options**: Controls some additional parameters of the request. The `raw` option is set to define the language to be used for the content of the 'raw' field, which here is 'json'. 

        Please ensure to replace the placeholders for `accountId`, `sessionId`, `chargeId` with actual values while making the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                chargeId: chargeId
                provider: zelle
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/charge/get/chargeId:
    get:
      tags:
        - PaymentCharge
      summary: Charge - Zelle - Get
      description: |-
        This endpoint is named "Charge - Zelle - Get". It's designed to retrieve details about a specific charge from the Zelle payment provider.

        It uses the GET method, which is typically used when you're trying to read or retrieve data from a resource.

        "url": This is the path from where the API endpoint can be accessed. It's set to "http://localhost:3000/api/payment/charge/get/chargeId". In this URL:
        - "localhost:3000" indicates that the API server is running locally on port 3000.
        - "api/payment/charge/get/chargeId" is the specific path on the server where our endpoint is located. The "chargeId" part in our example is a placeholder for the actual charge ID that you need to provide to get charge details.

        The endpoint accepts two query parameters in the URL: 
        - "provider" is used to indicate the payment provider, in this case, it's set to "zelle".
        - "accountId" is used to specify the account ID from which the charge was made. This should be replaced with the actual account ID.
        - "sessionId" is used to keep track of the user session. The actual session ID should be provided here.

        "headers": This field is currently empty, indicating that the endpoint does not require any specific HTTP headers. However, in some cases, headers might include additional data that is needed for the request, such as API tokens or keys for authentication.

        Please note that actual values should replace placeholders accordingly, and URL parameters should properly URL encoded if they contain special characters or spaces.
      parameters:
        - name: provider
          in: query
          schema:
            type: string
          example: zelle
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/charge/getAll/chargeId:
    get:
      tags:
        - PaymentCharge
      summary: Charge - Zelle - Get All
      description: |-
        "Name" field:

        The "name" field holds the title or description of the API call. In this case, "Charge - Zelle - Get All" denotes that this API is used to retrieve all charges made through Zelle.

        "Request" field:

        The "request" field contains the necessary information to perform the API call. The method, url, and headers are required sub-fields inside this section.

        "Method" sub-field:

        The "method" sub-field contains the HTTP method used in the API call. In this case, "GET" method is used which suggests that this request is used to retrieve or get data from the server.

        "Url" sub-field:

        The "url" sub-field contains the specific endpoint or route to which the API call is intended. Here, "http://localhost:3000/api/payment/charge/getAll/chargeId" shows the destination address of this API call. "localhost:3000" is the host and port on which the server is running. "/api/payment/charge/getAll/chargeId" is the route or the path on the server side where the needed data resides.

        Inside the URL, there are several parameters: "provider" which is used to specify the payment provider for the charges (in this case 'zelle'), "accountId" to specify the account from which the payments were made and "sessionId" to specify the user session to provide an added layer of security and uniqueness to each request made.

        "Headers" sub-field:

        The "headers" sub-field is an array that contains the HTTP headers to be included with the HTTP request. In this case, it's been left empty which suggests that this request doesn't require any additional information to be sent as part of the headers.
      parameters:
        - name: provider
          in: query
          schema:
            type: string
          example: zelle
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/customer/create:
    post:
      tags:
        - PaymentCustomer
      summary: Customer - Zelle - Create
      description: |-
        This endpoint is named "Customer - Zelle - Create" and it uses the POST HTTP method. It is utilized for creating a new customer record in the Zelle system. Here's a description for each field in this endpoint:

        - The URL of this endpoint is "http://localhost:3000/api/payment/customer/create". This URL is where the client app sends HTTP POST requests to execute the customer creation operation.

        - An object named "request" which has the following properties:
          - "method": The HTTP verb which defines what kind of request this is. In this case it's a POST which suggests it's for creating a new resource.
          - "url": The network location at which the request is aiming.
          - "headers": This should be a list of headers to be used for the request. Currently, it's empty, implying no custom headers are used.
          - "body": The data to be submitted in the request, which houses the subsequent fields:
            - "mode": It is stated as 'raw', implies all the required data is furnished in raw format.
            - "raw": Represents the actual data sent with the request. In this endpoint, the following attributes in JSON format are being sent:
              - "accountId": The unique identifier for the user's account.
              - "sessionId": Represents the unique session ID.
              - "source": The origin of the request. It's currently null, which could suggest that this value is either not required or will be filled in at the time of the request.
              - "isSaveCustomer": A boolean that indicates whether to create (true) or not create (false) a customer in the system.
              - "isPrimary": A boolean that signifies if the newly created customer is the primary customer (true) or not (false).
              - "provider": Indicates the name of the payment provider, which is 'zelle' in this case.
            - "options": Any additional options that might be applicable for the request. Here it indicates the language of the raw data payload which is 'json' in this case.

        All of these fields together make up the POST request to create a new customer record within the Zelle payment system through the provided local API.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                source: null
                isSaveCustomer: true
                isPrimary: false
                provider: zelle
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/customer/update:
    put:
      tags:
        - PaymentCustomer
      summary: Customer - Zelle - Update
      description: |-
        Here's a detailed description of each data field included in this endpoint:

        1. `name`: This is the name of the API endpoint. Here, it is "Customer - Zelle - Update". This indicates that this endpoint is used for updating customer Zelle details.

        2. `request`: This contains the information about the API request. It comprises of the following fields:
           - `method`: It indicates the HTTP method used for the API request. In this case, it's "PUT", which is typically used to update an existing resource.
           - `url`: This is the URL where the API request needs to be sent. Here, it is "http://localhost:3000/api/payment/customer/update".
           - `headers`: This array would contain any headers that need to be sent with the request. Currently, it is empty.
           - `body`: This contains the body of the API request.

        3. `body`: This contains the main content sent in the API request. It has these fields:
           - `mode`: It tells you that the data in the `raw` field is in raw format.
           - `raw`: It includes the data that is to be sent in the API request in a stringified JSON format. Currently, it contains:
               - `accountId`: This field should be replaced with the actual account ID for the customer who's Zelle details are being updated.
               - `sessionId`: This field should be replaced with the current session ID.
               - `customerId`: This field should be replaced with the actual customer ID.
               - `source`: Currently, it is set to null.
               - `isSaveCustomer`: It is a boolean value indicating whether to save the customer details or not. If true, the details are saved.
               - `isPrimary`: It is a boolean value indicating whether the details to be updated are of a primary account or not. If true, the account is considered primary.
               - `provider`: This is the name of the payment provider. In this case, it is "zelle". 
           - `options`: This field contains additional options for processing the `body`. Currently, the only option is `raw`:
              - `raw`: It indicates that the body data language is "json".

        Remember to replace the "accountId", "sessionId", and "customerId" in `raw` with actual values before making the API request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                customerId: customerId
                source: null
                isSaveCustomer: true
                isPrimary: true
                provider: zelle
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/customer/get:
    get:
      tags:
        - PaymentCustomer
      summary: Customer - Stripe - Get
      description: |-
        This endpoint is named "Customer - Stripe - Get". It is designed to retrieve customer data from a Stripe account. 

        The request made to this endpoint is a GET type, indicating that it aims to retrieve or read information. The data in this endpoint constitutes several parts:

        1. `url`: The URL of the endpoint is `http://localhost:3000/api/payment/customer/get/`. This suggests that the endpoint belongs to a Payment API, specifically for getting customer data. 

        2. `Query parameters`: On the URL, you can see four query parameters appended:
            - `customerId`: Specifies the unique identifier of the customer whose data you want to fetch.
            - `accountId`: The unique identifier of the account associated with this customer in the payment system. 
            - `provider`: Representative of the payment provider. In this case, it is 'stripe'. 
            - `sessionId`: Session identifier to maintain the session between the client and server. 

        To use this endpoint, replace `customerId`, `accountId`, and `sessionId` with actual values.

        3. `headers`: Currently, the headers array is empty, indicating that there's no additional information needed in the header to process this request. However, typically, headers may include details like Content-Type or authentication details.

        Please ensure to replace the placeholders with appropriate values to retrieve the correct customer details. Proper usage would look like: `http://localhost:3000/api/payment/customer/get/?customerId=123&accountId=456&provider=stripe&sessionId=789` (where 123, 456, and 789 are placeholders for actual values).
      parameters:
        - name: customerId
          in: query
          schema:
            type: string
          example: customerId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: provider
          in: query
          schema:
            type: string
          example: stripe
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/customer/getAll:
    get:
      tags:
        - PaymentCustomer
      summary: Customer - Stripe - Get All
      description: |-
        This API endpoint is labeled as "Customer - Stripe - Get All". This suggests it's designed to retrieve all customer data associated with the Stripe payment platform.

        - Method: The request 'GET' method indicates it's utilized to retrieve data.

        - URL: The URL "http://localhost:3000/api/payment/customer/getAll/" indicates the location of the API on the server. It consists of several parts:
          - The base URL 'http://localhost:3000/' is the root address which points to your local server running at port 3000.
          - 'api' signifies that it's an API endpoint.
          - 'payment' could imply the financial transaction category being targeted.
          - 'customer' suggests that the API is associated with customer data.
          - 'getAll' refers to the functionality of the endpoint, meaning it's responsible for fetching all customers from the Stripe payment system.

        - Query Parameters: These are present in the URL after the '?'. They are used to filter and manipulate the response data based on the server's logic. The endpoint requires three query parameters i.e., accountId, provider, and sessionId.
           - 'accountId' is likely a unique identifier for each distinct account.
           - 'provider' refers to the payment platform in use, which in this case is 'stripe'.
           - 'sessionId' is probably a unique identifier for the current session, which could be used for tracking or maintaining session-specific information safely.

        - Headers: The 'headers' field is currently empty in this endpoint. Normally, they would be used to provide additional request info like auth tokens or the formatting of the data being sent. It's noted to be blank here, suggesting that no additional information is required for this API request at this time. 

        It should be noted that this is a generalized explanation based on the data provided and the actual functionality might vary depending on the server side implementation and business logic.
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: provider
          in: query
          schema:
            type: string
          example: stripe
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/customer/delete:
    post:
      tags:
        - PaymentCustomer
      summary: Customer - Zelle - Delete
      description: |-
        This endpoint is named "Customer - Zelle - Delete". This endpoint pertains to the payment service provided in the API, specifically for deleting customer information related to Zelle payment. 

        Request Details:

        The request method used is POST, which means it is used to send data to the API server in order to perform an action. 

        The URL where the request is sent is http://localhost:3000/api/payment/customer/delete. This is the URL to your local server running on port 3000 for payment service particularly for the deletion of customer information. 

        The 'headers' field is currently empty. If any additional information is required by the server to process the request, it would be included in this field. 

        Body Details:

        The 'body' field contains the data that is sent to the server. Its 'mode' is 'raw' which means the data will be sent exactly in the same way as it is specified.

        The 'raw' data in the 'body' field includes the following attributes:

        - "accountId": This should contain the account ID of the user. This is a required field to identify the user account associated with the Zelle payment.
          
        - "sessionId": This would hold the session ID for the current session of the user. It is required for the server to maintain the state of the session.

        - "customerId": This field should contain the customer ID. This is a required field which helps identify the customer who is using the Zelle payment service.

        - "provider": Here, the value is "zelle". As this endpoint is for Zelle payments, this field will always contain the same value.

        In the 'options' object under 'body', it specifies that the language used is JSON. Here, 'language' is set to 'json', meaning that the server acts upon or responds to the data in JSON format.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                customerId: customerId
                provider: zelle
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/customer/get/customerId:
    get:
      tags:
        - PaymentCustomer
      summary: Customer - Zelle - Get
      description: |
        **Endpoint Description**

        This endpoint is designed for retrieving information related to a specific customer's Zelle payment transactions.

        **Data Description**

        1. **name**: This refers to the distinct name of the endpoint. In this case, the name is "Customer - Zelle - Get," which explains that this endpoint is targeting customers who execute Zelle payments, and its function is to retrieve data or get data from the database.

        2. **request**: This object holds all the necessary data to make a HTTP request.

        - **method**: The method value is "GET". HTTP 'GET' is a request method that is used to retrieve information from a specific resource.
           
        - **url**: The url field indicates where the request is sent. Here, it is 'http://localhost:3000/api/payment/customer/get/customerId', localhost refers to a local server hosted by the machine where the code is running, 3000 is the port number, and the subsequent route (/api/payment/customer/get/customerId) is the path pointing to the resource. 

          Parameters in the url:

          - **customerId**: This is an identifier used to retrieve data specific to a customer. 

          - **provider=zelle**: This parameter specifies that the payment provider is Zelle. 

          - **accountId=accountId**: This parameter is used to pinpoint the exact account of a customer. 

          - **sessionId=sessionId**: A session ID is a unique number that a server assigns a specific user for the duration of that user's visit (session).
           
        3. **headers**: Headers let the client and the server pass additional information with an HTTP request or response. In this instance, no headers are specified.
      parameters:
        - name: provider
          in: query
          schema:
            type: string
          example: zelle
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/customer/getAll/customerId:
    get:
      tags:
        - PaymentCustomer
      summary: Customer - Zelle - Get All
      description: |-
        This endpoint is named "Customer - Zelle - Get All". It uses the GET HTTP method to retrieve all the Zelle payment customers.

        Below is a step-by-step breakdown of the components:

        1. "name": It's the title of the endpoint. In this case, "Customer - Zelle - Get All" indicates that the endpoint is meant to retrieve all Zelle customers.

        2. "method": This represents the HTTP method used. "GET" method retrieves information from the specified source.

        3. "url": This contains the URL where the request will be sent. "http://localhost:3000/api/payment/customer/getAll/customerId" is the address of the endpoint.

           The URL has several parameters attached to it which include:

           - "provider": This parameter specifies the payment provider. Here, it's set to 'zelle'.

           - "accountId": This parameter signifies the unique id for a customer's account. The actual accountId should be substituted in place of 'accountId'.

           - "sessionId": This parameter is used to track sessions. The actual sessionId should be replaced in the place of 'sessionId'.

        4. "headers": At the moment, the "headers" array is empty. It usually contains any required additional information to process the request correctly, or metadata about the incoming request, such as the host, user agent, etc. It's empty in this case, which means no extra information is required for this API call.
      parameters:
        - name: provider
          in: query
          schema:
            type: string
          example: zelle
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/payout/getAll:
    get:
      tags:
        - PaymentPayout
      summary: Payout - Stripe - Get All
      description: |-
        This endpoint is named "Payout - Stripe - Get All". As the name suggests, this endpoint is designed to retrieve all payout information associated with a particular account on Stripe, a third-party payment processing system. 

        1. `Request method`: A GET method is being employed here, which is used to request data from a specific resource. It reads and retrieves the information but doesn’t change anything in the database.

        2. `URL`: The URL "http://localhost:3000/api/payment/payout/getAll/" refers to your local server. It directs the GET request to an API endpoint named '/api/payment/payout/getAll'. 

           - `provider=stripe`: The 'provider' attribute in the URL refers to the payment processing system the operation is being performed with. Here it is set to 'stripe'.
           
           - `accountId=accountId`: This refers to a specific identifier used by Stripe to associate the request to a specific account. The 'accountId' here should be replaced with actual Stripe account Id when making the request.

           - `sessionId=sessionId`: This refers to a unique identifier that is generated per individual session. This helps to identify the session through which the operations are being performed. Replace 'sessionId' with unique session ID when making the request.

        3. `Headers`: The headers value is an array and it appears to be currently empty. It is typically where you would define specifics about the request, such as the content type or authorization information. If required, headers can be added for additional configuration. 

        This endpoint is designed to interact with the Stripe API to retrieve all payouts belonging to the account-id from the session provided. It does not appear to modify any data - simply retrieves the existing payout information.
      parameters:
        - name: provider
          in: query
          schema:
            type: string
          example: stripe
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/payout/create:
    post:
      tags:
        - PaymentPayout
      summary: Payout - Zelle - Create
      description: |-
        This endpoint is titled "Payout - Zelle - Create". It makes a POST request to the URL "http://localhost:3000/api/payment/payout/create", thus is utilized to create a new payout using Zelle as the payment provider.

        Under the "request" object, there are several properties:

        1. "method": This signifies the HTTP method, and in this case, it's set to 'POST'. This essentially means that the server creates or replaces the resource at the provided URL.

        2. "url": This contains the endpoint for the API call. This URL refers to where the payment payout is created.

        Under the nested "body" object, we have:

        1. "mode": This specifies that the payload is sent in 'raw' format.

        2. "raw": This is a stringified JSON payload carrying a number of properties:
           - "accountId": This represents the identification of the account holder.
           - "sessionId": It signifies the individual session ID for the account.
           - "source": When filled, this property might refer to the origin of the payment. However, it is set to null, indicating that this information is not included for this request.
           - "isSavePayout": A boolean value. If set to true, the payout information is stored for future payouts.
           - "isPrimary": A boolean value to mark the payout method as primary or not. False in this case intends the payout method won't be set as primary.
           - "provider": Here, it is set to 'Zelle', signifying that Zelle is the chosen payout provider.

        3. "options": Under the options, "raw" and "language": "json" are set, indicating that the language and format used to transmit data is JSON.

        This request does not include headers, indicated by the "headers": [] field.

        When utilizing this API endpoint, ensure the proper accountId and sessionId values are passed for creating a new payout, set the desired options regarding saving the payout and marking it as primary, and specify the provider as 'Zelle'.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                source: null
                isSavePayout: true
                isPrimary: false
                provider: zelle
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/payout/update:
    put:
      tags:
        - PaymentPayout
      summary: Payout - Zelle - Update
      description: |-
        This endpoint is titled "Payout - Zelle - Update." It performs a PUT request, a type of HTTP method that is generally used to update existing resources. The URL for this endpoint is http://localhost:3000/api/payment/payout/update, which seems to suggest that it is used to update existing payout information for a payment.

        The body of the request contains several fields:

        1. "accountId" - This field likely holds a unique identifier for the account that the payout is being updated for.

        2. "sessionId" - This is also some unique identifier and it probably refers to the specific session in which the update is being made.

        3. "payoutId" - This field presumably houses a unique identifier specifically for the payout that is being updated.

        4. "source" - The endpoint accepts null for this field, suggesting that it is optional. Its use is not specified here.

        5. "isSavePayout" - This is a boolean field that suggests whether the updated payout details should be saved or not. 

        6. "isPrimary" - Another boolean field, possibly indicating whether this payout is set as the default or main payout method for the account.

        7. "provider" - This field appears to specify who the payout provider is. In this case, it's given as Zelle, an online payments company.

        These fields are sent as raw, which means that they are not encoded in any way before being sent. They are also all written in JSON language. The request does not seem to include any specific headers. Overall, this endpoint appears to be for updating payout information for a payment in the identified account and session.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                payoutId: payoutId
                source: null
                isSavePayout: true
                isPrimary: true
                provider: zelle
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/payout/get/payoutId:
    get:
      tags:
        - PaymentPayout
      summary: Payout - Zelle - Get
      description: |-
        This endpoint is for the "Payout - Zelle - Get" service. 

        - "name": This refers to the name of the endpoint, which in this case is "Payout - Zelle - Get". This is the name that will be used to identify this endpoint in the API collection.

        - "request": This is a JSON object that holds all the details of the request that will be made to this endpoint.

        - "method": This is the HTTP method that will be used to make the request to this endpoint. In this case, the method is GET.

        - "url": This is the URL of the endpoint. For this service, the URL is "http://localhost:3000/api/payment/payout/get/payoutId". This is the link where the request will be sent.

        - "provider": This is a query parameter in the URL that specifies the payment provider. For this endpoint, the provider is "zelle".

        - "accountId": This is another query parameter in the URL that identifies the account making the payout. Each account will have a unique accountId which should be provided to get details about a specific payout.

        - "sessionId": This is another query parameter in the URL used for session management. This sessionId will be unique for every session and helps in identifying and maintaining the session for the given user.

        - "headers": Headers are often used to provide additional information about the request. In this case, no specific headers have been provided, which means the endpoint uses default headers or doesn't require any additional header information.
      parameters:
        - name: provider
          in: query
          schema:
            type: string
          example: zelle
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/payout/getAll/payoutId:
    get:
      tags:
        - PaymentPayout
      summary: Payout - Zelle - Get All
      description: |-
        This endpoint `http://localhost:3000/api/payment/payout/getAll/payoutId?provider=zelle&accountId=accountId&sessionId=sessionId` provides the function "Payout - Zelle - Get All". 

        1. **name**: This field identifies the name of the backend function that the endpoint connects to. In this case, "Payout - Zelle - Get All" signifies that it is a function meant to fetch all the payout details related to the Zelle platform.

        2. **request**: This object provides information about the HTTP request that will be made to the endpoint.

        3. **method**: This field indicates the HTTP method used for the request. In this case, the "GET" method shows that the function is retrieving data from the server.

        4. **url**: This field provides the URL/location to which the request is sent. It consists of the base URL (`http://localhost:3000`), the endpoint path (`/api/payment/payout/getAll/payoutId`), and query parameters (`provider=zelle&accountId=accountId&sessionId=sessionId`). 

        - "provider=zelle" indicates that the payments provider is Zelle. 
        - "accountId=accountId" instructs the function to pull data related to a specific account, determined by replacing "accountId" in the URL with the actual account ID.
        - "sessionId=sessionId" is a unique identifier to validate the session from which the request was made, necessary for security purposes. 

        5. **headers**: This field is an array, that contains metadata in the form of key-value pairs to be sent as part of the HTTP request. In this case, no custom headers are included with the request. Additional header information might be needed based on the server configuration. 

        Please make sure to replace "accountId" and "sessionId" with the actual account and session IDs when using this endpoint.
      parameters:
        - name: provider
          in: query
          schema:
            type: string
          example: zelle
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/payout/delete:
    post:
      tags:
        - PaymentPayout
      summary: Payout - Zelle - Delete
      description: |-
        This endpoint, "Payout - Zelle - Delete", allows you to delete a specific payout through Zelle.

        Endpoint URL:
        This endpoint is located at `http://localhost:3000/api/payment/payout/delete`.

        HTTP Method:
        This endpoint uses the `POST` method.

        Request Headers:
        This endpoint does not require any headers.

        Request Body:
        The request body should be in `raw` format and in `JSON` language. The fields included in the request body are:

        - `accountId`: This field is used to identify the account related to the payout operation. Replace the value `accountId` with the unique identifier of the account.

        - `sessionId`: This field is used for session identification and should be replaced with the specific `sessionId`.

        - `payoutId`: This field is used to identify the specific payout that you want to delete. Replace `payoutId` with the unique identifier of the payout.

        - `provider`: The provider field represents the payout service provider. In this case, the provider is `Zelle`.

        Please replace `accountId`, `sessionId`, and `payoutId` with the actual values for the operation.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                payoutId: payoutId
                provider: zelle
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/payout/get:
    get:
      tags:
        - PaymentPayout
      summary: Payout - Stripe - Get
      description: |-
        This API endpoint is titled "Payout - Stripe - Get". It is designed to retrieve payout information related to a specific payment carried out via Stripe. The following defines each element of the endpoint data:

        1. **name**: The given name of this endpoint is "Payout - Stripe - Get". The name indicates that the endpoint is related to retrieving payout information from the Stripe payment gateway.

        2. **request**: This key encapsulates all the main data pertinent for the API request.

            - **method**: The HTTP method for the request is "GET". It is used to request data from a specified resource. Here, it seeks data from the provided URL.

            - **url**: This is the resource locator for the "Payout - Stripe - Get" API. The exact endpoint is at "http://localhost:3000/api/payment/payout/get/". There are also query parameters toward the end of the URL that specify the (`payoutId`, `provider`, `accountId`, `sessionId`). Each of these parameters is described below:

                - **payoutId**: This is the unique id provided by Stripe for a particular payout. Replace it with the Stripe payout id of the payout you are querying.

                - **provider**: This identifies the payment gateway used. In this case, it would always be 'stripe'.

                - **accountId**: This is the account identifier in your system. Replace it with the unique id of the account you are interested in.

                - **sessionId**: This is an identifier for the session in which the payout operation was carried out. Replace it with the relevant session id.
            
            - **headers**: This is an array where you can define request headers if needed. Currently, it's empty, meaning no specific headers are required for this API endpoint.
      parameters:
        - name: payoutId
          in: query
          schema:
            type: string
          example: stripePayoutId
        - name: provider
          in: query
          schema:
            type: string
          example: stripe
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/product/create:
    post:
      tags:
        - PaymentProduct
      summary: Product - Zelle - Create
      description: |-
        This endpoint is labeled "Product - Zelle - Create", signifying that its main function is to create a new product under the payment service, Zelle. It uses the POST method to send data to the specified URL "http://localhost:3000/api/payment/product/create".

        The endpoint accepts a JSON object as its body. The details of the body content are as follows:

        - `accountId`: This is a unique identifier for the account that you wish to associate with the new product. It should be passed as a string.

        - `sessionId`: This also needs to be a unique identifier that represents the user's current session. It's again a string.

        - `source`: The original source where this product data is coming from. It can be supplied as a string or null if not available.

        - `isSaveProduct`: A boolean indicating whether or not you want to save this product after creation. If this value is true, the created product will be saved to the account. If false, the product will not be saved.

        - `isPrimary`: Another boolean flag that tells us whether this product should be set as the primary product for the given account. True would mean it is considered a primary product and false would mean it is not.

        - `provider`: This signifies the provider of the product. In this case, it is to be set as "zelle".

        Remember, there's no specific headers required for this endpoint, however it is case sensitive, so be sure to use the exact same cases as detailed above.

        The endpoint also contains an options object that includes a language field which is set to "json". This ensures that the raw body is treated and processed as a JSON object when received.

        Overall, use this endpoint when you need to create a new product tied with a Zelle payment system, that you can specify as primary or non-primary and can choose to be saved for future use or discarded after creation.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                source: null
                isSaveProduct: true
                isPrimary: false
                provider: zelle
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/product/update:
    put:
      tags:
        - PaymentProduct
      summary: Product - Zelle - Update
      description: |-
        This endpoint is designed for the specific purpose of updating a product. The product in question is related to Zelle, a digital payment service. The key details about the data in this endpoint are as follows:

        1. `name`: This refers to the title of this particular endpoint action, which is 'Product - Zelle - Update'. The endpoint is used to update information about a product connected to the Zelle service.

        2. `request`: Under this field, information regarding the specific API request is given 
           - `method`: The request type indicated here is 'PUT'. This means the request will be used to update an existing resource on the server.
           - `url`: This is the URL to which the API request is sent. In this case, 'http://localhost:3000/api/payment/product/update'.

        3. `headers`: The empty array indicates there are no additional headers provided for the API request.

        4. `body`: This contains information that will be sent to the server. 
           - `mode`: The data transmission format is 'raw'.
           - `raw`: This field contains the payload or the actual data that is being sent in the request.
             - `accountId`: This uniquely identifies the account associated with the product.
             - `sessionId`: This identifies the specific session.
             - `productId`: This would be the unique identifier for the product that will be updated.
             - `source`: This is currently set to null, indicating no source information is provided.
             - `isSaveProduct`: This is a boolean indicator for whether the product should be saved. A value of 'true' indicates the product will be saved.
             - `isPrimary`: Another boolean field indicating if the product is the primary one. 'true' value means it is a primary product.
             - `provider`: This is set as 'zelle', indicating that the provider of the service is Zelle.
           - `options`: It indicates any specific preferences for the request. In this case, it specifies that the payload mentioned in the raw field will be in the JSON language. 

        Overall, this endpoint facilitates an update action on a product related to the Zelle service. If more details can be provided about the original nature of the product, better documentation can be provided regarding how this endpoint will specifically affect it.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                productId: productId
                source: null
                isSaveProduct: true
                isPrimary: true
                provider: zelle
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/product/get:
    get:
      tags:
        - PaymentProduct
      summary: Product - Stripe - Get
      description: |-
        This endpoint is named "Product - Stripe - Get". It is designed to retrieve the details of a specific product using the Stripe payment API.

        The endpoint follows the 'GET' HTTP request method, which is used to retrieve data from a specified resource.

        The 'url' points to where the API is hosted. In this case, it's hosted on the local machine at the port 3000. It consists of various query parameters - productId, provider, accountId, and sessionId. 

        The 'productId' is specific to each product and is used to identify which product's details need to be fetched from the server. The 'provider' query parameter should be set as 'Stripe' to specify that Stripe is the payment provider. The 'accountId' is the unique identifier provided by Stripe to identify an account. Finally, the 'sessionId,' which represents the session in which the user is currently in.

        Though there is an empty 'headers' array, this can be used to include additional HTTP headers if required in the future. These can be used to provide additional information about the request or about the client itself. 

        This API doesn't require a request body since it's using the 'GET' method. All data are placed in the URL as query parameters.
      parameters:
        - name: productId
          in: query
          schema:
            type: string
          example: productId
        - name: provider
          in: query
          schema:
            type: string
          example: stripe
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/product/getAll:
    get:
      tags:
        - PaymentProduct
      summary: Product - Stripe - Get All
      description: |-
        This endpoint is labeled "Product - Stripe - Get All". It represents an API service for accessing a list of all products in Stripe, a popular online payment processing platform.

        - Name: The 'name' field indicates the name of the endpoint. In this case, "Product - Stripe - Get All" suggests that this endpoint is used for retrieving all product data from Stripe.

        - Request: This object contains data about the HTTP request that this endpoint makes.

          - Method: This is a 'GET' request, which means that it's used to retrieve data from a specific resource. The 'GET' request is one of the most common HTTP methods and is typically used for querying data from a server.

          - URL: This is the URL that the request is being sent to. The 'http://localhost:3000/api/payment/product/getAll/' suggests that this request is sent to a local server to retrieve all stripe product data. It's important to note that this URL contains query parameters (`?provider=stripe&accountId=accountId&sessionId=sessionId`). These parameters form a part of the URL which is sent to the server to specify certain data.
            - 'provider=stripe': This parameter indicates that the selected payment provider is Stripe.
            - 'accountId=accountId': This parameter should be replaced with the unique identifier for the Stripe account from which you want to retrieve product data.
            - 'sessionId=sessionId': This parameter signifies an active session. Replace this with your active session ID.

        - Headers: The 'headers' field is currently empty, indicating that there are no additional headers included in this HTTP request. Headers are typically used to provide additional metadata about the request. Depending on the API that is being interacted with, this might include authorizations or specific content types.
          
        Please ensure to replace 'accountId' and 'sessionId' query parameters with your unique account and session details before making the request.
      parameters:
        - name: provider
          in: query
          schema:
            type: string
          example: stripe
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/product/delete:
    post:
      tags:
        - PaymentProduct
      summary: Product - Zelle - Delete
      description: |-
        This endpoint is named "Product - Zelle - Delete". It is set up for a `POST` request, which typically implies data submission or an action involving manipulation or deletion of data.

        The URL for this request is `http://localhost:3000/api/payment/product/delete`. It suggests that this endpoint could be used to delete a product from a payment collection stored locally (localhost:3000) via the API route `/api/payment/product/delete`.

        There are no specific headers set for this request, which might suggest there's are no restrictions related to language, origin, authorization etc, unless, they're already handled in some different way.

        The request body is configured in `raw` mode. It consists of a JSON object that is expected to contain four properties:

        1. `accountId` : This is likely to be a unique identifier for a user account within your system. You should replace "accountId" with the actual ID of the account.

        2. `sessionId`: It seems like an identifier for the current session. It could be used for verifying that the user session is valid. Replace "sessionId" with the actual session ID.

        3. `productId`: This appears to be a unique identifier for the product that is intended to be deleted. Replace "productId" with the actual product ID.

        4. `provider`: This is set as "zelle". It indicates that the payment provider for the product is Zelle.

        Lastly, under options, you have `raw` which is set to a `language` of `json`. It signifies that the API expects the request payload raw data to be in JSON format. Make sure to send request body content as JSON. 

        In summary, this "Product - Zelle - Delete" endpoint takes a JSON object with four properties (accountId, sessionId, productId, provider) as a body payload and is likley to delete a specific product under an account.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                productId: productId
                provider: zelle
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/product/get/productId:
    get:
      tags:
        - PaymentProduct
      summary: Product - Zelle - Get
      description: |-
        This endpoint is titled "Product - Zelle - Get". It is designed to retrieve information about a specific product from the Zelle payment interface. The information retrieved is based on the unique identifier of the product.

        The request involves three properties:

        - Method: This is a GET request. This is a type of HTTP method used to retrieve data from a server.

        - URL: This is the specific location where the request is sent. It is "http://localhost:3000/api/payment/product/get/productId"

        There are three important parameters within the URL which need to be substituted with actual values:

        1. "productId": This refers to a unique identifier of a product in the Zelle interface. Replace 'productId' with the actual identifier of the product you intend to access.

        2. "provider": This refers to the provider of the payment service, in this case, it is 'zelle'. It is already filled hence doesn't need to be substituted.

        3. "accountId": This is the specific account related to the payment product. Replace 'accountId' with the actual account ID.

        4. "sessionId": This is the session during which the request is made. Replace 'sessionId' with the actual session ID.

        - Headers: This refers to the metadata sent with the API request. As depicted, no specific headers are attached with the request. Therefore, no specific data is required here. However, different API requests may require different headers.

        Please remember to replace these placeholders (i.e. productId, accountId, sessionId) with your actual values when using this endpoint.
      parameters:
        - name: provider
          in: query
          schema:
            type: string
          example: zelle
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/product/getAll/productId:
    get:
      tags:
        - PaymentProduct
      summary: Product - Zelle - Get All
      description: |-
        - "name": This field represents the name of the endpoint. The given endpoint is named "Product - Zelle - Get All". This is helpful in distinguishing among various endpoints in your API collection. In this case, it refers to an endpoint to retrieve all products related to Zelle.

        - "request": This field is a container that holds the details of the request that is to be made. It includes the method type, URL, and headers.
          - "method": This field specifies the HTTP method used when making the request to the API. In this case, the method is "GET", which means this request will retrieve (or 'get') data from a specified resource.
         
          - "url": This field includes the URL to which the request needs to be sent. In this context, 'http://localhost:3000/api/payment/product/getAll/productId' is the API's URL. It also contains some query parameters:
            - "provider": A query parameter used to filter the products by providers. In this case, it is equal to 'zelle' which means that we are filtering all products provided by Zelle.
            - "accountId": It stands for the unique identifier of the account. The value of this field while making the request will correspond to the specific account whose related product data is being requested.
            - "sessionId": It represents unique session identifier which is generally used fortracking a user's session.

        - "headers": This field is a list where you can specify additional HTTP headers that should be sent in the request. Currently, it's empty, meaning that no additional headers are included with the request. Different kinds of data like authorization tokens, content type, and others can be passed through headers depending on the requirements.
      parameters:
        - name: provider
          in: query
          schema:
            type: string
          example: zelle
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/recurring/update:
    put:
      tags:
        - PaymentRecurring
      summary: Recurring - Zelle - Update
      description: |-
        1. `name`: This is the name of the API Endpoint and it is labelled as "Recurring - Zelle - Update".

        2. `request`: This field describes the entire HTTP request details.

           - `method`: This indicates the HTTP method or verb that is being used for this request, which in this case is "PUT". It is used to update an existing resource.
           
           - `url`: The URL field contains the endpoint where the request is being sent: "http://localhost:3000/api/payment/recurring/update".

           - `headers`: This field is for any meta-data associated with the API request. It's currently empty, meaning no additional data is being sent with the request.

           - `body`: This includes the content or the data of the request.
                
              - `mode`: The mode field indicates that the data format is "raw".
                
              - `raw`: Contains the actual data being sent in the request. 
                  
                 - `accountId`: This is the account identification in string format to update the payment detail.
                    
                 - `sessionId`: Session ID in string format representing the user session during which the update is being made.
                    
                 - `recurringId`: Identification of recurring payment which is to be updated.
                    
                 - `source`: The source of the payment. Currently set to null implying no specific source is assigned.
                    
                 - `isSaveRecurring`: Boolean field that checks whether the recurring payment needs to be saved or not. It's currently set to true, meaning the recurring payment needs to be saved.
                    
                 - `isPrimary`: Indicates if the recurring payment is the primary payment mode. It's currently set to true, meaning it is set as the primary payment mode.
                
                 - `provider`:  Specifies the payment provider. Here it is mentioned as "zelle", which represents Zelle payment.
                
              - `options`: This defines the options of raw data.
                  
                 - `raw`: This field allows for custom raw data options.
                      
                    - `language`: The language field indicates that the data format used is "json".
           
        The endpoint described is used to update existing recurring payments through Zelle. The account information, session details, and recurring payment details would be needed as input.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                recurringId: recurringId
                source: null
                isSaveRecurring: true
                isPrimary: true
                provider: zelle
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/recurring/get:
    get:
      tags:
        - PaymentRecurring
      summary: Recurring - NowPayments - Get
      description: |
        This endpoint is a GET request that is responsible for retrieving recurring payment information from a given payment provider called "NowPayments". 

        The detailed breakdown of each data is as follows:

        1. "name": Specifies the name of the API endpoint. In this case, the name "Recurring - NowPayments - Get" indicates that this endpoint is used to get recurring payment details from "NowPayments".

        2. "request": This is a container for the details about the API request.
           - "method": This API uses the GET method, which retrieves, or gets, data from a server.
           
        3. "url": The URL points to where the request will be sent. This specific URL("http://localhost:3000/api/payment/recurring/get/") is structured to be sent to your local server at port 3000. It also points to the route for getting recurring payment details.

           The URL contains the following query parameters:
           - "recurringId": The ID associated with the recurring payment to be retrieved. This must be provided for the endpoint to function correctly.
           - "provider": The provider parameter is set to "nowpayments", specifying that NowPayments is the provider for the recurring payment. 
           - "accountId": This is the user's account ID tied to the recurring payment.
           - "sessionId": This refers to the session ID that ties the API call to a specific active session.
           
        4. "headers": This is an empty array in this instance. If there were data present, headers might include additional specifications or instructions for the API request. For example, content type or authorization details could be specified here. However, since it is empty, no additional specifics are given with this API request.
      parameters:
        - name: recurringId
          in: query
          schema:
            type: string
          example: recurringId
        - name: provider
          in: query
          schema:
            type: string
          example: nowpayments
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/recurring/delete:
    post:
      tags:
        - PaymentRecurring
      summary: Recurring - Zelle - Delete
      description: |-
        This endpoint is named "Recurring - Zelle - Delete". It is designed to delete a recurring Zelle payment in the database. It is a 'POST' request which sends data to the specified URL.

        The URL for this particular request is "http://localhost:3000/api/payment/recurring/delete". Essentially, it implies that we are working with a payment API on a local server and specifically dealing with recurring payments deletion.

        The request doesn't include any headers. Headers in API requests define the operating parameters of an HTTP transaction.

        Thereafter, we have the body of the request. This is where the details about the recurring payment that should be deleted are defined:

        - 'Mode' indicates the data formatted expected by the endpoint. For this endpoint, the data should come in 'raw', unprocessed form.

        - 'Raw' holds the payload data being sent to the API. In this case, it has four fields in JSON format:

          - 'accountId': This is assumed to be the unique identifier of the account from which the recurring payment is set up.
          
          - 'sessionId': This is likely a unique identifier for the session in which the delete request is made. It could be used for maintaining session state and tracking.

          - 'recurringId': This is most likely the unique identifier for the recurring payment that is to be deleted.

          - 'provider': As the name suggests, this field specifies who is the service provider of the payment system. It is set to 'Zelle' for this request.
          
        - 'Options: Raw:Language' indicates the language used to display the raw payload data mentioned above, which is JSON in this case.

        Please ensure to replace the 'accountId', 'sessionId', and 'recurringId' with actual values while making a request to the API.

        This endpoint needs adequate permissions for handling delete operations for recurring payments.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                recurringId: recurringId
                provider: zelle
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/recurring/create:
    post:
      tags:
        - PaymentRecurring
      summary: Recurring - Zelle - Create
      description: |-
        This endpoint is named "Recurring - Zelle - Create" it is called via a POST method. It's used to create a new recurring payment with the Zelle service.

        URL: The endpoint URL is [http://localhost:3000/api/payment/recurring/create]. This URL is structured specifically for the testing environment with the localhost address and is likely to change in production.

        Headers: The request does not require any specific headers. 

        Body: The request body should be a JSON object containing several properties:

        1. `accountId`: This is a required field. It should be a string that provides the account ID associated with the user. The user's transactions will be performed in reference to this account ID.

        2. `sessionId`: This is another required field. It should be a string that provides the unique session ID. This is presumably used for tracking individual sessions to verify the user's state and track activities.

        3. `source`: This field can be set to null. If necessary, it could include more information about the transaction or user.

        4. `isSaveRecurring`: This field should be a boolean. If set to true, it indicates that the transaction is a recurring one and should be saved for potential future recurring transactions.

        5. `isPrimary`: This field should be a boolean. If set to true, it will set the transaction as a primary transaction for the user's account.

        6. `provider`: This field should be a string indicating the payment provider. In this case, the provider is "zelle". This is essential in determining how the transaction will be processed, according to the payment provider.

        Options: The options field provides additional settings for the body field. Here, it's set to "language": "json" indicating that the body field should be parsed as JSON.

        Overall, this endpoint helps to facilitate recurring payments with Zelle, an online payment method, making it easier to handle automated transactions.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                source: null
                isSaveRecurring: true
                isPrimary: false
                provider: zelle
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/recurring/getAll:
    get:
      tags:
        - PaymentRecurring
      summary: Recurring - NowPayments - Get All
      description: |-
        This API endpoint is named "Recurring - NowPayments - Get All". It utilizes a GET HTTP method to retrieve all recurring payment details related to the NowPayments provider from the server.

        Below is a detailed explanation of each data member:

        - "name": This is the name of the endpoint, "Recurring - NowPayments - Get All", it is used to identify this specific endpoint among others.

        - "request": This section outlines the request that will be sent to the server. 

        - "method": this is the HTTP method being used for the request, "GET". GET is a request method that is used to request data from a resource. 

        - "url": this is the URL where the request will be sent. For this endpoint, the URL is "http://localhost:3000/api/payment/recurring/getAll/". 

        - "?provider=nowpayments&accountId=accountId&sessionId=sessionId": In the URL, "?" indicates the start of the query string and "&" is used to separate different query parameters. "provider", "accountId" and "sessionId" are query parameters that filter the data based on the user preferences. "provider" is set to "nowpayments" showing that NowPayments is the payment provider. "accountId" and "sessionId" are identifiers for user's account and session, respectively. Note: Change 'accountId' and 'sessionId' values to actual account ID and session ID while making the request.

        - "headers": Headers allow the client and the server to pass additional information with the request or the response. For this endpoint, the "headers" array is empty, indicating that there are no additional headers in the request. 

        This endpoint does not carry any payload, it does not include a request body as it is a GET call. Any necessary information is passed as a part of the URL parameters.
      parameters:
        - name: provider
          in: query
          schema:
            type: string
          example: nowpayments
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/recurring/get/recurringId:
    get:
      tags:
        - PaymentRecurring
      summary: Recurring - Zelle - Get
      description: |-
        This endpoint is named "Recurring - Zelle - Get". It's designed to retrieve information about recurring payments processed through the Zelle payment service.

        1. Request Method:
        The request method is "GET". This HTTP verb is typically used to retrieve data from a specific resource. 

        2. URL:
        The URL is "http://localhost:3000/api/payment/recurring/get/recurringId". It provides the path to the API that we'll be interacting with. This URL is designed to fetch recurring payment information from a Zelle payment service.

        3. Query Parameters:

        - provider: This query parameter is used to specify the payment provider. In this case, it is set to "zelle".

        - accountId: This is a query parameter used to pass the unique identifier of the account for which you want to fetch the recurring payment details. You will need to replace 'accountId' with the actual account ID.
         
        - sessionId: This is a query parameter that represents the session ID. It's used to maintain session state in the application. Replace 'sessionId' with your actual session ID.

        4. Headers: 
        There are no specified headers in this request. Headers are often used to provide additional instructions to the server such as auth tokens or specific content-types required by the server. If needed, they would be included here.

        When you make a request to this endpoint with the appropriate parameters, it will return the details about recurring payments made through Zelle for the specified account and session.
      parameters:
        - name: provider
          in: query
          schema:
            type: string
          example: zelle
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/payment/recurring/getAll/recurringId:
    get:
      tags:
        - PaymentRecurring
      summary: Recurring - Zelle - Get All
      description: |-
        This endpoint is named "Recurring - Zelle - Get All". It is used to retrieve all the recurring transactions happening through the Zelle service.

        Method: `GET`

        URL: `http://localhost:3000/api/payment/recurring/getAll/recurringId?provider=zelle&accountId=accountId&sessionId=sessionId`

        Description of Each Data:

        1. `http://localhost:3000/api/payment/recurring/getAll/recurringId` - This is the base URL which the application will hit to retrieve the recurring Zelle transactions.

        2. `provider=zelle` - This is a query parameter denoting the service provider "Zelle". This parameter is mandatory and needs to be included in the endpoint.

        3. `accountId` - This is another query parameter which indicates the account ID of the client using the service. Replace `accountId` in the URL with the actual account ID when making a request.

        4. `sessionId` - This is a further query parameter indicating the session of the client on the website. Replace `sessionId` in the URL with the actual session ID when making a request.

        This endpoint does not require any headers to be passed along with the request. It is also to be noted that the method of request is "GET", which indicates data is being retrieved or fetched from the server.
      parameters:
        - name: provider
          in: query
          schema:
            type: string
          example: zelle
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/channel/create:
    post:
      tags:
        - ReportsChannel
      summary: Reports - Channel - Create
      description: |-
        This endpoint is named "Reports - Channel - Create" and its main function is to create a new channel within a reporting system.

        1. **Authentication** - This endpoint uses bearer token authentication. This means that you will need to pass the bearer token in the headers of the request. The placeholder for this is "BearerToken". Remember to replace this placeholder with a valid token.

        2. **Request Method** - The request method for this endpoint is POST, implying that this API will be used to send data to the server to create a new resource.

        3. **URL** - The URL to which the request is to be sent is "http://localhost:3000/api/reports/channel/create". This endpoint is located on a local server, specifically on port 3000.

        4. **Headers** - An empty default header structure is included in the endpoint description. Unless there are specific headers that need to be included, you will not need to use these.

        5. **Body** - The body of the request includes all the data required to create a new channel. This data should be sent in raw format in the body of the request and is formatted in JSON language. It contains a number of fields, each of which is described below:
            - `sessionId` - The identifier for the session. Replace "sessionId" with the actual value.
            - `accountId` - The identifier for the account. Replace "accountId" with the actual value.
            - `name` - The name of the channel.
            - `description` - A description of the channel.
            - `tags` - Associated tags for the channel, separated by commas.
            - `profilePhotoUrl` - The URL of the profile photo for the channel.
            - `coverPhotoUrl` - The URL of the cover photo for the channel.
            - `minimumTipAmount` - The minimum amount for tips on the channel.
            - `categoryId` & `category` - The identifier and name of the category to which the channel belongs.
            - `subCategoryId` & `subCategory` - The identifier and name of the sub-category to which the channel belongs.
            - `isChannelPrivate` - A Boolean flag indicating whether the channel is private.
            - `isTournamentOnly` - A Boolean flag indicating whether the channel is for tournaments only.
            - `isChannelDefault` - A Boolean flag indicating whether the channel is the default channel.
            - `isPreLiveReportsAds` & `isPostLiveReportsAds` - Boolean flags indicating whether the channel enables pre-live reports ads and post-live reports ads respectively.
            - `breakPreLiveReportsUrl` & `breakPostLiveReportsUrl` - The URLs of the break pre-live report and break post-live report respectively.

        Please ensure all the JSON keys and corresponding values are properly filled out according to your requirements.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Channel
                description: This channel is my second channel
                tags: second,channel
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isChannelPrivate: true
                isTournamentOnly: false
                isChannelDefault: true
                isPreLiveReportsAds: true
                isPostLiveReportsAds: true
                breakPreLiveReportsUrl: https://example.com/break-pre-live.mp4
                breakPostLiveReportsUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/channel/update:
    put:
      tags:
        - ReportsChannel
      summary: Reports - Channel - Update
      description: |-
        This endpoint is called "Reports - Channel - Update". You can use it to update an existing report channel using a "PUT" request. 

        In the request, there are several parts that you need to carefully fill out:

        - "auth": This part requires a bearer token for authorization. It is used to verify your identity, based on the "token" provided in the key-value pair. Type should be set as "string".

        - "url": This is the URL where you will be making the request. This needs to point to the server where the API is hosted.

        - "headers": This contains a "Client-UUID" key. The UUID is a unique identifier issued for each client.

        In the body of the request, you'll provide the details of the report channel that you wish to update:

        - "channelId": Unique identifier for the channel.

        - "sessionId": Unique session identifier.

        - "accountId": Unique account identifier.

        - "name": Updated name for the channel.

        - "description": Provides a detailed explanation about the channel.

        - "tags": Keywords associated with the channel.

        - "profilePhotoUrl": URL link to the profile photo.

        - "coverPhotoUrl": URL link to the cover photo.

        - "minimumTipAmount": Minimum tip amount allowed in the channel.

        - "categoryId" and "category": Unique identifier and name for the channel's main category.

        - "subCategoryId" and "subCategory": Unique identifier and name for the channel's subcategory.

        "IsChannelPrivate" This is a boolean flag to indicate if the channel is private or not.

        - "isTournamentOnly": Boolean flag to indicate whether the channel is only for tournaments.

        - "isChannelDefault": Boolean flag indicating whether the channel is the default one.

        - "isPreLiveReportsAds" and "isPostLiveReportsAds": Boolean flags that if true, indicate that ads should play before and after live reports.

        - "breakPreLiveReportsUrl" and "breakPostLiveReportsUrl": URLs for the break pre-live and post-live reports.

        Please make sure to replace all placeholder values with actual data.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"channelId\":\"channelId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Channel 2.0\",\"description\":\"This channel is my second channel\",\"tags\":\"second,channel\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isChannelPrivate\":true,\"isTournamentOnly\":false,\"isChannelDefault\":true,\"isPreLiveReportsAds\":true,\"isPostLiveReportsAds\":true,\"breakPreLiveReportsUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveReportsUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/channel/get:
    get:
      tags:
        - ReportsChannel
      summary: Reports - Channel - Get
      description: |-
        Here is the detailed description of each component in the provided data:

        1. `name`: This represents the label or description of the API call. In this case, the name is "Reports - Channel - Get", which suggests this API call is related to getting reports for a particular channel.

        2. `request`: This object encapsulates the details about an API request.
           
           a. `auth`: This object contains details related to authentication.
             
              i. `type`: Here "bearer" specifies the type of authentication which is based on Bearer Authentication (token-based) method.
                 
              ii. `bearer`: This array contains information about the bearer token. 

                 `key`: This represents the name of the token. Here, the key is "token". 

                 `value`: The actual bearer token value. Here, it's represented as "BearerToken".

                 `type`: The data type of value. In this case, it's a "string".

           b. `method`: This string indicates the HTTP method used for the API request. Here it is "GET", which means this API request is used to retrieve data.
           
           c. `url`: This string represents the endpoint URL where the API request should be sent. It also includes various parameters like `channelId`, `sessionId`, and `accountId`.

           d. `headers`: This is an array of objects containing key-value pairs for the HTTP headers to be included in the request. Here, the key and value are both empty, and it is disabled, suggesting this header doesn't affect the API request.

           e. `body`: This object contains details about the request's body.

              i. `mode`: Here, the mode is "raw". It means the request body is sent as it is and isn't processed in any way.

              ii. `raw`: This key would normally contain the raw request data. Here, it is empty indicating that there is no data to be sent in the request body.
           
        This endpoint essentially fetches reports for a specific channel identified by the channelId, sessionId, and accountId parameters, using a bearer token for authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: channelId
          in: query
          schema:
            type: string
          example: channelId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/channel/all:
    get:
      tags:
        - ReportsChannel
      summary: Reports - Channel - Get All
      description: |-
        1. "name": This field indicates the name or title of the endpoint. In this case, the name "Reports - Channel - Get All" suggests that this endpoint is used to get all channel reports.

        2. "request": This field contains all the information required to make a particular API request.

        3. "auth": This field specifies the type of authorization needed to access this API endpoint. It is of type "bearer," indicating that a bearer token must be provided. 

            i. "type": Specifies the authorization type as "bearer".
            
            ii. "bearer": Contains the key-value pair for bearer token.

               a. "key": The key is set to "token" indicating that this value represents the bearer token.
               
               b. "value": It is set to "Bearer Token" where the actual token will be pasted. 

               c. "type": Specifies the data type of the value, which is "string" in this case.

        4. "method": Specifies the HTTP method used for the API request. In this case, the "GET" method indicates that it is retrieving data from the server.

        5. "url": This field holds the address of the API endpoint. The query parameters "sessionId" and "accountId" are appended to this URL and their values need to be provided as part of the request.

        6. "headers": Headers allow the client to pass additional information about the request or about itself to the server. In this case, no headers are required as the "key" and "value" fields are empty and this header is disabled.

        7. "body": This field represents the data that is sent to the API endpoint. The "mode" is set to "raw", indicating that the request body is sent as it is entered. No specific data ("raw": "") is needed in the body for this endpoint as it's a GET request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/channel/delete:
    post:
      tags:
        - ReportsChannel
      summary: Reports - Channel - Delete
      description: |-
        - **name**: This field signifies the name of the API endpoint. In this case, the name is "Reports - Channel - Delete" indicating that this API is to delete a report of a specific channel.

        - **request**: This is the main part of the API. It includes all the details required to make an API call.

        - **auth**: This part details the authentication method of the API call. The API uses Bearer authentication. 

            - **type**: It denotes the type of authentication being used. Here, "bearer" is used. 

            - **bearer**: This is an array that contains an object, specifying the "key" as "token", "value" as "sessionId", and "type" as "string" denoting the type of value.

        - **method**: This signifies the HTTP method used for the API call. Since this is "POST", it means that this API call is used to send data to the server.

        - **url**: This is the URL endpoint that will be hit when this API call is made. The URL includes the base URL (http://localhost:3000) as well as the specific endpoint (/api/reports/channel/delete).

        - **headers**: This is an array that can include various headers needed for the API call. As the key and value fields are empty and disabled here, no additional HTTP headers are set in this request.

        - **body**: This section holds the data to be sent along with the "POST" request. It can be in different modes like "formdata", "urlencoded", "raw", etc. Here, "raw" mode is used and JSON data is sent.

            - **mode**: It indicates how the API call will be sent. Here, it is set to "raw", meaning the body of the request will contain raw data.

            - **raw**: This part holds the actual data string to be sent with the API call. It is set to contain JSON string with keys as "sessionId", "accountId", "channelId" and their respective values.

        Note: The values of "sessionId", "accountId" and "channelId" in the "raw" field need to be replaced with actual session ID, account ID, and channel ID to make a successful API call.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"channelId\":\"channelId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/earning/create:
    post:
      tags:
        - ReportsEarning
      summary: Reports - Earning - Create
      description: |-
        This endpoint is called "Reports - Earning - Create". It is used to create a new earning report. This is a POST method API call.

        For authorization, it uses bearer token authentication. You have to provide a Bearer token in the 'token' key. The value for the key in this case is 'BearerToken' and the type of value is a 'string'.

        The URL for this API call is "http://localhost:3000/api/reports/earning/create". The base URL (http://localhost:3000) may vary depending on where your server is actually located.

        This API call doesn't require any headers, as indicated by the blank 'key' and 'value' fields in the 'headers' section.

        In the body of the request, you must provide the following data in raw JSON format:

        - "sessionId": This is the unique identifier of the session.
        - "accountId": This is the unique identifier of the account.
        - "name": This is the name of the earning, in this case it is 'My Second Earning'.
        - "description": This is the description of the earning.
        - "tags": These are the associated tags for the earning.
        - "profilePhotoUrl" and "coverPhotoUrl": These are the URLs of the profile and cover photos respectively.
        - "minimumTipAmount": This is the minimum tip amount.
        - "categoryId" and "subCategoryId": These are the identifiers for the category and subcategory respectively.
        - "category" and "subCategory": These are the names of the category and subcategory.
        - "isEarningPrivate": This is a boolean value specifying whether the earning is private or not.
        - "isTournamentOnly": This is a boolean value specifying whether the report is only for tournaments.
        - "isEarningDefault": This is a boolean value specifying whether this is a default earning.
        - "isPreLiveReportsAds" and "isPostLiveReportsAds": These boolean values specify whether there are pre-live and post-live ads respectively.
        - "breakPreLiveReportsUrl" and "breakPostLiveReportsUrl": These are URLs where pre-live and post-live reports can be accessed respectively. 

        The language to be used for the raw data is JSON.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Earning
                description: This earning is my second earning
                tags: second,earning
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isEarningPrivate: true
                isTournamentOnly: false
                isEarningDefault: true
                isPreLiveReportsAds: true
                isPostLiveReportsAds: true
                breakPreLiveReportsUrl: https://example.com/break-pre-live.mp4
                breakPostLiveReportsUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/earning/update:
    put:
      tags:
        - ReportsEarning
      summary: Reports - Earning - Update
      description: |-
        This endpoint is named "Reports - Earning - Update". It uses the PUT HTTP method to update an existing earning report. The URL for this endpoint is "http://localhost:3000/api/reports/earning/update".

        This endpoint requires bearer token authentication. You must provide a valid bearer token in the 'auth' field which contains the key named 'token', and the value field should contain the actual bearer token.

        There is a header key that must be included named "Client-UUID". Its value should be the Unique Identifier (UUID) of the client making the request.

        The main body of the request must be in raw JSON format and contains the following properties:

        1. "earningId": The unique identifier of the earning report to be updated.
        2. "sessionId": The identifier for the session linked with this earning.
        3. "accountId": The account identifier linked to this earning.
        4. "name": The updated name of the earning. 
        5. "description": The updated description of the earning.
        6. "tags": The updated set of tags for the earning, separated by commas.
        7. "profilePhotoUrl": The updated URL of the profile photo.
        8. "coverPhotoUrl": The updated URL of the cover photo.
        9. "minimumTipAmount": The updated minimum tip amount for this earning.
        10. "categoryId": The identifier of the updated category this earning belongs to.
        11. "category": The updated category name this earning belongs to.
        12. "subCategoryId": The identifier of the updated sub-category this earning belongs to.
        13. "subCategory": The updated sub-category name this earning belongs to.
        14. "isEarningPrivate": A boolean value indicating if this earning is private.
        15. "isTournamentOnly": A boolean value indicating if this earning is applicable only to tournaments.
        16. "isEarningDefault": A boolean value indicating if this earning is set as default.
        17. "isPreLiveReportsAds": A boolean value to decide whether to show pre-live report ads.
        18. "isPostLiveReportsAds": A boolean value to decide whether to show ads after publishing the live report.
        19. "breakPreLiveReportsUrl": URL of the ad to be displayed before publishing the live report.
        20. "breakPostLiveReportsUrl": URL of the ad to be displayed after publishing the live report. 

        Json body needs to be properly formatted with these correct data keys and values.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"earningId\":\"earningId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Earning 2.0\",\"description\":\"This earning is my second earning\",\"tags\":\"second,earning\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isEarningPrivate\":true,\"isTournamentOnly\":false,\"isEarningDefault\":true,\"isPreLiveReportsAds\":true,\"isPostLiveReportsAds\":true,\"breakPreLiveReportsUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveReportsUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/earning/get:
    get:
      tags:
        - ReportsEarning
      summary: Reports - Earning - Get
      description: |-
        This endpoint is titled "Reports - Earning - Get". It performs a GET request which is commonly used to retrieve information from a specific resource.

        The request is authenticated using Bearer authentication, which is often used for API tokens. The key for auth is 'token' and its value is 'BearerToken', with the data type being a string.

        The API's base URL for this request is "http://localhost:3000/api/reports/earning/get/". Upon it, there are three parameters:

        1. 'earningId': An identifier for the specific earnings report you're trying to retrieve.
        2. 'sessionId': This could be an identifier for the current session or user that is making the request.
        3. 'accountId': It is probably an identifier for the user or system that owns this particular earnings report.

        In terms of headers, currently, none are set for this request; the fields are left empty and it's set as 'disabled' which means this header won't affect the request.

        Lastly, it shows that the 'body' of the request is in the 'raw' mode, but it's not sending any data as the 'raw' field is empty. In other words, no data is being sent in the body of this API request.
      security:
        - bearerAuth: []
      parameters:
        - name: earningId
          in: query
          schema:
            type: string
          example: earningId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/earning/all:
    get:
      tags:
        - ReportsEarning
      summary: Reports - Earning - Get All
      description: |-
        This endpoint is labelled "Reports - Earning - Get All". It is designed to generate a report of all earnings. Here's a breakdown of the different data elements in this endpoint:

        1. **auth**: The endpoint uses a Bearer token for authorization. This means you need to provide a specific token in the request header to access this API endpoint. The Bearer token is of the type 'string' and named "token".

        2. **method**: The HTTP method used for this API request is GET. This means the API will retrieve data based on the given request.

        3. **url**: This is the URL where the request will be sent. It is http://localhost:3000/api/reports/earning/all/. Two query parameters are included: `sessionId` and `accountId`. You need to replace 'sessionId' and 'accountId' with actual values representing the session ID and account ID respectively, for the request to work correctly.

        4. **headers**: No specific headers are required for this request. A default empty header is included but it's currently disabled.

        5. **body**: As indicated by 'raw' in 'mode' field, this GET request does not require a body payload to be sent along with the request. It's expected to retrieve data solely based on the URL and parameters provided.

        Remember to replace "BearerToken", "sessionId", and "accountId" with actual values when implementing this API call.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/earning/delete:
    post:
      tags:
        - ReportsEarning
      summary: Reports - Earning - Delete
      description: |-
        **Endpoint Name:**

        Reports - Earning - Delete: An endpoint for deleting earning reports.

        **Request:**

        - Authentication: The API endpoint uses bearer token authentication. Ensure that the bearer token you provide here is a valid session identifier. In the input data, you'll find a `key` titled `token` with a `value` identifier named `sessionId`. The `type` of these data fields is a string.

        - Method: The HTTP request method for this endpoint is POST, used primarily to send data to the server to create/update a resource.

        - URL: The URL to communicate with the API is `http://localhost:3000/api/reports/earning/delete`. This endpoint specifically deals with deleting earning reports.

        - Headers: The headers here include a default `key` and `value` pair which are both empty and disabled, implying that no additional headers are required for this particular API call.

        **Body:**

        This refers to the actual content or data you're sending to the server through your HTTP request, containing the following information:

        - Mode: The mode of the data encapsulated in the body of this request is identified as `raw`. In simple terms, this implies that the data is sent in an unprocessed manner, as a string of text.

        - Raw: The `Raw` field is where the actual data to be sent to the server is embedded. In this case, the raw data is in JSON format and it contains three strings: `sessionId`, `accountId`, and `earningId`. These are all identifiers; `sessionId` pertains to the session in context, `accountId` relates to the user account and `earningId` is the unique identifier for the specific earning report you wish to delete.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"earningId\":\"earningId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/player/create:
    post:
      tags:
        - ReportsPlayer
      summary: Reports - Player - Create
      description: |-
        This endpoint, named `Reports - Player - Create`, is a POST request that requires the "bearer" authentication type. The bearer token for this endpoint must be supplied in the form of a string in the `token` field. The endpoint url is `http://localhost:3000/api/reports/player/create`.

        The following JSON body needs to be passed in the raw format with the JSON language option:

        - `sessionId`: A unique identification string for the session.
        - `accountId`: A unique identification string for the account.
        - `name`: A string field used to provide the name of the second player.
        - `description`: A string field to describe the player. In the current example, the second player is being described.
        - `tags`: A string field for tags related to the player. Multiple tags can be separated with commas.
        - `profilePhotoUrl`: A string field for the URL of the player's profile photo.
        - `coverPhotoUrl`: A string field for the URL of the player's cover photo.
        - `minimumTipAmount`: An integer indicating the least amount of tip the player can receive.
        - `categoryId`: A unique string identifying the category.
        - `category`: A category string, general in application.
        - `subCategoryId`: A unique string identifying the sub-category. 
        - `subCategory`: A string specifying the sub-category, more specific in application.
        - `isPlayerPrivate`: A boolean field which when set to true makes the player private.
        - `isTournamentOnly`: A boolean field indicating if the player is for tournaments only.
        - `isPlayerDefault`: A boolean field indicating if the player is set as the default.
        - `isPreLiveReportsAds`: A boolean field indicating if the ads are to be displayed before live reports.
        - `isPostLiveReportsAds`: A boolean field indicating if the ads are to be displayed after live reports.
        - `breakPreLiveReportsUrl`: A string field for the URL of the pre-live report break video.
        - `breakPostLiveReportsUrl`: A string field for the URL of the post-live report break video.

        All these fields must be enclosed in double-quotes (`"`). Moreover, ensure the fields are separated by commas (`,`). The entire JSON body must be enclosed in curly braces (`{}`). There are currently no custom request headers in the endpoint, hence that part is disabled.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Player
                description: This player is my second player
                tags: second,player
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isPlayerPrivate: true
                isTournamentOnly: false
                isPlayerDefault: true
                isPreLiveReportsAds: true
                isPostLiveReportsAds: true
                breakPreLiveReportsUrl: https://example.com/break-pre-live.mp4
                breakPostLiveReportsUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/player/update:
    put:
      tags:
        - ReportsPlayer
      summary: Reports - Player - Update
      description: |-
        This API endpoint is named "Reports - Player - Update". It's a PUT request, which is used to update existing resources. This endpoint is authenticated through Bearer authentication, which requires a "token" string to be passed in the headers. 

        The request is made to 'http://localhost:3000/api/reports/player/update'. Along with the Bearer token, you also need to provide a "Client-UUID" in the headers, which uniquely identifies each client.

        The body of this request must be in raw JSON format, containing the player report data that needs to be updated. The following parameters are included in the JSON:

        - "playerId": Identifier of the player.
        - "sessionId": Session in which the player is participating.
        - "accountId": Identifier of the player's account.
        - "name": Updated name of the player. 
        - "description": Updated description of the player.
        - "tags": Tags associated with the player, usually for categorization or search purposes. 
        - "profilePhotoUrl": URL of the player's updated profile photo.
        - "coverPhotoUrl": URL of the player's updated cover photo.
        - "minimumTipAmount": The minimum amount for tips applicable to this player.
        - "categoryId": Identifier for player's category.
        - "category": Updated name of the player's category.
        - "subCategoryId": Identifier for player's sub-category.
        - "subCategory": Updated name of the player's sub-category.
        - "isPlayerPrivate": Boolean value showing if the player is private or public.
        - "isTournamentOnly": Boolean value indicating if the player is only for tournaments.
        - "isPlayerDefault": Boolean value indicating if this player is set as the default.
        - "isPreLiveReportsAds": Boolean value indicating whether to show ads before live reports.
        - "isPostLiveReportsAds": Boolean value indicating whether to show ads after live reports.
        - "breakPreLiveReportsUrl": URL at which the pre-live reports break for ads will be available.
        - "breakPostLiveReportsUrl": URL at which the post-live reports break for ads will be available.

        The API will return a response that indicates the success or failure of the operation.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"playerId\":\"playerId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Player 2.0\",\"description\":\"This player is my second player\",\"tags\":\"second,player\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isPlayerPrivate\":true,\"isTournamentOnly\":false,\"isPlayerDefault\":true,\"isPreLiveReportsAds\":true,\"isPostLiveReportsAds\":true,\"breakPreLiveReportsUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveReportsUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/player/get:
    get:
      tags:
        - ReportsPlayer
      summary: Reports - Player - Get
      description: |-
        - **name**: This denotes the name or title of this endpoint, which in this case is 'Reports - Player - Get'. This is usually used for identifying the API endpoint in a collection or documentation.

        - **request.auth**: The 'auth' field represents the type of authorization required to send a request to this endpoint. This endpoint requires Bearer Token authorization. The generated token needs to be passed here as a string.

        - **request.method**: This is the HTTP method used for the request. Since the method here is 'GET', this endpoint corresponds to retrieving data from a server.

        - **request.url**: This is the URL where the request will be sent. It includes the base URL (http://localhost:3000/api/reports/player/get/) and query parameters playerId, sessionId, and accountId to identify the specific player, session, and account.

        - **request.headers**: Headers can contain more information about the request. For this endpoint, no additional headers are required as the 'disabled' value is set to 'true'.

        - **request.body**: Here we define what data to send within the body of the HTTP request. For this 'GET' request, there is no body. The mode is 'raw' which means that if data were to be sent, it would be sent in unprocessed form. For this endpoint, however, no 'raw' data is to be sent. 

        Remember to replace the BearerToken string in the auth field, and playerId, sessionId, accountId in the URL with actual values for a successful request.
      security:
        - bearerAuth: []
      parameters:
        - name: playerId
          in: query
          schema:
            type: string
          example: playerId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/player/all:
    get:
      tags:
        - ReportsPlayer
      summary: Reports - Player - Get All
      description: |-
        This endpoint is named "Reports - Player - Get All". It fetches all reports associated with a player from the server.

        1. `name`: This is the name of the endpoint which is "Reports - Player - Get All". You will use this name to identify this endpoint in your collection.

        2. `request`: This object contains information about the HTTP request that you will be sending.

        3. `auth`: This object has details about the authentication required for the endpoint.
            - `type`: This specifies the authentication type, in this case "bearer", which means you should pass a bearer token for authentication.
            - `bearer`: This field is an array and contains infomation about the bearer token.
                - `key`: The field label or key, in this case "token".
                - `value`: This is where you will substitute with the actual token, labelled here as "BearerToken".
                - `type`: Specifies the type of the key value. Here, it's a "string".

        4. `method`: The HTTP method used for this endpoint is "GET" - this indicates you are retrieving data.

        5. `url`: This is the URL of the endpoint. Parameters such as `sessionId` and `accountId` are query strings. Replace `sessionId` and `accountId` with the actual session ID and account ID respectively when making a request.

        6. `headers`: This is an array of headers. It's empty, meaning no custom headers are needed for this request.

        7. `body`: This object contains details about the body of the request.
            - `mode` : The mode of the body is set to "raw", implying you can send unstructured data. However, since this is a GET request, typically no request body is needed, so "raw" should be empty. 

        That's what each part of this endpoint means. Make sure to replace the placeholders like `BearerToken`, `sessionId`, and `accountId` with actual values when sending a request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/player/delete:
    post:
      tags:
        - ReportsPlayer
      summary: Reports - Player - Delete
      description: |-
        The endpoints in this JSON object are described as follows:

        1. "name": "Reports - Player - Delete" - This is the name of the endpoint, indicating that it is used for deleting player reports.

        2. "request": This object contains all the details of the HTTP request.

            a. "auth": This object describes the authentication method used for the request. 
            
                i. "type": "bearer" - This indicates the type of authentication used, which in this case is Bearer authentication.
            
                ii. "bearer": This array contains the bearer token details. Here, the bearer token is represented by a sessionId, of string type.

            b. "method": "POST" - This indicates the HTTP method used for the request. Here it is "POST", which means data is sent to a server to create a resource.

            c. "url": "http://localhost:3000/api/reports/player/delete" - This is the URL endpoint at which the request will be made.

            d. "headers": This field is an array that would usually contain any additional headers that the request requires. In this case, it is an empty default header that is disabled.

            e. "body": This object contains details of the request body. 

                i. "mode": "raw" - This describes how the request body is formatted. Here, it is in "raw" mode which means the data is sent as it is written in the body field. 

                ii. "raw": This field contains the raw data being sent in the body. It includes the sessionId, accountId, and playerId, all of which are necessary for identifying the correct player report to delete.

        So, when executing this POST request, you should include the bearer token in the request header. The token represents the sessionId and is a string type. The request body should be in raw format and include three identifiers- sessionId, accountId, and playerId. This information is necessary to specify the player report to be deleted.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"playerId\":\"playerId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/team/create:
    post:
      tags:
        - ReportsTeam
      summary: Reports - Team - Create
      description: |-
        This is the "Reports - Team - Create" endpoint used to create a new team report. The endpoint uses the POST method to send data to the server to create a new resource.

        - "auth": This object is used for authentication. It uses the "bearer" type which requires a "BearerToken" to verify the user's identity.

        - "request.method": This field represents the HTTP method to be used. In this case, a 'POST' request is being made, which is used to send data to the server.

        - "url": This is the endpoint URL where the request will be sent. Here, the URL is http://localhost:3000/api/reports/team/create. 

        - "headers": This field contains an array of objects representing the HTTP headers to be included in the request. While the provided headers in this example are empty and disabled, they could typically include content type, date, server, and more.

        - "body.mode": This field identifies how the request body should be formatted. Here, it is specified as 'raw', which means it will send unprocessed data to the server.

        - "body.raw": This contains the raw JSON data to be sent to the server. It includes fields such as sessionId, accountId, team details, category and subcategory details, privacy settings, report ads settings, and URL for pre and post live report breaks.

        - "body.options.raw.language": This specifies the language in which the raw data is written. In this case, the information is written in JSON format.
         
        Please ensure to fill in all the required data in their specified formats for the successful execution of this api request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Team
                description: This team is my second team
                tags: second,team
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isTeamPrivate: true
                isTournamentOnly: false
                isTeamDefault: true
                isPreLiveReportsAds: true
                isPostLiveReportsAds: true
                breakPreLiveReportsUrl: https://example.com/break-pre-live.mp4
                breakPostLiveReportsUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/team/update:
    put:
      tags:
        - ReportsTeam
      summary: Reports - Team - Update
      description: |-
        This endpoint is named "Reports - Team - Update". It uses the PUT method for updating details related to teams in reports. The URL you should send this PUT request to is "http://localhost:3000/api/reports/team/update".

        For authentication, it uses Bearer Token Authentication. The bearer token must be provided under the key 'token'. 

        The request must also include a header 'Client-UUID' key to ensure further security and client identification. 

        The main chunk of information required by this endpoint resides in the request body. In the body, the details of the team updated report must be expressed in raw format (JSON format). Below are the details required:

        - "teamId": The unique identification for the team.
        - "sessionId": The unique identifier of the session in which the report is updated.
        - "accountId": The unique account identifier for tracking purpose.
        - "name": The updated name of the team.
        - "description": A brief on what the team is about.
        - "tags": Any tags that are attributed to the team.
        - "profilePhotoUrl": The updated URL of the team's profile picture.
        - "coverPhotoUrl": The updated URL of the team's cover picture.
        - "minimumTipAmount": The minimum amount anyone can tip the team.
        - "categoryId": The ID that refers to the categorization of the team.
        - "category": The category where the team falls under.
        - "subCategoryId": The ID of the subcategory of the team.
        - "subCategory": The subcategory where the team falls under.
        - "isTeamPrivate": A boolean indicating if the team is private or not.
        - "isTournamentOnly": A boolean indicating if the team is only for tournaments.
        - "isTeamDefault": A boolean indicating if the team is the default team.
        - "isPreLiveReportsAds": A boolean indicating if ads are allowed in pre-live reports.
        - "isPostLiveReportsAds": A boolean indicating if ads are allowed in post-live reports.
        - "breakPreLiveReportsUrl": The URL of the media for break in pre-live reports.
        - "breakPostLiveReportsUrl": The URL for the media for break in post-live reports.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"teamId\":\"teamId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Team 2.0\",\"description\":\"This team is my second team\",\"tags\":\"second,team\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isTeamPrivate\":true,\"isTournamentOnly\":false,\"isTeamDefault\":true,\"isPreLiveReportsAds\":true,\"isPostLiveReportsAds\":true,\"breakPreLiveReportsUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveReportsUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/team/get:
    get:
      tags:
        - ReportsTeam
      summary: Reports - Team - Get
      description: |-
        Endpoint Name: "Reports - Team - Get"
        This endpoint is utilized for getting reports of a specific team.

        Request Details:

        1. Authentication Type - Bearer: This endpoint utilizes Bearer token authentication, where a specific token has to be provided to gain access to the data. The token should be a string.

        2. Request Method - GET: This endpoint operates using the GET method, which is used to retrieve data from a specific resource.

        3. Request URL: The URL to call this endpoint is http://localhost:3000/api/reports/team/get/. It contains query parameters which are teamId, sessionId, and accountId. These parameters should be replaced with actual values.

            - teamId: It is the unique identifier of the team whose reports are to be fetched.
            - sessionId: It is the unique identifier of the session during which team operates.
            - accountId: It is the unique identifier of the account related to that specific team.

        4. Headers: 
        In this endpoint, no custom headers are defined. A key-value pair appears but they are disabled and set to default. Hence there is no additional header required to access this endpoint.

        5. Request Body - Raw: The request body is set to raw mode but does not require any data as no body content is required in this GET request.

        Remember to replace "BearerToken", "teamId", "sessionId", and "accountId" with actual values before sending a request to this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - name: teamId
          in: query
          schema:
            type: string
          example: teamId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/team/all:
    get:
      tags:
        - ReportsTeam
      summary: Reports - Team - Get All
      description: "1. `\"name\": \"Reports - Team - Get All\"` - This is the name of the API endpoint, describing its main function. It suggests that this endpoint is used to fetch all team reports.\n\n2. `\"request\"` - This object represents the details of the HTTP request that needs to be made to access the data from the endpoint.\n\n3. `\"auth\"` - The auth object provides information about the type of authorization required to access the endpoint.\n\n\t- `\"type\": \"bearer\"` - This indicates that the API uses Bearer Authentication, a method that involves sending a token in the Authorization header of the HTTP request.\n\t\n\t- `\"bearer\": [ {...} ]` - This list contains bearer tokens required for authorization. In this case, it contains one token:\n\t\n\t\t- `\"key\": \"token\"` - This is the name of the token required for authorization.\n\t\t\n\t\t- `\"value\": \"BearerToken\"` - This is where the actual token string would be placed.\n\t\t\n\t\t- `\"type\": \"string\"` - Data type of the token which indicates that it should be a string.\n\n4. `\"method\": \"GET\"` - GET is the HTTP method used for this request. It signifies that the endpoint retrieves data.\n\n5. `\"url\": \"http://localhost:3000/api/reports/team/all/?sessionId=sessionId&accountId=accountId\"` - This is the URL endpoint for the request. It seems to have two parameters, 'sessionId' and 'accountId', passed in the query string.\n\n6. `\"headers\"` - This is a list of headers which are to be sent along with the HTTP request. It contains additional parameters that define the HTTP request.\n\t- This particular header object is disabled, implying that there are no additional headers to be sent with the request.\n\n7. `\"body\"` - The body object contains data that is sent to the API. In this case, there is no data to be sent, so the `\"mode\"` is `\"raw\"` and `\"raw\"` contains an empty string. 'Raw' indicates that the data is sent without any specific formatting."
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/team/delete:
    post:
      tags:
        - ReportsTeam
      summary: Reports - Team - Delete
      description: |-
        This endpoint is named "Reports - Team - Delete". As the name suggests, it is used to delete reports associated with a particular team. 

        The authentication type for this endpoint requires a "Bearer Token".  It uses the bearer authentication scheme whereby the bearer of the token sends it in the Authorization header.

        An example of the token usage:
        "type": "Bearer token sessionid"
        Here, "sessionid" is representing the value that needs to be provided for the "Bearer Token".

        The HTTP method for this endpoint is "POST", meaning it's designed to send data to the server for a specific resource.

        The URL indicates the location where this request is sent. In this case, we are performing an action on "http://localhost:3000/api/reports/team/delete". This is the address to which the 'POST' request is made.

        The headers field is empty in this example and has been disabled as well. Headers hold additional information (key-value pairs) to be sent with the request, but it's not being used in this case.

        The request body is sent in 'raw' format and contains the data to be sent to the server. This raw information is a JSON object containing three parameters:

        1. "sessionId": This is likely an identifier used by the server to validate your session. In a fully-fledged application, this would be dynamically replaced with an active session ID.
        2. "accountId": This is likely the identifier for your account, used to determine which account to perform the action on.
        3. "teamId": This is probably the identifier for a specific team. It's what helps the server know which team's reports you're intending to delete.

        To successfully make a request to this endpoint, these input parameters must be replaced with real values according to your system's specifications.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"teamId\":\"teamId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/video/create:
    post:
      tags:
        - ReportsVideo
      summary: Reports - Video - Create
      description: |-
        The endpoint "Reports - Video - Create" will allow you to post a request to create a new video report. Following is a detailed description for each data included in the request.

        - `auth`: This section handles authorization. It uses the "bearer" type which employs a bearer token as an authorization method. There is a key named "token" that stores the value of the bearer token as a string.

        - `method`: This is the HTTP method for your request. In this case, it is set to "POST" which means the API endpoint creates a new resource, a video report, in this case.

        - `url`: This is the endpoint to make the request, http://localhost:3000/api/reports/video/create

        - `headers`: This field is used to send additional information to the server. Currently, it’s empty and disabled.

        - `body`: It contains the data you send to the server. It has different modes, raw in this case. The payload in raw mode is a JSON string that contains the following fields:

          - `sessionId`, `accountId`: They uniquely identify a session and an account respectively.
          
          - `name`, `description`, `tags`, `profilePhotoUrl`, `coverPhotoUrl`: These pertain to attributes particular to the video, i.e., name, description, tags, profile photo URL, and cover photo URL. 
          
          - `minimumTipAmount`: This is the minimum amount set for tips on the video.
          
          - `categoryId`, `category`, `subCategoryId`, `subCategory`: They specify the category and sub-category that the video belongs to. Both have their unique Ids and Names.
          
          - `isVideoPrivate`, `isTournamentOnly`, `isVideoDefault`, `isPreLiveReportsAds`, `isPostLiveReportsAds`: These are boolean fields indicating whether the video is private, meant for tournament only, is a default video, or whether there will be ads before and after the live reports respectively.
          
          - `breakPreLiveReportsUrl`, `breakPostLiveReportsUrl`: These are URLs for the videos that would be played during pre-live and post-live reports breaks respectively.

        - `options`: Defined how the body content should be interpreted, in this case, it tells that the body content language is JSON. 

        This endpoint requires several information about a video in order to create a valid video report. Please refer to above information while submitting a request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Video
                description: This video is my second video
                tags: second,video
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isVideoPrivate: true
                isTournamentOnly: false
                isVideoDefault: true
                isPreLiveReportsAds: true
                isPostLiveReportsAds: true
                breakPreLiveReportsUrl: https://example.com/break-pre-live.mp4
                breakPostLiveReportsUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/video/update:
    put:
      tags:
        - ReportsVideo
      summary: Reports - Video - Update
      description: |-
        This is the "Reports - Video - Update" endpoint. It uses the PUT method to update the details of a video report. The request is authenticated through a Bearer token system. A valid access token is required for this endpoint, which is provided as a string type in the 'token' key.

        The request is made to an API running at localhost on port 3000 at the path '/api/reports/video/update'. The endpoint requires a UUID, which is a unique identifier used to validate the client. It's specified in the 'Client-UUID' key in the headers.

        The body of the request delivers the payload in raw JSON format and it contains multiple data fields:

        1. 'videoId' is the unique identifier for the video being updated.
        2. 'sessionId' is the unique identifier for the ongoing session.
        3. 'accountId' is the unique identifier for the account where the video resides.
        4. 'name' is the updated name of the video.
        5. 'description' provides details about the video.
        6. 'tags' are keywords associated with the video for improved searchability.
        7. 'profilePhotoUrl' and 'coverPhotoUrl' are URLs linking to the updated profile and cover photos respectively for the video.
        8. 'minimumTipAmount' specifies the minimum tip amount that can be attributed to the video.
        9. 'categoryId' and 'category' are identifiers and names respectively for the updated category of the video.
        10. 'subCategoryId' and 'subCategory' are identifiers and names respectively for the updated sub-category of the video.
        11. 'isVideoPrivate' indicates whether the video is private or not. If set to true, the video is private.
        12. 'isTournamentOnly' confirms if the video is only for tournaments. If set to false, the video isn't exclusive to tournaments.
        13. 'isVideoDefault' shows if the video is set as the default video. When marked true, it is the default video.
        14. PRE and POST live report ads flags are represented respectively by 'isPreLiveReportsAds' and 'isPostLiveReportsAds'. These booleans specify whether pre-live and post-live ads are active in the video.
        15. 'breakPreLiveReportsUrl' and 'breakPostLiveReportsUrl' are respective URLs for linking to the break pre-live and break post-live video reports.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"videoId\":\"videoId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Video 2.0\",\"description\":\"This video is my second video\",\"tags\":\"second,video\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isVideoPrivate\":true,\"isTournamentOnly\":false,\"isVideoDefault\":true,\"isPreLiveReportsAds\":true,\"isPostLiveReportsAds\":true,\"breakPreLiveReportsUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveReportsUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/video/get:
    get:
      tags:
        - ReportsVideo
      summary: Reports - Video - Get
      description: |-
        This endpoint is titled "Reports - Video - Get". The description of each data is as follows:

        1. "name": This field signifies the title of the endpoint, which is "Reports - Video - Get".

        2. "request": This field encapsulates all the aspects of the HTTP request involved in this endpoint.

        3. "auth": This field handles the authorization needed to access this endpoint. The type of authorization used here is "bearer".

        4. "bearer": Contains the details needed for bearer token authentication. The "key" has the value "token" and the "value" is where the actual token string "BearerToken" goes. The "type" defines the data type of the token, which is a string.

        5. "method": Refers to the HTTP method being used in the request. In this case, it's "GET".

        6. "url": This is the endpoint URL where the request has to be sent. 

           It has path parameters that you need to replace with actual values:
           
           - videoId: Identifier for a unique video.
           
           - sessionId: Identifier for the session.
           
           - accountId: Identifier for the user account.

        7. "headers": This is an array containing the data for HTTP headers to be sent with the request. In this case, the headers are kept blank and are disabled.

        8. "body": The body of the HTTP request. Since this is a "GET" request, the body is kept empty. "mode" signifies how the body will be transmitted, and in this case, the body will be sent as is ("raw").
      security:
        - bearerAuth: []
      parameters:
        - name: videoId
          in: query
          schema:
            type: string
          example: videoId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/video/all:
    get:
      tags:
        - ReportsVideo
      summary: Reports - Video - Get All
      description: |-
        This endpoint, named "Reports - Video - Get All," is used to retrieve and display all video reports. Here's a breakdown of each data field present in the endpoint:

        - **name**: This is the name of the endpoint. It's labelled as 'Reports - Video - Get All', implying that its purpose is to fetch all video reports.

        - **request**: This segment contains all the necessary components to make a request and the method of the request.
          
          - **auth**: This section is for authentication purposes. It uses the 'bearer' authentication method. In this case, you will need to provide a valid token (BearerToken) of type 'string'. This token is crucial for authorizing your request.

          - **method**: This defines the HTTP method used for request. For this endpoint, the 'GET' method is used which means it retrieves information.

          - **url**: This is the URL or location where the request will be sent. It specifies the path to retrieve all video reports. It contains parameters `sessionId` and `accountId` which should be replaced with actual session ID and account ID respectively for successful data fetch.

          - **headers**: This part is currently empty and disabled. The 'default' type implies that if it's enabled and provided with a 'key' and 'value', they will be sent with every request. It is used to provide additional information about the request.

          - **body**: The body part signifies the data to be sent along with the request. The 'mode' is currently set to 'raw', meaning any data contained in the 'raw' field will be transmitted as it is. At present, it is empty as it's a 'GET' request which generally doesn't include any body.

        Be sure to fill in all necessary fields and replace any placeholders with valid information to ensure the endpoint functions correctly.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reports/video/delete:
    post:
      tags:
        - ReportsVideo
      summary: Reports - Video - Delete
      description: |-
        This endpoint is named "Reports - Video - Delete". It is used to delete videos from the report. 

        The request uses the "POST" method, indicating it is designed to send information to the server to create a new resource. 

        You need to authenticate yourself in order to access this endpoint. The authorization uses the "bearer" type, which means that the authentication information is sent in the header of the request. The bearer token, which is a unique key generated for each user, is required for this endpoint. The token is represented by a session ID, which is a string type.

        The URL of the endpoint is `http://localhost:3000/api/reports/video/delete`. This is the location where the request should be sent. The 'localhost' and the port '3000' indicate that the server is running locally in the development environment.

        There is a header field available in this endpoint but it is disabled and contains no key or value.

        The request body contains data that is sent to the server. It uses the "raw" mode, which allows you to write directly in the text input. The raw body data includes three parameters which are represented as a JSON object. 

        The "sessionId" is a string that represents the session ID of the user. It is a unique identifier that points to the session of the authenticated user. 

        The "accountId" indicates the account ID which may be used to specify the account from which the video should be deleted.

        The "videoId" is used to specify the particular video in the report you want to delete. It is a unique identifier for each video in the database. 

        Make sure to replace "sessionId", "accountId", and "videoId" with real values before sending the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"videoId\":\"videoId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/search/filter/create:
    post:
      tags:
        - SearchFilter
      summary: Search - Filter - Create
      description: |-
        EndPoint: "Search - Filter - Create"

        1. "auth": All requests made to this endpoint must be authenticated via bearer tokens. The "bearer" array contains an object where "key" is the attribute you should provide during the bearer token authentication scheme; this defaults to "token". "value" is the actual bearer token string you need to provide for authorization. The token type should be "string".

        2. "method": Defines the HTTP method to use when sending data to the API. For this endpoint, the "POST" method is used, implying data is sent as a request body.

        3. "url": This field indicates the URL to which the API call should be made. The given URL for this endpoint is: "http://localhost:3000/api/search/filter/create"

        4. "headers": This field allows to send additional header parameters along with the request. As in this example, no headers are required, as indicated by an empty "key" and "value" and the attribute "disabled" set to true. Thus, no additional headers need to be sent for this endpoint.

        5. "body": Represents data that is sent to the API endpoint in the HTTP POST method.
           
           i. "mode": Specifies the formatting mode for the request body. Here, it is indicated as "raw", which allows you to write the request parameters freehand.
          
           ii. "raw": A string of JSON content that is required to be sent as the body of the request. In this case, it includes various data such as "queryId", "accountId", "sessionId" and a complex "filter" object which includes various filter criteria like "type", "sort", "privacy", "date", "team", "stream", and "loyalty". Each piece of filter criteria has different variables that can be adjusted for search (like "channel" in "type", "popular" in "sort" or "loyalty", etc.)
           
           iii. "options": This section defines the format of the request body. It specifies "raw" as the format and "json" as the language. This implies that the request body is in raw JSON format. 

        In general, to use the endpoint you need to perform a POST method with a bearer token provided in the authorization, to the given URL. The request body should contain a JSON object as described above, but no additional headers are necessary.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                queryId: queryId
                accountId: accountId
                sessionId: sessionId
                filter:
                  type:
                    channel: 1
                  sort:
                    popular: 1
                  privacy:
                    public: 1
                  date:
                    today: 1
                  team:
                    active: 1
                  stream:
                    live: 1
                  loyalty:
                    popular: 1
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/search/filter/update:
    put:
      tags:
        - SearchFilter
      summary: Search - Filter - Update
      description: |-
        The endpoint `Search - Filter - Update` is used to update a particular filter for a specific user.

        It uses Bearer Authentication(`auth`) where the `token` is the authentication token. The bearer token must be a string and placed in the 'token' field. This token is vital for authentication and authorization on the secure server.

        The endpoint is a `PUT` request(`method`) meaning it's meant to update current resources with new data. 

        The API endpoint URL(`url`) is "http://localhost:3000/api/search/filter/update" which points to the server where the request is handled.

        In the HTTP request headers(`headers`), the 'Client-UUID' must be provided. 'Client-UUID' is an identifier for the client making the request. The value of this header should be a unique identifier for each client.

        The payload body(`body`) for this endpoint should be in a raw JSON format(`mode`). 
        The body contains:
        - `filterId`, which is the unique identifier for the filter that needs to be updated.
        - `accountId`, which identifies the account related to the filter.
        - `sessionId`, this indicates the session in which the filter update is performed.
        - `filter` contains the filter updates. It includes below fields:
           - `types`: The game types to filter by. Example - 'game':1.
           - `sort`: The type of sorting required, 'added':1 means data is sorted on the basis of added date.
           - `privacy`: The privacy settings of the content, 'public':1 indicates filtering for public content.
           - `date`: The date filter for the content, 'today':1 filters the today's content.
           - `team`: The team status of the content, `active`:1 filters for content that's currently active.
           - `stream`: The status of the stream, 'live':1 filters for live streams.
           - `loyalty`: The loyalty or popularity level of the content, 'popular':1 indicates content that is popular or has high loyalty.

        This API endpoint helps to update user-specific content filters based on the user's needs and choices. The response from this endpoint should confirm the successful update of said filter details.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"filterId\":\"filterId\",\"accountId\": \"accountId\",\"sessionId\": \"sessionId\",\"filter\": {\"types\": { \"game\": 1 },\"sort\": { \"added\": 1 },\"privacy\": { \"public\": 1 },\"date\": { \"today\": 1 },\"team\": { \"active\": 1 },\"stream\": { \"live\": 1 },\"loyalty\": { \"popular\":1}}}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/search/filter/delete:
    post:
      tags:
        - SearchFilter
      summary: Search - Filter - Delete
      description: |-
        The provided data represents an endpoint named "Search - Filter - Delete" with various fields in it:

        1. **name**: Indicates the name tag for this endpoint, which is "Search - Filter - Delete". This typically gives the user a brief idea about what this endpoint does.

        2. **request**: This section includes all the necessary data required to make a request to the server.

           - **auth**: The authentication section for the request indicates how we should authenticate ourselves to the server. In this case, we use a "bearer" authentication type, which means our requests carry a bearer token value in their headers. This value is obtained from a session and is specified as a string.
             
           - **method**: POST. This is the HTTP method used for sending the request. POST is typically used when you want to send/write data to the server.

           - **url**: This is the endpoint's URL which specifies the address where the request will be sent to. Here, the URL is "http://localhost:3000/api/search/filter/delete".
           
           - **headers**: Header parameters are optional for the request and are usually used to define the operating parameters at the time of an HTTP request. In this case, no specific header key-value pair is provided and it is disabled.
           
           - **body**: This is the information which will be sent to the server in the request.

             - **mode**: "raw". This parameter indicates that the data in the body section will be sent exactly as it is.

             - **raw**: This fields includes the raw data string which is sent to the server. The data string should be in JSON format and contains three properties "sessionId", "accountId", and "filterId" each carry unique identifier values.

        This endpoint is used to delete a specific filter from a search by providing the session Id, account Id, and the filter Id in the body of the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"filterId\":\"filterId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/search/filter/get:
    get:
      tags:
        - SearchFilter
      summary: Search - Filter - Get By User
      description: |-
        Endpoint Name: "Search - Filter - Get By User"

        1. "name": This specifies the name of the endpoint. In this case, it's "Search - Filter - Get By User", which suggests that it allows searching and filtering for specific user data.

        2. "request": This contains all the detailed instructions that tell the server what to do.

        3. "auth": This is the authorization method needed to make a request to this endpoint, which is based on bearer token authentication.

           - "type": This indicates the type of authorization required. For this endpoint, it's bearer type.
           
           - "bearer": This is an array containing the information about the bearer token needed for authorization.
            
             - "key": The name of the token, in this case, it's "token".
             
             - "value": The value of the token. It should be replaced with the actual bearer token to authorize the request.
             
             - "type": Specifies the type of the value. It should be a string.

        4. "method": Specifies the HTTP method to use for the request. In this case, it's GET, which is used to retrieve data from a server.

        5. "url": The URL is the address where the request is sent. It includes the necessary query parameters which are 'filterId', 'sessionId', and 'accountId'.

        6. "headers": An array that can contain multiple objects representing several HTTP headers. In this case, there is a default empty header object which is disabled.

        7. "body": Contains data that you want to send to the server.

            - "mode": Specifies the format of the data contained in the body. Here it's set to 'raw', which allows sending data without any conversion.
            
            - "raw": Holds the actual data that will be sent in the body. In this case, no data is being sent, so it's empty.
      security:
        - bearerAuth: []
      parameters:
        - name: filterId
          in: query
          schema:
            type: string
          example: filterId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/search/filter/all:
    get:
      tags:
        - SearchFilter
      summary: Search - Filter - Get All By User
      description: |-
        The endpoint described here bears the name "Search - Filter - Get All By User". This name suggests that the endpoint is responsible for retrieving all filter items related to a specific user based on a search operation. Here's a detailed breakdown of each data component:

        1. "request": This is the main body of the request for this endpoint.

        2. "auth": This refers to the authentication method used for this request. In this instance, a "bearer" type authentication is utilized.

           - "bearer": This is an authentication method that involves sending a bearer token. In this case, the token's key is simply "token", and the value is "BearerToken". The token type is a string.

        3. "method": This is the HTTP method used for the API call. For this endpoint, a "GET" method is used, indicating that it retrieves particular resources.

        4. "url": This is the URL of the API that the call is sent to. The endpoint can be accessed at `http://localhost:3000/api/search/filter/all/` with two query parameters, `accountId` and `sessionId`.

        5. "headers": This section is used to send additional information about the API request. In this case, the key and value fields are empty and disabled, meaning no additional header details are required for the API call.

        6. "body": This section represents the data that is sent with the API request. The mode is set to "raw" but no data is meant to be sent with this request hence the "raw" field is empty. This suggests that this API endpoint only needs the information available in the URL to complete its operation.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/search/query/create:
    post:
      tags:
        - SearchQuery
      summary: Search - Query - Create
      description: |-
        This endpoint is called "Search - Query - Create". It is designed to take in user-provided information and use it to create a new query that will then be sent to a search database. 

        - "name": Provides the name of the endpoint. In this case, it is "Search - Query - Create".

        The "request" object contains all the information required to make the API request.

        - "auth": This field refers to the authorization mechanism for the API request. In this scenario, the type of the authorization mechanism is "bearer". A bearer token is required to authorize the API request.
          
        - "bearer": This contains the bearer token. It is a simple security token that the client can send to the server to authenticate requests.

        - "method": This field signifies the type of HTTP method to be used when making a request to the URL. It's set to "POST" which indicates that data should be sent to the server to create a new resource.

        - "url": This is the URL where the API request is to be made. In this case, the URL points to a search API at "http://localhost:3000/api/search/query/create".

        The "headers" object contains the headers information to be sent along with the API request.

        - "key" and "value": These fields are empty in this case and they are disabled. For actual application, we should provide header key-value pairs depending on server requirements.

        The "body" element stores the actual data to be sent with the HTTP request:

        - "mode": It refers to the mode of the body data and it is set to "raw", implying that the body content will be sent as a string of text.

        - "raw": Contains a JSON string with various details for the search query such as the query term, account ID, session ID, and usage metrics (device, browser, region, year, month, week, day, hour).

        - "options": This field defines the language to use for the raw data. In this example, the raw data is written in JSON.

        Each attribute in the "raw" field has a specific meaning:

        - "query": The actual search query itself, i.e., the term being searched.
        - "accountId": The ID of the account making the search.
        - "sessionId": The ID of the session during which the search was made.
        - "metrics": Provides detailed information about how the search was conducted. It includes specifications of the device used, browser used, region from where the search was made, and precise time the search was initiated(year, month, week, day, hour).

        This endpoint can be utilized to create a detailed search query by providing the necessary details in the body of the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                query: Fortune
                accountId: accountId
                sessionId: sessionId
                metrics:
                  device:
                    desktop: 1
                  browser:
                    chrome: 1
                  region:
                    us: 1
                  year:
                    '2024': 1
                  month:
                    '05': 1
                  week:
                    '02': 1
                  day:
                    '14': 1
                  hour:
                    '17': 1
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/search/query/update:
    put:
      tags:
        - SearchQuery
      summary: Search - Query - Update
      description: |-
        This endpoint, named "Search - Query - Update", is a PUT method used to update the search queries. 

        1. **Auth**: 
        - This endpoint is secured with a bearer authentication, which uses a token to validate the request. 
        - The `token` key should hold the token value. This value should be a string.

        2. **Method**: 
        - PUT method, which is used to update the existing data on the server. 

        3. **URL**: 
        - The server's domain is "http://localhost:3000/api/search/query/update".
          
        4. **Headers**: 
        - There's a mandatory header "Client-UUID". It should contain a unique id to identify the client making requests.

        5. **Body**: 
        - The body of the request should be in `raw` mode and formatted as a JSON string. 
        - This JSON should include the following keys: 

          - `queryId` : The unique id for the query.
          - `sessionId` : The unique id corresponding to the search session.
          - `accountId` : The unique id corresponding to the user account. 
          - `metrics` : A JSON object that captures different metric data such as:
            - `device` : An object having keys representing different devices. Here, `tablet` is used as a key and its value represents the number of times it's been used.
            - `browser` : Similar to the device, here `chrome` is an example. 
            - `region` : It captures the geographical location of the user. Here, `us` is an example.
            - `year`, `month`, `week`, `day`, `hour`: These define the time of the search query. It can be used to sort or filter queries based on time.
        - The `options` after the body defines the raw data language. In this case, it's JSON.
           
        Remember, all these keys in the body are mandatory and should be appropriately filled to successfully update the search query.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                queryId: queryId
                sessionId: sessionId
                accountId: accountId
                metrics:
                  device:
                    tablet: 1
                  browser:
                    chrome: 1
                  region:
                    us: 1
                  year:
                    '2024': 1
                  month:
                    '05': 1
                  week:
                    '02': 1
                  day:
                    '14': 1
                  hour:
                    '17': 1
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/search/query/delete:
    post:
      tags:
        - SearchQuery
      summary: Search - Query - Delete
      description: |-
        This endpoint description carries the name "Search - Query - Delete", which points to its basic purpose, that is to perform deletion operations on search queries.

        - `auth`: This field holds the authentication details needed for the endpoint. This endpoint uses `bearer token` authentication. There is a key-value pair within an array. The `key` is designated as `token` while the `value` is the `sessionId`. Every session must provide this `sessionId` as a string value in order to initiate authenticated requests.

        - `method`: The HTTP method utilized by this endpoint is `POST`. This means the endpoint is designed to send or append data to be processed on the server side.

        - `url`: This field contains the URL where the request is being sent. The endpoint communicates with `http://localhost:3000/api/search/query/delete`, indicating that it is used for deleting search queries on your local development environment.

        - `headers`: In this case, an array with an empty `key`-`value` pair and `type` set to the `default` is specified, but its use is currently disabled as indicated by the `disabled` Boolean value.

        - `body`: This contains the data that's being sent with the request. The `mode` used for the body of this POST request is `raw`, which means the data in the body isn't in key/value format. Rather, it's in a JSON string format. In the `raw` field, an object is being passed with key-value pairs of `sessionId`, `accountId`, and `queryId`. These are necessary parameters for deleting a search query, suggesting that you can't delete a query without having the `sessionId`, `accountId`, and `queryId`.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"queryId\":\"queryId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/search/query/get:
    get:
      tags:
        - SearchQuery
      summary: Search - Query - Get By User
      description: |-
        "name": This is a human-readable identifier that is used to label the particular API endpoint. In this case, the "Search - Query - Get By User" denotes this endpoint is for fetching search queries by a user.

        "auth": This field defines the method of authentication that has to be included in the API request. 

          - "type": The authentication type here is 'bearer' which refers to bearer token authentication, a way of authorizing a user based on a token value. 
          - "bearer": The bearer array further holds the key-value pair for the token used in authentication. A "value" of "BearerToken" instructs users to replace this placeholder with an actual bearer token.

        "request": This field describes the information needed for the API request.

          - "method": The method "GET" means that this API request is for retrieving information, not for posting, updating, or deleting data.
          - "url": This is the endpoint to which the request will be sent. It includes placeholders for queryId, sessionId, and accountId, indicating these values need to be provided in the actual API request. 

        "headers": This section describes the http headers to be included in the request. The key-value pair for this section is empty meaning no additional headers are required for this endpoint.

        "body": This section describes the body of the request.

          - "mode": The mode is set to "raw", indicating the body content type is plain text.
          - "raw": This field is where the raw input of the request body would go but in this case, it's an empty string, indicating that no request body is needed for this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - name: queryId
          in: query
          schema:
            type: string
          example: queryId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/search/query/all:
    get:
      tags:
        - SearchQuery
      summary: Search - Query - Get All By User
      description: |-
        1. "name": This data field signifies the name of the endpoint. It is called "Search - Query - Get All By User". This is essentially an identifier that tells you the purpose of the endpoint. 

        2. "request": Contains all the information required to make an HTTP request. This includes authentication, method, URL, headers, and body.

        3. "auth": Represents the authentication method to access the endpoint. This is of type "bearer", which means that the authorization requires a bearer token to be sent in the request.

        4. "bearer": This is an array containing the bearer token that will be used for authentication in the request. The "key" field is named "token", indicating the kind of token used for authentication. The "value" field is the token itself, usually generated from the server. The "type" field indicates the data type of the "value", which is "string".

        5. "method": Represents the HTTP method used for the request. In this case, it is a "GET" request, which is used to retrieve information from the server.

        6. "url": This is the URL or the path of the server where the request is being made. In this case, it's a local server http://localhost:3000/api/search/query/all?. Followed by the URL, there are two query parameters "accountId" and "sessionId" which are used to filter the results.

        7. "headers": This is an array that contains the information that the client (or your browser) sends in an HTTP request to the server. It may include any extra information you want to send to the server. In this case, no key-value pairs are provided and it is disabled.

        8. "body": Contains the body of the request. For a GET method, this will typically be empty as shown here. The "mode" indicates how the body data will be sent to the server. In this case, "raw" means the data is sent as it is without any encoding or extra processing. There is no raw data provided in this case.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/search/results/filter:
    get:
      tags:
        - SearchResults
      summary: Search - Results - By Query String and Filter String
      description: |-
        ### Endpoint Description: Search - Results - By Query String and Filter String

        This endpoint allows users to perform a search operation based on a specified query string and filter criteria. Below is a detailed description of each data field involved in this API request.

        #### Request Method
        - **Method:** `GET`
          - This indicates that the request is retrieving data from the server. No data is being altered or created.

        #### URL
        - **URL:** `http://localhost:3000/api/search/results/filter/?query=Fortune&filter=channel`
          - This is the endpoint for accessing search results. 
          - It is currently set to search with the query "Fortune" and applies a filter based on the "channel" criteria. 

        #### Authentication
        - **Auth Type:** `Bearer`
          - The request requires a Bearer token for authentication. This type of authentication ensures that the user is verified before accessing the endpoint.

        - **Bearer Token:**
          - **Key:** `token`
          - **Value:** `BearerToken`
          - **Type:** `string`
            - This is where you will replace "BearerToken" with your actual token. It provides the necessary credentials for accessing the API. 

        #### Request Headers
        - **Headers:** 
          - An empty header is provided in the template, which is disabled. You can add additional headers if necessary, such as Content-Type or Authorization, depending on your specific requirements for the request.

        #### Body
        - **Body:**
          - **Mode:** `raw`
          - **Raw Content:** `""`
            - The body is currently empty, which is typical for GET requests since they do not usually require a body. Additional parameters can be passed via the URL instead.

        This endpoint is designed for searching and obtaining filtered results, making it useful for retrieving specific information based on the user’s input. Make sure to replace the placeholder values as needed to successfully utilize the endpoint.
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          schema:
            type: string
          example: Fortune
        - name: filter
          in: query
          schema:
            type: string
          example: channel
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/search/results/get:
    get:
      tags:
        - SearchResults
      summary: Search - Results - Get - By Channel Name
      description: |-
        ### API Name: Search - Results - Get - By Channel Name

        #### Request

        - **Auth**: 
          - **Type**: Indicates the kind of authentication used for the request. Here, it uses "bearer" token authentication.
          - **Bearer**: Details about the bearer token.
            - **Key**: This is the identifier for the token, labeled as "token".
            - **Value**: The actual token value that is used for authentication. It follows the format "BearerToken".
            - **Type**: Indicates that the value is a string.

        - **Method**: 
          - Specifies the HTTP method for the request, which in this case is "GET". This method is used to retrieve data from the specified resource.

        - **URL**: 
          - The endpoint to which the request is sent. It is structured as:
            - **Base URL**: `http://localhost:3000`
              - This denotes that the API is running locally on port 3000.
            - **Path**: `/api/search/results/get/`
              - Specifies the specific path to access the search results.
            - **Query Parameter**: `?channel=MyNikeChannel`
              - This part of the URL is used to pass specific parameters to the API. Here, it retrieves results for the channel named "MyNikeChannel".

        - **Headers**: 
          - This section defines any additional headers that may be sent with the request.
            - **Key**: Initially left empty, indicating no specific header is defined.
            - **Value**: Also left empty, suggesting there is no value associated with the header.
            - **Type**: Marked as "default", which means it's a standard header type.
            - **Disabled**: Set to true, indicating that this header will not be sent with the request.

        - **Body**: 
          - Describes the content being sent in the request.
            - **Mode**: Indicates the format of the body content. Here, it is set to "raw".
            - **Raw**: Currently empty, implying no body content is sent with a GET request, as is standard practice.

        This endpoint is designed to allow users to fetch search results based on a specified channel name.
      security:
        - bearerAuth: []
      parameters:
        - name: channel
          in: query
          schema:
            type: string
          example: MyNikeChannel
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/search/results/all:
    get:
      tags:
        - SearchResults
      summary: Search - Results - Get Tournaments - By Team Name
      description: |
        ### Endpoint Description: Search - Results - Get Tournaments - By Team Name

        **Endpoint Name**: This endpoint is used to search for tournaments by a specific team name.

        **Request Type**: 
        - **Method**: `GET` 
          - This indicates that the request will retrieve data from the server and will not modify any resources.

        **Authorization**:
        - **Auth Type**: `Bearer`
          - This type of authentication requires a bearer token to be included in the request for access to the endpoint.
          - **Token Structure**:
            - **Key**: "token" 
              - This is the name of the header that carries the authorization token.
            - **Value**: "BearerToken" 
              - This placeholder represents the actual bearer token needed for authentication. Users should replace this with their valid token.
            - **Type**: "string" 
              - This indicates that the token value is a string.

        **URL**: 
        - `http://localhost:3000/api/search/results/all/?team=NikeShoes&find=tournaments`
          - This is the request URL used to access the endpoint. 
          - Query parameters explained:
            - **team=NikeShoes**: This parameter specifies the name of the team whose tournaments are being searched. In this case, the team name is "NikeShoes".
            - **find=tournaments**: This parameter indicates that the search is specifically looking for tournaments associated with the specified team.

        **Headers**: 
        - The header section currently shows an empty key and value pair and is marked as disabled.
          - This means no additional headers are being sent with the request. Users can add custom headers if needed.

        **Body**:
        - **Mode**: `raw`
          - Indicates that the body of the request doesn’t contain any data since it's a GET request.
        - **Raw**: 
          - The raw data section is empty, which is expected for a GET request as the parameters needed are included in the URL.

        ### Summary
        This endpoint allows users to retrieve a list of tournaments by providing the specific team name in the query parameters, all while ensuring security through bearer token authentication. No additional headers or body content are required for the GET request.
      security:
        - bearerAuth: []
      parameters:
        - name: team
          in: query
          schema:
            type: string
          example: NikeShoes
        - name: find
          in: query
          schema:
            type: string
          example: tournaments
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/signal/offer/create:
    post:
      tags:
        - WhipSignal
      summary: Signal - Offer - Create
      description: |-
        {
          "name": "Signal - Offer - Create",
          "description": "This request is used to create an offer in the Signal API. It requires a valid authentication token and sends the necessary data in the request body.",
          "request": {
            "auth": {
              "type": "bearer",
              "description": "Authentication is done using a bearer token. This token must be included in the request header to authorize the operation.",
              "bearer": [
                {
                  "key": "token",
                  "value": "BearerToken",
                  "type": "string",
                  "description": "The actual bearer token used for authentication. Replace 'BearerToken' with the specific token you need to use."
                }
              ]
            },
            "method": "POST",
            "description": "The HTTP method used for this request is POST. This indicates that data will be sent to the server to create a new resource.",
            "url": "http://localhost:3000/api/signal/offer/create",
            "description": "The endpoint URL where the request will be sent. In this example, it points to a local server running on port 3000.",
            "headers": [
              {
                "key": "",
                "value": "",
                "type": "default",
                "disabled": true,
                "description": "No additional headers are required for this request, so this entry is disabled."
              }
            ],
            "body": {
              "mode": "raw",
              "description": "The body of the request contains the raw JSON data that needs to be sent to create the signal offer.",
              "raw": "{\"accountId\":\"accountId\", \"sessionId\":\"sessionId\", \"type\": \"offer\",\"sdp\": \"v=0\\r\\no=- 25678 753849 IN IP4 192.168.1.1\\r\\ns=-\\r\\nc=IN IP4 192.168.1.1\\r\\nt=0 0\\r\\na=sendrecv\\r\\nm=audio 49170 RTP/AVP 0\\r\\na=rtpmap:0 PCMU/8000\\r\\n\"}",
              "description": "The JSON object containing the following fields: 'accountId' which identifies the user's account, 'sessionId' which identifies the specific session, 'type' which indicates the type of request (offer), and 'sdp' which contains the Session Description Protocol that describes the multimedia session.",
              "options": {
                "raw": {
                  "language": "json",
                  "description": "Specifies that the body content is in raw format and is expected to be in JSON."
                }
              }
            }
          }
        }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                type: offer
                sdp: "v=0\r\no=- 25678 753849 IN IP4 192.168.1.1\r\ns=-\r\nc=IN IP4 192.168.1.1\r\nt=0 0\r\na=sendrecv\r\nm=audio 49170 RTP/AVP 0\r\na=rtpmap:0 PCMU/8000\r\n"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/signal/offer/update:
    put:
      tags:
        - WhipSignal
      summary: Signal - Offer - Update
      description: |-
        ### Endpoint: Signal - Offer - Update

        #### Request Details

        - **Auth**: 
          - **Type**: Bearer
            - **Bearer Token**: This is a security token that allows the client access to the endpoint. The client must include this token in the request header to authenticate themselves. 
              - **Key**: `token`
              - **Value**: `BearerToken` (This should be replaced with an actual token during a real request)
              - **Type**: String (The token is represented as a string)

        - **Method**: 
          - **PUT**: This HTTP method is used for updating existing resources on the server. In this case, it updates an offer related to a signal.

        - **URL**: 
          - `http://localhost:3000/api/signal/offer/update`: The endpoint where the request is sent. It is hosted locally on port 3000 and is used to update the signal offer.

        - **Headers**: 
          - This section is currently empty and disabled. Normally, headers can be added here to provide additional information or configuration for the request (such as content type or additional authentication). 

        - **Body**: 
          - **Mode**: 
            - **Raw**: The data is sent in its raw format rather than as form data.
            - **Raw Content**: 
              - This contains a JSON object structured as follows:
                - **accountId**: A unique identifier for the account associated with the offer.
                - **sessionId**: An identifier for the specific session in which this offer is being made.
                - **signalId**: A unique identifier for the signal that is being updated.
                - **type**: A string indicating the type of request, which is set to "offer" in this scenario.
                - **sdp**: Session Description Protocol (SDP) data that provides details about the media session, including codec information, network addresses, and other parameters necessary for establishing the communication channel.
                  - Example SDP data:
                    ```
                    v=0
                    o=- 25678 753849 IN IP4 192.168.1.1
                    s=-
                    c=IN IP4 192.168.1.1
                    t=0 0
                    a=sendrecv
                    m=audio 49170 RTP/AVP 0
                    a=rtpmap:0 PCMU/8000
                    ```
          - **Options**:
            - **Raw**: Specifies the data being sent is of JSON type.

        This endpoint allows users to update offers related to signals by sending the necessary identifiers and session information in a structured JSON format. Ensure to replace placeholder values in the body with actual data when making a real request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                signalId: signalId
                type: offer
                sdp: "v=0\r\no=- 25678 753849 IN IP4 192.168.1.1\r\ns=-\r\nc=IN IP4 192.168.1.1\r\nt=0 0\r\na=sendrecv\r\nm=audio 49170 RTP/AVP 0\r\na=rtpmap:0 PCMU/8000\r\n"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/signal/offer/get:
    get:
      tags:
        - WhipSignal
      summary: Signal - Offer - Get
      description: |-
        **Endpoint Description: Signal - Offer - Get**

        - **Request Name**: This is the name of the API request; in this case, it represents the action to retrieve offers associated with a signal.

        - **Authentication**: The request uses bearer token authentication. A bearer token is a type of token that is provided in the request header to authenticate the user. Users need to replace "BearerToken" with their actual authentication token.

          - **Type**: Specifies that the authentication method being used is bearer token authentication.
          - **Bearer**: This section holds the token details.
            - **Key**: Indicates the parameter name of the token, which is "token".
            - **Value**: Here, it specifies the token itself; users will need to replace "BearerToken" with their valid token for access.
            - **Type**: Denotes that the value is a string.

        - **Method**: This indicates the type of HTTP request being made. The "GET" method is employed here, which is used for retrieving data from the server.

        - **URL**: This is the endpoint where the request is sent. It consists of:
          - **Base URL**: "http://localhost:3000/api/signal/offer/get" is the base URL of the API.
          - **Query Parameters**: 
            - **accountId**: This parameter should be replaced with the user's account ID.
            - **sessionId**: This parameter should be replaced with the user's session ID.
            - **signalId**: This parameter should be replaced with the signal's ID that the user wants to retrieve offers for.

        - **Headers**: This section is used to specify additional information in the request. In this case:
          - **Key**: Currently, no key is provided, which means no additional headers are required.
          - **Value**: No value is specified.
          - **Type**: The type is default.
          - **Disabled**: This property indicates whether the header is active or not. It is set to true, meaning that this header will not be included in the request.

        - **Body**: The body of the request is defined here.
          - **Mode**: The mode is set to "raw", meaning that the body content can be provided in a raw format.
          - **Raw**: Currently, the raw body is empty, indicating that no data needs to be sent in the request body for this GET request. 

        This API request is designed to allow users to fetch offers related to specific signals using their account and session information. Make sure to properly set the required parameters and the bearer token for successful authentication and data retrieval.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: signalId
          in: query
          schema:
            type: string
          example: signalId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/signal/offer/delete:
    post:
      tags:
        - WhipSignal
      summary: Signal - Offer - Delete
      description: |-
        ### Endpoint Description: Signal - Offer - Delete

        **Name:** Signal - Offer - Delete  
        This endpoint is used to delete an offer associated with a specific signal.

        **Request Information:**

        - **Auth:** 
          - **Type:** Bearer Token 
          - The request requires authorization via a bearer token to ensure that the requester has the necessary permissions.

        - **Method:** POST  
          - This endpoint is accessed using the POST method, which is typically used to send data to the server to create or update resources.

        - **URL:** `http://localhost:3000/api/signal/offer/delete`  
          - This is the endpoint URL where the request will be sent. The base URL is intended for local development.

        - **Headers:**  
          - An array is provided for the headers, but currently, there are no custom headers defined. The default header is disabled and does not contain any key or value.

        **Body Information:**

        - **Body Mode:** raw  
          - The request body is sent as raw data.

        - **Raw Data:** `{"accountId":"accountId", "sessionId":"sessionId", "signalId":"signalId"}`  
          - This is the format of the data that must be sent in the body of the request. It contains three fields:
            - **accountId:** The identifier for the account associated with the offer to be deleted.
            - **sessionId:** The identifier for the session in which the operation is being performed.
            - **signalId:** The identifier for the specific signal related to the offer that needs to be deleted.

        - **Options:**  
          - **Raw Language:** json  
          - Specifies that the raw data is in JSON format, which is a lightweight data interchange format that is easy to read and write for humans and machines alike. 

        Please ensure to replace `"accountId"`, `"sessionId"`, and `"signalId"` with the actual values as needed when making a request to this endpoint.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                signalId: signalId
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/signal/answer/create:
    post:
      tags:
        - WhipSignal
      summary: Signal - Answer - Create
      description: |-
        ### API Endpoint Description: Signal - Answer - Create

        #### Name
        - **Signal - Answer - Create**: This endpoint is used to create a signal answer in a specific session.

        #### Request
        - **Auth**: 
          - **Type**: Bearer
          - **Bearer**: This contains the authentication token required for the request.
            - **Key**: "token" - The identifier for the bearer token.
            - **Value**: "BearerToken" - The actual token that grants access to the API (replace "BearerToken" with your actual token when making requests).
            - **Type**: string - Specifies that the token value is a string.

        - **Method**: 
          - **POST**: Indicates that this endpoint requires a POST request to create a new signal answer.

        - **URL**: 
          - **http://localhost:3000/api/signal/answer/create**: This is the endpoint for creating a signal answer. The address is currently configured to run locally on port 3000.

        - **Headers**: 
          - The request currently does not require any headers to be set, as indicated by:
            - **Key**: (empty) - No specific header key is included.
            - **Value**: (empty) - No specific header value is included.
            - **Type**: default - Default type indicating it's a standard header.
            - **Disabled**: true - This header setting is disabled and not sent with the request.

        - **Body**:
          - **Mode**: 
            - **raw**: Specifies that the request body will be sent as raw data.
          
          - **Raw**: 
            - The content of the body that needs to be sent in JSON format:
              - **accountId**: "accountId" - The ID of the account associated with this request (replace with actual ID).
              - **sessionId**: "sessionId" - The ID of the session in which the signal answer is being created (replace with actual ID).
              - **type**: "answer" - Specifies that this is an answer type signal.
              - **sdp**: 
                - **Session Description Protocol (SDP)**: 
                  - Contains a series of lines formatted for multimedia session description:
                    - **Version**: `v=0` indicates the SDP version.
                    - **Origin**: `o=- 25678 753849 IN IP4 192.168.1.1` identifies the session origin.
                    - **Session Name**: `s=-` provides a default session name.
                    - **Connection Information**: `c=IN IP4 192.168.1.1` specifies the connection information.
                    - **Timing**: `t=0 0` indicates that the session does not have a specific timing.
                    - **Media Attributes**: `a=recvonly` indicates that this endpoint will only receive media.
                    - **Media Description**: `m=audio 49170 RTP/AVP 0` describes the media type (audio) and associated settings.
                    - **RTP Mapping**: `a=rtpmap:0 PCMU/8000` specifies the payload type and codec being used.

          - **Options**: 
            - **Raw**: Contains settings related to the type of raw body:
              - **Language**: "json" - Indicates that the raw data is in JSON format. 

        This description provides all necessary details for users of the Postman API collection to understand how to use the "Signal - Answer - Create" endpoint effectively.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                type: answer
                sdp: "v=0\r\no=- 25678 753849 IN IP4 192.168.1.1\r\ns=-\r\nc=IN IP4 192.168.1.1\r\nt=0 0\r\na=recvonly\r\nm=audio 49170 RTP/AVP 0\r\na=rtpmap:0 PCMU/8000\r\n"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/signal/answer/update:
    put:
      tags:
        - WhipSignal
      summary: Signal - Answer - Update
      description: |-
        ### Endpoint: Signal - Answer - Update

        **Request Type:** PUT  
        **URL:** `http://localhost:3000/api/signal/answer/update`  

        #### Authentication
        - **Type:** Bearer Token
          - **Key:** `token`
          - **Value:** `BearerToken` (Placeholder for the actual token)
          - **Type:** String  
          This token is required for authorization to access the API.

        #### Headers
        - **Key:** Empty (No additional headers are set)
        - **Value:** Empty 
        - **Type:** Default 
        - **Disabled:** true  
          This indicates that no custom headers are being sent with the request.

        #### Request Body
        - **Mode:** Raw  
          The body content is sent as a raw JSON object.

        **Raw Content:**  
        ```json
        {
          "accountId": "accountId",
          "sessionId": "sessionId",
          "signalId": "signalId",
          "type": "answer",
          "sdp": "v=0\r\no=- 25678 753849 IN IP4 192.168.1.1\r\ns=-\r\nc=IN IP4 192.168.1.1\r\nt=0 0\r\na=recvonly\r\nm=audio 49170 RTP/AVP 0\r\na=rtpmap:0 PCMU/8000\r\n"
        }
        ```

        #### Body Parameters
        - **accountId:** 
          - **Description:** Identifier for the account associated with the signal. This should be provided in string format.

        - **sessionId:** 
          - **Description:** Identifier for the session in which the signal is being used. This should be provided in string format.

        - **signalId:** 
          - **Description:** Identifier for the specific signal being updated. This should be provided in string format.

        - **type:** 
          - **Description:** Denotes the type of signal being sent. In this case, it is set to "answer". This identifies the purpose or the nature of the signal.

        - **sdp:** 
          - **Description:** Session Description Protocol formatted string that contains network and media information. This includes details like version, origin, timing, media type, and connection information. The example provided indicates that audio media is being described with specific parameters.

          **Example SDP:**
          ```
          v=0
          o=- 25678 753849 IN IP4 192.168.1.1
          s=-
          c=IN IP4 192.168.1.1
          t=0 0
          a=recvonly
          m=audio 49170 RTP/AVP 0
          a=rtpmap:0 PCMU/8000
          ```

        This endpoint is designed for updating an answer signal in a WebRTC context, using the provided account and session identifiers along with the relevant session description protocol details.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                signalId: signalId
                type: answer
                sdp: "v=0\r\no=- 25678 753849 IN IP4 192.168.1.1\r\ns=-\r\nc=IN IP4 192.168.1.1\r\nt=0 0\r\na=recvonly\r\nm=audio 49170 RTP/AVP 0\r\na=rtpmap:0 PCMU/8000\r\n"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/signal/answer/get:
    get:
      tags:
        - WhipSignal
      summary: Signal - Answer - Get
      description: |-
        ### Endpoint Description: Signal - Answer - Get

        **Request Type:**  
        - **Method:** GET  
        This method is used to retrieve data from the specified endpoint.

        **Authentication:**  
        - **Auth Type:** Bearer  
        The request requires bearer token authentication, which is used to authorize access to the API.  

        - **Bearer Token Structure:**  
          - **Key:** token  
            This field holds the actual bearer token needed for authentication.  
          - **Value:** BearerToken  
            This is a placeholder string for the actual token that should be provided to authenticate the request.  
          - **Type:** string  
            Indicates that the value is a string.

        **Endpoint URL:**  
        - **URL:** `http://localhost:3000/api/signal/answer/get?accountId=accountId&sessionId=sessionId&signalId=signalId`  
        This is the URL endpoint being accessed:  
          - **Base URL:** `http://localhost:3000/api/signal/answer/get`  
          This is the root path for the API call.  
          - **Query Parameters:**  
            - **accountId:** The unique identifier for the account from which the data is being requested.  
            - **sessionId:** The unique identifier for the session related to the signal being queried.  
            - **signalId:** The unique identifier for the specific signal being requested.  

        **Headers:**  
        - **Headers Array:**  
          - There are no headers specified in this request as the header object is empty, and it is currently disabled. 

        **Body:**  
        - **Body Mode:** raw  
          The request body is set to raw format, meaning it can contain a string payload.  
        - **Raw Content:**  
          - The raw body is empty for this GET request, as typically, GET requests do not require a body.

        This endpoint is designed to fetch data related to a specific signal answer based on the identifiers provided in the query parameters. Ensure that valid tokens and parameters are used when making the request.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: signalId
          in: query
          schema:
            type: string
          example: signalId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/signal/answer/delete:
    post:
      tags:
        - WhipSignal
      summary: Signal - Answer - Delete
      description: |
        ### Signal - Answer - Delete

        This endpoint is used to delete a specific answer related to a signal. Below is a detailed description of each data component associated with this API request:

        #### Authentication
        - **Auth Type**: Bearer
          - **Key**: This represents the type of authentication being used. In this case, it is a Bearer token.
          - **Token**: A placeholder string "BearerToken" is used, which should be replaced with an actual Bearer token required for authentication.

        #### Request Method
        - **Method**: POST
          - This indicates that the request will use the POST HTTP method to send data to the server for processing.

        #### URL
        - **URL**: `http://localhost:3000/api/signal/answer/delete`
          - This is the endpoint where the request will be sent. It targets the local server on port 3000 and the specific path for deleting a signal answer.

        #### Headers
        - **Headers**: An array for defining any HTTP headers for the request. 
          - Currently, it appears to have an empty header entry which is disabled. This means no additional headers are being sent in the request.

        #### Body
        - **Body**: 
          - **Mode**: Raw
            - This implies that the body of the request will contain raw data.
          - **Raw**: `{"accountId":"accountId", "sessionId":"sessionId", "signalId":"signalId"}`
            - This is the main content of the body where the data is structured in JSON format.
            - **accountId**: Placeholder for the identifier of the account associated with the request.
            - **sessionId**: Placeholder for the identifier of the session during which the request is made.
            - **signalId**: Placeholder for the identifier of the signal that is targeted for deletion.
          - **Options**:
            - **Raw Language**: JSON
              - Indicates that the format of the raw body content is JSON, ensuring proper handling of the data format.

        This endpoint is crucial for managing signal answers by allowing users to delete specific entries as needed.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                signalId: signalId
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/signal/candidate/create:
    post:
      tags:
        - WhipSignal
      summary: Signal - Candidate - Create
      description: |-
        ### Description of Endpoint Data

        **Endpoint Name:** Signal - Candidate - Create  
        This endpoint is used to create a new candidate signal in the system.

        **Request Method:** POST  
        Indicates that this request will be sending data to the server to create a new resource.

        **Request URL:**  
        `http://localhost:3000/api/signal/candidate/create`  
        This is the URL where the request will be sent. It is hosted locally at port 3000.

        **Authentication:**  
        - **Type:** Bearer  
          This indicates that a bearer token is required for authentication.
        - **Bearer Token:**  
          - **Key:** token  
            Represents the token used for authentication.
          - **Value:** BearerToken  
            Placeholder for the actual bearer token value. It should be replaced with a valid token.
          - **Type:** string  
            Specifies that the token is a string.

        **Headers:**  
        - **Key:** (Empty)  
          No specific headers are defined for this request, indicating that default headers are being used.
        - **Value:** (Empty)  
          No specific value is provided for headers.
        - **Type:** default  
          Indicates that this header configuration is in its default state.
        - **Disabled:** true  
          This means that the headers are not currently active.

        **Body:**  
        - **Mode:** raw  
          The body data is being sent in a raw format.
        - **Raw Data:**  
          ```json
          {
            "accountId": "accountId", 
            "sessionId": "sessionId", 
            "type": "candidate", 
            "candidate": "candidate:842163049 1 udp 1677729535 192.168.1.1 54400 typ srflx raddr 0.0.0.0 rport 0 generation 0 ufrag EEtu network-id 1 network-cost 10"
          }
          ```
          - **accountId:**  
            This field represents the unique identifier associated with the user's account. It should be replaced with the actual account ID.
          - **sessionId:**  
            This field holds the unique identifier for the session during which the candidate is being created. This should be replaced with the actual session ID.
          - **type:**  
            This field indicates the type of signal being sent. In this case, it is set to "candidate," indicating that this signal relates to a network candidate.
          - **candidate:**  
            This field contains a detailed string representation of the candidate. It includes various attributes:
            - **candidate ID:** `candidate:842163049`
            - **component ID:** `1`
            - **protocol:** `udp`
            - **priority:** `1677729535`
            - **IP address:** `192.168.1.1`
            - **port:** `54400`
            - **candidate type:** `typ srflx`
            - **relayed address:** `raddr 0.0.0.0`
            - **relayed port:** `rport 0`
            - **generation:** `0`
            - **username frag:** `ufrag EEtu`
            - **network ID:** `network-id 1`
            - **network cost:** `network-cost 10`
          
        **Options:**  
        - **Raw:**  
          - **Language:** json  
            Specifies that the raw body data is formatted as JSON. 

        This information provides insight into how to configure the request body, authentication, and endpoint specifics for creating a candidate signal.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                type: candidate
                candidate: candidate:842163049 1 udp 1677729535 192.168.1.1 54400 typ srflx raddr 0.0.0.0 rport 0 generation 0 ufrag EEtu network-id 1 network-cost 10
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/signal/candidate/update:
    put:
      tags:
        - WhipSignal
      summary: Signal - Candidate - Update
      description: |-
        {
          "description": {
            "name": "Signal - Candidate - Update",
            "request": {
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "BearerToken",
                    "type": "string"
                  }
                ]
              },
              "details": {
                "method": "PUT": "This specifies the HTTP method used for the request, which is PUT, indicating that the request is intended to update existing data.",
                "url": "http://localhost:3000/api/signal/candidate/update": "This is the endpoint where the update request will be sent. It is hosted on a local server and specifies the resource to be updated, which is the signal candidate.",
                "headers": [
                  {
                    "key": "": "This indicates there are no specific headers being passed in the request.",
                    "value": "": "There is no value associated with any headers.",
                    "type": "default": "This signifies that the header is of default type.",
                    "disabled": true: "This indicates that the header is disabled and not being sent with the request."
                  }
                ],
                "body": {
                  "mode": "raw": "This indicates that the body of the request is being sent in raw format rather than as form data or URL-encoded.",
                  "raw": "{\"accountId\":\"accountId\", \"sessionId\":\"sessionId\", \"signalId\":\"signalId\", \"type\": \"candidate\",\"candidate\": \"candidate:842163049 1 udp 1677729535 192.168.1.1 54400 typ srflx raddr 0.0.0.0 rport 0 generation 0 ufrag EEtu network-id 1 network-cost 10\"}": "This is the actual data being sent in the body of the request. It is a JSON string that includes the following fields: \n- accountId: Represents the identifier for the account associated with the signal.\n- sessionId: Indicates the session related to the candidate update.\n- signalId: Identifies the specific signal that is being updated.\n- type: This is set to 'candidate', indicating the type of information being sent.\n- candidate: Contains the data for the candidate which includes various networking parameters such as candidate name, priority, and other attributes necessary for the signaling process.",
                  "options": {
                    "raw": {
                      "language": "json": "This indicates that the raw body content is formatted in JSON, ensuring that the server interprets it correctly."
                    }
                  }
                }
              }
            }
          }
        }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                signalId: signalId
                type: candidate
                candidate: candidate:842163049 1 udp 1677729535 192.168.1.1 54400 typ srflx raddr 0.0.0.0 rport 0 generation 0 ufrag EEtu network-id 1 network-cost 10
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/signal/candidate/get:
    get:
      tags:
        - WhipSignal
      summary: Signal - Candidate - Get
      description: |-
        - **name**: This is the name of the API endpoint, which is "Signal - Candidate - Get". It indicates that this endpoint is used to retrieve information related to candidates within a signal context.

        - **request**: This object contains all the details necessary to make the API request.

          - **auth**: This section specifies the authentication method used for this request.
          
            - **type**: Indicates the type of authentication. Here, it is set to "bearer", which means a bearer token is required for authorization.
            
            - **bearer**: This array contains information about the bearer token.
            
              - **key**: Represents the name of the token parameter, which is "token".
              
              - **value**: This is the actual token that provides access to the API. In this case, it is labeled as "BearerToken", which should be replaced with an actual token.
              
              - **type**: Describes the data type of the key value. It is set to "string", indicating that the token is a string.

          - **method**: Specifies the HTTP method used for the request. This endpoint uses "GET", indicating that it retrieves data from the server.

          - **url**: This is the endpoint URL that the request will target. The URL contains query parameters:
          
            - **accountId**: A parameter representing the identifier for the account. This will need to be replaced with a specific account ID value.
            
            - **sessionId**: A parameter indicating the identifier for the session. This should be replaced with the actual session ID you want to use.
            
            - **signalId**: A parameter representing the identifier for the signal. This also needs to be replaced with the specific signal ID.

          - **headers**: This array contains any headers to be sent with the request.
          
            - **key**: This is the name of a header, which is currently empty, indicating no additional headers are set.
            
            - **value**: This is the value for the header key, also currently empty.
            
            - **type**: Specifies the type of the header, set to "default".
            
            - **disabled**: This boolean indicates whether the header is disabled. It is set to true, meaning this header will not be sent with the request.

          - **body**: Represents the body of the request, which can hold data when sending requests that require a payload.
          
            - **mode**: Indicates the format of the body. Here it is set to "raw", which means the body will contain raw data.
            
            - **raw**: This is where the raw data would go. Currently, it is empty, indicating that no data will be sent in the request body. For a GET request, this is typically not used.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: signalId
          in: query
          schema:
            type: string
          example: signalId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/signal/candidate/delete:
    post:
      tags:
        - WhipSignal
      summary: Signal - Candidate - Delete
      description: |-
        ### API Endpoint: Signal - Candidate - Delete

        #### Request Details

        - **Auth**
          - **Type**: Bearer
            - This specifies the authentication method used for the request. A bearer token is required for authorization.
            - **Bearer Token**: 
              - **Key**: `token`
              - **Value**: `BearerToken`
              - **Type**: string
              - This is the actual token that must be included in the authorization header to authenticate the request.

        - **Method**
          - **Type**: POST
            - The HTTP method used for the request, which is POST. This method typically indicates that we are sending data to the server to create or update a resource.

        - **URL**
          - **Endpoint**: `http://localhost:3000/api/signal/candidate/delete`
            - This is the location on the server where the request will be sent. The endpoint is designed to handle the deletion of a candidate signal.

        - **Headers**
          - **Key**: (empty string)
          - **Value**: (empty string)
          - **Type**: default
          - This header field is currently disabled and contains no additional headers. It can be modified to include any necessary headers in the future.

        - **Body**
          - **Mode**: raw
            - This indicates that the body of the request will be sent as raw data, as opposed to form-data or x-www-form-urlencoded.
          - **Raw Data**:
            - The body contains a JSON string with the following fields:
              - **accountId**: `"accountId"`
                - Represents the unique identifier for the account associated with this request.
              - **sessionId**: `"sessionId"`
                - Stands for the unique session identifier for the current communication session.
              - **signalId**: `"signalId"`
                - This is the unique identifier for the specific signal that needs to be deleted.
              - **type**: `"candidate"`
                - This field indicates the type of the data being sent, specifying that it pertains to a candidate.
              - **candidate**: 
                - This string contains information about the candidate. It comprises various parameters such as:
                  - ID: `candidate:842163049`
                  - Priority: `1`
                  - Protocol: `udp`
                  - Port: `54400`
                  - IP Address: `192.168.1.1`
                  - Type: `srflx`
                  - Remote Address: `0.0.0.0`
                  - Remote Port: `0`
                  - Generation: `0`
                  - Username Fragment: `ufrag EEtu`
                  - Network ID: `network-id 1`
                  - Network Cost: `network-cost 10`
                - This information is necessary for identifying and accurately deleting the candidate signal in the system.

          - **Options**
            - **Raw**: 
              - **Language**: JSON
                - Specifies that the raw data format is JSON, which is commonly used for structuring data sent to APIs.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                accountId: accountId
                sessionId: sessionId
                signalId: signalId
                type: candidate
                candidate: candidate:842163049 1 udp 1677729535 192.168.1.1 54400 typ srflx raddr 0.0.0.0 rport 0 generation 0 ufrag EEtu network-id 1 network-cost 10
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/connect:
    post:
      tags:
        - WebSocketSetupJoin
      summary: Web - Socket - Connect
      description: |-
        ### Description of Endpoint Data

        **Name:**  
        - This represents the name of the API request, which is "Web - Socket - Connect". It indicates that this request is intended to establish a connection for a web socket.

        **Request:**  
        - This section describes the specifics of the API request made to the endpoint.

        **Method:**  
        - The HTTP method used for this request is POST. This indicates that the request is intended to send data to the server to create or update a resource.

        **URL:**  
        - The request is sent to the URL `http://localhost:3000/api/socket/web/connect`. This is the endpoint where the request is directed, which typically represents a specific resource or action at the server.

        **Headers:**  
        - This section is currently empty, meaning no additional HTTP headers are set for this request. Headers might typically include authentication tokens, content types, or other metadata if needed.

        **Body:**  
        - The body of the request contains the data being sent to the server.

        **Mode:**  
        - The mode is set to "raw", indicating that the body is being sent as a raw JSON string.

        **Raw:**  
        - The content of the body is a JSON string: `{"socketId": "socketId", "accountId": "accountId"}`. This includes two key-value pairs:
          - **socketId:** This is a placeholder for the unique identifier of the socket connection being established. It represents the specific socket instance that the server will use to facilitate communication.
          - **accountId:** This is a placeholder for the unique identifier associated with the user's account. It links the socket connection to a specific user, allowing for personalized interaction.

        **Options:**  
        - This section provides additional specifications for the body format.

        **Raw Language:**  
        - The language of the raw body is specified as "json", indicating that the data is formatted as JSON, which is a common data interchange format used in web APIs.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                socketId: socketId
                accountId: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/disconnect:
    post:
      tags:
        - WebSocketSetupJoin
      summary: Web - Socket - Disconnect
      description: |-
        ### Endpoint: Web - Socket - Disconnect

        **Method:** POST  
        **URL:** `http://localhost:3000/api/socket/web/disconnect`

        #### Description of Data:

        - **name:** This data represents the name of the API endpoint for disconnecting a WebSocket connection. It clearly indicates the action being performed.

        - **request:** This encapsulates all the details about the request being made to the API.

          - **method:** This specifies the HTTP method used for the request. In this case, it is a POST request, indicating data is being sent to the server.

          - **url:** This is the endpoint where the request will be sent. It consists of the base URL (`http://localhost:3000`) and the path (`/api/socket/web/disconnect`) specifically designed for handling WebSocket disconnection requests.

          - **headers:** This is an array that can include any HTTP headers you may want to send with the request. Currently, it is empty, suggesting no additional headers are required for this request.

          - **body:** This section contains the data being sent in the request body.
          
            - **mode:** This indicates the format of the body data. Here, it is set to "raw", meaning the data is being sent as raw text rather than form data or another format.

            - **raw:** This is the actual content that is sent in the body of the request. It is in JSON format and includes two fields:
              - **socketId:** This is a placeholder for the identifier of the WebSocket connection that needs to be disconnected.
              - **accountId:** This is a placeholder for the identifier of the account from which the WebSocket connection should be disconnected.

            - **options:** This can provide additional options related to the format of the request body.
            
              - **raw:** This component specifies that the language for the raw data is JSON, indicating that the data structure follows JSON syntax.

        This endpoint is specifically designed to handle disconnections from a WebSocket service by requiring both the socket ID and account ID.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                socketId: socketId
                accountId: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/status:
    get:
      tags:
        - WebSocketSetupJoin
      summary: Web - Socket - Status
      description: |-
        ### Endpoint Description: Web - Socket - Status

        **Request Method:**  
        - **GET** - This is a request method used to retrieve data from the server.

        **URL:**  
        - `http://localhost:3000/api/socket/web/status?socketId=socketId`  
          This is the endpoint URL where the request will be sent. The placeholder `socketId` should be replaced with the actual socket ID you want to check the status for.

        **Query Parameters:**  
        - **socketId** - This is a required parameter that specifies the unique identifier of the socket connection whose status you wish to retrieve.

        **Headers:**  
        - Currently, there are no headers specified for this API request, meaning it does not require any special authentication or metadata beyond the basic GET request.

        ### Functionality:  
        This endpoint is designed to check the status of a web socket connection. By providing a valid socket ID, you can obtain the current status of that particular socket, which can help in diagnosing connectivity issues or ensuring that your application maintains a stable socket connection.
      parameters:
        - name: socketId
          in: query
          schema:
            type: string
          example: socketId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/get:
    get:
      tags:
        - WebSocketSetupJoin
      summary: Web - Socket - Get
      description: |-
        ### Description for API Endpoint: Web - Socket - Get

        This endpoint retrieves information through a WebSocket connection based on a provided socket ID.

        - **Name**: Web - Socket - Get
          - This is the name of the API request, identifying it as a GET request related to WebSocket operations.

        - **Request Method**: GET
          - The HTTP method used to initiate the request. In this case, it is a GET request, which is typically used to retrieve data from a specified resource.

        - **URL**: `http://localhost:3000/api/socket/web/get?socketId=socketId`
          - This is the endpoint URL that the request is sent to. It consists of:
            - **Base URL**: `http://localhost:3000` - This indicates that the API is hosted locally on port 3000.
            - **Endpoint Path**: `/api/socket/web/get` - This is the specific path that defines the resource being accessed.
            - **Query Parameter**: `?socketId=socketId` - This is the query string used to pass the socket ID. The parameter `socketId` should be replaced with the actual socket ID value that you want to use for retrieving data.

        - **Headers**: []
          - This section currently does not include any custom headers. Headers can be used to pass additional information with the request, such as authentication tokens or content-type specifications, but in this instance, no headers are being utilized. 

        Make sure to replace the placeholder `socketId` in the URL with the actual socket ID value whenever you make a request.
      parameters:
        - name: socketId
          in: query
          schema:
            type: string
          example: socketId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - WebSocketSetupJoin
      summary: Web - Socket - Get Replies
      description: |-
        ### Description of Each Data in the Endpoint:

        - **name**: 
          - This is the title of the API request. It identifies the purpose of the request, which in this case is to retrieve replies through a web socket.

        - **request**: 
          - This section contains all the details about how to make the API call.

          - **method**: 
            - The HTTP method used for the request. Here, it is set to "POST," indicating that data may be sent to the server to create or update a resource.

          - **url**: 
            - The endpoint's URL where the request will be sent. In this example, it points to `http://localhost:3000/api/socket/web/get`, which is a local server address.

          - **headers**: 
            - This array is used to specify any HTTP headers that need to be included in the request. In this case, it is empty, meaning no custom headers are being sent.

          - **body**: 
            - This part defines the content sent with the request.

            - **mode**: 
              - Indicates the format of the body content. It is set to "raw," which means the body will contain raw data.

            - **raw**: 
              - This is where the actual data for the POST request is defined. In this case, it is an empty JSON object (`{}`), meaning no specific data is being sent.

            - **options**: 
              - This section provides additional settings for the body format.

              - **raw**: 
                - Configures options specific to raw body input. 

                - **language**: 
                  - Specifies the programming language or format of the raw data. Here, it is set to "json," indicating that the body is expected to be in JSON format.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/delete:
    post:
      tags:
        - WebSocketSetupJoin
      summary: Web - Socket - Delete (Soft)
      description: |-
        ### Endpoint Description: Web - Socket - Delete (Soft)

        - **Name:** Web - Socket - Delete (Soft)
          - This is the name of the API endpoint that indicates its purpose, which is to perform a soft delete operation on a WebSocket connection.

        - **Request:**
          - **Method:** POST
            - This specifies that the request uses the POST HTTP method, typically used for sending data to the server.
          
          - **URL:** http://localhost:3000/api/socket/web/delete
            - This is the endpoint's URL where the request should be sent. It points to a local server running on port 3000, specifically for the WebSocket soft delete action.

          - **Headers:** 
            - This section is currently empty, indicating that there are no specific headers required for this request. However, headers can be added if authentication or content type specifications are necessary.

          - **Body:**
            - **Mode:** raw
              - The body content is sent in a raw format, allowing for custom data to be specified directly.
              
            - **Raw:** 
              - The body contains JSON data in string format, specifically:
                ```json
                {
                  "socketId": "socketId"
                }
                ```
              - This indicates that the request should include a JSON object with a `socketId` field, which is intended to identify the specific WebSocket connection that is to be soft deleted. The value "socketId" should be replaced with the actual identification string of the WebSocket to be removed.

            - **Options:**
              - **Raw:**
                - **Language:** json
                  - This indicates that the raw body content is formatted as JSON, helping any API clients interpret the data correctly.

        This detailed description provides all the necessary information for users to understand the purpose and structure of the API endpoint when using the Postman collection.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                socketId: socketId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/destroy:
    post:
      tags:
        - WebSocketSetupJoin
      summary: Web - Socket - Destroy (Permanent)
      description: |-
        ### Web - Socket - Destroy (Permanent)

        **Request Method**: POST  
        This request uses the POST method to send data to the server.

        **Request URL**: http://localhost:3000/api/socket/web/destroy  
        This is the endpoint where the request will be sent. It is typically used for operations related to socket management, specifically to permanently destroy a web socket connection.

        **Headers**:  
        This request does not include any custom headers. Additional headers may be added if required for authentication or content type specifications.

        **Body Parameters**:  
        - **Mode**: raw  
          This specifies that the data is being sent in its raw format, which allows for sending a custom payload.

        - **Raw Data**:  
          ```json
          {
            "socketId": "socketId"
          }
          ```  
          This is the JSON payload being sent in the request body. It contains a single key-value pair:
          
          - **socketId**: This is a placeholder for the unique identifier of the socket connection that you want to destroy. You'll need to replace "socketId" with the actual socket ID you wish to terminate.

        - **Options**:  
          - **Raw**:  
            This indicates that the payload is in raw JSON format. The specified language is set to "json" to assist in proper formatting and syntax highlighting.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                socketId: socketId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/undelete:
    post:
      tags:
        - WebSocketSetupJoin
      summary: Web - Socket - Undelete
      description: |-
        ### Endpoint Description: Web - Socket - Undelete

        - **Name**: Web - Socket - Undelete
          - This is the identifier for the endpoint, indicating that it is related to websockets and the operation of undeleting a specific entity.

        - **Request**: 
          - This section contains details about the HTTP request required to interact with the endpoint.

          - **Method**: 
            - **POST**
              - This specifies that the request type is POST, which is used to send data to the server to create or update a resource.

          - **URL**: 
            - **http://localhost:3000/api/socket/web/undelete**
              - This is the endpoint URL where the request is sent. It indicates that the request is directed to a local server running on port 3000 and the specific path for undeleting a web socket.

          - **Headers**: 
            - **[]**
              - This indicates that there are no custom headers required for this request. Headers are typically used to provide additional information about the request.

          - **Body**: 
            - This section outlines the body of the request, which includes the data being sent to the server.

            - **Mode**: 
              - **raw**
                - This means that the body of the request will be sent in raw format rather than form data or another format.

            - **Raw**: 
              - **"{\"socketId\": \"socketId\"}"**
                - This represents the actual data being sent in the body of the request. In this case, it is a JSON string that includes a property called `socketId`. The value of `socketId` should be replaced with the actual ID of the socket you want to undelete.

            - **Options**: 
              - This defines the format details of the raw data.

              - **Raw**: 
                - This specifies that the raw data will be formatted as JSON.

              - **Language**: 
                - **json**
                  - This indicates that the data being sent is in JSON format, which is a common data interchange format that is easy to read and write for humans and machines.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                socketId: socketId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/thread:
    get:
      tags:
        - WebSocketMessage
      summary: Web - Socket - Get Thread
      description: |-
        ## Endpoint: Web - Socket - Get Thread

        ### Request Method
        - **GET**: This method is used to retrieve information from the specified URL.

        ### URL
        - **http://localhost:3000/api/socket/web/thread?socketId=socketId**: This is the endpoint that will be called to get the thread information associated with a specific WebSocket connection. The URL includes a query parameter for `socketId` which is required to identify the specific WebSocket connection you want to retrieve the thread information for.

        ### Query Parameter
        - **socketId**: This parameter is used to pass the unique identifier of the WebSocket connection. It allows the API to fetch the specific thread associated with the provided socket ID. The value for this parameter should be replaced with the actual socket ID when making the request.

        ### Headers
        - **headers**: There are no specific headers included in this request. This means the request does not require any special authentication or additional information to be sent in the headers.

        ### Summary
        This API endpoint is designed to retrieve a thread's information linked to a particular WebSocket connection identified by the `socketId` parameter. It uses the GET method to fetch this information at the specified URL, and does not require any headers in the request.
      parameters:
        - name: socketId
          in: query
          schema:
            type: string
          example: socketId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/message:
    post:
      tags:
        - WebSocketMessage
      summary: Web - Socket - Update Message
      description: |-
        ### Description of the Web - Socket - Update Message Endpoint

        This endpoint is designed to send an update message through a WebSocket connection. Below is a detailed breakdown of each component of the request.

        - **Endpoint Name**: Web - Socket - Update Message  
          This is the title assigned to the endpoint, indicating its purpose related to WebSocket communication.

        - **Request Method**: POST  
          The method used for this request is POST, which is typically used to send data to a server.

        - **Request URL**: http://localhost:3000/api/socket/web/message  
          This is the URL where the request is sent. It points to a local server running on port 3000, specifically to the WebSocket message handling endpoint.

        - **Request Headers**:  
          This array is empty, meaning no specific headers are required for this request. However, headers can be added here if needed for authentication or content type.

        - **Request Body**:  
          The body of the request contains the data being sent in JSON format. It is in "raw" mode, allowing for a structured JSON input.

          - **Mode**: raw  
            Indicates that the body content is being sent as raw text rather than form data or URL-encoded data.

          - **Raw Body**:  
            This is the actual JSON object being sent in the POST request. It contains the following fields:
            
            - **socketId**: "socketId"  
              This represents the identifier for the specific WebSocket connection. It allows the server to identify which connection the message is related to.

            - **accountId**: "accountId"  
              This field holds the unique identifier for the user account that is associated with the WebSocket session. It helps in linking the message to the specific user.

            - **sessionId**: "sessionId"  
              This is the identifier for the current session, allowing the server to track the user's active session state.

            - **messageId**: "messageId"  
              This field is used to uniquely identify the message being sent. It is useful for tracking or referencing specific messages.

            - **message**: "message"  
              This is the actual content of the message that is being transmitted through the WebSocket. It can be any text or data that the user wants to send.

        - **Options**:  
          - **Raw**:  
            This section specifies the details for handling the raw data. It includes:
            
            - **Language**: "json"  
              Indicates that the raw content type is in JSON format, ensuring proper handling and interpretation on the receiving end.

        This endpoint facilitates communication through WebSockets by sending structured data, allowing for real-time updates and interactions between clients and the server.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                socketId: socketId
                accountId: accountId
                sessionId: sessionId
                messageId: messageId
                message: message
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/remove:
    post:
      tags:
        - WebSocketMessage
      summary: Web - Socket - Remove Share Message
      description: |-
        ### Endpoint: Web - Socket - Remove Share Message

        - **Name**: Web - Socket - Remove Share Message
          - This indicates that the endpoint is designed for handling socket communication to remove a shared message.

        - **Request**: 
          - The request section contains details about how to interact with the API endpoint.

          - **Method**: 
            - `POST`: This indicates that the request will send data to the server to remove a shared message.

          - **URL**: 
            - `http://localhost:3000/api/socket/web/remove`: This is the endpoint's URL where the request is sent. `localhost:3000` implies that the server is running on the local machine at port 3000.

          - **Headers**: 
            - `[]`: Currently, there are no specific headers included in the request. Headers may be added in the future if needed.

          - **Body**: 
            - This section describes the data that needs to be sent in the body of the request.
            
            - **Mode**: 
              - `raw`: The body is being sent in a raw format without any additional encoding or multipart form data.

            - **Raw**: 
              - `"{\"socketId\": \"socketId\", \"accountId\": \"accountId\", \"messageId\": \"messageId\", \"share\": true}"`: This JSON string specifies the data structure for the request body. It includes:
                - **socketId**: This represents the unique identifier for the socket connection, which indicates which socket is being manipulated.
                - **accountId**: This is the unique identifier for the user account, related to the action of sharing or removing a shared message.
                - **messageId**: This is the unique identifier of the message that is to be removed from the shared list.
                - **share**: A boolean value (`true` in this case) that indicates whether the action pertains to a shared message.

          - **Options**: 
            - **Raw**: 
              - **Language**: 
                - `json`: This specifies that the raw body content is in JSON format, which helps in understanding how to format the input data correctly. 

        This detailed description helps users of the API understand what each field in the request represents and how they should format their requests when using this endpoint.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                socketId: socketId
                accountId: accountId
                messageId: messageId
                share: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/like:
    post:
      tags:
        - WebSocketMessage
      summary: Web - Socket - Like Message
      description: |-
        ### Endpoint Description: Web - Socket - Like Message

        - **Name**: Web - Socket - Like Message
          - This is the identifier for the API endpoint used for sending a "like" message via a WebSocket connection.

        - **Request**:
          - **Method**: POST
            - This indicates that the request will send data to the server to create or update a resource.
          - **URL**: http://localhost:3000/api/socket/web/like
            - This is the endpoint where the request will be sent. It specifies the protocol (HTTP), the server location (localhost), the port (3000), and the path for the API resource related to liking messages.

        - **Headers**: 
          - An array indicating any additional headers that should be sent with the request. In this case, it is empty, meaning no custom headers are being applied.

        - **Body**:
          - **Mode**: raw
            - This specifies that the body of the request will consist of raw data rather than form-encoded or multipart data.
          - **Raw**: 
            - The content of the request body is in JSON format. This contains three key-value pairs:
              - **socketId**: "socketId"
                - This represents the identifier of the WebSocket connection through which the message is being sent.
              - **messageId**: "messageId"
                - This is the identifier of the message that is being liked, allowing the server to know which message needs to be updated.
              - **accountId**: "accountId"
                - This represents the identifier of the user or account that is performing the action of liking the message.
          - **Options**:
            - **Raw**:
              - **Language**: json
                - This indicates that the format of the data within the raw body is JSON, which is a lightweight data interchange format that is easy for humans to read and write, and easy for machines to parse and generate. 

        This structured information allows users to understand the purpose and requirements for interacting with the endpoint for liking messages through WebSocket.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                socketId: socketId
                messageId: messageId
                accountId: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/dislike:
    post:
      tags:
        - WebSocketMessage
      summary: Web - Socket - Dislike Message
      description: |-
        ### Web - Socket - Dislike Message

        **Request Details:**

        - **Method**: POST  
        This endpoint uses the HTTP POST method to send data to the server.

        - **URL**: http://localhost:3000/api/socket/web/dislike  
        This is the endpoint where the request is sent. It is targeted at the localhost on port 3000, specifically to the `/api/socket/web/dislike` path.

        **Headers**:  
        No specific headers are set for this request. Users may need to include headers depending on their authentication or data format requirements.

        **Body**:  
        The request body is sent in raw JSON format. It includes the following fields:

        - **socketId**:  
        This is a string that represents the unique identifier for the user's socket connection. It is used to identify the instance of the WebSocket connection through which the dislike action is being communicated.

        - **messageId**:  
        This is a string that holds the unique identifier of the message that the user is disliking. This id is essential for the server to recognize which message is being affected by the dislike action.

        - **accountId**:  
        This is a string that indicates the unique identifier associated with the user's account who is sending the dislike. It helps to track which user performed the action.

        **Body Format Options**:  
        The request body is specified in JSON format. 

        - **Language**: json  
        This setting indicates that the raw data is formatted as JSON, ensuring that the server can parse it correctly.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                socketId: socketId
                messageId: messageId
                accountId: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/share:
    post:
      tags:
        - WebSocketMessage
      summary: Web - Socket - Share Message
      description: |-
        ### Web - Socket - Share Message

        **Endpoint:**  
        This API endpoint allows you to share a message over a WebSocket connection.

        **Request Method:**  
        - **POST**: This method is used to send data to the server to create or update a resource.

        **Request URL:**  
        - `http://localhost:3000/api/socket/web/share`: This is the URL where the request will be sent. It is set up to work on a local server running on port 3000.

        **Request Headers:**  
        - No specific headers are required for this request, as indicated by the empty headers array. However, if authentication or content type headers are needed, they can be added here.

        **Request Body:**  
        - The body of the request is sent in raw JSON format and includes the following fields:

          - **socketId**: This field is used to identify the specific WebSocket connection you want to use for sharing the message. You need to provide the unique identifier for the socket you intend to send the message through. 

          - **messageId**: This field represents the unique identifier of the message you want to share over the WebSocket connection. This helps in tracking and managing the specific message being shared.

          - **accountId**: This field indicates the account associated with the message. It is used to identify the user or entity that owns the message, ensuring it is sent to the correct recipient.

        **Request Body Format:**  
        - The request body must be in JSON format and should look like this:
        ```json
        {
          "socketId": "socketId",
          "messageId": "messageId",
          "accountId": "accountId"
        }
        ```
        Where you replace `"socketId"` with the actual socket ID, `"messageId"` with the actual message ID, and `"accountId"` with the actual account ID.

        **Body Options:**  
        - The body has been set to use **raw** mode and the language is specified as **json**, indicating that the data sent to the server should be in JSON format.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                socketId: socketId
                messageId: messageId
                accountId: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/reply:
    post:
      tags:
        - WebSocketMessage
      summary: Web - Socket - Reply Message
      description: |-
        ### Web - Socket - Reply Message Endpoint Description

        **Endpoint Name:** Web - Socket - Reply Message  
        This endpoint is designed to send a reply message through a WebSocket connection.

        **Request Details:**

        - **Method:**  
          This endpoint uses the HTTP POST method to send data to the server.

        - **URL:**  
          The request is sent to the specified local server URL: `http://localhost:3000/api/socket/web/reply`. This URL indicates where the reply message will be processed.

        - **Headers:**  
          There are currently no headers defined for this request. Headers are typically used to provide additional information about the request, such as content type or authentication.

        - **Body:**  
          The body of the request is sent in raw JSON format. It contains the following fields:

          - **socketId:**  
            This field should contain the unique identifier for the WebSocket connection. It is used to route the message to the correct user or session.

          - **messageId:**  
            This field should contain the unique identifier for the message being replied to. It allows the recipient to reference the original message for context.

          - **accountId:**  
            This field should include the unique identifier for the account from which the user is sending the reply. It helps to identify the sender of the message.

          - **message:**  
            This field contains the content of the reply message itself. The text that the user wishes to send in response to the original message will be placed here.

        **Body Format:**  
        The body is formatted as JSON, where all fields are key-value pairs. The raw body content is structured as follows:

        ```json
        {
          "socketId": "socketId",
          "messageId": "messageId",
          "accountId": "accountId",
          "message": "message"
        }
        ```

        This structure ensures that the server receives all necessary information to process the reply appropriately.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                socketId: socketId
                messageId: messageId
                accountId: accountId
                message: message
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/popular:
    get:
      tags:
        - WebSocketPopular
      summary: Web - Socket - Popular All
      description: |-
        ### Endpoint Description: Web - Socket - Popular All

        - **Name**: This endpoint is labeled as "Web - Socket - Popular All," indicating its purpose is to retrieve a list of popular items through a WebSocket connection.

        - **Request**:
          - **Method**: The HTTP method used for this request is GET. This means that the request is intended to fetch data from the server.
          
          - **URL**: The endpoint URL is `http://localhost:3000/api/socket/web/popular?popular=true&limit=limit`. This is where the GET request will be sent. It consists of several components:
            - **Base URL**: `http://localhost:3000` – This is the base address of the server hosting the API, which, in this instance, is running locally on port 3000.
            - **Path**: `/api/socket/web/popular` – This specifies the route within the API that is responsible for handling requests about popular items through a WebSocket.
            - **Query Parameters**:
              - `popular=true` – This parameter likely indicates that the request is specifically for popular items.
              - `limit=limit` – This parameter is used to set a limit on the number of items returned in the response. The actual value for "limit" should be replaced with a specific number when making the request.

        - **Headers**: There are no additional headers included in this request. Headers are often used for purposes like authentication or specifying the type of response desired, but in this case, none are needed.
      parameters:
        - name: popular
          in: query
          schema:
            type: boolean
          example: 'true'
        - name: limit
          in: query
          schema:
            type: string
          example: limit
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/channel:
    get:
      tags:
        - WebSocketRecent
      summary: Web - Socket - Recent Channel
      description: |-
        **Endpoint Description: Web - Socket - Recent Channel**

        - **Name**: Web - Socket - Recent Channel
          - This is the identifier for the API endpoint, indicating that it deals with recent channels within a web socket context.

        - **Request**: 
          - This section outlines the details of the API call that can be made to retrieve data.

          - **Method**: 
            - **GET**
              - This specifies that the request will be a 'GET' method, which is typically used to fetch data from a server.

          - **URL**: 
            - `http://localhost:3000/api/socket/web/channel?recent=true&limit=limit`
              - This is the endpoint URL where the GET request will target.
              - It consists of the following components:
                - `http://localhost:3000`: This indicates that the API is being accessed locally on port 3000.
                - `/api/socket/web/channel`: This portion specifies that the request is related to the web socket API for channels.
                - `?recent=true`: This query parameter is being used to filter the response to only include recent channels.
                - `&limit=limit`: This query parameter is intended to define the maximum number of channels returned in the response. Users need to replace `limit` with an actual numerical value to set this limit.

        - **Headers**: 
          - This section is currently empty, which means that no custom headers are being sent with the request. Headers may include information such as authentication tokens or content types if needed in future implementations.
      parameters:
        - name: recent
          in: query
          schema:
            type: boolean
          example: 'true'
        - name: limit
          in: query
          schema:
            type: string
          example: limit
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/team:
    get:
      tags:
        - WebSocketRecent
      summary: Web - Socket - Recent Team
      description: |-
        ### Endpoint Description: Web - Socket - Recent Team

        - **Name**: Web - Socket - Recent Team  
          This endpoint retrieves the most recent teams via a WebSocket connection.

        - **Request Method**: GET  
          The HTTP method used for this request is GET, which is used to request data from the specified resource.

        - **URL**:  
          `http://localhost:3000/api/socket/web/team?recent=true&limit=limit`  
          This is the endpoint URL. The parameters in the query string include:
          - **recent**: A flag set to true to indicate that only recent teams should be fetched.
          - **limit**: A placeholder for the maximum number of teams to return. Replace 'limit' with the desired number.

        - **Headers**:  
          This request does not require any specific headers to be included in the request.

        This endpoint is useful for applications that need to display the latest team information in real time.
      parameters:
        - name: recent
          in: query
          schema:
            type: boolean
          example: 'true'
        - name: limit
          in: query
          schema:
            type: string
          example: limit
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/loyalty:
    get:
      tags:
        - WebSocketRecent
      summary: Web - Socket - Recent Loyalty
      description: |-
        ### Web - Socket - Recent Loyalty

        #### Request Method
        - **GET**: This method is used to retrieve data from the specified endpoint.

        #### URL
        - **http://localhost:3000/api/socket/web/loyalty?recent=true&limit=limit**: 
          - This is the API endpoint where the request is sent. 
          - It is assumed to be running on the local server, specifically on port 3000.
          - The endpoint is related to "loyalty", suggesting it retrieves information about customer loyalty activities or data. 

        #### Query Parameters
        - **recent=true**: 
          - This parameter filters the response to include only the most recent loyalty information.
          - Setting this to true means that the system is requested to prioritize the latest entries.

        - **limit=limit**: 
          - This parameter specifies the maximum number of loyalty entries to return in the response.
          - The specified limit should be replaced with an actual numeric value to determine how many entries are fetched.

        #### Headers
        - **[]**: 
          - There are no custom headers defined for this request. 
          - The request will be sent without additional metadata or security tokens.

        This endpoint is designed to fetch the latest loyalty data from a web socket service, allowing users to easily access recent loyalty activity with the option to limit the number of results returned.
      parameters:
        - name: recent
          in: query
          schema:
            type: boolean
          example: 'true'
        - name: limit
          in: query
          schema:
            type: string
          example: limit
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/support:
    get:
      tags:
        - WebSocketRecent
      summary: Web - Socket - Recent Support
      description: |-
        ### Endpoint: Web - Socket - Recent Support

        #### Description:
        This endpoint retrieves recent support information through a WebSocket connection. It is designed to return a collection of recent support entries based on the specified query parameters.

        #### Detailed Description of Each Data:

        - **name**: This is the identifier for the API endpoint. It describes the function of the API call, which is to access recent support data through a WebSocket.

        - **request**: This section contains details about the type of HTTP request being made.

          - **method**: This indicates the HTTP method used for the request. In this case, the method is "GET", which means the endpoint is used to retrieve data.

          - **url**: This is the full address that the server will respond to when the request is made. It consists of:
            - **base URL**: `http://localhost:3000` - This indicates that the API is running on the local server on port 3000.
            - **path**: `/api/socket/web/support` - This specifies the particular endpoint for accessing WebSocket support data.
            - **query parameters**:
              - `recent=true` - This parameter specifies that only recent support entries should be returned.
              - `limit=limit` - This parameter is used to limit the number of results that are returned. The actual limit value should be specified when making the request.

        - **headers**: This field is currently empty, indicating that no additional headers are required to be sent with the request. Headers may include authentication tokens or content type specifications, but in this case, they are not needed.

        In summary, this endpoint allows the user to fetch recent support information through a GET request, specifying the desired limit on the number of entries returned. Make sure to replace `limit` with an actual number when making the request.
      parameters:
        - name: recent
          in: query
          schema:
            type: boolean
          example: 'true'
        - name: limit
          in: query
          schema:
            type: string
          example: limit
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/game:
    get:
      tags:
        - WebSocketRecent
      summary: Web - Socket - Recent Game
      description: |-
        ### Endpoint: Web - Socket - Recent Game

        **Method**: GET  
        **URL**: `http://localhost:3000/api/socket/web/game?recent=true&limit=limit`  

        #### Description of Data:

        - **name**: The name of this endpoint is "Web - Socket - Recent Game". This indicates that the endpoint is intended to retrieve recent game data using a WebSocket connection.

        - **request**: This section contains details about the HTTP request being made to the endpoint.

          - **method**: This specifies that the HTTP method used for the request is GET. This means the request is intended to retrieve data from the server.

          - **url**: The URL provided (`http://localhost:3000/api/socket/web/game?recent=true&limit=limit`) is where the request is being sent. 
            - `http://localhost:3000`: This indicates that the request is being sent to a local server running on port 3000.
            - `/api/socket/web/game`: This part of the URL specifies the endpoint for accessing game data through the WebSocket API.
            - `?recent=true`: This query parameter indicates that only the most recent game data should be returned.
            - `&limit=limit`: This query parameter is used to specify the maximum number of recent games to return. This should be replaced with an actual number to determine the limit of results.

        - **headers**: This is an empty array indicating that no additional headers are required for this request. If any specific headers were needed, they would be listed here.
      parameters:
        - name: recent
          in: query
          schema:
            type: boolean
          example: 'true'
        - name: limit
          in: query
          schema:
            type: string
          example: limit
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/show:
    get:
      tags:
        - WebSocketRecent
      summary: Web - Socket - Recent Show
      description: |-
        ### Web - Socket - Recent Show

        **Endpoint Description:**
        This endpoint retrieves recent shows through a WebSocket connection. It is used to fetch data about shows that have occurred recently, allowing users to stay updated with the latest content.

        **Request Method:**
        - **GET**: This method is used to request data from the specified resource.

        **Request URL:**
        - **http://localhost:3000/api/socket/web/show?recent=true&limit=limit**
          - **Base URL**: `http://localhost:3000`
            - This indicates that the API is hosted locally on your machine at port 3000.
          - **Path**: `/api/socket/web/show`
            - This specifies the segment of the API that deals with WebSocket functionality related to shows.
          - **Query Parameters**:
            - **recent=true**: This parameter filters the results to only include shows that are recent.
            - **limit=limit**: This parameter specifies the maximum number of shows to return in the response. Replace `limit` with an actual number to set the desired limit for the results.
      parameters:
        - name: recent
          in: query
          schema:
            type: boolean
          example: 'true'
        - name: limit
          in: query
          schema:
            type: string
          example: limit
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/education:
    get:
      tags:
        - WebSocketRecent
      summary: Web - Socket - Recent Education
      description: |-
        ### Description of Endpoint Data for "Web - Socket - Recent Education"

        - **Name**: 
          - This represents the title of the API request. The name "Web - Socket - Recent Education" indicates that this endpoint is designed to fetch recent education-related data via a web socket.

        - **Request**: 
          - This section provides details about how to make a request to the API. 

          - **Method**: 
            - This specifies the type of HTTP request to be used. In this case, it is a "GET" request, which is typically used to retrieve data from the server.

          - **URL**: 
            - This is the endpoint where the API request is sent. The URL "http://localhost:3000/api/socket/web/education?recent=true&limit=limit" indicates that the request is made to a local server running on port 3000. 
            - The path "/api/socket/web/education" specifies the resource being accessed, which is the education data through a web socket.
            - The query parameters:
              - `recent=true` suggests that only recent education data should be retrieved.
              - `limit=limit` indicates that there may be a limit on the number of results returned; it should be replaced by an actual number when making the request.

          - **Headers**: 
            - This is an array that can include any additional metadata sent to the server with the request. In this case, it is empty, meaning no specific headers are required for this API call.

        This description outlines each component of the request for users to understand how to interact with the "Web - Socket - Recent Education" endpoint effectively.
      parameters:
        - name: recent
          in: query
          schema:
            type: boolean
          example: 'true'
        - name: limit
          in: query
          schema:
            type: string
          example: limit
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/tournament:
    get:
      tags:
        - WebSocketRecent
      summary: Web - Socket - Recent Tournament
      description: |-
        ### Endpoint: Web - Socket - Recent Tournament

        #### Method
        - **GET**: This endpoint uses the GET method to retrieve information about recent tournaments from the server.

        #### URL
        - **http://localhost:3000/api/socket/web/tournament?recent=true&limit=limit**: This is the full URL for the endpoint, where:
          - **http://localhost:3000**: Indicates the server is running locally on port 3000.
          - **/api/socket/web/tournament**: This is the path for the tournament resource.
          - **?recent=true**: This query parameter specifies that only recent tournaments should be fetched. Setting this parameter to true filters the response to include only the most current tournament data.
          - **&limit=limit**: This query parameter allows the user to specify how many recent tournaments to return. The value for 'limit' should be replaced with an integer that represents the desired number of tournament entries.

        #### Headers
        - **headers**: This section is currently empty, meaning no special headers are required for this request. If needed, headers can be added for authentication or content type in future implementations.

        This endpoint is designed to provide users with a list of the latest tournaments, allowing them to define how many results they want to retrieve through the 'limit' parameter.
      parameters:
        - name: recent
          in: query
          schema:
            type: boolean
          example: 'true'
        - name: limit
          in: query
          schema:
            type: string
          example: limit
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/comments:
    get:
      tags:
        - WebSocketRecent
      summary: Web - Socket - Recent Comments
      description: |-
        ### Web - Socket - Recent Comments

        This endpoint retrieves the most recent comments by using a WebSocket connection. It is specifically designed to allow for real-time updates on comments as they are posted.

        #### Request Breakdown

        - **Method**: 
          - `GET`: This indicates that the request is made to retrieve data from the server.

        - **URL**: 
          - `http://localhost:3000/api/socket/web/comments?recent=true&limit=limit`: This is the endpoint where the request is sent. 
            - The base URL is `http://localhost:3000/api/socket/web/comments`, and it is appended with two query parameters:
              - `recent=true`: This parameter requests only the most recent comments.
              - `limit=limit`: This parameter specifies the maximum number of comments to return. Replace `limit` with an actual number to set the desired limit.

        - **Headers**: 
          - `[]`: This indicates that no additional headers are sent with this request. Headers may sometimes be necessary for authentication or other purposes, but in this case, none are included.

        This endpoint is useful for applications that require fetching the latest comments dynamically, enhancing user engagement with real-time data.
      parameters:
        - name: recent
          in: query
          schema:
            type: boolean
          example: 'true'
        - name: limit
          in: query
          schema:
            type: string
          example: limit
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/chats:
    get:
      tags:
        - WebSocketRecent
      summary: Web - Socket - Recent Chats
      description: |-
        ### Endpoint: Web - Socket - Recent Chats

        #### Method: GET

        #### URL:
        - **Base URL**: `http://localhost:3000`
        - **Endpoint**: `/api/socket/web/chats`
        - **Query Parameters**:
          - `recent`: A boolean parameter set to `true` to fetch only recent chats.
          - `limit`: A variable that defines the maximum number of recent chats to be returned.

        #### Description:
        This API endpoint retrieves the recent chats for the web socket application. It filters the chat data to only include those marked as recent. The `limit` parameter is used to specify how many recent chat records should be returned in the response. 

        No additional headers are required for this request. The request will be made to a server running on localhost, specifically on port 3000. 

        Use this endpoint to easily fetch the latest chat entries and control the number of entries you receive by adjusting the `limit` parameter.
      parameters:
        - name: recent
          in: query
          schema:
            type: boolean
          example: 'true'
        - name: limit
          in: query
          schema:
            type: string
          example: limit
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/votes:
    get:
      tags:
        - WebSocketRecent
      summary: Web - Socket - Recent Votes
      description: |-
        ### Web - Socket - Recent Votes

        This endpoint retrieves the most recent votes through a web socket connection. Below is a detailed description of each part of the request data:

        - **name**: Represents the title of the API request, indicating that it is related to recent votes over a web socket.

        - **request**: Contains all the details necessary to execute the API request.

          - **method**: Specifies the HTTP method used for the request. In this case, it is set to "GET," which is used to retrieve data from the server.

          - **url**: The endpoint URL is where the request is sent. Here, it is "http://localhost:3000/api/socket/web/votes?recent=true&limit=limit".
            - **http://localhost:3000**: This indicates that the server is running locally on port 3000.
            - **/api/socket/web/votes**: This part of the URL specifies the path to the resource, which is related to votes.
            - **?recent=true**: This query parameter indicates that the request is specifically for retrieving recent votes.
            - **&limit=limit**: This query parameter is intended to specify the maximum number of recent votes to retrieve. The placeholder "limit" should be replaced with an actual number to determine how many recent votes to return.

          - **headers**: This section is currently an empty array, indicating that no additional HTTP headers are being sent with the request. Headers could typically include information like content type or authorization tokens if required. 

        Make sure to replace "limit" with an appropriate number when making the request to control how many recent votes you want to fetch.
      parameters:
        - name: recent
          in: query
          schema:
            type: boolean
          example: 'true'
        - name: limit
          in: query
          schema:
            type: string
          example: limit
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/account:
    get:
      tags:
        - WebSocketRecent
      summary: Web - Socket - Recent Account
      description: |-
        ### Endpoint: Web - Socket - Recent Account

        #### Method
        - **GET**: This is a HTTP method used to request data from the specified resource. In this case, it retrieves data related to recent accounts.

        #### URL
        - **http://localhost:3000/api/socket/web/account?recent=true&limit=limit**: This is the endpoint where the request is sent. It consists of the following components:
          - **localhost:3000**: Refers to the server address; "localhost" indicates that the server is running on your local machine, and "3000" is the port number.
          - **/api/socket/web/account**: This is the path to the resource on the server. It defines the specific API endpoint for accessing account data.
          - **?recent=true**: This is a query parameter indicating that only recent accounts should be retrieved. Setting this to true filters the results to show only accounts that have been recently active.
          - **&limit=limit**: This is another query parameter that specifies how many recent accounts to return. The actual number should replace the word "limit" in the query string.

        #### Headers
        - **headers**: This is an array where you can specify any HTTP headers that may be needed for the request. In this case, it is empty indicating that no additional headers are required for this request. 

        This endpoint allows users to access a list of recent accounts through a WebSocket connection, providing the option to limit the number of accounts returned based on the specified limit.
      parameters:
        - name: recent
          in: query
          schema:
            type: boolean
          example: 'true'
        - name: limit
          in: query
          schema:
            type: string
          example: limit
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/video:
    get:
      tags:
        - WebSocketRecent
      summary: Web - Socket - Recent Video
      description: |-
        **Endpoint Name:** Web - Socket - Recent Video

        **Request Details:**

        - **Method:** GET  
          This indicates that the request is intended to retrieve data from the server.

        - **URL:** 
          `http://localhost:3000/api/socket/web/video?recent=true&limit=limit`  
          This is the endpoint where the request will be sent to obtain recent video data. It includes query parameters for filtering the results.

        **Query Parameters:**

        - **recent=true**  
          This parameter specifies that only recent video entries should be returned in the response. When set to true, the server will prioritize videos that have been uploaded or added most recently.

        - **limit=limit**  
          This parameter defines the maximum number of video entries that the server should return in the response. It acts as a cap on the results to make the request more efficient and manageable.

        **Headers:**  
        Currently, there are no additional headers specified for this request. Headers can be used to provide additional information or configuration options when making an API call, but none are needed for this particular request.
      parameters:
        - name: recent
          in: query
          schema:
            type: boolean
          example: 'true'
        - name: limit
          in: query
          schema:
            type: string
          example: limit
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/recent:
    get:
      tags:
        - WebSocketRecent
      summary: Web - Socket - Recent All
      description: |-
        ### API Endpoint: Web - Socket - Recent All

        #### Description
        This API endpoint is designed to retrieve a list of recent WebSocket connections. It provides functionality to fetch multiple recent entries based on specific criteria.

        #### Request Details

        - **Method**: GET
          - Specifies the type of request being made to the server. In this case, it is a GET request, which is typically used to retrieve data.

        - **URL**: `http://localhost:3000/api/socket/web/recent?recent=true&limit=limit`
          - This is the endpoint's URL where the request is sent. The URL contains query parameters that help define the output of the request:
            - `recent=true`: This parameter indicates that the client is interested in fetching recent data only.
            - `limit=limit`: This parameter specifies the maximum number of entries the server should return. The actual limit value should replace "limit."

        - **Headers**: []
          - This array is currently empty, meaning no additional headers are required for this request. Headers can be added if authentication or specific content types are necessary for the API call.

        ### Summary
        Use this endpoint to access the most recent WebSocket connection data. Customize the `limit` parameter to specify how many recent records you want to retrieve.
      parameters:
        - name: recent
          in: query
          schema:
            type: boolean
          example: 'true'
        - name: limit
          in: query
          schema:
            type: string
          example: limit
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/socket/web/setup:
    post:
      tags:
        - WebSocketSetupJoin
      summary: Web - Socket - Join Tournament Votes
      description: |-
        ### API Endpoint: Web - Socket - Join Tournament Votes

        #### Request Details
        - **Method**: POST
          - This indicates that the request is sending data to the server to create or update a resource.

        - **URL**: `http://localhost:3000/api/socket/web/setup`
          - This is the endpoint where the request is being sent. It is pointing to a local server on port 3000 and is designated for setting up a socket connection for a web-based application.

        - **Headers**: 
          - No specific headers are provided. Headers can be used to provide additional context to the server about the request being sent.

        #### Body
        - **Body Mode**: Raw
          - This indicates that the body of the request is being sent in a raw format.

        - **Raw Content**: 
        ```json
        {
          "socketId": "socketId",
          "accountId": "accountId",
          "sessionId": "sessionId",
          "serviceName": "tournament",
          "serviceType": "votes"
        }
        ```
          - **socketId**: 
            - This field represents the unique identifier for the socket connection. It is used to distinguish between different socket connections. 

          - **accountId**: 
            - This is the unique identifier of the user’s account participating in the tournament. It helps in tracking user-specific data and actions.

          - **sessionId**: 
            - This field contains the identifier for the session in which the user is participating. It is crucial for maintaining state and tracking the context of the user's interaction.

          - **serviceName**: 
            - This indicates the name of the service being accessed. In this case, it is set to "tournament," which suggests that the action pertains to a tournament-related service.

          - **serviceType**: 
            - This specifies the type of service being targeted, which is "votes" in this case. This implies that the interaction involves voting within a tournament setting.

        #### Options
        - **Options for Raw Body**: 
          - **Language**: JSON
            - This specifies that the format of the raw body content is JSON, which is commonly used for data exchange in web applications. 

        This structured data request is intended to establish a socket connection for user interaction in a voting process within a tournament. Ensure that the appropriate values are substituted for `socketId`, `accountId`, `sessionId` before making the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                socketId: socketId
                accountId: accountId
                sessionId: sessionId
                serviceName: tournament
                serviceType: votes
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/team/category/create:
    post:
      tags:
        - TeamCategory
      summary: Team - Category - Create
      description: |-
        {
          "name": "Team - Category - Create",
          "description": "This endpoint is used to create a new category for a team. It accepts data in a JSON format that specifies the details of the category to be created. The request requires authentication using a Bearer token, which should be included in the Authorization header. The method used for this request is POST, indicating that it will send data to the server to create a new resource.",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "BearerToken",
                  "type": "string"
                }
              ],
              "description": "Authentication is done using a Bearer token. Replace 'BearerToken' with your actual token to authenticate the request."
            },
            "method": "POST",
            "description": "The HTTP method used to send the request is POST, indicating that data will be submitted to create a new resource.",
            "url": "http://localhost:3000/api/team/category/create",
            "description": "This is the endpoint URL where the request is sent to create a new team category. The endpoint is running locally on port 3000.",
            "headers": [
              {
                "key": "",
                "value": "",
                "type": "default",
                "disabled": true
              }
            ],
            "description": "Currently, there are no custom headers included in the request. The header entry is disabled and can be ignored.",
            "body": {
              "mode": "raw",
              "description": "The body of the request contains the data being sent to create the category. It is provided in raw JSON format.",
              "raw": "{\n    \"sessionId\":\"sessionId\",\n    \"accountId\":\"accountId\",\n    \"name\": \"Miami Art Week 4\",\n    \"displayName\": \"Miami Art Week 2024\",\n    \"description\": \"An immersive celebration of art and culture during Miami Art Week.\",\n    \"tags\": \"Art,Exhibition,Miami,Culture\"\n}",
              "fields": {
                "sessionId": {
                  "description": "A unique identifier for the current session. This helps to associate the category with a specific session."
                },
                "accountId": {
                  "description": "A unique identifier for the account under which the category is created. This links the category to a specific user account."
                },
                "name": {
                  "description": "The official name of the category being created. Example: 'Miami Art Week 4'."
                },
                "displayName": {
                  "description": "A user-friendly name for the category that may be displayed in the user interface. Example: 'Miami Art Week 2024'."
                },
                "description": {
                  "description": "A detailed description of the category. This provides context and information about the category, such as its purpose or event details. Example: 'An immersive celebration of art and culture during Miami Art Week.'"
                },
                "tags": {
                  "description": "A comma-separated list of keywords associated with the category. These tags help categorize and improve the discoverability of the category. Example: 'Art,Exhibition,Miami,Culture'."
                }
              },
              "options": {
                "raw": {
                  "language": "json"
                }
              },
              "description": "The request body is expected to be in JSON format, which is typical for RESTful API interactions."
            }
          }
        }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: Miami Art Week 4
                displayName: Miami Art Week 2024
                description: An immersive celebration of art and culture during Miami Art Week.
                tags: Art,Exhibition,Miami,Culture
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/team/category/update:
    put:
      tags:
        - TeamCategory
      summary: Team - Category - Update
      description: |-
        ### Endpoint: Team - Category - Update

        **Request Type**: PUT  
        **URL**: `http://localhost:3000/api/team/category/update`  

        **Authentication**:  
        - **Type**: Bearer Token  
        - **Token**: A string value that represents the user's authentication token to authorize the request.

        **Headers**:  
        - **Client-UUID**: A unique identifier for the client making the request. This is used for tracking and managing client requests.

        **Body Parameters**:  
        The body of the request should be sent in JSON format and includes the following fields:

        1. **categoryId**:  
           - Type: String  
           - Description: This is the unique identifier for the category you want to update within the team.

        2. **sessionId**:  
           - Type: String  
           - Description: This represents the identifier for the session associated with the category being updated.

        3. **accountId**:  
           - Type: String  
           - Description: This is the unique identifier for the account that owns or manages the category.

        4. **name**:  
           - Type: String  
           - Description: This is the new name you want to assign to the category. For example, "Miami Art Week 3".

        5. **displayName**:  
           - Type: String  
           - Description: This is the name that will be displayed for the category, such as "Miami Art Week 2024". It should be user-friendly and descriptive.

        6. **description**:  
           - Type: String  
           - Description: A detailed description of the category. This provides more context about what the category entails, such as "An immersive celebration of art and culture during Miami Art Week."

        7. **tags**:  
           - Type: String  
           - Description: A comma-separated list of tags associated with the category. These tags can be used for categorization and search purposes, for example, "Art,Exhibition,Miami,Culture".
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                categoryId: teamCategoryId
                sessionId: sessionId
                accountId: accountId
                name: Miami Art Week 3
                displayName: Miami Art Week 2024
                description: An immersive celebration of art and culture during Miami Art Week.
                tags: Art,Exhibition,Miami,Culture
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/team/category/get:
    get:
      tags:
        - TeamCategory
      summary: Team - Category - Get By Account ID
      description: |-
        ### Endpoint Description: Team - Category - Get By Account ID

        - **Name**: Team - Category - Get By Account ID
          - This is the title of the API endpoint which indicates that it retrieves categories associated with a specific team, filtered by the account ID.

        - **Request**:
          - **Auth**:
            - **Type**: bearer
              - This indicates that the endpoint uses Bearer Token authentication to authorize requests.
            - **Bearer**:
              - **Key**: token
                - This is the name of the authorization key.
              - **Value**: BearerToken
                - Placeholder for the actual token value needed to authenticate requests. The user must replace "BearerToken" with a valid token.
              - **Type**: string
                - Indicates that the token is expected to be a string format.

          - **Method**: GET
            - This specifies that the request method used for this API call is a GET request, meaning it is used to retrieve data from the server.

          - **URL**: 
            - `http://localhost:3000/api/team/category/get/?accountId=accountId`
              - This is the endpoint where the request will be sent. The base URL is set to localhost on port 3000. The endpoint path indicates that it is retrieving categories for a team. The query parameter `accountId` must be replaced with the actual account ID to filter the data accordingly.

          - **Headers**:
            - **Key**: (blank)
              - This field is currently empty and not being used, but it could be an optional place to add any required headers in future requests.
            - **Value**: (blank)
              - Similar to the key, this value is not currently assigned.
            - **Type**: default
              - Specifies the type of header.
            - **Disabled**: true
              - Shows that this header is currently disabled and will not be included in the request.

          - **Body**:
            - **Mode**: raw
              - Indicates that the body of the request is in raw format. However, since this is a GET request, typically there isn’t a body to send.
            - **Raw**: (empty)
              - Currently empty since GET requests usually do not include request payloads.

        ### Usage Notes:
        - Make sure to insert a valid Bearer Token for authorization.
        - Replace `accountId` in the URL with an actual account ID to fetch the relevant data.
        - If there are any specific headers needed for the request, they should be added in the headers section.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/team/category/all:
    get:
      tags:
        - TeamCategory
      summary: Team - Category - Get All By Account ID
      description: |-
        ### Endpoint Description: Team - Category - Get All By Account ID

        - **Name**: This is the identifier for the API endpoint, indicating that it retrieves all categories associated with a specific account ID within a team.

        - **Request**: This section outlines how to make the request to the API.

          - **Auth**: This specifies the authentication method required to access the endpoint.
            - **Type**: The authentication type is set to "bearer," which means that a token is required for authentication.
            - **Bearer**: This contains the token required to authenticate the request.
              - **Key**: The key here is "token," identifying the type of bearer token.
              - **Value**: This holds the actual token value needed for authentication, represented as "BearerToken," which should be replaced by a valid token when making the request.
              - **Type**: This indicates the data type of the token, which is a string.

          - **Method**: The HTTP method for this request is "GET," indicating that this endpoint is used to retrieve data.

          - **URL**: This is the endpoint URL that needs to be called to get the data.
            - The URL includes a query parameter:
              - **accountId**: This parameter is required and should be replaced with the specific account ID for which the categories are being requested.

          - **Headers**: This section can include additional headers for the request.
            - Currently, there is an empty key for a header, indicating no additional headers are being used. The header is marked as "disabled," which means it will not be sent with the request.

          - **Body**: This part of the request holds data to be sent to the server.
            - **Mode**: The body mode is set to "raw," meaning that the body can contain raw data.
            - **Raw**: In this case, the raw body is empty since this is a GET request, which typically does not require a body.

        This endpoint is designed for users who need to obtain all categories for a specific account within a team context by providing the corresponding account ID in the request URL.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/team/category/delete:
    post:
      tags:
        - TeamCategory
      summary: Team - Category - Delete
      description: |-
        **Endpoint Description:**

        This API endpoint is used to delete a category associated with a team. The operation requires an authenticated request and is executed using the HTTP POST method.

        **Detailed Breakdown of Each Data Point:**

        - **name**: Represents the name of the API request. "Team - Category - Delete" indicates that this endpoint is intended to remove a category from a team.

        - **request**: This section describes the specifics of the API request.

          - **auth**: This object specifies the authentication method used for the request.
          
            - **type**: Indicates the type of authentication used. Here, it is set to "bearer", which means that the request requires a bearer token.
            
            - **bearer**: This is an array that contains the details of the bearer token.
            
              - **key**: This is the identifier for the bearer token. It is named "token".
              
              - **value**: This indicates where the actual session token will be provided. The placeholder "sessionId" indicates that the user must substitute this with their actual session identifier.
              
              - **type**: Specifies the data type of the key, which is "string".

          - **method**: Indicates the HTTP method used for this request. In this case, "POST" means that the request is intended to submit data to the server.

          - **url**: The URL endpoint that the request is sent to. "http://localhost:3000/api/team/category/delete" is the local server address for deleting a team category.

          - **headers**: This array is for additional HTTP headers that can be included in the request. 

            - **key**: The identifier for the header. In this case, it is left empty.
            
            - **value**: The value for the header. This is also left empty.
            
            - **type**: Indicates the type of header. Here, it is labeled as "default".
            
            - **disabled**: A boolean value indicating whether this header is active. It is set to true, meaning this header is currently disabled.

          - **body**: This section contains the data being sent with the request.

            - **mode**: Indicates the format of the request body. It is set to "raw", meaning the body contains unformatted data.

            - **raw**: This holds the actual data being sent in JSON format. The structure includes:
            
              - **sessionId**: A placeholder for the current user's session identifier. This must be replaced with the actual session ID.
              
              - **accountId**: A placeholder for the user's account identifier. Similar to sessionId, this should be replaced with the real account ID.
              
              - **categoryId**: A placeholder for the specific category identifier that the user wishes to delete. This should be filled with the actual category ID to identify which category is being targeted for deletion.

        **Note**: Ensure that all placeholders are replaced with actual values when making a request to this endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"categoryId\":\"teamCategoryId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/team/general/create:
    post:
      tags:
        - TeamGeneral
      summary: Team - General - Create Auto
      description: |-
        ### API Endpoint: Create Team - General

        #### Authentication
        - **Type**: Bearer
          - **Key**: `token`
          - **Value**: `BearerToken`
          - **Type**: string
          - **Description**: This is the authorization token required to access the API. Replace `BearerToken` with a valid token.

        #### Request Method
        - **Method**: POST
          - **Description**: The HTTP method used for this request. This indicates that data is being sent to the server to create a new resource.

        #### URL
        - **Endpoint**: `http://localhost:3000/api/team/general/create`
          - **Description**: This is the URL to which the POST request is sent. It is the endpoint for creating a general team.

        #### Headers
        - **Headers**: 
          - **Key**: (Empty)
          - **Value**: (Empty)
          - **Type**: Default
          - **Disabled**: true
          - **Description**: No additional headers are included in this request. This may be enabled in the future if needed.

        #### Request Body
        - **Mode**: Raw
        - **Format**: JSON

        ##### Body Parameters:
        1. **sessionId**
           - **Type**: string
           - **Description**: A unique identifier for the session. Used to track the current user session.

        2. **accountId**
           - **Type**: string
           - **Description**: Identifier for the user's account. Indicates which account the team is being created under.

        3. **teamId**
           - **Type**: string
           - **Description**: A unique identifier for the team being created. This is used to refer to the team in future requests.

        4. **title**
           - **Type**: string
           - **Description**: The title or name of the team. It is important for identifying the team.

        5. **displayName**
           - **Type**: string
           - **Description**: A user-friendly name for the team that may be displayed in UI.

        6. **description**
           - **Type**: string
           - **Description**: A descriptive text providing details about the team. Helps in understanding the purpose or focus of the team.

        7. **tags**
           - **Type**: string
           - **Description**: A comma-separated list of tags associated with the team. Useful for categorization and searchability.

        8. **profilePhotoUrl**
           - **Type**: string
           - **Description**: URL link to the profile photo of the team. This image may be displayed in user interfaces.

        9. **coverPhotoUrl**
           - **Type**: string
           - **Description**: URL link to the cover photo for the team. This image appears as a header or background in the team’s profile.

        10. **minimumTipAmount**
            - **Type**: number
            - **Description**: The minimum amount that can be tipped to the team. It sets the lower limit for monetary contributions.

        11. **category**
            - **Type**: string
            - **Description**: The general category to which the team belongs. It's a higher-level classification.

        12. **subCategory**
            - **Type**: string
            - **Description**: A more specific classification under the category. Further narrows down the team's focus.

        13. **isGeneralPrivate**
            - **Type**: boolean
            - **Description**: Indicates whether the team is private. If true, only invited members can see it.

        14. **isTournamentOnly**
            - **Type**: boolean
            - **Description**: Specifies if the team is limited to tournament participation. If true, it cannot engage in other team activities.

        15. **isGeneralDefault**
            - **Type**: boolean
            - **Description**: Indicates if this team is set as a default option in the general category. 

        16. **isPreLiveTeamAds**
            - **Type**: boolean
            - **Description**: Indicates if advertisements can be placed before live events for the team.

        17. **isPostLiveTeamAds**
            - **Type**: boolean
            - **Description**: Indicates if advertisements can be placed after live events for the team.

        18. **breakPreLiveVideoUrl**
            - **Type**: string
            - **Description**: URL to a video that may be shown during pre-live events for team promotion.

        19. **breakPostLiveVideoUrl**
            - **Type**: string
            - **Description**: URL to a video that may be shown after live events for team promotion.

        20. **isTeamPrivate**
            - **Type**: boolean
            - **Description**: Indicates if the team is a private group, restricting visibility to selected members.

        21. **isTeamDefault**
            - **Type**: boolean
            - **Description**: Indicates if this team is set as a default option for any associated actions or categories. 

        This request is used to create a general team with all its associated data, ensuring proper categorization, visibility options, and promotional media.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                teamId: teamId
                title: Nike Shoes
                displayName: Nike Shoes
                description: This team is my updated team
                tags: second,team
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                category: General 1
                subCategory: Specific 1
                isGeneralPrivate: true
                isTournamentOnly: false
                isGeneralDefault: true
                isPreLiveTeamAds: true
                isPostLiveTeamAds: true
                breakPreLiveVideoUrl: https://example.com/break-pre-live.mp4
                breakPostLiveVideoUrl: https://example.com/break-post-live.mp4
                isTeamPrivate: false
                isTeamDefault: true
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/team/general/update:
    put:
      tags:
        - TeamGeneral
      summary: Team - General - Update Auto
      description: |-
        ### Endpoint Description

        #### Name
        - **Team - General - Update Auto**: This endpoint is designed for updating general team information.

        #### Request Details
        - **Auth**: Authentication is required to access this endpoint, using a bearer token.
          - **Type**: Bearer
            - **Token**: A placeholder for the bearer token required for authorization (e.g., "BearerToken").

        - **Method**: 
          - **PUT**: Indicates that this request will update existing team data.

        - **URL**: 
          - `http://localhost:3000/api/team/general/update`: The endpoint URL where the update request will be sent.

        #### Headers
        - **Client-UUID**: 
          - This header allows identification of the specific client making the request. It should be populated with the actual client UUID (e.g., "ClientUUID").

        #### Body
        - **Mode**: 
          - **Raw**: The body of the request will be sent in raw format.

        - **Raw Data**: JSON object containing the details of the team to update:

          - **teamId**: 
            - A unique identifier for the team being updated (e.g., "teamId").

          - **sessionId**: 
            - Unique identifier for the session associated with the update (e.g., "sessionId").

          - **accountId**: 
            - Unique identifier for the account associated with the team (e.g., "accountId").

          - **title**: 
            - The title of the team (e.g., "Nike Shoes").

          - **displayName**: 
            - The display name for the team, which may be different from the title (e.g., "Nike Shoes").

          - **description**: 
            - A brief description of the team; helps in understanding the purpose or content of the team (e.g., "This team is my updated team").

          - **tags**: 
            - Comma-separated tags associated with the team for categorization (e.g., "second,team").

          - **profilePhotoUrl**: 
            - URL link to the team's profile photo (e.g., "https://example.com/profile.jpg").

          - **coverPhotoUrl**: 
            - URL link to the team's cover photo (e.g., "https://example.com/cover.jpg").

          - **minimumTipAmount**: 
            - The minimum amount that can be tipped in relation to the team, specified in the appropriate currency (e.g., 10).

          - **category**: 
            - The primary category under which the team falls (e.g., "General 2").

          - **subCategory**: 
            - A more specific category under the primary category (e.g., "Specific 2").

          - **isGeneralPrivate**: 
            - A boolean indicating whether the team is private to the general public (true/false).

          - **isTournamentOnly**: 
            - A boolean indicating whether the team is exclusive to tournament settings (true/false).

          - **isGeneralDefault**: 
            - A boolean that indicates if this team is a default team for users (true/false).

          - **isPreLiveTeamAds**: 
            - A boolean that indicates whether the team allows advertisements before going live (true/false).

          - **isPostLiveTeamAds**: 
            - A boolean that indicates whether the team allows advertisements after going live (true/false).

          - **breakPreLiveVideoUrl**: 
            - URL for a video played during break time before a live event (e.g., "https://example.com/break-pre-live.mp4").

          - **breakPostLiveVideoUrl**: 
            - URL for a video played during break time after a live event (e.g., "https://example.com/break-post-live.mp4").

          - **isTeamPrivate**: 
            - A boolean indicating whether the team itself is private (true/false).

          - **isTeamDefault**: 
            - A boolean indicating whether this team setting is the default for new users or accounts (true/false).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                teamId: teamId
                sessionId: sessionId
                accountId: accountId
                title: Nike Shoes
                displayName: Nike Shoes
                description: This team is my updated team
                tags: second,team
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                category: General 2
                subCategory: Specific 2
                isGeneralPrivate: true
                isTournamentOnly: false
                isGeneralDefault: true
                isPreLiveTeamAds: true
                isPostLiveTeamAds: true
                breakPreLiveVideoUrl: https://example.com/break-pre-live.mp4
                breakPostLiveVideoUrl: https://example.com/break-post-live.mp4
                isTeamPrivate: false
                isTeamDefault: true
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/team/general/get:
    get:
      tags:
        - TeamGeneral
      summary: Team - General - Get By Short ID
      description: |-
        ### Endpoint: Team - General - Get By Short ID

        #### Request Data Description:

        - **Name**: This is the identifier for the API endpoint, indicating that it retrieves general information about a team based on a provided short ID.

        - **Auth**: This section specifies the authentication required to access the endpoint.
          - **Type**: Indicates that Bearer token authentication is used.
          - **Bearer**: Contains the bearer token needed for authorization.
            - **Key**: This represents the name of the token field, which is labeled as "token".
            - **Value**: The actual token used for authentication, prefixed with "Bearer" followed by the actual token value (e.g., "BearerToken").
            - **Type**: Specifies that the token value is treated as a string.

        - **Method**: Indicates the HTTP method used for this request, which is "GET". This means the request will retrieve data rather than modify it.

        - **URL**: This is the endpoint's URL where the request is sent. It consists of:
          - Base URL: `http://localhost:3000/api/team/general/get`
          - Query Parameter: `shortId=teamShortId` - This part specifies that the request should include a short ID to identify the team being requested.

        - **Headers**: This section allows for additional HTTP headers to be set for the request.
          - **Key**: The name of the header (currently left empty).
          - **Value**: The value of the header (currently left empty).
          - **Type**: Indicates the type of the header, with default type being specified here.
          - **Disabled**: Set to true, indicating that this header is not currently active and will not be sent with the request.

        - **Body**: This section would contain the body of the request, but it is empty in this case.
          - **Mode**: Specifies the mode of the body. Here it indicates "raw" is being used, meaning that the body would normally contain raw data.
          - **Raw**: Currently has no content, indicating that no body data needs to be sent with this GET request. 
      security:
        - bearerAuth: []
      parameters:
        - name: shortId
          in: query
          schema:
            type: string
          example: teamShortId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/team/general/all:
    get:
      tags:
        - TeamGeneral
      summary: Team - General - Get All By Sub Category ID
      description: |-
        ### Endpoint: Team - General - Get All By Sub Category ID

        **HTTP Method:**  
        - **GET**: This endpoint retrieves a list of teams based on a specified sub-category ID.

        **URL:**  
        - `http://localhost:3000/api/team/general/all?subCategoryId=teamSubCategoryId`: The endpoint to access the resource. It includes a query parameter `subCategoryId`, which should be replaced with the actual ID of the desired sub-category.

        **Authentication:**  
        - **Type:** Bearer token authentication is required to access this endpoint.  
        - **Token:** The bearer token needs to be provided in the request header for authentication. In the request, it is represented as `"BearerToken"`, which should be replaced with a valid token string for actual use.

        **Headers:**  
        - No additional headers are specified in this request. The header entry is present but disabled, indicating that it is not currently in use.

        **Body:**  
        - The body of the request is empty. This indicates that no additional data is sent with the GET request, as typically GET requests do not have a body.

        **Query Parameters:**  
        - `subCategoryId`: This is a required query parameter that specifies the ID of the sub-category for which teams are to be retrieved. The placeholder `teamSubCategoryId` should be replaced with the actual sub-category ID when making the request. 

        This endpoint is used to efficiently fetch team data filtered by a specific sub-category, requiring proper authentication through a bearer token.
      security:
        - bearerAuth: []
      parameters:
        - name: subCategoryId
          in: query
          schema:
            type: string
          example: teamSubCategoryId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/team/general/delete:
    post:
      tags:
        - TeamGeneral
      summary: Team - General - Delete
      description: |-
        ### Endpoint: Team - General - Delete

        **Name**: Represents the name of the API endpoint which is designed to delete a general team.

        **Request**:
        - **Auth**: This specifies the authentication method required to access the endpoint.
          - **Type**: Bearer token is used for authentication.
          - **Bearer**: Contains an array of authentication parameters.
            - **Key**: Indicates the name of the bearer token field, which is "token".
            - **Value**: Represents the actual value to be provided in the request; in this case, "sessionId".
            - **Type**: Indicates the data type for the value, which is "string".

        - **Method**: The HTTP method to be used for the request is "POST", meaning data will be sent to the server to delete a specified resource.

        - **URL**: This is the endpoint where the request will be sent. It consists of:
          - **Protocol**: HTTP
          - **Host**: localhost:3000
          - **Path**: /api/team/general/delete - specifies that the request will delete a team.

        - **Headers**: This section can include additional headers for the request. In this case:
          - **Key**: There are no specific headers set as the key is empty.
          - **Value**: There are no specific values provided since disabled is set to true.
          - **Type**: The header is of type "default".
          - **Disabled**: Indicates that this header is not active for the request.

        - **Body**: This part of the request contains the data being sent to the server.
          - **Mode**: Set to "raw", indicating the body is sent as raw JSON text.
          - **Raw**: This will contain the JSON string with key-value pairs:
            - **sessionId**: Represents the user session ID used for authentication and authorization.
            - **accountId**: Represents the ID of the account from which the team will be deleted.
            - **teamId**: Represents the ID of the specific team that is to be deleted. 

        This API endpoint is used to delete a specified team by providing the relevant session, account, and team identifiers in the request body.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"teamId\":\"teamId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/team/subcategory/create:
    post:
      tags:
        - TeamSubCategory
      summary: Team - SubCategory - Create
      description: |-
        ### Endpoint: Team - SubCategory - Create

        #### Request Details:

        - **Auth**:
          - **Type**: Bearer
            - **Token**: This is a string value that represents the bearer token required for authentication. Replace `BearerToken` with your actual token.

        - **Method**: 
          - The HTTP method used for the request is POST, which indicates that this request is used to create a new sub-category in the team.

        - **URL**: 
          - The endpoint URL to which the request is made. It points to `http://localhost:3000/api/team/subcategory/create`, indicating that the operation is performed locally on port 3000.

        - **Headers**: 
          - This section contains headers that will be sent with the request. Currently, there are no custom headers defined (as indicated by the empty key and value) and the header is disabled.

        - **Body**: 
          - The body of the request is sent in raw JSON format and includes the following fields:
            - **sessionId**: A unique identifier for the current session. This should be replaced with the actual session ID.
            - **accountId**: The ID of the account that is associated with this sub-category. Include the appropriate account ID value here.
            - **name**: A string representing the name of the sub-category you wish to create. In the example, it is set to "Historic Hampton House 3".
            - **displayName**: The public-facing display name for the sub-category. This is what users will see, e.g., "Miami Art Week 2024".
            - **description**: A brief overview of the sub-category, providing details about what it encompasses. The example describes an event related to art and culture.
            - **tags**: A string containing comma-separated keywords relevant to the sub-category. In this case, tags include "Art, Exhibition, Miami, Culture".
            - **categoryId**: The ID of the primary category under which this sub-category falls. Replace `teamCategoryId` with the actual category ID relevant to this sub-category.

        #### Note:
        Ensure all placeholders are replaced with actual values prior to making the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: Historic Hampton House 3
                displayName: Miami Art Week 2024
                description: An immersive celebration of art and culture during Miami Art Week.
                tags: Art,Exhibition,Miami,Culture
                categoryId: teamCategoryId
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/team/subcategory/update:
    put:
      tags:
        - TeamSubCategory
      summary: Team - SubCategory - Update
      description: |-
        ### Description of Each Data in the Endpoint

        **Name**: 
        - This represents the name of the API request. In this case, it is designated for updating a subcategory within a team.

        **Request**: 
        - This section contains all the details related to the HTTP request required to interact with the API.

        **Auth**: 
        - This specifies the type of authentication needed for the API request.
          - **Type**: Indicates that bearer token authentication is being used.
          - **Bearer**: Contains an array of bearer token objects.
            - **Key**: This indicates the name of the token.
            - **Value**: This represents the actual bearer token, which should be replaced with a valid token in requests.
            - **Type**: Specifies that the token is of type string.

        **Method**: 
        - This indicates the HTTP method used for the request. In this case, it is a PUT request, which is used to update existing resources.

        **URL**: 
        - This specifies the endpoint of the API where the request should be sent. In this case, it is a local server URL targeting the subcategory update endpoint.

        **Headers**: 
        - This section outlines any additional information sent alongside the request.
          - **Key**: "Client-UUID" indicates the identifier for the client making the request.
          - **Value**: This should be replaced with the actual client UUID used to authenticate the request.
          - **Type**: Indicates that this is a default header.

        **Body**: 
        - This contains the actual data to be sent with the PUT request in a raw format.

        **Mode**: 
        - Indicates the format of the body content. Here it is set to "raw", meaning the content is a plain JSON string.

        **Raw**: 
        - This field contains the JSON object that includes the data necessary for updating the subcategory. 
          - **subCategoryId**: Unique identifier for the subcategory being updated.
          - **sessionId**: Identifier for the session related to this update.
          - **accountId**: Unique identifier for the account associated with the subcategory.
          - **name**: The name of the subcategory to be updated.
          - **description**: A brief overview or explanation of the subcategory.
          - **tags**: Comma-separated keywords related to the subcategory for categorization purposes.
          - **profilePhotoUrl**: URL link to the profile photo for the subcategory.
          - **coverPhotoUrl**: URL link to the cover photo associated with the subcategory.
          - **minimumTipAmount**: Specifies the minimum amount that can be tipped for this subcategory.
          - **categoryId**: Identifier for the category to which the subcategory belongs.
          - **category**: Name of the main category associated with this subcategory.
          - **subCategory**: Name of the subcategory being processed.
          - **isSubCategoryPrivate**: A boolean value indicating whether the subcategory is private.
          - **isTournamentOnly**: A boolean that specifies if the subcategory is limited to tournament-related content only.
          - **isSubCategoryDefault**: A boolean indicating if this subcategory is considered the default option for users.
          - **isPreLiveTeamAds**: A boolean determining if pre-live advertisements can be displayed for this subcategory.
          - **isPostLiveTeamAds**: A boolean indicating if post-live advertisements can be displayed for this subcategory.
          - **breakPreLiveVideoUrl**: URL link to a video used during breaks in pre-live sessions.
          - **breakPostLiveVideoUrl**: URL link to a video used during breaks in post-live sessions. 

        This detailed description provides clarity on the purpose and structure of each component within the API request for easier understanding by users.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"subCategoryId\":\"subCategoryId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second SubCategory 2.0\",\"description\":\"This subcategory is my second subcategory\",\"tags\":\"second,subcategory\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isSubCategoryPrivate\":true,\"isTournamentOnly\":false,\"isSubCategoryDefault\":true,\"isPreLiveTeamAds\":true,\"isPostLiveTeamAds\":true,\"breakPreLiveVideoUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveVideoUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/team/subcategory/get:
    get:
      tags:
        - TeamSubCategory
      summary: Team - SubCategory - Get By Account ID
      description: |-
        ### Endpoint: Team - SubCategory - Get By Account ID

        #### Overview
        This API endpoint retrieves subcategory information associated with a specific account ID. It uses the HTTP GET method and requires an authorization token.

        #### Detailed Description of Each Data Field:

        - **name**: 
          - This is the name of the API endpoint. It identifies the specific action being performed, which is to get subcategory details for a team based on an account ID.

        - **request**: 
          - This object contains all the necessary details for making the API request.

          - **auth**: 
            - This section specifies the authorization method used for the request.
            
            - **type**: 
              - Indicates the type of authentication. In this case, it is a 'bearer' token.
              
            - **bearer**: 
              - An array which holds the authorization token needed to authenticate the request.
              
              - **key**: 
                - This is a placeholder for the token key. It is labeled 'token' which indicates that this is where your access token will be placed.
                
              - **value**: 
                - This is the actual token value, prefixed with 'Bearer'. Replace 'BearerToken' with the actual bearer token for successful authentication.
                
              - **type**: 
                - This specifies the data type of the token, which is 'string'.

          - **method**: 
            - This indicates the HTTP method used for the API request. The method here is 'GET', which is intended to retrieve data.

          - **url**: 
            - This is the endpoint URL that should be called. It includes a parameter for the account ID, which should be replaced with the actual account ID value when making a request.

          - **headers**: 
            - This is a collection of headers to be sent with the API request. 

            - **key**: 
              - Represents the name of the header. Currently, it is empty and disabled, which means no additional headers are being sent.
              
            - **value**: 
              - Represents the value of the header. Since the key is empty, this is also not set.
              
            - **type**: 
              - Denotes the type of the header. It is set to 'default'.

            - **disabled**: 
              - This boolean flag indicates whether the header is active. It is currently set to true, which means this header will not be sent.

          - **body**: 
            - This section defines the body of the request. 

            - **mode**: 
              - Indicates the type of body content. It is set to 'raw', suggesting that the body content will be sent as a raw string.
            
            - **raw**: 
              - This is where the actual body content would go if required. Currently, it is empty, meaning no data will be sent in the request body since this is a GET request.

        #### Usage
        To use this endpoint, ensure that you replace the `accountId` in the URL with the actual account ID you wish to query, and enter a valid bearer token in place of `BearerToken` in the authorization section.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/team/subcategory/all:
    get:
      tags:
        - TeamSubCategory
      summary: Team - SubCategory - Get All By Category ID
      description: |-
        {
          "description": {
            "name": "Team - SubCategory - Get All By Category ID",
            "request": {
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "BearerToken",
                    "type": "string"
                  }
                ]
              },
              "method": "GET",
              "url": "http://localhost:3000/api/team/subcategory/all/?categoryId=teamCategoryId",
              "headers": [
                {
                  "key": "",
                  "value": "",
                  "type": "default",
                  "disabled": true
                }
              ],
              "body": {
                "mode": "raw",
                "raw": ""
              }
            }
          }
        }  

        - **name**: This is the title of the endpoint, indicating it retrieves all subcategories related to a specific team category ID.

        - **request**: This section defines the attributes needed to make the API call.

          - **auth**: This indicates the type of authentication required for accessing the API.
          
            - **type**: Specifies that bearer token authentication is used.
            
            - **bearer**: Contains the authentication details in a list format.
            
              - **key**: This is a label for the token which is "token."
              
              - **value**: It holds the actual token value needed for authentication, represented here as "BearerToken." Users should replace this with their actual bearer token.
              
              - **type**: Specifies that the value is of type "string."

          - **method**: Indicates the HTTP method to be used for the API call, which is "GET" in this case. This means the request is for retrieving data.

          - **url**: This is the endpoint URL that will be called. It includes a query parameter (`categoryId`) that needs to be filled with the actual team category ID intended to fetch subcategories.

          - **headers**: This section can include any additional HTTP headers you may need to send with the request. Here, it's currently empty and is marked as disabled, indicating no custom headers are set.

          - **body**: Usually contains the payload sent with the request.
            
            - **mode**: This indicates how the body content is structured. In this case, it's set to "raw."
            
            - **raw**: This is where the request body content would go. It’s currently empty, as a GET request typically doesn’t contain a body.
      security:
        - bearerAuth: []
      parameters:
        - name: categoryId
          in: query
          schema:
            type: string
          example: teamCategoryId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/team/subcategory/delete:
    post:
      tags:
        - TeamSubCategory
      summary: Team - SubCategory - Delete
      description: |-
        {
          "description": {
            "name": "Team - SubCategory - Delete",
            "request": {
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "sessionId",
                    "type": "string"
                  }
                ]
              },
              "method": "POST",
              "url": "http://localhost:3000/api/team/subcategory/delete",
              "headers": [
                {
                  "key": "",
                  "value": "",
                  "type": "default",
                  "disabled": true
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"subCategoryId\":\"subCategoryId\"}"
              }
            }
          }
        }

        1. **name**: This is the name of the endpoint indicating that it is used to delete a subcategory within a team.

        2. **request**: This section outlines the details necessary to make a request to the API.

           - **auth**: This indicates the type of authentication used to access the API. In this case, it is a bearer token.
           
             - **type**: Specifies that the authentication method is "bearer".
             
             - **bearer**: This is an array containing the authentication details.
             
               - **key**: The key is "token", which signifies the type of information being sent for authentication.
               
               - **value**: The value "sessionId" indicates that the actual session ID will be provided here during the request.
               
               - **type**: This indicates that the value type is a string.

           - **method**: The HTTP method used for the request, which is "POST" in this case. This suggests that data will be sent to the server to perform an action.

           - **url**: This is the endpoint URL where the request will be sent. It is set to "http://localhost:3000/api/team/subcategory/delete", indicating a local server instance.

           - **headers**: This section would typically include any required HTTP headers for the request.
           
             - In this case, the headers array is defined but left empty and marked as disabled, meaning no additional headers are being sent with the request.

           - **body**: This details the content of the request.
           
             - **mode**: The body mode is set to "raw", which indicates that the body will contain raw data in its original form.
             
             - **raw**: This contains the actual JSON string that will be sent in the request body. It includes the following fields:
               
               - **sessionId**: This field represents the session identifier for the user making the request.
               
               - **accountId**: This field indicates the account ID associated with the request.
               
               - **subCategoryId**: This field contains the identifier for the subcategory that is to be deleted.
        }
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"subCategoryId\":\"subCategoryId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/general/create:
    post:
      tags:
        - TournamentGeneral
      summary: Tournament - General - Create
      description: |-
        **Description of Each Data in the Tournament - General - Create Endpoint:**

        - **auth**: 
          - Defines the type of authentication required for this request.
          
          - **type**: The authentication method being used. In this case, it is "bearer", meaning a bearer token is required for authorization.
          
          - **bearer**: A list of bearer token details needed for the request.
            
            - **key**: The name of the token being provided, labeled as "token".
            
            - **value**: Represents the actual bearer token value which will be sent with the request, represented here as "BearerToken".
            
            - **type**: Indicates the data type of the value, which is "string".

        - **method**: This specifies the HTTP method used for the request. "POST" means that the request is intended to create a new resource.

        - **url**: The endpoint URL where the request will be sent. In this case, it is "http://localhost:3000/api/tournament/general/create".

        - **headers**: This is an array of HTTP headers sent with the request. Currently, it has a disabled header that does not have a key or value.

        - **body**: 
          - The content being sent with the request. It is set to be in "raw" mode with JSON format.
          
          - **mode**: Specifies that the body content type is raw.
          
          - **raw**: Contains the actual JSON payload being sent with the request, which includes various fields necessary for tournament creation.

            - **sessionId**: A unique identifier for the session in which the tournament is being created.
            
            - **accountId**: The identifier for the account that is creating this tournament.
            
            - **teamId**: The identifier for the team participating in the tournament.
            
            - **name**: The name of the tournament, in this case, "My Second Tournament".
            
            - **description**: A brief description of the tournament, providing context and purpose, e.g., "This tournament is my second attempt to engage a wider audience."
            
            - **tags**: Keywords associated with the tournament to enhance searchability, e.g., "second,tournament,engagement".
            
            - **category**: The general classification of the tournament, here labeled as "General".
            
            - **subCategory**: A more specific classification within the general category, marked as "Specific".
            
            - **scheduleDate**: The date when the tournament is scheduled to begin, formatted as "YYYY-MM-DD", e.g., "2023-10-15".
            
            - **scheduleTime**: The time when the tournament is set to start, noted in HH:MM:SS format, e.g., "14:00:00".
            
            - **streamHours**: The number of hours allocated for streaming the tournament, such as "4".
            
            - **coverPhotoUrl**: A URL linking to the cover photo for the tournament, used for promotional purposes, e.g., "https://example.com/cover.jpg".
            
            - **voteTokenQuantity**: The total number of voting tokens available for participants, denoted here as "100".
            
            - **votingTimeReset**: The duration (in minutes) that voting time will reset, in this instance, "5".
            
            - **voteButtonQuantity**: The number of voting options available to participants, here specified as "4".
            
            - **voteButtonText1** to **voteButtonText4**: The labels for the voting options presented to users, allowing them to choose between different options.
            
            - **isRewardsEnabled**: A boolean indicating whether rewards are enabled for the tournament, set to true.
            
            - **isTournamentPrivate**: A boolean indicating whether the tournament is private or public, set to false.
            
            - **isPreLiveTournamentAds**: A boolean indicating whether ads will run before the live event starts, set to true.
            
            - **isPostLiveTournamentAds**: A boolean indicating whether ads will run after the live event ends, set to false.
            
            - **breakPreLiveVideoUrl**: A URL for a video to be shown before the tournament begins, e.g., "https://example.com/break-pre-live.mp4".
            
            - **breakPostLiveVideoUrl**: A URL for a video to be shown after the tournament ends, e.g., "https://example.com/break-post-live.mp4".
            
            - **maxStreamerAmount**: The maximum number of streamers allowed in the tournament, specified as "10".
            
            - **maxTeamCaptainAmount**: The maximum number of team captains permitted, set to "2".
            
            - **maxScoreKeeperAmount**: The maximum number of scorekeepers allowed to participate, specified as "3".
            
            - **maxOpponentAmount**: The maximum number of opponents allowed to participate, indicated as "5".
            
            - **started**: A boolean indicating whether the tournament has started, currently set to false.
            
            - **paused**: A boolean indicating whether the tournament is currently paused, also set to false.
            
            - **stopped**: A boolean indicating whether the tournament has stopped, set to false.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                teamId: teamId
                name: My Second Tournament
                description: This tournament is my second attempt to engage a wider audience.
                tags: second,tournament,engagement
                category: General
                subCategory: Specific
                scheduleDate: '2023-10-15'
                scheduleTime: '14:00:00'
                streamHours: 4
                coverPhotoUrl: https://example.com/cover.jpg
                voteTokenQuantity: 100
                votingTimeReset: '5'
                voteButtonQuantity: 4
                voteButtonText1: Option 1
                voteButtonText2: Option 2
                voteButtonText3: Option 3
                voteButtonText4: Option 4
                isRewardsEnabled: true
                isTournamentPrivate: false
                isPreLiveTournamentAds: true
                isPostLiveTournamentAds: false
                breakPreLiveVideoUrl: https://example.com/break-pre-live.mp4
                breakPostLiveVideoUrl: https://example.com/break-post-live.mp4
                maxStreamerAmount: 10
                maxTeamCaptainAmount: 2
                maxScoreKeeperAmount: 3
                maxOpponentAmount: 5
                started: false
                paused: false
                stopped: false
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/general/update:
    put:
      tags:
        - TournamentGeneral
      summary: Tournament - General - Update
      description: |-
        ### Description of Endpoint Data

        **Endpoint Name**: Tournament - General - Update

        **Request Type**: PUT  
        This endpoint is used to update an existing tournament's general details.

        ---

        #### Headers

        1. **Authorization**: 
           - **Type**: Bearer
           - **Key**: `token` 
           - **Value**: A string representing the Bearer token for authentication.

        2. **Client-UUID**: 
           - **Key**: `Client-UUID` 
           - **Value**: A unique identifier for the client making the request. This is used to identify requests coming from different clients.

        ---

        #### Request Body (JSON)

        1. **sessionId**: 
           - The identifier for the current session of the tournament. This is used to associate the update with a specific session.

        2. **accountId**: 
           - The identifier for the account associated with the tournament. This links the tournament to the correct user account.

        3. **teamId**: 
           - The identifier for the team involved in the tournament. This specifies which team is being referenced in the update.

        4. **tournamentId**: 
           - The unique identifier for the tournament that is being updated. This is required to fetch and modify the correct tournament details.

        5. **name**: 
           - The name of the tournament. For example, "NikeAdidasTournament". This is how the tournament will be displayed to users.

        6. **description**: 
           - A brief explanation about the tournament. In this case, "This tournament is my second attempt to engage a wider audience." This helps users understand the purpose of the tournament.

        7. **tags**: 
           - A comma-separated list of tags related to the tournament, such as "second,tournament,engagement". Tags help in categorizing and searching for the tournament.

        8. **category**: 
           - The main category of the tournament. In this case, it is "General". Categories help in organizing tournaments by theme or type.

        9. **subCategory**: 
           - A specific sub-category under the main category, for instance, "Specific". This adds further classification to the tournament.

        10. **scheduleDate**: 
           - The date when the tournament is scheduled to take place, formatted as "YYYY-MM-DD". For example, "2023-10-15".

        11. **scheduleTime**: 
           - The time when the tournament is scheduled to start, formatted as "HH:MM:SS". For example, "14:00:00".

        12. **streamHours**: 
           - The number of hours allocated for the live streaming of the tournament. For example, `4`.

        13. **coverPhotoUrl**: 
           - A URL link to the cover photo for the tournament. It typically displays on the tournament's page, such as "https://example.com/cover.jpg".

        14. **voteTokenQuantity**: 
           - The total number of voting tokens available for the tournament. This sets the limit on how many votes can be cast, such as `100`.

        15. **votingTimeReset**: 
           - The time duration (in minutes) after which the voting options will reset, for example, "5".

        16. **voteButtonQuantity**: 
           - The number of voting options available; in this case, `4`.

        17. **voteButtonText1 - 4**: 
           - Text labels for each voting option button. For example, "Option 1", "Option 2", "Option 3", "Option 4".

        18. **isRewardsEnabled**: 
           - A boolean value indicating whether rewards are enabled for the tournament. `true` means rewards are applicable.

        19. **isTournamentPrivate**: 
           - A boolean indicating if the tournament is private. `false` means it is publicly accessible.

        20. **isPreLiveTournamentAds**: 
           - A boolean indicating if advertisements are allowed before the tournament goes live. `true` means ads are permitted.

        21. **isPostLiveTournamentAds**: 
           - A boolean indicating if advertisements can be shown after the tournament ends. `false` means ads are not permitted.

        22. **breakPreLiveVideoUrl**: 
           - A URL link to a video that plays before the live tournament starts. For example, "https://example.com/break-pre-live.mp4".

        23. **breakPostLiveVideoUrl**: 
           - A URL link to a video that plays after the tournament concludes. For example, "https://example.com/break-post-live.mp4".

        24. **maxStreamerAmount**: 
           - The maximum number of streamers allowed to participate in the tournament. This limits participation, such as `10`.

        25. **maxTeamCaptainAmount**: 
           - The maximum number of team captains allowed. This restricts the number of leaders in the tournament, for example, `2`.

        26. **maxScoreKeeperAmount**: 
           - The maximum number of scorekeepers allowed in the tournament, such as `3`.

        27. **maxOpponentAmount**: 
           - The maximum number of opponents a team can compete against, for example, `5`.

        28. **started**: 
           - A boolean indicating if the tournament has started. `false` means the tournament is not yet underway.

        29. **paused**: 
           - A boolean indicating if the tournament is currently paused. `false` means it is not paused.

        30. **stopped**: 
           - A boolean indicating if the tournament has been stopped or concluded. `false` means the tournament is still ongoing.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"teamId\":\"teamId\",\"tournamentId\":\"tournamentId\",\"name\":\"NikeAdidasTournament\",\"description\":\"This tournament is my second attempt to engage a wider audience.\",\"tags\":\"second,tournament,engagement\",\"category\":\"General\",\"subCategory\":\"Specific\",\"scheduleDate\":\"2023-10-15\",\"scheduleTime\":\"14:00:00\",\"streamHours\":4,\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"voteTokenQuantity\":100,\"votingTimeReset\":\"5\",\"voteButtonQuantity\":4,\"voteButtonText1\":\"Option 1\",\"voteButtonText2\":\"Option 2\",\"voteButtonText3\":\"Option 3\",\"voteButtonText4\":\"Option 4\",\"isRewardsEnabled\":true,\"isTournamentPrivate\":false,\"isPreLiveTournamentAds\":true,\"isPostLiveTournamentAds\":false,\"breakPreLiveVideoUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveVideoUrl\":\"https://example.com/break-post-live.mp4\",\"maxStreamerAmount\":10,\"maxTeamCaptainAmount\":2,\"maxScoreKeeperAmount\":3,\"maxOpponentAmount\":5,\"started\":false,\"paused\":false,\"stopped\":false}\n"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/general/get:
    get:
      tags:
        - TournamentGeneral
      summary: Tournament - General - Get
      description: |-
        ### Tournament - General - Get

        This endpoint is used to retrieve general information about a specific tournament. Below is a detailed description of each component of the request.

        #### Request Details:

        - **Auth**:
          - **Type**: The authorization method used for this request is Bearer Token.
          - **Bearer**: This specifies the details of the token used for authentication.
            - **Key**: "token" indicates the name of the authorization parameter.
            - **Value**: "BearerToken" serves as a placeholder for the actual bearer token that will be used for authentication. This token must be included in the request to access secured resources.
            - **Type**: "string" indicates that the value of the token is a string.

        - **Method**: 
          - "GET" is the HTTP method used to retrieve data from the specified endpoint.

        - **URL**: 
          - The base URL for the request is `http://localhost:3000/api/tournament/general/get/`. The query parameters in the URL are:
            - **tournamentId**: This parameter should contain the unique identifier for the specific tournament whose information is to be retrieved.
            - **sessionId**: This parameter should contain the unique session identifier associated with the tournament.
            - **accountId**: This parameter should contain the identifier for the user's account making the request.

        - **Headers**: 
          - This section includes any HTTP headers that may be sent along with the request. In this case, there are no headers specified, and the header is disabled. Headers can be added if necessary for additional specifications.

        - **Body**: 
          - **Mode**: "raw" indicates that the body of the request is expected to contain raw data.
          - **Raw**: This field is empty, meaning there is no request body to send. A GET request typically does not include a body.

        This endpoint is crucial for fetching tournament-related data from the server, making it essential for applications that provide tournament information or functionalities related to tournaments. Make sure to replace the placeholder values in the URL with actual values when making the request.
      security:
        - bearerAuth: []
      parameters:
        - name: tournamentId
          in: query
          schema:
            type: string
          example: tournamentId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/general/all:
    get:
      tags:
        - TournamentGeneral
      summary: Tournament - General - Get All
      description: |-
        ### Endpoint: Tournament - General - Get All

        **Description:**
        This API endpoint retrieves all general information related to tournaments.

        #### Request Details:

        - **Authentication:**
          - **Type:** Bearer Token
          - **Bearer Token:**
            - **Key:** token
              - This is the name of the authorization key used to pass the bearer token in the request.
            - **Value:** BearerToken
              - This should be replaced with the actual bearer token required for authentication. The token must be valid to access the data.
            - **Type:** string
              - Indicates that the token value should be a string format.

        - **HTTP Method:** 
          - **GET**
            - This request uses the GET method to fetch data from the API. No data is sent to the server; instead, it retrieves current data.

        - **URL:**
          - `http://localhost:3000/api/tournament/general/all/?sessionId=sessionId&accountId=accountId`
            - This is the endpoint used to access the tournament data.
            - **Query Parameters:**
              - **sessionId:** sessionId
                - The identifier for the current session, which may be required to fetch relevant tournament data.
              - **accountId:** accountId
                - The identifier for the user’s account, necessary for filtering data associated with a particular user.

        - **Headers:**
          - **Key:** (not specified)
            - No custom headers are being used in this request since the key and value are empty.
            - **Value:** (not specified)
            - This header is currently disabled, indicating that it does not play a role in this specific request.

        - **Body:**
          - **Mode:** raw
            - The body format is set to raw, meaning no specific type of body content is being sent with the request.
          - **Raw:** 
            - The body is empty as no additional data is transmitted in this GET request. 

        This structure allows users to fetch comprehensive tournament details without having to provide additional data in the body. Make sure to replace the session and account IDs with actual values before making the request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/general/delete:
    post:
      tags:
        - TournamentGeneral
      summary: Tournament - General - Delete
      description: |-
        {
          "name": "Tournament - General - Delete",
          "description": {
            "request": {
              "auth": {
                "type": "bearer": "Authentication method used to authorize the request. The bearer token is required for access control.",
                "bearer": [
                  {
                    "key": "token": "This field represents the name of the authentication token.",
                    "value": "sessionId": "This is a placeholder for the actual session ID that confirms the user's active session.",
                    "type": "string": "Indicates that the value should be a string, specifically a session ID."
                  }
                ]
              },
              "method": "POST": "The HTTP method used for this request is POST, indicating that data is being sent to the server to perform an action.",
              "url": "http://localhost:3000/api/tournament/general/delete": "The endpoint where the request is directed. This is a local server endpoint for deleting a tournament.",
              "headers": [
                {
                  "key": "": "There are no specific headers included in the request.",
                  "value": "": "No additional headers are assigned.",
                  "type": "default": "The default type is indicated, which usually means no specific header type is set.",
                  "disabled": true: "This header entry is disabled, meaning it will not be sent with the request."
                }
              ],
              "body": {
                "mode": "raw": "The body of the request is sent in raw format, allowing for a custom JSON structure.",
                "raw": "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"tournamentId\":\"tournamentId\"}": "The body contains JSON data with three fields: sessionId (the ID of the current session), accountId (the ID of the user's account), and tournamentId (the ID of the tournament being deleted). Each ID is represented as a string placeholder."
              }
            }
          }
        }
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"tournamentId\":\"tournamentId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/invite/create:
    post:
      tags:
        - TournamentInvite
      summary: Tournament - Invite - Create
      description: |-
        ### Endpoint: Tournament - Invite - Create

        #### Authentication
        - **Auth Type**: Bearer Token
          - **Token**: A string that represents the authentication token required to access this endpoint. The token should be prefixed with "Bearer".

        #### Request Method
        - **Method**: POST
          - This indicates that the request is used to create a new tournament invite.

        #### Request URL
        - **URL**: `http://localhost:3000/api/tournament/invite/create`
          - This is the endpoint where the POST request will be sent to create a tournament invite.

        #### Request Headers
        - **Headers**: Currently includes an empty header which is disabled, indicating that no additional headers are needed for this request.

        #### Request Body
        - **Body Mode**: Raw
          - The body of the request contains a JSON object with various parameters required to create a tournament invite.

        ##### Body Parameters:
        - **sessionId**: `sessionId`
          - A unique identifier for the session associated with the tournament invite.
          
        - **accountId**: `accountId`
          - The unique identifier for the account that is sending the invite.

        - **name**: `"My Second Invite"`
          - The name of the tournament invite being created.

        - **description**: `"This invite is my second invite"`
          - A brief description of the invite providing additional context.

        - **tags**: `"second,invite"`
          - Tags associated with the invite which can help in categorization or searchability.

        - **profilePhotoUrl**: `"https://example.com/profile.jpg"`
          - URL to the profile photo that will be associated with the invite.

        - **coverPhotoUrl**: `"https://example.com/cover.jpg"`
          - URL to the cover photo that will be displayed with the invite.

        - **minimumTipAmount**: `10`
          - The minimum tip amount that can be offered with this invite.

        - **categoryId**: `"category123"`
          - A unique identifier for the category this invite falls under.

        - **category**: `"General"`
          - The name of the category assigned to this invite.

        - **subCategoryId**: `"subCategory456"`
          - A unique identifier for the sub-category this invite falls under.

        - **subCategory**: `"Specific"`
          - The name of the sub-category assigned to this invite.

        - **isInvitePrivate**: `true`
          - A boolean indicating whether the invite is private. If true, it can only be seen by invited participants.

        - **isTournamentOnly**: `false`
          - A boolean indicating whether the invite is only for tournament participants. If true, non-participant viewers cannot access it.

        - **isInviteDefault**: `true`
          - A boolean indicating whether this is the default invite configuration. 

        - **isPreLiveTournamentAds**: `true`
          - A boolean that determines if advertising is enabled before the tournament goes live.

        - **isPostLiveTournamentAds**: `true`
          - A boolean indicating if advertising is enabled after the tournament is finished.

        - **breakPreLiveVideoUrl**: `"https://example.com/break-pre-live.mp4"`
          - URL to a video that will be shown during breaks before the tournament goes live.

        - **breakPostLiveVideoUrl**: `"https://example.com/break-post-live.mp4"`
          - URL to a video that will be displayed during breaks after the tournament has ended.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Invite
                description: This invite is my second invite
                tags: second,invite
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isInvitePrivate: true
                isTournamentOnly: false
                isInviteDefault: true
                isPreLiveTournamentAds: true
                isPostLiveTournamentAds: true
                breakPreLiveVideoUrl: https://example.com/break-pre-live.mp4
                breakPostLiveVideoUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/invite/update:
    put:
      tags:
        - TournamentInvite
      summary: Tournament - Invite - Update
      description: |-
        ### Endpoint: Tournament - Invite - Update

        **Request Type:** PUT  
        **URL:** `http://localhost:3000/api/tournament/invite/update`  

        #### Authentication
        - **Auth Type:** Bearer  
          This endpoint requires bearer token authentication to ensure only authorized users can update tournament invites.
          - **Key:** `token`  
            The authorization token required for the request. Replace `"BearerToken"` with the actual bearer token.

        #### Headers
        - **Client-UUID**  
          - **Key:** `Client-UUID`  
            This header should contain a unique identifier for the client making the request. Replace `"ClientUUID"` with the actual UUID.

        #### Body
        The body of the request should be a JSON object containing the following fields:

        1. **inviteId**  
           - **Description:** Unique identifier for the invite that is being updated. Replace `"inviteId"` with the actual invite ID.

        2. **sessionId**  
           - **Description:** Identifier for the session associated with this invite. Replace `"sessionId"` with the actual session ID.

        3. **accountId**  
           - **Description:** Identifier for the account that the invite is associated with. Replace `"accountId"` with the actual account ID.

        4. **name**  
           - **Description:** The title or name of the invite. Replace `"My Second Invite 2.0"` with the desired name.

        5. **description**  
           - **Description:** A brief description of the invite. Replace `"This invite is my second invite"` with an appropriate description.

        6. **tags**  
           - **Description:** Tags associated with the invite for categorization purposes. Replace `"second,invite"` with relevant tags separated by commas.

        7. **profilePhotoUrl**  
           - **Description:** URL for the profile photo associated with the invite. Replace `"https://example.com/profile.jpg"` with the actual image URL.

        8. **coverPhotoUrl**  
           - **Description:** URL for the cover photo associated with the invite. Replace `"https://example.com/cover.jpg"` with the actual image URL.

        9. **minimumTipAmount**  
           - **Description:** Minimum tip amount required for the invite. Replace `10` with the actual minimum amount.

        10. **categoryId**  
            - **Description:** Unique identifier for the category that the invite falls under. Replace `"category123"` with the actual category ID.

        11. **category**  
            - **Description:** The main category name for the invite. Replace `"General"` with the category name.

        12. **subCategoryId**  
            - **Description:** Unique identifier for the subcategory of the invite. Replace `"subCategory456"` with the actual subcategory ID.

        13. **subCategory**  
            - **Description:** The subcategory name for the invite. Replace `"Specific"` with the appropriate subcategory name.

        14. **isInvitePrivate**  
            - **Description:** Boolean value indicating if the invite is private. Set as `true` for private or `false` for public.

        15. **isTournamentOnly**  
            - **Description:** Boolean value indicating if the invite is only applicable for tournaments. Set as `true` for tournament only, `false` otherwise.

        16. **isInviteDefault**  
            - **Description:** Boolean value indicating if this invite is a default invite. Set as `true` for default, `false` otherwise.

        17. **isPreLiveTournamentAds**  
            - **Description:** Boolean value indicating if ads should be shown before the tournament goes live. Set as `true` to enable, `false` to disable.

        18. **isPostLiveTournamentAds**  
            - **Description:** Boolean value indicating if ads should be shown after the tournament has ended. Set as `true` to enable, `false` to disable.

        19. **breakPreLiveVideoUrl**  
            - **Description:** URL for a video that will be shown during pre-live breaks. Replace `"https://example.com/break-pre-live.mp4"` with the actual video URL.

        20. **breakPostLiveVideoUrl**  
            - **Description:** URL for a video that will be shown during post-live breaks. Replace `"https://example.com/break-post-live.mp4"` with the actual video URL.

        All values in the body should be replaced with actual data relevant to the invite being updated.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"inviteId\":\"inviteId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Invite 2.0\",\"description\":\"This invite is my second invite\",\"tags\":\"second,invite\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isInvitePrivate\":true,\"isTournamentOnly\":false,\"isInviteDefault\":true,\"isPreLiveTournamentAds\":true,\"isPostLiveTournamentAds\":true,\"breakPreLiveVideoUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveVideoUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/invite/get:
    get:
      tags:
        - TournamentInvite
      summary: Tournament - Invite - Get
      description: |-
        ### Endpoint Description: Tournament - Invite - Get

        **Name:** This request is named "Tournament - Invite - Get".

        **Authentication:**
        - **Type:** Bearer
          - This endpoint requires authentication using a bearer token.
          - **Token Details:**
            - **Key:** token
            - **Value:** BearerToken (This should be replaced with your actual bearer token)
            - **Type:** string (Indicates that the token is in string format)

        **Request Method:** 
        - **Method:** GET
          - This is a GET request, meaning it is used to retrieve data from the server.

        **Request URL:** 
        - **URL:** `http://localhost:3000/api/tournament/invite/get/?inviteId=inviteId&sessionId=sessionId&accountId=accountId`
          - This is the endpoint to access. 
          - **Parameters:**
            - **inviteId:** This parameter should be replaced with the specific ID of the tournament invite you wish to retrieve.
            - **sessionId:** This parameter should be replaced with the ID of the session related to the tournament.
            - **accountId:** This parameter should be replaced with the account ID of the user requesting the invite.

        **Headers:**
        - **Key:** None specified
        - **Value:** None specified
        - **Type:** default
        - **Disabled:** true
          - No custom headers are needed for this request; the header section is disabled by default.

        **Body:**
        - **Mode:** raw
          - This indicates the type of body content expected in the request.
        - **Raw:** (Empty)
          - No body content is needed for this GET request, so this field is left empty.

        This provides clear guidelines for using the "Tournament - Invite - Get" endpoint, ensuring users understand the required inputs and structure for a successful API call.
      security:
        - bearerAuth: []
      parameters:
        - name: inviteId
          in: query
          schema:
            type: string
          example: inviteId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/invite/all:
    get:
      tags:
        - TournamentInvite
      summary: Tournament - Invite - Get All
      description: |-
        **Endpoint Description: Tournament - Invite - Get All**

        - **Name**: This refers to the name of the endpoint, which indicates that it is used to retrieve all invitation details related to tournaments.

        - **Request**: This section contains the information about how to structure the request for this endpoint.

          - **Auth**: Specifies the authentication method used to access the endpoint. It requires a bearer token to authenticate the request.
          
            - **Type**: Indicates the type of authentication being used, which is "bearer" in this case.
            
            - **Bearer**: An array containing authentication details.
            
              - **Key**: This identifies the parameter for the bearer token, labeled as "token".
              
              - **Value**: Here, you should replace "BearerToken" with your actual bearer token value when making the request.
              
              - **Type**: Describes the data type of the token, which is specified as "string".

          - **Method**: This indicates the HTTP method used for the request, which is "GET". It means that this endpoint retrieves data from the server.
          
          - **URL**: The endpoint's URL used to access the resource. In this case, it points to the local server and requires two query parameters:
          
            - **sessionId**: A placeholder for the session identifier, which should be replaced with the actual session ID when making the request.
            
            - **accountId**: A placeholder for the account identifier, which should also be replaced with the actual account ID.
          
          - **Headers**: This section is for any additional HTTP headers you might want to include in your request. Currently, this is empty and disabled, indicating no extra headers are currently necessary.

          - **Body**: This section specifies the request payload.
          
            - **Mode**: The mode indicates the format of the body; it is set to "raw", meaning no structured data is being sent.
            
            - **Raw**: The actual body data is empty in this example, meaning no additional data is required when making the request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/invite/delete:
    post:
      tags:
        - TournamentInvite
      summary: Tournament - Invite - Delete
      description: |-
        ### Endpoint: Tournament - Invite - Delete

        #### Request-Type:
        - **Method**: This endpoint uses the **POST** method to delete an invite.

        #### URL:
        - **URL**: The endpoint is accessed via **http://localhost:3000/api/tournament/invite/delete**. 
          - This is the local server address where the API is hosted for handling the tournament invite deletion.

        #### Authentication:
        - **Auth Type**: The request requires **bearer token authentication**.
          - **Token**: A bearer token must be included for authentication. 
          - The token format is defined as:
            - **Key**: "token" 
            - **Value**: The actual value should be replaced with the user's session ID.
            - **Type**: "string", indicating that the session ID is provided as a string.

        #### Headers:
        - **Headers**: The request does not have any active headers defined.
          - The enabled state of the header is set to **disabled**, and both the **key** and **value** are empty.
          
        #### Body:
        - **Body Type**: The body of the request is in **raw** format.
        - **Content**: The body contains JSON data structured as follows:
          - **sessionId**: This should be replaced with the user's actual session ID that is used for authentication.
          - **accountId**: This should be replaced with the user's account ID, required to specify which account is making the deletion request.
          - **inviteId**: This should be replaced with the specific invite ID that needs to be deleted.

        ### JSON Structure in Request Body:
        ```json
        {
          "sessionId": "sessionId",
          "accountId": "accountId",
          "inviteId": "inviteId"
        }
        ```
        - Make sure to replace the placeholders (`sessionId`, `accountId`, `inviteId`) with actual values before sending the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"inviteId\":\"inviteId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/player/create:
    post:
      tags:
        - TournamentPlayer
      summary: Tournament - Player - Create
      description: |-
        ### Description of Endpoint Data:

        - **name**: Identifies the endpoint as "Tournament - Player - Create," indicating that this is used to create a new player for a tournament.

        - **request**: Contains details about the request being made to the API.

          - **auth**: Specifies the authentication method used for the request.
            
            - **type**: Indicates that the authentication type is "bearer."
            
            - **bearer**: An array that holds authentication credentials.
              
              - **key**: The designation for the bearer token; labeled as "token."
              
              - **value**: The actual bearer token value which is a placeholder here as "BearerToken."
              
              - **type**: Specifies that the type of the value is a string.

          - **method**: The HTTP method for the request, which is "POST," indicating that data will be sent to the server.

          - **url**: The endpoint URL where the request is directed, which is "http://localhost:3000/api/tournament/player/create".

          - **headers**: An array representing HTTP headers for the request.
            
            - **key**: The header key is left empty, and as such, it's not currently utilized.
            
            - **value**: The corresponding value for the key is also left empty.
            
            - **type**: Categorizes the header type as "default."
            
            - **disabled**: A boolean indicating whether this header is currently active; set to true, suggesting it is inactive.

          - **body**: Represents the content included in the request.
            
            - **mode**: Specifies the format of the body content, which is "raw."

            - **raw**: A JSON string that contains the details necessary to create the player. The JSON object includes:
              
              - **sessionId**: A unique identifier for the session associated with the player.
              
              - **accountId**: The identifier for the account under which the player is associated.
              
              - **name**: The name given to the player; in this case, "My Second Player."
              
              - **description**: A brief description of the player, detailing that this player is the user's second player.
              
              - **tags**: A comma-separated list of tags for categorizing the player; here, it includes "second" and "player."
              
              - **profilePhotoUrl**: A URL pointing to the player's profile photo.
              
              - **coverPhotoUrl**: A URL for the player's cover photo.
              
              - **minimumTipAmount**: Specifies the minimum amount that can be tipped to the player; set to 10.
              
              - **categoryId**: An identifier for the category to which the player belongs; labeled as "category123."
              
              - **category**: The name of the category, indicated as "General."
              
              - **subCategoryId**: An identifier for the subcategory assigned to the player; labeled as "subCategory456."
              
              - **subCategory**: The name of the subcategory, specified as "Specific."
              
              - **isPlayerPrivate**: A boolean indicating whether the player's profile is private; set to true.
              
              - **isTournamentOnly**: A boolean indicating if the player is available only for tournament play; set to false.
              
              - **isPlayerDefault**: A boolean indicating if this player is set as the default player; marked true.
              
              - **isPreLiveTournamentAds**: A boolean indicating if ads are allowed during pre-live tournaments; set to true.
              
              - **isPostLiveTournamentAds**: A boolean indicating if ads can run after live tournaments; set to true.
              
              - **breakPreLiveVideoUrl**: A URL pointing to the video to be played during pre-live breaks.
              
              - **breakPostLiveVideoUrl**: A URL pointing to the video to be played during post-live breaks.
            
            - **options**: Configuration options for the raw body.
              
              - **raw**: Contains specific language settings for the raw format.
                
                - **language**: Indicates that the language of the raw content is "json."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Player
                description: This player is my second player
                tags: second,player
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isPlayerPrivate: true
                isTournamentOnly: false
                isPlayerDefault: true
                isPreLiveTournamentAds: true
                isPostLiveTournamentAds: true
                breakPreLiveVideoUrl: https://example.com/break-pre-live.mp4
                breakPostLiveVideoUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/player/update:
    put:
      tags:
        - TournamentPlayer
      summary: Tournament - Player - Update
      description: |-
        ### Tournament - Player - Update

        This endpoint allows for updating player information within a tournament.

        #### Request Authentication
        - **Type**: Bearer Token
          - **Key**: `token`
          - **Value**: `BearerToken`
          - **Type**: String  
          This is the authentication token required to access the endpoint. Ensure that it is valid and has the necessary permissions.

        #### HTTP Method
        - **Method**: PUT  
          This method indicates that the client is requesting to update data on the server.

        #### URL
        - **URL**: `http://localhost:3000/api/tournament/player/update`  
          This is the endpoint where the update request will be sent.

        #### Headers
        - **Client-UUID**
          - **Key**: `Client-UUID`
          - **Value**: `ClientUUID`
          - **Type**: Default  
          This header is used to identify the client making the request. Ensure that `ClientUUID` is replaced with the actual UUID relevant to the client.

        #### Request Body
        The body of the request contains data in raw JSON format to update player details. Here are the parameters included:

        - **playerId**: 
          - Type: String
          - Description: Unique identifier for the player. Must be provided to specify which player to update.

        - **sessionId**: 
          - Type: String
          - Description: Unique identifier for the session associated with the player. 

        - **accountId**: 
          - Type: String
          - Description: Unique identifier for the account linked to the player.

        - **name**: 
          - Type: String
          - Description: The name of the player. This should be a descriptive name that will represent the player.

        - **description**: 
          - Type: String
          - Description: A brief description of the player. This text can provide additional context or details about the player.

        - **tags**: 
          - Type: String
          - Description: Tags related to the player. These can be used for categorization and searchability, formatted as a comma-separated list.

        - **profilePhotoUrl**: 
          - Type: String
          - Description: URL pointing to the player’s profile photo. This should be a publicly accessible link.

        - **coverPhotoUrl**: 
          - Type: String
          - Description: URL for the player’s cover photo. Similar to the profile photo, ensure this link is publicly accessible.

        - **minimumTipAmount**: 
          - Type: Number
          - Description: The minimum amount that can be tipped to the player. This should be a numerical value.

        - **categoryId**: 
          - Type: String
          - Description: Unique identifier for the category under which the player falls.

        - **category**: 
          - Type: String
          - Description: The category name representing the player. This should correlate with the provided `categoryId`.

        - **subCategoryId**: 
          - Type: String
          - Description: Unique identifier for the sub-category related to the player.

        - **subCategory**: 
          - Type: String
          - Description: The name of the sub-category that further classifies the player, linked to the `subCategoryId`.

        - **isPlayerPrivate**: 
          - Type: Boolean
          - Description: Indicates whether the player's information is private. If `true`, the player's details will not be publicly visible.

        - **isTournamentOnly**: 
          - Type: Boolean
          - Description: Specifies if the player is only visible during tournaments. Set to `true` for tournament-specific visibility.

        - **isPlayerDefault**: 
          - Type: Boolean
          - Description: Represents if this player profile is the default profile. Useful in scenarios where multiple profiles exist.

        - **isPreLiveTournamentAds**: 
          - Type: Boolean
          - Description: Indicates if advertisements will run before the live tournament for this player. If `true`, pre-live ads are enabled.

        - **isPostLiveTournamentAds**: 
          - Type: Boolean
          - Description: Specifies whether advertisements will run after the live tournament. Set to `true` to enable post-live ads.

        - **breakPreLiveVideoUrl**: 
          - Type: String
          - Description: URL for the video to be shown during break periods before the live tournament. 

        - **breakPostLiveVideoUrl**: 
          - Type: String
          - Description: URL for the video to be shown during break periods after the tournament ends.

        Make sure to replace placeholder values (like `playerId`, `sessionId`, etc.) with actual data when sending the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"playerId\":\"playerId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Player 2.0\",\"description\":\"This player is my second player\",\"tags\":\"second,player\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isPlayerPrivate\":true,\"isTournamentOnly\":false,\"isPlayerDefault\":true,\"isPreLiveTournamentAds\":true,\"isPostLiveTournamentAds\":true,\"breakPreLiveVideoUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveVideoUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/player/get:
    get:
      tags:
        - TournamentPlayer
      summary: Tournament - Player - Get
      description: |-
        **Endpoint Name:** Tournament - Player - Get

        **Description:**

        - **Auth:** 
          - **Type**: Bearer authentication is required for accessing this endpoint.
          - **Bearer**: 
            - **Key**: "token" is the identifier for the authentication token.
            - **Value**: The token should be prefixed with "Bearer" (e.g., "BearerToken").
            - **Type**: The token must be of type string.

        - **Method:** 
          - **GET**: This endpoint uses the GET method, which is used to retrieve data from the server.

        - **URL:** 
          - **Request URL**: The URL for this request is "http://localhost:3000/api/tournament/player/get/". This is the base path for the API endpoint.
          - **Query Parameters**: 
            - **playerId**: This is a query parameter used to specify the unique identifier for the player whose information is being retrieved.
            - **sessionId**: This query parameter is used to specify the session under which the player is participating.
            - **accountId**: This query parameter identifies the account associated with the player.

        - **Headers:** 
          - **Key**: The headers array includes a key which is currently empty.
          - **Value**: The value for the header is also empty.
          - **Type**: The type is set to default, and the header is disabled, meaning it will not be sent in the request.

        - **Body:** 
          - **Mode**: The body mode is set to "raw".
          - **Raw**: The raw body content is empty, indicating that this request does not require a body payload.

        This endpoint is designed to retrieve player information based on their ID, session, and account, secured by a bearer token for authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: playerId
          in: query
          schema:
            type: string
          example: playerId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/player/all:
    get:
      tags:
        - TournamentPlayer
      summary: Tournament - Player - Get All
      description: |-
        ### Tournament - Player - Get All Endpoint Description

        This endpoint is designed to retrieve a list of all players participating in a specific tournament. Below is a detailed description of each component involved in this API request.

        - **Endpoint Name**: Tournament - Player - Get All
          - This indicates the purpose of the API call, which is to fetch all players associated with a tournament.

        - **Request Type**: GET
          - The method used to send a request to retrieve data without affecting the server's state.

        - **URL**: `http://localhost:3000/api/tournament/player/all/?sessionId=sessionId&accountId=accountId`
          - This is the endpoint address where the API request is sent. 
          - The base URL is `http://localhost:3000/api/tournament/player/all/`, and it includes query parameters: 
            - **sessionId**: A unique identifier for the session to ensure valid access.
            - **accountId**: The identifier for the user's account, necessary for retrieving player information.

        - **Auth**: 
          - **Type**: bearer
            - This indicates that the request requires bearer token authentication.
          - **Bearer**: 
            - A list containing an object with the authentication details:
              - **Key**: `token`
                - This represents the parameter's name that holds the authentication token.
              - **Value**: `BearerToken`
                - This is a placeholder for the actual bearer token that should be used in a real request for authentication purposes.
              - **Type**: string
                - Specifies that the token is a string type.

        - **Headers**:
          - This section defines additional information sent with the request. In this case:
            - There are no headers specified since the key and value are empty, and it is marked as disabled. This means no custom headers are included in this request.

        - **Body**:
          - **Mode**: raw
            - Indicates the body format; here it is set to raw, but since it's a GET request, this section is effectively empty as no body is sent with the request.
          - **Raw**: 
            - The raw body is an empty string, which is typical for GET requests, as most of the data is included in the URL parameters.

        This detailed breakdown provides a clear understanding of how to use the endpoint to get the data needed regarding all players in a specified tournament.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/player/delete:
    post:
      tags:
        - TournamentPlayer
      summary: Tournament - Player - Delete
      description: |-
        ### Tournament - Player - Delete

        This endpoint is used to delete a player from a tournament. Here is a detailed description of each component of the request:

        #### Request Details:
        - **Method**: 
          - `POST`: This indicates that the request is sending data to the server to perform an operation.

        - **URL**: 
          - `http://localhost:3000/api/tournament/player/delete`: This is the endpoint where the request is sent to delete a player from a tournament.

        #### Authentication:
        - **Auth Type**: 
          - `Bearer`: This indicates that the request requires a bearer token for authentication, which is typically used to verify the identity of the user making the request.

        - **Bearer Token Details**:
          - **Key**: `token`
          - **Value**: `sessionId`: This is the actual token that is used for authenticating the request. It represents the user's session identifier.

        #### Headers:
        - **Headers**: 
          - Currently, there are no additional headers specified. The header entry is disabled, indicating it is not being used in this request.

        #### Body:
        - **Body Mode**: 
          - `raw`: This indicates that the body of the request will be sent as a raw JSON string.

        - **Body Content**: 
          - The body contains a JSON object with the following fields:
            - **sessionId**: This represents the user's session identifier, which is needed for authentication and to authorize the operation.
            - **accountId**: This is the identifier for the user's account that is associated with the tournament.
            - **playerId**: This is the identifier for the player that is being deleted from the tournament.

        This request should be sent to remove a specific player, identified by the playerId, from the specified tournament while ensuring that the operation is authorized through the provided sessionId and accountId.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"playerId\":\"playerId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/stats/create:
    post:
      tags:
        - TournamentStats
      summary: Tournament - Stats - Create
      description: |-
        ### Endpoint: Tournament - Stats - Create

        This API endpoint is used to create statistics related to a tournament. Below is a detailed description of each data field included in the request body.

        #### Request Details

        - **Auth Type**: 
          - The request requires bearer token authentication. Users must provide a valid token to authorize the request.

        #### URL
        - **Endpoint URL**: 
          - This is the URL where the request is sent. It is set to `http://localhost:3000/api/tournament/stats/create`.

        #### Request Body

        - **sessionId**: 
          - A unique identifier for the tournament session. This helps to associate the stats with a specific tournament session.

        - **accountId**: 
          - The unique identifier for the user account. This links the created stats to the user's account in the system.

        - **name**: 
          - The name given to the statistics being created. This should be a descriptive title that clearly indicates what these stats represent.

        - **description**: 
          - A detailed description of the statistics. This provides additional context about the stats being created, helping users understand their purpose.

        - **tags**: 
          - A string of comma-separated tags that describe the statistics. These tags can help in categorization and searching for similar stats later on.

        - **profilePhotoUrl**: 
          - A URL pointing to the profile photo associated with the stats. This image can represent the creator or the nature of the stats.

        - **coverPhotoUrl**: 
          - A URL for the cover photo related to the stats. This is typically displayed as a background image for the stats page.

        - **minimumTipAmount**: 
          - A numeric value that specifies the minimum amount users can tip while interacting with the stats. It sets a baseline for contributions.

        - **categoryId**: 
          - The unique identifier for the category under which these stats fall. This helps in organizing stats into broader classes.

        - **category**: 
          - The name or label of the category. This is a human-readable version of the categoryId and helps users quickly identify the category of the stats.

        - **subCategoryId**: 
          - A unique identifier for any specific subcategory further detailing the main category. This adds an additional layer of classification.

        - **subCategory**: 
          - The name or label of the subcategory. It gives more context about the specific type of stats being created.

        - **isStatsPrivate**: 
          - A boolean value indicating whether the stats should be visible only to the creator (true) or shared publicly (false).

        - **isTournamentOnly**: 
          - A boolean indicating if these stats are exclusively for tournament-related activities. When true, it means the stats are not applicable outside of tournament settings.

        - **isStatsDefault**: 
          - A boolean that designates whether these stats are the default stats associated with the tournament. Default stats may have standard settings or rules.

        - **isPreLiveTournamentAds**: 
          - A boolean indicating whether advertisements should be shown before the live tournament begins. This can be used for promotional purposes.

        - **isPostLiveTournamentAds**: 
          - A boolean indicating if advertisements can be shown after the live tournament has concluded. Useful for generating revenue through ads.

        - **breakPreLiveVideoUrl**: 
          - A URL to a video that can be played during breaks before the tournament starts. This can enhance user engagement during waiting times.

        - **breakPostLiveVideoUrl**: 
          - A URL for a video that can play during breaks after the tournament has concluded. Similar to the pre-live video, this keeps users engaged post-event.

        ### Summary
        This endpoint facilitates the creation of tournament-related statistics with comprehensive configurations, allowing users to personalize and manage their stats effectively.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Stats
                description: This stats is my second stats
                tags: second,stats
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isStatsPrivate: true
                isTournamentOnly: false
                isStatsDefault: true
                isPreLiveTournamentAds: true
                isPostLiveTournamentAds: true
                breakPreLiveVideoUrl: https://example.com/break-pre-live.mp4
                breakPostLiveVideoUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/stats/update:
    put:
      tags:
        - TournamentStats
      summary: Tournament - Stats - Update
      description: |-
        ### Description of Endpoint Data

        **Endpoint Name:**
        - **Tournament - Stats - Update**
          
        **Request:**
        - **Auth:** 
          - **Type:** Bearer
          - **Bearer:** 
            - **Key:** token
              - **Value:** BearerToken
              - **Type:** string
              - *This key is used to pass an authorization token that validates the user making the request.*

        - **Method:** 
          - **PUT**
          - *Indicates that this request is meant to update existing data.*

        - **URL:** 
          - **http://localhost:3000/api/tournament/stats/update**
          - *The endpoint where the request is sent to update tournament stats.*

        - **Headers:** 
          - **Client-UUID:** 
            - **Key:** Client-UUID
              - **Value:** ClientUUID
              - **Type:** default
              - *This is a unique identifier for the client making the request, used for identification purposes.*

        - **Body:** 
          - **Mode:** raw
          - **Raw Content:** 
            - *A JSON object containing the data for the update operation. The fields are as follows:*

        1. **statsId:**
           - *String identifier for the specific stats being updated.*

        2. **sessionId:**
           - *Identifier for the tournament session associated with the stats.*

        3. **accountId:**
           - *Identifier for the user's account that owns these stats.*

        4. **name:**
           - *A string representing the name of the stats being updated.*

        5. **description:**
           - *A string providing a description of the stats.*

        6. **tags:**
           - *Comma-separated string of tags for categorizing the stats.*

        7. **profilePhotoUrl:**
           - *String URL for the profile photo associated with the stats.*

        8. **coverPhotoUrl:**
           - *String URL for the cover photo associated with the stats.*

        9. **minimumTipAmount:**
           - *Numeric value indicating the minimum amount for tips related to this stats.*

        10. **categoryId:**
            - *String identifier for the category of the stats.*

        11. **category:**
            - *A string specifying the main category of the stats.*

        12. **subCategoryId:**
            - *String identifier for the sub-category of the stats.*

        13. **subCategory:**
            - *A string for the specific sub-category of the stats.*

        14. **isStatsPrivate:**
            - *Boolean value indicating whether the stats are private or public.*

        15. **isTournamentOnly:**
            - *Boolean indicating if these stats apply only to tournaments.*

        16. **isStatsDefault:**
            - *Boolean specifying if these stats are set as default stats for the account.*

        17. **isPreLiveTournamentAds:**
            - *Boolean indicating if ads are shown during pre-live tournaments.*

        18. **isPostLiveTournamentAds:**
            - *Boolean indicating if ads are shown after live tournaments.*

        19. **breakPreLiveVideoUrl:**
            - *String URL for a video to be shown during pre-live breaks.*

        20. **breakPostLiveVideoUrl:**
            - *String URL for a video to be shown during post-live breaks.*

        *This detailed breakdown of the body fields provides clarity on the necessary data for updating tournament stats and the expected format for each field.*
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"statsId\":\"statsId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Stats 2.0\",\"description\":\"This stats is my second stats\",\"tags\":\"second,stats\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isStatsPrivate\":true,\"isTournamentOnly\":false,\"isStatsDefault\":true,\"isPreLiveTournamentAds\":true,\"isPostLiveTournamentAds\":true,\"breakPreLiveVideoUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveVideoUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/stats/get:
    get:
      tags:
        - TournamentStats
      summary: Tournament - Stats - Get
      description: |-
        ### Endpoint Description: Tournament - Stats - Get

        - **Endpoint Name**: Tournament - Stats - Get  
          This is the name of the API endpoint, designated for retrieving tournament statistics.

        - **Request**: This is the section detailing how the request is structured.

          - **Auth**: 
            - **Type**: Bearer  
              The authentication method being used is Bearer Token, which is a common way to secure APIs.
            - **Bearer**: 
              - **Key**: token  
                This is the identifier for the authentication token.
              - **Value**: BearerToken  
                This is a placeholder for the actual bearer token which is required to authenticate the request.
              - **Type**: string  
                Specifies that the token should be provided as a string.

          - **Method**: GET  
            Indicates the HTTP method used for this request. A GET request is typically used to retrieve data from the server.

          - **URL**: http://localhost:3000/api/tournament/stats/get/?statsId=statsId&sessionId=sessionId&accountId=accountId  
            This is the endpoint URL where the request is sent. The parameters include:
            - **statsId**: statsId  
              This parameter should be replaced with the actual ID of the statistics being requested.
            - **sessionId**: sessionId  
              This parameter should be replaced with the actual session ID associated with the tournament session.
            - **accountId**: accountId  
              This parameter should be replaced with the actual account ID of the user making the request.

          - **Headers**:  
            This section describes the headers sent with the request.
            - **Key**: empty  
              There are no additional headers specified, as indicated by the empty key.
            - **Value**: empty  
              Since there are no additional headers provided, the value is also empty.
            - **Type**: default  
              The header type is set to default.
            - **Disabled**: true  
              This indicates that the header is currently disabled and will not be sent with the request.

          - **Body**:  
            This section outlines the body of the request.
            - **Mode**: raw  
              Specifies that the body will be sent in raw format, which is typically for custom data types.
            - **Raw**: empty  
              The body is currently empty, which means no additional data will be sent with the request.
      security:
        - bearerAuth: []
      parameters:
        - name: statsId
          in: query
          schema:
            type: string
          example: statsId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/stats/all:
    get:
      tags:
        - TournamentStats
      summary: Tournament - Stats - Get All
      description: |-
        ### Description of Each Data in the Endpoint

        **Name**: 
        - This identifies the endpoint as "Tournament - Stats - Get All". It signifies that this endpoint is used to retrieve statistics for all tournaments.

        **Request Auth**:
        - **Type**: Indicates that the authorization method used for the request is "bearer", which means the client must provide a token for access.
          - **Bearer**: This array contains authorization details.
            - **Key**: The name of the authorization parameter, which is "token".
            - **Value**: The token itself, represented here as "BearerToken". Users should replace this with their actual bearer token.
            - **Type**: Specifies the type of value, which is "string".

        **Method**:
        - This is the HTTP method used for the request, which is "GET". It means the endpoint is designed to retrieve data from the server without modifying any resources.

        **URL**:
        - **Base URL**: "http://localhost:3000" indicates that the API is being hosted locally on port 3000.
        - **Endpoint Path**: "/api/tournament/stats/all/" specifies the resource to be accessed, which is all the statistics for tournaments.
        - **Query Parameters**:
          - **sessionId**: This is a query parameter that represents the unique identifier for the user's session. Users need to replace "sessionId" with the actual session ID.
          - **accountId**: Another query parameter that represents the account identifier of the user making the request. This should be replaced with the actual account ID.

        **Headers**:
        - This is an array that specifies additional metadata with the request. In this case, it contains an empty header, which is marked as "disabled". Users can utilize this section to add any necessary headers if required by their implementation.

        **Body**:
        - **Mode**: The body mode is set to "raw", which means that the request will not contain any additional content in the body—it's empty here.
        - **Raw**: The raw body data is empty, indicating that no payload is sent with this GET request.

        This endpoint provides a straightforward way for users to fetch all tournament statistics as long as they provide the correct authorization token and the appropriate query parameters.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/stats/delete:
    post:
      tags:
        - TournamentStats
      summary: Tournament - Stats - Delete
      description: |-
        ### Tournament - Stats - Delete

        **Overview:**  
        This endpoint is designed to delete statistics associated with a specific tournament. It requires authentication and accepts a JSON payload containing identifiers necessary for the deletion process.

        **Request Details:**

        - **Auth Type:** Bearer Token  
          Users must provide a bearer token for authorization. This token is used to validate the user's session.

        - **Method:** POST  
          This endpoint uses the POST method to send a request for deletion.

        - **URL:**  
          The endpoint to which the request is sent is `http://localhost:3000/api/tournament/stats/delete`. This is a local server endpoint.

        **Headers:**  
        There are no specific headers required for this request. However, a default header has been included but is currently disabled.

        **Body:**  
        The request body is sent in raw JSON format and requires the following fields:

        - **sessionId:**  
          This string represents the current user's session ID, which is necessary for authentication and to verify the valid state of the user's session.

        - **accountId:**  
          This string indicates the ID of the user's account associated with the tournament stats being deleted.

        - **statsId:**  
          This string represents the unique identifier of the tournament stats that the user wishes to delete.

        **Example Body Format:**  
        ```json
        {
          "sessionId": "sessionId",
          "accountId": "accountId",
          "statsId": "statsId"
        }
        ```

        Make sure to replace `"sessionId"`, `"accountId"`, and `"statsId"` with the respective values applicable to the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"statsId\":\"statsId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/team/create:
    post:
      tags:
        - TournamentTeam
      summary: Tournament - Team - Create
      description: |-
        **Description for the "Tournament - Team - Create" Endpoint:**

        This endpoint is used to create a new team for a tournament. The request requires a bearer token for authentication and sends the team details in the body of the request.

        **Request Structure:**

        - **Authentication:**
          - **Type:** Bearer
            - The bearer token must be provided for authorization purposes. The placeholder "BearerToken" should be replaced with an actual token that grants access to the API.

        - **Method:**
          - **Type:** POST
            - This endpoint uses the POST method to submit data for creating a new team.

        - **URL:**
          - **Endpoint:** `http://localhost:3000/api/tournament/team/create`
            - This is the URL where the request is sent to create a new team. It uses the local server during development.

        - **Headers:**
          - **Key:** (Empty)
            - Currently, there are no custom headers required, and the header is disabled. It can be configured later if needed.

        - **Body:**
          - **Mode:** Raw
            - The body of the request is sent in raw format.
          
          - **Content:** 
            - A JSON string containing the following fields:

              - **sessionId:**
                - Type: String
                - Description: Unique identifier for the session in which the team is being created.

              - **accountId:**
                - Type: String
                - Description: The account ID associated with the user creating the team.

              - **name:**
                - Type: String
                - Description: The name of the team being created (e.g., "My Second Team").

              - **description:**
                - Type: String
                - Description: A short description of the team (e.g., "This team is my second team").

              - **tags:**
                - Type: String
                - Description: Comma-separated tags related to the team (e.g., "second,team") for categorization or search purposes.

              - **profilePhotoUrl:**
                - Type: String
                - Description: A URL pointing to the team's profile photo (e.g., "https://example.com/profile.jpg").

              - **coverPhotoUrl:**
                - Type: String
                - Description: A URL pointing to the team's cover photo (e.g., "https://example.com/cover.jpg").

              - **minimumTipAmount:**
                - Type: Number
                - Description: The minimum amount for tips associated with the team (e.g., 10).

              - **categoryId:**
                - Type: String
                - Description: The ID of the category under which the team falls (e.g., "category123").

              - **category:**
                - Type: String
                - Description: The name of the category the team belongs to (e.g., "General").

              - **subCategoryId:**
                - Type: String
                - Description: The ID for the sub-category related to the team (e.g., "subCategory456").

              - **subCategory:**
                - Type: String
                - Description: The name of the sub-category the team is related to (e.g., "Specific").

              - **isTeamPrivate:**
                - Type: Boolean
                - Description: A flag indicating whether the team is private (e.g., true).

              - **isTournamentOnly:**
                - Type: Boolean
                - Description: A flag to denote if the team is only used for tournament purposes (e.g., false).

              - **isTeamDefault:**
                - Type: Boolean
                - Description: Indicates if this team is set as default for future actions (e.g., true).

              - **isPreLiveTournamentAds:**
                - Type: Boolean
                - Description: A flag to indicate if pre-live advertisements for tournaments are enabled (e.g., true).

              - **isPostLiveTournamentAds:**
                - Type: Boolean
                - Description: A flag to indicate if post-live advertisements for tournaments are enabled (e.g., true).

              - **breakPreLiveVideoUrl:**
                - Type: String
                - Description: A URL to a video that can be shown during pre-live breaks (e.g., "https://example.com/break-pre-live.mp4").

              - **breakPostLiveVideoUrl:**
                - Type: String
                - Description: A URL to a video that can be shown during post-live breaks (e.g., "https://example.com/break-post-live.mp4"). 

        This endpoint facilitates the creation of a well-defined team with various associated attributes and settings.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Team
                description: This team is my second team
                tags: second,team
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isTeamPrivate: true
                isTournamentOnly: false
                isTeamDefault: true
                isPreLiveTournamentAds: true
                isPostLiveTournamentAds: true
                breakPreLiveVideoUrl: https://example.com/break-pre-live.mp4
                breakPostLiveVideoUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/team/update:
    put:
      tags:
        - TournamentTeam
      summary: Tournament - Team - Update
      description: |-
        ### API Endpoint: Tournament - Team - Update

        This endpoint is used to update the details of a specific tournament team. Below is a detailed description of each piece of data in the request.

        #### Request Method
        - **PUT**: This indicates that the request is intended to update the existing resource on the server.

        #### Request URL
        - **URL**: `http://localhost:3000/api/tournament/team/update`
          - The endpoint URL for updating a tournament team resource.

        #### Authentication
        - **Auth Type**: Bearer Token
          - This indicates that the API requires a bearer token for authentication.
        - **Bearer Token**: 
          - **Key**: `token`
          - **Value**: `BearerToken` (placeholder for the actual token)
          - **Type**: string
          - The bearer token is necessary for accessing this endpoint and should be replaced with a valid token.

        #### Headers
        - **Client-UUID**: 
          - **Key**: `Client-UUID`
          - **Value**: `ClientUUID` (placeholder for the actual Client UUID)
          - **Type**: default
          - This header is used to identify the client making the request, and should be replaced with the actual UUID.

        #### Request Body
        - **Body Mode**: Raw
          - This indicates that the request body will be in raw JSON format.
        - **Raw JSON**: 
        ```json
        {
          "teamId": "teamId",
          "sessionId": "sessionId",
          "accountId": "accountId",
          "name": "My Second Team 2.0",
          "description": "This team is my second team",
          "tags": "second,team",
          "profilePhotoUrl": "https://example.com/profile.jpg",
          "coverPhotoUrl": "https://example.com/cover.jpg",
          "minimumTipAmount": 10,
          "categoryId": "category123",
          "category": "General",
          "subCategoryId": "subCategory456",
          "subCategory": "Specific",
          "isTeamPrivate": true,
          "isTournamentOnly": false,
          "isTeamDefault": true,
          "isPreLiveTournamentAds": true,
          "isPostLiveTournamentAds": true,
          "breakPreLiveVideoUrl": "https://example.com/break-pre-live.mp4",
          "breakPostLiveVideoUrl": "https://example.com/break-post-live.mp4"
        }
        ```

        ##### JSON Data Description
        1. **teamId**: 
           - A unique identifier for the team that needs to be updated. This should reflect the actual team ID.

        2. **sessionId**: 
           - A unique identifier for the session related to this team update. This can be used for tracking or validation purposes.

        3. **accountId**: 
           - The unique identifier for the account that owns or manages the team. This is useful for ensuring the correct association with user accounts.

        4. **name**: 
           - The new name for the team. This should be a user-friendly name that represents the team.

        5. **description**: 
           - A brief description of the team. This can provide additional context or information about the team to others.

        6. **tags**: 
           - A comma-separated list of tags associated with the team. Tags can help categorize or identify the team easily.

        7. **profilePhotoUrl**: 
           - A URL pointing to the team's profile photo. This will be displayed as the team's avatar or representative image.

        8. **coverPhotoUrl**: 
           - A URL pointing to the team's cover photo. This image will serve as a larger background representation for the team.

        9. **minimumTipAmount**: 
           - The minimum amount that can be tipped to the team. This is useful for setting financial expectations or thresholds.

        10. **categoryId**: 
            - The unique identifier for the category under which this team falls. Categories help in organizing teams effectively.

        11. **category**: 
            - The name of the category to which the team belongs. This helps in classifying the team based on types or activities.

        12. **subCategoryId**: 
            - A unique identifier for any subcategory associated with the team. This allows for further classification.

        13. **subCategory**: 
            - The name of the subcategory for the team, providing more specific categorization.

        14. **isTeamPrivate**: 
            - A boolean value indicating whether the team is private (true) or public (false). Private teams can restrict visibility and access.

        15. **isTournamentOnly**: 
            - A boolean value specifying if the team is exclusive to tournaments. True means the team can only participate in tournaments.

        16. **isTeamDefault**: 
            - Indicates whether this team is set as the default team (true) or not (false). Default teams may have special privileges or status.

        17. **isPreLiveTournamentAds**: 
            - A boolean indicating if advertisements will be shown before the live tournament starts.

        18. **isPostLiveTournamentAds**: 
            - A boolean indicating if advertisements will be shown after the live tournament ends.

        19. **breakPreLiveVideoUrl**: 
            - A URL pointing to a video that can be shown during the pre-live phase of the tournament. This might include promotional or informative content.

        20. **breakPostLiveVideoUrl**: 
            - A URL to a video that can be shown after the live tournament has concluded. This could include highlights or recaps. 

        This structure provides clarity on how to use the endpoint and the purpose of each field in the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"teamId\":\"teamId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Team 2.0\",\"description\":\"This team is my second team\",\"tags\":\"second,team\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isTeamPrivate\":true,\"isTournamentOnly\":false,\"isTeamDefault\":true,\"isPreLiveTournamentAds\":true,\"isPostLiveTournamentAds\":true,\"breakPreLiveVideoUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveVideoUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/team/get:
    get:
      tags:
        - TournamentTeam
      summary: Tournament - Team - Get
      description: |-
        ### Endpoint: Tournament - Team - Get

        #### Overview
        This endpoint is designed to retrieve information related to a specific team in a tournament context. The request is made using a GET method, indicating that the information requested will not modify any server data.

        #### Request Details

        - **Auth**: 
          - **Type**: Bearer
            - This endpoint requires authentication using a bearer token. The acknowledgement of a valid token signifies that the user has the necessary permissions to access the requested resources.
            - **Bearer Token**: 
              - **Key**: `token`
              - **Value**: `BearerToken`
              - **Type**: String
                - The value should be replaced with an actual bearer token that authenticates the request.

        - **Method**: 
          - **GET**
            - Indicates that the request is intended to retrieve data from the server rather than submit data.

        - **URL**: 
          - `http://localhost:3000/api/tournament/team/get/?teamId=teamId&sessionId=sessionId&accountId=accountId`
            - This is the endpoint URL where the request is sent.
            - **Query Parameters**:
              - **teamId**: Represents the unique identifier of the team whose information is being requested. It should be replaced with the actual team ID.
              - **sessionId**: Represents the session identifier for the current tournament. This allows the server to fetch data relevant to the specific session.
              - **accountId**: Represents the unique identifier for the account making the request. This enables validation and access control for the account's data.

        - **Headers**:
          - There are no additional headers required for this request. An example placeholder is present but currently disabled.

        - **Body**:
          - **Mode**: Raw
            - The body of the request is specified as raw, which means it does not contain any predefined structure like JSON or form data for this GET request.
          - **Raw**: 
            - This field is empty as GET requests typically do not require a body. If needed, it can remain blank.

        ### Summary
        Use this endpoint to get detailed information about a specific team within a tournament. Ensure you provide valid tokens and identifiers in the URL parameters for successful data retrieval.
      security:
        - bearerAuth: []
      parameters:
        - name: teamId
          in: query
          schema:
            type: string
          example: teamId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/team/all:
    get:
      tags:
        - TournamentTeam
      summary: Tournament - Team - Get All
      description: |-
        ### Description of Data for the Endpoint "Tournament - Team - Get All"

        - **name**: This specifies the name of the API endpoint. In this case, it is "Tournament - Team - Get All," indicating that the API retrieves all teams associated with a tournament.

        - **request**: This section contains all the details necessary to make the API request.

          - **auth**: This indicates the authentication method used to secure the endpoint.
          
            - **type**: Specifies that the authentication type is "bearer," meaning a token is required for access.
            
            - **bearer**: This is an array containing the necessary authentication information.
            
              - **key**: This specifies the name of the token field, which is "token."
              
              - **value**: This is a placeholder value representing the actual bearer token which is needed to authenticate the request. It should be replaced with a valid token at runtime (e.g., "BearerToken").
              
              - **type**: Indicates the data type of the token, which is "string."

          - **method**: This specifies the HTTP method used for the request. In this case, it is "GET," which means the request is intended to retrieve data.

          - **url**: This is the endpoint URL where the API request will be sent. It includes query parameters for session ID and account ID:
          
            - **http://localhost:3000/api/tournament/team/all/**: Base URL indicating the local server and the specific API route for getting all teams in a tournament.
            
            - **sessionId=sessionId**: A query parameter where "sessionId" should be replaced with the actual session ID value during execution.
            
            - **accountId=accountId**: Another query parameter where "accountId" should be replaced with the actual account ID value during execution.

          - **headers**: This is an array that can hold additional information needed in the request header.
          
            - **key**: The key for header information, which is currently empty.
            
            - **value**: The value associated with the header key, which is also currently empty.
            
            - **type**: Indicates that this is of default type.
            
            - **disabled**: A flag indicating whether this header is active; it is set to true, meaning this header will not be included in the request.

          - **body**: This section describes the body of the request.
          
            - **mode**: Specifies the type of request body; it is set to "raw," indicating the body will be raw data.
            
            - **raw**: This holds the actual content of the body; it is currently empty, suggesting that no data is required in the body for this GET request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tournament/team/delete:
    post:
      tags:
        - TournamentTeam
      summary: Tournament - Team - Delete
      description: |-
        ### Description of Each Data in the Endpoint

        - **name**: This indicates the name of the API endpoint, which is "Tournament - Team - Delete". This suggests that the endpoint is intended for deleting a team from a tournament.

        - **request**: This section contains all the details necessary to make the API request.

          - **auth**: This specifies the type of authentication used for the API request.
          
            - **type**: This indicates the type of authentication. In this case, it is "bearer", meaning that the request requires a bearer token for authorization.
            
            - **bearer**: This is an array containing the details for the bearer token.
            
              - **key**: The key for the token object. Here, it is specified as "token".
              
              - **value**: This is the placeholder for the session ID that the user should provide when making the request. It is represented as "sessionId".
              
              - **type**: Indicates the data type of the token value. It is specified as "string".

          - **method**: This shows the HTTP method used for the request. In this case, it is "POST", indicating that this endpoint is intended to send data to the server to delete a resource.

          - **url**: This is the endpoint URL where the API request is directed. It is currently set to "http://localhost:3000/api/tournament/team/delete", which means it is expected to run locally on port 3000.

          - **headers**: This section contains any HTTP headers to be included in the request. Currently:
          
            - **key**: There is no specified key for the header, indicating that no custom headers are being sent.
            
            - **value**: There is no value provided, suggesting that this header is not in use.
            
            - **type**: It is set to "default", which is the standard header type.
            
            - **disabled**: This is set to true, indicating that the header is currently inactive and will not be included in the request.

          - **body**: This contains the data that will be sent in the request body.
          
            - **mode**: This indicates the format of the request body. It is set to "raw", meaning the data is sent as plain text.
            
            - **raw**: This is the actual data sent in the request body. It is a JSON object containing:
              
              - **sessionId**: The identity token of the user's session, represented as "sessionId". The user needs to replace this with the actual session ID.
              
              - **accountId**: The account identifier for the user whose action this delete request is tied to, represented as "accountId". The actual account ID must be substituted here.
              
              - **teamId**: The identifier of the team that is to be deleted, represented as "teamId". The team ID needs to be replaced with the specific ID of the team to be deleted.

        This detailed breakdown explains the purpose and structure of the request to delete a team from a tournament in the API.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"teamId\":\"teamId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/university/channel/create:
    post:
      tags:
        - UniversityChannel
      summary: University - Channel - Create
      description: |-
        **Endpoint Description: University - Channel - Create**

        - **name**: This specifies the name of the API endpoint being defined, which is responsible for creating a university channel.

        - **request**: This object contains all the elements related to the API request.

          - **auth**: This section defines the authentication method required to access the endpoint.
            
            - **type**: Indicates that the authentication method is a bearer token.
            
            - **bearer**: This array includes the details of the bearer token required for authorization.
              
              - **key**: Identifies the type of authentication information being sent, in this case for the "token".
              
              - **value**: Represents the actual bearer token; in this case, it is labeled as "BearerToken" but will be replaced with an actual token when making requests.
              
              - **type**: Specifies that the data type of the token is a string.

          - **method**: This indicates the HTTP method used for the API request. In this case, it is a "POST" request, which is commonly used for creating new resources.

          - **url**: The endpoint URL where the API request will be sent. This is set to "http://localhost:3000/api/university/channel/create", indicating that the request is going to a local server.

          - **headers**: This section includes any additional HTTP headers that need to be sent with the request.
            
            - **key**: Currently left empty, meaning no specific header is set.
            
            - **value**: Also currently empty as no specific header value is being assigned.
            
            - **type**: Set as "default", indicating that the header type is the standard one but is marked as disabled, which means it will not be included in the request.

          - **body**: This object contains the payload that will be sent in the body of the POST request.
          
            - **mode**: Sets the body mode, here it is "raw", meaning the body is sent as raw data.
            
            - **raw**: This field contains the actual data sent in the request body in JSON format. The data includes:
            
              - **sessionId**: A unique identifier for a user session.
              
              - **accountId**: A unique identifier for the user's account.
              
              - **name**: The name of the channel being created, in this case, "My Second Channel".
              
              - **description**: A brief description of the channel, here stating "This channel is my second channel".
              
              - **tags**: Comma-separated tags that categorize the channel, in this case, "second,channel".
              
              - **profilePhotoUrl**: A URL pointing to the profile photo for the channel.
              
              - **coverPhotoUrl**: A URL pointing to the cover photo for the channel.
              
              - **minimumTipAmount**: The minimum amount that can be tipped in the channel, set to 10.
              
              - **categoryId**: Identifier for the category under which the channel falls, here it's "category123".
              
              - **category**: The main category of the channel, labeled as "General".
              
              - **subCategoryId**: Identifier for a more specific subcategory, here it's "subCategory456".
              
              - **subCategory**: A specific subcategory for the channel, labeled as "Specific".
              
              - **isChannelPrivate**: A boolean indicating whether the channel is private; set to true.
              
              - **isTournamentOnly**: A boolean indicating if the channel is only for tournaments; set to false.
              
              - **isChannelDefault**: A boolean indicating if this is the default channel; set to true. 

              - **isPreLiveUniversityAds**: A boolean indicating whether pre-live university advertisements are enabled; set to true.

              - **isPostLiveUniversityAds**: A boolean indicating whether post-live university advertisements are enabled; set to true. 

              - **breakPreLiveVideoUrl**: A URL linking to a video that might play during a pre-live break.
              
              - **breakPostLiveVideoUrl**: A URL linking to a video that might play during a post-live break.

            - **options**: This object sets options related to the raw content format.
            
              - **raw**: This object contains details about the raw content.
                
                - **language**: Specifies that the format of the raw data is JSON.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Channel
                description: This channel is my second channel
                tags: second,channel
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isChannelPrivate: true
                isTournamentOnly: false
                isChannelDefault: true
                isPreLiveUniversityAds: true
                isPostLiveUniversityAds: true
                breakPreLiveVideoUrl: https://example.com/break-pre-live.mp4
                breakPostLiveVideoUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/university/channel/update:
    put:
      tags:
        - UniversityChannel
      summary: University - Channel - Update
      description: |-
        ### Endpoint: University - Channel - Update

        **Description: This endpoint is used to update the details of a university channel. Below is a detailed description of each data field.**

        #### Request Details:

        - **Auth:**
          - **Type:** `bearer`
            - This indicates the type of authentication used. In this case, it utilizes bearer token authentication.
          - **Bearer:**
            - **Key:** `token`
              - This refers to the authentication token required to authorize the request.
            - **Value:** `BearerToken`
              - The actual bearer token that should be replaced with a valid token for authorization.
            - **Type:** `string`
              - This specifies that the token should be provided as a string.

        - **Method:**
          - **PUT**
            - This indicates that the request will update existing data.

        - **URL:**
          - **http://localhost:3000/api/university/channel/update**
            - The endpoint URL where the update request is sent.

        - **Headers:**
          - **Key:** `Client-UUID`
            - This is a unique identifier for the client making the request.
          - **Value:** `ClientUUID`
            - The actual UUID that should be replaced with a valid client identifier.
          - **Type:** `default`
            - This indicates that the header is standard and does not require special formatting.

        - **Body:**
          - **Mode:** `raw`
            - The body of the request is sent as raw JSON.
          - **Raw:**
            ```json
            {
              "channelId": "channelId",
              "sessionId": "sessionId",
              "accountId": "accountId",
              "name": "My Second Channel 2.0",
              "description": "This channel is my second channel",
              "tags": "second,channel",
              "profilePhotoUrl": "https://example.com/profile.jpg",
              "coverPhotoUrl": "https://example.com/cover.jpg",
              "minimumTipAmount": 10,
              "categoryId": "category123",
              "category": "General",
              "subCategoryId": "subCategory456",
              "subCategory": "Specific",
              "isChannelPrivate": true,
              "isTournamentOnly": false,
              "isChannelDefault": true,
              "isPreLiveUniversityAds": true,
              "isPostLiveUniversityAds": true,
              "breakPreLiveVideoUrl": "https://example.com/break-pre-live.mp4",
              "breakPostLiveVideoUrl": "https://example.com/break-post-live.mp4"
            }
            ```

            - **channelId:**
              - The unique identifier for the channel being updated. Replace with the actual ID of the channel.

            - **sessionId:**
              - The unique identifier for the session related to the channel update. Replace with the actual session ID.

            - **accountId:**
              - The unique identifier for the account associated with the channel. Replace with the actual account ID.

            - **name:**
              - The new name for the channel. This is the title presented to users.

            - **description:**
              - A brief explanation or details about the channel.

            - **tags:**
              - Keywords associated with the channel, useful for categorization and searching.

            - **profilePhotoUrl:**
              - A URL pointing to the profile photo of the channel.

            - **coverPhotoUrl:**
              - A URL pointing to the cover photo for the channel.

            - **minimumTipAmount:**
              - The minimum amount users can tip the channel.

            - **categoryId:**
              - The ID associated with the main category of the channel.

            - **category:**
              - The name of the main category under which the channel falls.

            - **subCategoryId:**
              - The ID associated with a specific subcategory for the channel.

            - **subCategory:**
              - The name of the subcategory under which the channel is classified.

            - **isChannelPrivate:**
              - A boolean value that indicates if the channel is private (true) or public (false).

            - **isTournamentOnly:**
              - A boolean flag that indicates whether the channel is solely for tournaments.

            - **isChannelDefault:**
              - A boolean value that indicates if this channel is the default channel for the account.

            - **isPreLiveUniversityAds:**
              - A boolean value that states if pre-live university advertisements are enabled.

            - **isPostLiveUniversityAds:**
              - A boolean value that denotes if post-live university advertisements are enabled.

            - **breakPreLiveVideoUrl:**
              - A URL pointing to a video that plays during breaks before the live stream.

            - **breakPostLiveVideoUrl:**
              - A URL pointing to a video that plays during breaks after the live stream.

        **Note:** Ensure to replace placeholder values with actual data when making requests. This will help the system to properly process the updates.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"channelId\":\"channelId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Channel 2.0\",\"description\":\"This channel is my second channel\",\"tags\":\"second,channel\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isChannelPrivate\":true,\"isTournamentOnly\":false,\"isChannelDefault\":true,\"isPreLiveUniversityAds\":true,\"isPostLiveUniversityAds\":true,\"breakPreLiveVideoUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveVideoUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/university/channel/get:
    get:
      tags:
        - UniversityChannel
      summary: University - Channel - Get
      description: |-
        {
          "name": "University - Channel - Get",
          "description": {
            "request": {
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "BearerToken",
                    "type": "string"
                  }
                ]
              },
              "method": "GET",
              "url": "http://localhost:3000/api/university/channel/get/?channelId=channelId&sessionId=sessionId&accountId=accountId",
              "headers": [
                {
                  "key": "",
                  "value": "",
                  "type": "default",
                  "disabled": true
                }
              ],
              "body": {
                "mode": "raw",
                "raw": ""
              }
            }
          }
        } 

        ### Description of Each Field:

        - **request**: This field contains details about the request being made to the API.

          - **auth**: This specifies the authentication type used for the request.

            - **type**: Indicates the type of authentication, which is set to "bearer".
            
            - **bearer**: A list containing details for bearer token authentication.

              - **key**: A placeholder for the authentication key, here represented as "token".

              - **value**: Represents the actual bearer token used for the request. In this case, it is indicated as "BearerToken".

              - **type**: Describes the type of value for the bearer, which is a string.

          - **method**: Defines the HTTP method used for this request, which is set to "GET". This method is generally used to retrieve data from the server.

          - **url**: The endpoint where the request is directed. This consists of the base URL and query parameters which include:
          
            - **channelId**: This parameter is used to specify the unique identifier of the channel you want to retrieve information for.
            
            - **sessionId**: This parameter denotes the identifier for the current session, which may be required for the retrieval process.
            
            - **accountId**: This parameter represents the identifier for the account associated with the channel.

          - **headers**: Contains any additional headers to be sent along with the request.
          
            - **key**: The name of the header, currently left empty.
            
            - **value**: The value for the header, which is also currently left empty.

            - **type**: Indicates the type of the header, here it is set to "default".

            - **disabled**: A boolean field indicating whether this header is active. In this case, it is set to true, meaning the header is disabled.

          - **body**: Details the body of the request being sent.

            - **mode**: The mode of the body content, which is set to "raw". This indicates that the request body is not formatted or structured but is sent as a raw string.

            - **raw**: The actual content of the body, which is currently empty, indicating no body content will be sent with this GET request.
      security:
        - bearerAuth: []
      parameters:
        - name: channelId
          in: query
          schema:
            type: string
          example: channelId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/university/channel/all:
    get:
      tags:
        - UniversityChannel
      summary: University - Channel - Get All
      description: |-
        ### Endpoint Description: University - Channel - Get All

        - **Name**: University - Channel - Get All  
          This endpoint is used to retrieve all channels related to a university.

        - **Request**:  
          This section contains the details of the HTTP request to be made.

          - **Auth**:  
            This part specifies the authentication mechanism used to access the endpoint.
            
            - **Type**: Bearer  
              Indicates that the request will use Bearer token authentication.

            - **Bearer**:  
              Contains the details of the bearer token required for authentication.
              
              - **Key**: token  
                This is the identifier for the token.

              - **Value**: BearerToken  
                This represents the actual bearer token to be used in the request. Replace "BearerToken" with the actual token string.

              - **Type**: string  
                Specifies that the token should be treated as a string.

          - **Method**: GET  
            This indicates that the HTTP GET method will be used, which is typically used to retrieve data from a server.

          - **URL**:  
            The endpoint URL that will be called to fetch the data.
            
            - **Base URL**: http://localhost:3000/api/university/channel/all/  
              This is the main URL for accessing university channels.

            - **Query Parameters**:  
              These are additional parameters attached to the URL to provide more context or filtering for the request.
            
              - **sessionId**: sessionId  
                This represents a unique identifier for the current session. It will help in tracking user sessions when accessing the data.
                
              - **accountId**: accountId  
                This denotes the unique identifier for the user's account. It is necessary to ensure that the request is associated with a specific user's data.

          - **Headers**:  
            The section for HTTP headers associated with the request.
            
            - **Key**: (empty)  
              This field is currently empty and does not contain any custom headers.

            - **Value**: (empty)  
              This field is also empty and does not contain any corresponding value.

            - **Type**: default  
              This indicates the default type of the header.

            - **Disabled**: true  
              This indicates that the header is currently disabled and will not be included in the request.

          - **Body**:  
            Contains the body of the request. While typically relevant for POST or PUT requests, in this case:
            
            - **Mode**: raw  
              Indicates that the body should be treated as raw data, but since this is a GET request, no body is sent.

            - **Raw**: ""  
              This field is empty, indicating that no content will be sent in the body of the request.

        ### Summary
        This endpoint is designed to fetch all available channels associated with a university using Bearer token authentication. It requires session and account IDs as query parameters for context and retrieval purposes. No additional headers or body content are needed for this GET request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/university/channel/delete:
    post:
      tags:
        - UniversityChannel
      summary: University - Channel - Delete
      description: |-
        ### Endpoint: University - Channel - Delete

        #### Description
        This endpoint is used to delete a specific channel associated with a university. It requires authentication via a bearer token and expects a POST request.

        #### Request Details

        - **Authentication**: 
          - **Type**: Bearer Token
          - **Key**: `token`
            - **Value**: `sessionId`
            - **Type**: String
          - Explanation: The request must include a bearer token for authentication, which is expected to be represented by `sessionId`.

        - **Method**: 
          - **Type**: POST
          - Explanation: This operation requires sending a POST request to perform the deletion operation.

        - **URL**: 
          - **Endpoint**: `http://localhost:3000/api/university/channel/delete`
          - Explanation: This is the URL that points to the endpoint responsible for deleting a channel.

        - **Headers**: 
          - No specific headers need to be set for this request.
          - Explanation: The default header section is disabled and does not require any additional headers for this request.

        - **Body**: 
          - **Mode**: Raw
          - **Content**: `{"sessionId":"sessionId","accountId":"accountId","channelId":"channelId"}`
          - Explanation: The body of the request must be in JSON format and should contain the following fields:
            - **sessionId**: The session identifier used for authentication.
            - **accountId**: The unique identifier for the account associated with the channel.
            - **channelId**: The unique identifier of the channel that is to be deleted. 

        This structured data provides all necessary information for users to understand how to use the endpoint for deleting a university channel.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"channelId\":\"channelId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/university/tour/create:
    post:
      tags:
        - UniversityTour
      summary: University - Tour - Create
      description: |-
        ### Endpoint Description: University - Tour - Create

        - **Name**: Represents the name of the endpoint, indicating that this is the API call for creating a university tour.

        - **Request**: The structure of the HTTP request needed to access the endpoint.

          - **Auth**: Specifies the authorization method used for this request.
          
            - **Type**: Indicates that Bearer token authentication is required.
            
            - **Bearer**: Contains a list of bearer tokens to be included in the request.
            
              - **Key**: Used to identify the token.
              
              - **Value**: The actual token value that is used for authentication. It should be prefixed with "Bearer".
              
              - **Type**: The data type of the token, which is string in this case.
          
          - **Method**: The HTTP method used for this request, which is POST. This indicates that data is being sent to the server to create a new resource.

          - **URL**: The endpoint URL where the request is sent. In this case, it points to `http://localhost:3000/api/university/tour/create` indicating it is likely being tested on a local server.

          - **Headers**: A list of additional HTTP headers that may be included in the request. Currently, this section has an empty header key and value, which is disabled.

          - **Body**: The main content of the request.
          
            - **Mode**: Indicates the format of the request body; in this case, it's set to "raw" for a raw JSON string.
            
            - **Raw**: Contains the actual JSON payload that is sent in the body of the request. It includes the following fields:

              - **sessionId**: A unique identifier for the session related to the tour.
              
              - **accountId**: An identifier for the account creating the tour.
              
              - **name**: The name of the tour being created.
              
              - **description**: A brief description of the tour.
              
              - **tags**: A comma-separated list of tags associated with the tour for better categorization and searchability.
              
              - **profilePhotoUrl**: The URL link to the profile photo associated with the tour.
              
              - **coverPhotoUrl**: The URL link to the cover photo of the tour.
              
              - **minimumTipAmount**: Specifies the minimum amount expected as a tip for the tour.
              
              - **categoryId**: The identifier for the main category under which the tour is classified.
              
              - **category**: The name of the category for the tour.
              
              - **subCategoryId**: The identifier for any subcategory related to the tour.
              
              - **subCategory**: The name of the subcategory for further classification.
              
              - **isTourPrivate**: A Boolean value indicating whether the tour is private (true) or public (false).
              
              - **isTournamentOnly**: A Boolean value indicating if the tour is exclusively for tournaments.
              
              - **isTourDefault**: A Boolean that shows if this tour is set as the default option.
              
              - **isPreLiveUniversityAds**: A Boolean indicating whether pre-live university advertisements will be used.
              
              - **isPostLiveUniversityAds**: A Boolean indicating whether post-live university advertisements will be used.
              
              - **breakPreLiveVideoUrl**: A URL link to a video that plays before the live university tour starts.
              
              - **breakPostLiveVideoUrl**: A URL link to a video that plays after the live university tour ends.

            - **Options**: Additional configuration for the raw body content.

              - **Raw**: Specifies settings for the raw data format.
              
                - **Language**: Indicates the data type, which is JSON in this instance.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Tour
                description: This tour is my second tour
                tags: second,tour
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isTourPrivate: true
                isTournamentOnly: false
                isTourDefault: true
                isPreLiveUniversityAds: true
                isPostLiveUniversityAds: true
                breakPreLiveVideoUrl: https://example.com/break-pre-live.mp4
                breakPostLiveVideoUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/university/tour/update:
    put:
      tags:
        - UniversityTour
      summary: University - Tour - Update
      description: |-
        ### Description of Each Data in the Endpoint:

        **Endpoint Name:** University - Tour - Update

        **Request Details:**

        - **Authentication:**
          - **Type:** Bearer
            - This indicates that the request requires a bearer token for authorization.
          - **Bearer Token:**
            - **Key:** token
            - **Value:** BearerToken
            - **Type:** string
            - This is the token used for authenticating the request against the API. Replace "BearerToken" with a valid token.

        - **Method:** 
          - **PUT**
            - This specifies that the HTTP method used for the request is PUT, which is typically used for updating existing resources.

        - **URL:**
          - **http://localhost:3000/api/university/tour/update**
            - This is the endpoint where the update request is sent. It is hosted on localhost and operates on port 3000.

        - **Headers:**
          - **Client-UUID:**
            - **Key:** Client-UUID
            - **Value:** ClientUUID
            - **Type:** default
            - This header is used to identify the client making the request. Replace "ClientUUID" with the actual UUID associated with the client.

        **Body:**
        - The body of the request contains a JSON object that includes the following fields:

          - **tourId:**
            - The unique identifier of the tour that needs to be updated.
          
          - **sessionId:**
            - The unique identifier for the session associated with the tour.

          - **accountId:**
            - The unique identifier for the account that owns the tour.

          - **name:**
            - A string representing the name of the tour. For example: "My Second Tour 2.0".

          - **description:**
            - A string providing a descriptive overview of the tour. For instance: "This tour is my second tour".

          - **tags:**
            - A comma-separated list of tags associated with the tour. For example: "second,tour".

          - **profilePhotoUrl:**
            - A URL pointing to the profile photo associated with the tour. Example: "https://example.com/profile.jpg".

          - **coverPhotoUrl:**
            - A URL pointing to the cover photo for the tour. Example: "https://example.com/cover.jpg".

          - **minimumTipAmount:**
            - A numeric value indicating the minimum amount that can be tipped for participating in the tour. For instance: 10.

          - **categoryId:**
            - The unique identifier for the category under which the tour is classified. For example: "category123".

          - **category:**
            - A string indicating the primary category of the tour. For example: "General".

          - **subCategoryId:**
            - The unique identifier for the subcategory of the tour. For example: "subCategory456".

          - **subCategory:**
            - A string indicating the specific subcategory for the tour. For example: "Specific".

          - **isTourPrivate:**
            - A boolean indicating whether the tour is private (true) or public (false).

          - **isTournamentOnly:**
            - A boolean indicating whether the tour is exclusive to tournaments (true) or open to all types of participation (false).

          - **isTourDefault:**
            - A boolean indicating whether this tour is set as the default option for users (true) or not (false).

          - **isPreLiveUniversityAds:**
            - A boolean indicating whether pre-live university ads should be displayed for this tour (true) or not (false).

          - **isPostLiveUniversityAds:**
            - A boolean indicating whether post-live university ads should be displayed for this tour (true) or not (false).

          - **breakPreLiveVideoUrl:**
            - A URL pointing to a video that plays during the break before the live session starts. Example: "https://example.com/break-pre-live.mp4".

          - **breakPostLiveVideoUrl:**
            - A URL pointing to a video that plays during the break after the live session ends. Example: "https://example.com/break-post-live.mp4".
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"tourId\":\"tourId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Tour 2.0\",\"description\":\"This tour is my second tour\",\"tags\":\"second,tour\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isTourPrivate\":true,\"isTournamentOnly\":false,\"isTourDefault\":true,\"isPreLiveUniversityAds\":true,\"isPostLiveUniversityAds\":true,\"breakPreLiveVideoUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveVideoUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/university/tour/get:
    get:
      tags:
        - UniversityTour
      summary: University - Tour - Get
      description: |-
        ### Description of Endpoint Data

        **Name:** University - Tour - Get  
        This is the name of the endpoint, which indicates that it retrieves information related to a university tour.

        **Request:**  
        This section details the specifics of how to make the request to the endpoint.

        - **Auth:**  
          This specifies the authentication mechanism required to access the endpoint.
          - **Type:** Bearer  
            Indicates that bearer token authentication is used.
          - **Bearer:**  
            This is an array that contains the token details needed for authentication.
            - **Key:** token   
              The name of the token field that is used for authentication.
            - **Value:** BearerToken  
              This is a placeholder for the actual bearer token that must be provided when making the request.
            - **Type:** string  
              Specifies that the value should be in string format.

        - **Method:** GET  
          This describes the HTTP method used for the request, which is GET in this case, indicating the action is to retrieve data.

        - **URL:**  
          This is the endpoint URL that will be called to get the university tour information.  
          Example URL structure:  
          `http://localhost:3000/api/university/tour/get/?tourId=tourId&sessionId=sessionId&accountId=accountId`  
          - **tourId:** Represents the unique identifier for the specific tour being requested.  
          - **sessionId:** Refers to the session associated with the tour request.  
          - **accountId:** Denotes the account identifying the user making the request.

        - **Headers:**  
          This section is intended for any additional HTTP headers that might be required in the request.
          - **Key:** (empty)  
            There is no header key provided in this request.
          - **Value:** (empty)  
            There is no header value provided in this request.
          - **Type:** default  
            Specifies that the type of header is default.
          - **Disabled:** true  
            Indicates that this header is currently disabled and will not be sent with the request.

        - **Body:**  
          This section contains the body of the request.
          - **Mode:** raw  
            Indicates that the body format is raw text rather than a structured format such as JSON.
          - **Raw:** (empty)  
            There is no body content provided for this request.
      security:
        - bearerAuth: []
      parameters:
        - name: tourId
          in: query
          schema:
            type: string
          example: tourId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/university/tour/all:
    get:
      tags:
        - UniversityTour
      summary: University - Tour - Get All
      description: |-
        ### Endpoint Description: University - Tour - Get All

        - **Name**: University - Tour - Get All  
          This is the name of the API endpoint, indicating that it retrieves all university tours.

        - **Request**: This section outlines the details needed to make the request to the API.

          - **Auth**:  
            This field specifies the type of authentication required to access the endpoint. For this endpoint, bearer token authentication is utilized.  

            - **Type**: Bearer  
              This indicates that the authentication uses a bearer token, which is a common method for securing API requests.

            - **Bearer**:  
              This is an array that includes the authentication details.  

              - **Key**: Token  
                This is the key name for the bearer token in the authorization header.  

              - **Value**: BearerToken  
                This placeholder represents the actual token that should be provided to grant access. Replace this with a valid bearer token when making the request.  

              - **Type**: String  
                This indicates that the token should be a string data type.

          - **Method**: GET  
            This indicates that the HTTP method used for this request is GET, meaning the client is requesting data from the server.

          - **URL**: `http://localhost:3000/api/university/tour/all/?sessionId=sessionId&accountId=accountId`  
            This is the endpoint URL where the request will be made. It includes query parameters:  
            - **sessionId**: This parameter identifies the session associated with the request. Replace 'sessionId' with the actual session identifier.  
            - **accountId**: This parameter represents the account identifier. Replace 'accountId' with the actual account identifier.

          - **Headers**:  
            This section is reserved for any additional headers that may be needed in the request.  

            - **Key**: [Empty]  
              This implies no specific headers are currently set for this request.

            - **Value**: [Empty]  
              There are no associated values for headers at this moment.

            - **Type**: Default  
              This indicates that the header types are default types, but since the headers are empty, they are not currently being used.

            - **Disabled**: True  
              This indicates that the header section is disabled, so no additional headers will be sent with the request.

          - **Body**:  
            This section defines the body of the request.
            
            - **Mode**: Raw  
              This means that the body of the request will be sent in a raw format.

            - **Raw**: [Empty]  
              There is no content in the body of the request since this is a GET request, which typically does not require a body.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/university/tour/delete:
    post:
      tags:
        - UniversityTour
      summary: University - Tour - Delete
      description: |-
        **Endpoint Description: University - Tour - Delete**

        - **Name**: University - Tour - Delete
          - This is the label for the operation that will delete a specific tour associated with a university.

        - **Request**: 
          - This section outlines the details of the request that will be made to the API.

          - **Auth**: 
            - **Type**: Bearer
              - This indicates that the request will use bearer token authentication to verify access.
              
            - **Bearer**:
              - An array that includes the token necessary for authentication.
              
              - **Key**: token
                - This defines the identifier for the token being used for authentication.
                
              - **Value**: sessionId
                - This indicates the expected value for the token, which should be replaced with the actual session ID of the user making the request.
                
              - **Type**: string
                - This signifies that the value of the token is in string format.

          - **Method**: POST
            - This indicates that the HTTP method used for this request is POST. This method is typically used to submit data to the server.

          - **URL**: 
            - `http://localhost:3000/api/university/tour/delete`
            - This is the endpoint URL where the request will be sent. It targets the delete operation for a university tour.

          - **Headers**:
            - This section is meant for specifying any additional headers that may be included in the request.
            
            - **Key**: (empty)
              - This indicates that there are no custom headers specified for this request.
              
            - **Value**: (empty)
              - This indicates that there is no value associated with the key.
              
            - **Type**: default
              - Indicates that the header type is default.
              
            - **Disabled**: true
              - This signifies that this header is not active and will not be included in the request.

          - **Body**: 
            - This section defines the content that will be sent along with the request.

            - **Mode**: raw
              - This indicates that the body will be sent in a raw format rather than using a form or other encoding types.

            - **Raw**:
              - `{"sessionId":"sessionId","accountId":"accountId","tourId":"tourId"}`
              - This is the payload that is sent with the request. It contains three key fields:
                
                - **sessionId**: This should be replaced with the actual session ID of the user making the request, used for authentication.
                
                - **accountId**: This should be replaced with the actual account ID of the user requesting the deletion of the tour.
                
                - **tourId**: This should be replaced with the actual ID of the tour that needs to be deleted.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"tourId\":\"tourId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/university/university/create:
    post:
      tags:
        - UniversityUniversity
      summary: University - General - Create
      description: |-
        ### Endpoint Description: University - General - Create

        **Request Method:** POST  
        **Request URL:** `http://localhost:3000/api/university/university/create`  
        **Authentication Type:** Bearer Token

        #### Authorization
        - **Token:** A bearer token needed for authentication. Replace "BearerToken" with the actual token for authorization.

        #### Request Body
        The body of the request should be in JSON format and contains the following fields:

        1. **sessionId**: A unique identifier for the current session. This is used to track the user's activity during the session.

        2. **accountId**: The identifier for the user's account which is creating the university. This links the university to the specific user account.

        3. **name**: The name of the university being created. This will be how the university is identified in the system and seen by users.

        4. **description**: A brief summary about the university. This field provides additional information that describes the university.

        5. **tags**: A comma-separated list of keywords related to the university. Tags help categorize the university and can be useful for search purposes.

        6. **profilePhotoUrl**: A URL pointing to the university's profile photo. This image represents the university on its profile page.

        7. **coverPhotoUrl**: A URL pointing to the university's cover photo. This image is displayed prominently on the university's profile.

        8. **minimumTipAmount**: A numerical value representing the minimum amount that can be tipped in relation to this university. This establishes a threshold for tipping.

        9. **categoryId**: An identifier for the main category of the university. This links the university to a specific category in the database.

        10. **category**: The name of the main category to which the university belongs. This field provides a broad classification.

        11. **subCategoryId**: An identifier for the sub-category of the university. This allows for more specific classification within the main category.

        12. **subCategory**: The name of the sub-category to which the university belongs. This field allows further refinement of the university’s classification.

        13. **isGeneralPrivate**: A boolean value indicating whether the university is private or not. It defines if the university's details are only available to selected users.

        14. **isTournamentOnly**: A boolean value that specifies if the university is for tournament usage only. If true, it suggests that the university is centered around competitive events.

        15. **isGeneralDefault**: A boolean value indicating whether this university is set as a default option within its category. 

        16. **isPreLiveUniversityAds**: A boolean value that indicates whether advertisements for the university can appear before live sessions.

        17. **isPostLiveUniversityAds**: A boolean value that indicates whether advertisements for the university can appear after live sessions.

        18. **breakPreLiveVideoUrl**: A URL pointing to a video that will play before a live session begins, potentially providing promotional content related to the university.

        19. **breakPostLiveVideoUrl**: A URL pointing to a video that will play after a live session ends, serving as a follow-up or promotional material for the university.

        Make sure to replace placeholders and URLs with actual data before sending the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second General
                description: This university is my second university
                tags: second,university
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isGeneralPrivate: true
                isTournamentOnly: false
                isGeneralDefault: true
                isPreLiveUniversityAds: true
                isPostLiveUniversityAds: true
                breakPreLiveVideoUrl: https://example.com/break-pre-live.mp4
                breakPostLiveVideoUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/university/university/update:
    put:
      tags:
        - UniversityUniversity
      summary: University - General - Update
      description: |-
        ### Endpoint Description: University - General - Update

        #### Request Details

        - **Auth** 
          - **Type**: Bearer Token
            - Specifies the authentication method for accessing this endpoint.
            - **Bearer**: Contains an array of authentication tokens.
              - **Key**: "token" - Identifier for the token.
              - **Value**: "BearerToken" - Placeholder for the actual bearer token that needs to be provided for authorization.
              - **Type**: string - Indicates that the token value is a string.

        - **Method**: PUT
          - The HTTP method used for the request. PUT is typically used to update existing resources on the server.

        - **URL**: 
          - `http://localhost:3000/api/university/university/update` - The endpoint where the update request is sent. This URL points to a local server.

        #### Headers
        - **Client-UUID**
          - **Key**: "Client-UUID" - An identifier for the client making the request.
          - **Value**: "ClientUUID" - Placeholder value indicating where the actual client UUID should be inserted.
          - **Type**: default - Indicates that this is a standard header.

        #### Body
        - **Mode**: raw
          - Indicates the format of the body content being sent in the request.

        - **Raw**: 
          ```json
          {
            "universityId": "universityId",
            "sessionId": "sessionId",
            "accountId": "accountId",
            "name": "My Second General 2.0",
            "description": "This university is my second university",
            "tags": "second,university",
            "profilePhotoUrl": "https://example.com/profile.jpg",
            "coverPhotoUrl": "https://example.com/cover.jpg",
            "minimumTipAmount": 10,
            "categoryId": "category123",
            "category": "General",
            "subCategoryId": "subCategory456",
            "subCategory": "Specific",
            "isGeneralPrivate": true,
            "isTournamentOnly": false,
            "isGeneralDefault": true,
            "isPreLiveUniversityAds": true,
            "isPostLiveUniversityAds": true,
            "breakPreLiveVideoUrl": "https://example.com/break-pre-live.mp4",
            "breakPostLiveVideoUrl": "https://example.com/break-post-live.mp4"
          }
          ```

        ##### Body Parameters
        - **universityId**: 
          - A unique identifier for the university to be updated.

        - **sessionId**: 
          - An identifier for the current session.

        - **accountId**: 
          - An identifier for the user or account making the request.

        - **name**: 
          - The name of the university that is being updated.

        - **description**: 
          - A textual description providing more information about the university.

        - **tags**: 
          - A comma-separated list of tags associated with the university for better categorization.

        - **profilePhotoUrl**: 
          - A URL pointing to the profile photo of the university.

        - **coverPhotoUrl**: 
          - A URL pointing to the cover photo of the university.

        - **minimumTipAmount**: 
          - The minimum amount for tips related to the university.

        - **categoryId**: 
          - An identifier for the category under which the university falls.

        - **category**: 
          - The general category designation for the university.

        - **subCategoryId**: 
          - An identifier for the sub-category associated with the university.

        - **subCategory**: 
          - The specific sub-category designation for the university.

        - **isGeneralPrivate**: 
          - A boolean that indicates whether the university is private or not. True means it's private.

        - **isTournamentOnly**: 
          - A boolean indicating if the university is exclusively for tournaments. True means it is.

        - **isGeneralDefault**: 
          - A boolean indicating if this is the default general university setting. True means it is the default.

        - **isPreLiveUniversityAds**: 
          - A boolean indicating if pre-live ads are enabled for the university. True means ads can be shown before live events.

        - **isPostLiveUniversityAds**: 
          - A boolean indicating if post-live ads are enabled for the university. True means ads can be shown after live events.

        - **breakPreLiveVideoUrl**: 
          - A URL to a video that can be shown before live events as a break.

        - **breakPostLiveVideoUrl**: 
          - A URL to a video that can be shown after live events as a break.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"universityId\":\"universityId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second General 2.0\",\"description\":\"This university is my second university\",\"tags\":\"second,university\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isGeneralPrivate\":true,\"isTournamentOnly\":false,\"isGeneralDefault\":true,\"isPreLiveUniversityAds\":true,\"isPostLiveUniversityAds\":true,\"breakPreLiveVideoUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveVideoUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/university/university/get:
    get:
      tags:
        - UniversityUniversity
      summary: University - General - Get
      description: |-
        ### Endpoint Description: University - General - Get

        **Request Method**: GET  
        This endpoint is used to retrieve information about a specific university. 

        **Authentication**: Bearer Token  
        The request requires authentication via a bearer token, which must be included in the request headers.

        - **Key**: `token`  
          - Represents the authentication token required for validating the request.

        - **Value**: `BearerToken`  
          - This is a placeholder for the actual bearer token that should be provided when the request is made.

        - **Type**: string  
          - Indicates that the value of the token must be a string.

        **URL**:  
        `http://localhost:3000/api/university/university/get/?universityId=universityId&sessionId=sessionId&accountId=accountId`  
        This is the endpoint URL where the request is sent. It includes query parameters that are necessary to identify the specific university and session.

        - **Query Parameters**:
          - **universityId**:  
            - This parameter is used to specify the unique identifier of the university that you want to retrieve information about.
          
          - **sessionId**:  
            - This parameter is used to indicate the specific session for which the information is relevant. This could refer to a term, semester, or academic year.

          - **accountId**:  
            - This parameter represents the identifier for the account making the request, enabling any account-specific data retrieval or access control.

        **Headers**:  
        The request may include headers, but in this case, the provided header parameters are empty and the header is disabled.

        - **Key**:  
          - Currently, there are no headers specified. However, additional headers can be defined if necessary by adding key-value pairs.

        - **Value**:  
          - As there are no headers in use, this remains empty.

        - **Type**: default  
          - Indicates the header type, though in this instance no headers are applied.

        **Body**:  
        The body of the request is not used in this GET request.

        - **Mode**: raw  
          - Specifies that the request body is in raw format, although no body content is included.

        - **Raw**:  
          - The body is empty (`""`), which is typical for GET requests as they do not require a message body to send data.
      security:
        - bearerAuth: []
      parameters:
        - name: universityId
          in: query
          schema:
            type: string
          example: universityId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/university/university/all:
    get:
      tags:
        - UniversityUniversity
      summary: University - General - Get All
      description: |-
        **Endpoint Description: University - General - Get All**

        This endpoint is designed to retrieve a list of all universities from the server. Below is a detailed description of each component involved in this API request.

        - **Name**: This identifies the request within the collection. The name is "University - General - Get All", indicating that it is meant to fetch general information about all universities.

        - **Request**: This section outlines the specifics of the API request being made.

          - **Auth**: This specifies the authentication method being used to access the endpoint.
          
            - **Type**: The authentication type is set to "bearer," indicating that a bearer token is required for authentication.
            
            - **Bearer**: This contains an array for the bearer token used in the request:
              
              - **Key**: The key is "token," naming the authorization parameter.
              
              - **Value**: Placeholder value "BearerToken" is used here, which should be replaced with an actual bearer token when making the request.
              
              - **Type**: The type is "string," indicating that the token should be a string value.

          - **Method**: The HTTP method for this request is "GET," which is used to retrieve data from the server.

          - **URL**: This is the endpoint URL where the request will be sent. It is structured as:
            ```
            http://localhost:3000/api/university/university/all/?sessionId=sessionId&accountId=accountId
            ```
            - **Base URL**: `http://localhost:3000` - indicates that the API is hosted locally on port 3000.
            
            - **Path**: `/api/university/university/all/` - this path specifies that the request is targeting the "all" universities endpoint.
            
            - **Query Parameters**:
              - **sessionId**: This parameter should be replaced with a valid session identifier for authentication purposes.
              - **accountId**: This parameter should be replaced with a valid account identifier for the user making the request.

          - **Headers**: This section is currently empty, indicating that no additional HTTP headers are required beyond the bearer token for this request. The header is present but disabled.

          - **Body**: The body of the request is specified here.
          
            - **Mode**: The mode is "raw," indicating that the body content can be written directly.
            
            - **Raw**: The raw payload is empty, indicating that no body data is needed for this GET request.

        This endpoint allows the user to obtain a comprehensive list of all universities stored in the system by issuing a properly formatted GET request with the necessary authentication details.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/university/university/delete:
    post:
      tags:
        - UniversityUniversity
      summary: University - General - Delete
      description: |-
        **Endpoint Name:** University - General - Delete

        **Request:**

        - **Authorization:**
          - **Type:** Bearer
            - This indicates that the request uses a Bearer token for authentication. The token is essential for verifying the identity of the user making the request.
            - **Bearer Token Details:**
              - **Key:** token
                - This is the identifier for the token being passed in the request.
              - **Value:** sessionId
                - This placeholder represents the actual session ID required for authentication purposes. This should be replaced with a valid session ID.
              - **Type:** string
                - Indicates that the value of the token is expected to be a string data type.

        - **Method:** POST
          - This specifies that the HTTP method for the request is POST, which is typically used to send data to the server to be processed.

        - **URL:** http://localhost:3000/api/university/university/delete
          - This is the endpoint where the request is being sent. It points to the local server's API for deleting a university.

        - **Headers:**
          - **Key:** (Empty)
            - The header key is currently empty and not being used. It is marked as disabled.
          - **Value:** (Empty)
            - Similar to the key, the header value is also empty and not in use. It is marked as disabled.
          
        - **Body:**
          - **Mode:** raw
            - This indicates that the body of the request is sent in raw format, which allows for the transmission of a raw JSON string.
          - **Raw Content:** 
            - `{"sessionId":"sessionId","accountId":"accountId","universityId":"universityId"}`
              - **sessionId:** 
                - A placeholder for the session ID, which is used for authentication.
              - **accountId:** 
                - A placeholder for the account ID, which identifies the user account making the deletion request.
              - **universityId:** 
                - A placeholder for the university ID of the university that is to be deleted. This value should be replaced with the actual university ID that is intended for deletion.

        This endpoint is designed to delete a university based on the provided university ID and requires both a valid session ID for authentication and an account ID associated with the requesting user.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"universityId\":\"universityId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/university/video/create:
    post:
      tags:
        - UniversityVideo
      summary: University - Video - Create
      description: |-
        {
          "description": {
            "name": "The name of the API endpoint, indicating that it is used to create a video for the university.",
            "request": {
              "auth": {
                "type": "bearer": "This specifies the type of authentication required. A Bearer token must be provided in order to access this endpoint.",
                "bearer": [
                  {
                    "key": "token": "This is a key that represents the type of authentication (token).",
                    "value": "BearerToken": "This is where the actual Bearer token should be placed for authentication. It must be a valid token to authorize the request.",
                    "type": "string": "This indicates that the value should be a string."
                  }
                ]
              },
              "method": "POST": "This specifies that the HTTP method used for this request is POST, indicating that data will be sent to create a new resource.",
              "url": "http://localhost:3000/api/university/video/create": "This is the URL endpoint for the API where the request will be sent to create a video.",
              "headers": [
                {
                  "key": "": "This is the key for the header. In this case, it is empty.",
                  "value": "": "This is the value for the header. In this case, it is also empty.",
                  "type": "default": "This specifies the type of the header, which is set to default.",
                  "disabled": true: "This indicates that this header is currently disabled and will not be included in the request."
                }
              ],
              "body": {
                "mode": "raw": "This indicates that the body of the request is being sent in raw format.",
                "raw": "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Video\",\"description\":\"This video is my second video\",\"tags\":\"second,video\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isVideoPrivate\":true,\"isTournamentOnly\":false,\"isVideoDefault\":true,\"isPreLiveUniversityAds\":true,\"isPostLiveUniversityAds\":true,\"breakPreLiveVideoUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveVideoUrl\":\"https://example.com/break-post-live.mp4\"}": "This is the actual content of the request body in JSON format. It contains various properties related to the video being created.",
                "options": {
                  "raw": {
                    "language": "json": "This specifies that the raw content is in JSON format, indicating that the body follows JSON syntax."
                  }
                }
              }
            },
            "sessionId": "A unique identifier for the session under which the video is being created.",
            "accountId": "The identifier associated with the user account that is creating the video.",
            "name": "The title of the video being created.",
            "description": "A brief overview or narrative about the content of the video.",
            "tags": "A comma-separated list of keywords associated with the video for search and categorization.",
            "profilePhotoUrl": "A URL pointing to the profile photo to be associated with the video creator.",
            "coverPhotoUrl": "A URL pointing to the cover photo that will be displayed for the video.",
            "minimumTipAmount": "The minimum amount that can be tipped by viewers for this video.",
            "categoryId": "The unique identifier for the category under which this video falls.",
            "category": "The general category of the video content (e.g., General, Education).",
            "subCategoryId": "The unique identifier for the sub-category of the video.",
            "subCategory": "The specific sub-category of the video content.",
            "isVideoPrivate": "A boolean flag that indicates whether the video should be private or public.",
            "isTournamentOnly": "A boolean flag that indicates if the video is exclusive to tournament events.",
            "isVideoDefault": "A boolean flag that indicates whether this video is set as a default video for the creator.",
            "isPreLiveUniversityAds": "A boolean flag that indicates if pre-live university advertisements should be included with the video.",
            "isPostLiveUniversityAds": "A boolean flag that indicates if post-live university advertisements should be included with the video.",
            "breakPreLiveVideoUrl": "A URL linking to a video that will be displayed before the live event starts.",
            "breakPostLiveVideoUrl": "A URL linking to a video that will be displayed after the live event has concluded."
          }
        }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Video
                description: This video is my second video
                tags: second,video
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                categoryId: category123
                category: General
                subCategoryId: subCategory456
                subCategory: Specific
                isVideoPrivate: true
                isTournamentOnly: false
                isVideoDefault: true
                isPreLiveUniversityAds: true
                isPostLiveUniversityAds: true
                breakPreLiveVideoUrl: https://example.com/break-pre-live.mp4
                breakPostLiveVideoUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/university/video/update:
    put:
      tags:
        - UniversityVideo
      summary: University - Video - Update
      description: |-
        ### Endpoint: University - Video - Update

        #### Request

        - **Auth**
          - **Type**: Bearer
            - **Key**: `token`
              - **Value**: `BearerToken`
                - **Type**: String
              - Description: This is the authentication token required to authorize the API request. It should be a valid bearer token that grants access to the endpoint.

        - **Method**
          - **PUT**
            - Description: This HTTP method indicates that the API will be updating an existing resource. In this case, it will update the video associated with the specified parameters.

        - **URL**
          - **Value**: `http://localhost:3000/api/university/video/update`
            - Description: This is the endpoint URL where the update request will be sent. It points to the local server for testing purposes.

        - **Headers**
          - **Key**: `Client-UUID`
            - **Value**: `ClientUUID`
              - **Type**: Default
            - Description: This header contains a unique identifier for the client making the request. It is used to track and manage requests from different clients.

        #### Body 
        - **Mode**: Raw
          - Description: The request body is sent in raw JSON format.

        - **Raw Content**: 
          ```json
          {
            "videoId": "videoId",
            "sessionId": "sessionId",
            "accountId": "accountId",
            "name": "My Second Video 2.0",
            "description": "This video is my second video",
            "tags": "second,video",
            "profilePhotoUrl": "https://example.com/profile.jpg",
            "coverPhotoUrl": "https://example.com/cover.jpg",
            "minimumTipAmount": 10,
            "categoryId": "category123",
            "category": "General",
            "subCategoryId": "subCategory456",
            "subCategory": "Specific",
            "isVideoPrivate": true,
            "isTournamentOnly": false,
            "isVideoDefault": true,
            "isPreLiveUniversityAds": true,
            "isPostLiveUniversityAds": true,
            "breakPreLiveVideoUrl": "https://example.com/break-pre-live.mp4",
            "breakPostLiveVideoUrl": "https://example.com/break-post-live.mp4"
          }
          ```

        - **Parameters**:
          - **videoId**: The unique identifier of the video that is being updated. It indicates which video resource the request applies to.
          - **sessionId**: The identifier for the session related to the video. This is required for linking the video to the appropriate viewing context.
          - **accountId**: The identifier for the user account associated with the video. This links the video to the account that owns it.
          - **name**: The new title of the video. This is a descriptive name that will be displayed to users.
          - **description**: A text field that provides details about the video. It explains the content or context of the video.
          - **tags**: A comma-separated list of tags associated with the video. Tags help categorize and make the video searchable.
          - **profilePhotoUrl**: A URL pointing to the profile photo associated with the video creator or account.
          - **coverPhotoUrl**: A URL for the cover image of the video, typically displayed as a thumbnail.
          - **minimumTipAmount**: A numeric value indicating the minimum tip amount that can be given to support the video creator.
          - **categoryId**: The unique identifier for the category under which the video falls.
          - **category**: The name of the category to which the video belongs, defining the broad topic area.
          - **subCategoryId**: The unique identifier for a more specific sub-category of the video.
          - **subCategory**: The name of the sub-category under the main category, providing further context.
          - **isVideoPrivate**: A boolean value indicating whether the video is private (true) or public (false).
          - **isTournamentOnly**: A boolean value indicating if the video is only intended for tournament use (true) or not (false).
          - **isVideoDefault**: A boolean indicating if this video should be marked as the default video for its category (true) or not (false).
          - **isPreLiveUniversityAds**: A boolean that specifies if pre-live ads should be shown with the video (true) or not (false).
          - **isPostLiveUniversityAds**: A boolean that specifies if post-live ads should be shown with the video (true) or not (false).
          - **breakPreLiveVideoUrl**: A URL for a break video that plays before the live content starts.
          - **breakPostLiveVideoUrl**: A URL for a video that plays after the live content ends. 

        This body structure contains all the necessary information to successfully update a video in the university video management system.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"videoId\":\"videoId\", \"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Video 2.0\",\"description\":\"This video is my second video\",\"tags\":\"second,video\",\"profilePhotoUrl\":\"https://example.com/profile.jpg\",\"coverPhotoUrl\":\"https://example.com/cover.jpg\",\"minimumTipAmount\":10,\"categoryId\":\"category123\",\"category\":\"General\",\"subCategoryId\":\"subCategory456\",\"subCategory\":\"Specific\",\"isVideoPrivate\":true,\"isTournamentOnly\":false,\"isVideoDefault\":true,\"isPreLiveUniversityAds\":true,\"isPostLiveUniversityAds\":true,\"breakPreLiveVideoUrl\":\"https://example.com/break-pre-live.mp4\",\"breakPostLiveVideoUrl\":\"https://example.com/break-post-live.mp4\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/university/video/get:
    get:
      tags:
        - UniversityVideo
      summary: University - Video - Get
      description: |-
        ### Endpoint Description: University - Video - Get

        **Name**: University - Video - Get  
        This endpoint is used to retrieve video information from the university's database.

        **Authentication**:  
        - **Type**: Bearer  
          Requires a Bearer token for authentication to access the API.

        **Request Method**:  
        - **Method**: GET  
          This method is used to request data from the specified resource.

        **URL**:  
        - **URL**: `http://localhost:3000/api/university/video/get/?videoId=videoId&sessionId=sessionId&accountId=accountId`  
          This is the endpoint URL where the request is sent. It includes query parameters necessary for fetching the video:
          - **videoId**: The unique identifier for the video you want to retrieve.
          - **sessionId**: The identifier for the current session, useful for tracking purposes.
          - **accountId**: The identifier for the user account making the request.

        **Request Headers**:  
        - This section currently contains an empty header object, meaning there are no additional headers required for the request. This header is disabled.

        **Request Body**:  
        - **Mode**: Raw  
          Since this is a GET request, the body does not carry any data. It is left empty, indicating that no additional information is being sent.

        This endpoint is primarily used to fetch video details from the university's system by providing the required identifiers through query parameters.
      security:
        - bearerAuth: []
      parameters:
        - name: videoId
          in: query
          schema:
            type: string
          example: videoId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/university/video/all:
    get:
      tags:
        - UniversityVideo
      summary: University - Video - Get All
      description: |-
        ### Endpoint Description: University - Video - Get All

        - **Name**: University - Video - Get All
          - This represents the purpose of the endpoint, which is to retrieve all videos related to the university.

        - **Request**: This section outlines the components required for making the API request.

          - **Auth**: This part specifies the authentication method for the request.
            - **Type**: bearer
              - Indicates that the request requires bearer token authentication.
            - **Bearer**: An array containing objects for the bearer token.
              - **Key**: token
                - Identifies the authentication key.
              - **Value**: BearerToken
                - A placeholder for the actual bearer token required to authorize the request.
              - **Type**: string
                - Specifies that the token value should be treated as a string.

          - **Method**: GET
            - This indicates that the HTTP method used for the request is GET, which is typically used to retrieve data from the server.

          - **URL**: 
            - `http://localhost:3000/api/university/video/all/?sessionId=sessionId&accountId=accountId`
              - This is the endpoint URL to which the GET request is sent.
              - **Base URL**: `http://localhost:3000/api/university/video/all/`
                - This defines the path for accessing university videos.
              - **Query Parameters**:
                - `sessionId=sessionId`
                  - A placeholder for the session identity; used to identify the user session for the request.
                - `accountId=accountId`
                  - A placeholder for the account identity; used to link the request to a specific user account.

          - **Headers**: This section can contain additional information about the request, though in this case:
            - **Key**: (empty)
              - Indicates there are no additional headers specified.
            - **Value**: (empty)
              - Indicates there are no values for headers specified.
            - **Type**: default
              - Refers to the default header type.
            - **Disabled**: true
              - This indicates that the header is currently disabled and not being sent with the request.

          - **Body**: 
            - **Mode**: raw
              - Indicates that the body of the request (if applicable) is in raw format.
            - **Raw**: ""
              - This field is empty, meaning no request body is needed for this GET request.

        This description provides a clear and concise explanation of each component of the "University - Video - Get All" endpoint, making it easier for users to understand how to utilize this API effectively.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/university/video/delete:
    post:
      tags:
        - UniversityVideo
      summary: University - Video - Delete
      description: |-
        ### Endpoint Overview: University - Video - Delete

        #### Description:
        This endpoint allows users to delete a video associated with a university account. The request requires authentication and must be sent to the appropriate URL.

        #### Request Details:

        - **Authentication**: 
          - The request requires a bearer token for authentication. This token should be passed in the authorization header. 
          - The bearer token is provided in the following format:
            - **Key**: `token`
            - **Value**: Represents the `sessionId`, which is used to verify the user's session.

        - **HTTP Method**: 
          - The request uses the `POST` method to submit the video deletion request.

        - **URL**: 
          - The endpoint URL for the delete request is `http://localhost:3000/api/university/video/delete`. This is the target where the delete operation is performed.

        - **Headers**:
          - Currently, there are no additional headers defined for the request. One of the headers is present but disabled and does not have a key or value assigned. This can be removed or updated as needed.

        - **Body**: 
          - The body of the request is sent in `raw` JSON format and contains the following key-value pairs:
            - **sessionId**: This key holds the session identifier for the current user session which is necessary for validating the request.
            - **accountId**: This key represents the unique identifier for the university account under which the video resides. 
            - **videoId**: This key is the identifier of the video that needs to be deleted. It specifies which video will be removed from the account.

        Make sure to replace the placeholders (`sessionId`, `accountId`, and `videoId`) with actual values before sending the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"videoId\":\"videoId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/coin/create:
    post:
      tags:
        - UtilityCoin
      summary: Utility - Coin - Create for Team
      description: |-
        ### Endpoint Description: Utility - Coin - Create for Team

        This endpoint allows the creation of a coin for a specific team within the utility service. The request must be made using the POST method and requires authentication via a bearer token.

        #### Request Details:

        - **Auth**: 
          - **Type**: The method by which the request is authenticated. In this case, it is set to `bearer`, meaning a Bearer Token is used for authorization.
          - **Bearer**: Contains the authorization token:
            - **Key**: Indicates what type of token is provided, which is "token".
            - **Value**: Placeholder for the actual Bearer Token that needs to be used for authentication. It should be replaced with a valid token in the format "BearerToken".
            - **Type**: The data type of the token, which is a string.

        - **Method**: 
          - **POST**: This specifies that the request will create new information on the server.

        - **URL**: 
          - `http://localhost:3000/api/utility/coin/create`: This is the endpoint where the request will be sent. It indicates the local server running on port 3000 and the specific API path for creating the coin.

        - **Headers**: 
          - An array of header objects. In this case, there is currently an empty header object, which is indicated as disabled. Additional headers may be added depending on requirements.

        - **Body**: 
          - **Mode**: The format of the body content, which is set to `raw`, allowing for the direct input of JSON data.
          - **Raw**: Contains the payload that must be sent with the POST request. The JSON object includes:
            - **sessionId**: A unique identifier for the session during which the request is made, replace with actual session ID.
            - **accountId**: Identifies the account for which the coin is being created, replace with real account ID.
            - **targetType**: Specifies the type of the target entity, in this case, it is set to `teamId`, indicating that the coin is associated with a team.
            - **targetId**: The ID of the team for which the coin is being created, replace with actual team ID.
            - **name**: The name of the coin being created, which is set to "MPC" as a placeholder.
            - **description**: A brief description of the coin, here it is set to "My Profile Coin".
            - **type**: Indicates the platform for which this coin is designated, set to "platform".
            - **action**: Specifies the action associated with the coin, which is "buy" in this case.
            - **rate**: The exchange rate or value of the coin, currently set to `1` as a placeholder.
            - **amount**: The total amount of the coin being created, which is set to `100000` as an example. 

        - **Options**: 
          - **Raw**: Specifies the language format for the request body, which is "json", indicating that the raw data is in JSON format.

        This endpoint is crucial for managing coin creation within a team context, and it is important to ensure that all required fields are filled with appropriate values before making the API request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                targetType: teamId
                targetId: teamId
                name: MPC
                description: My Profile Coin
                type: platform
                action: buy
                rate: 1
                amount: 100000
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/coin/createBulk:
    post:
      tags:
        - UtilityCoin
      summary: Utility - Coin - Create Bulk for Team
      description: |-
        ### Endpoint Description: Utility - Coin - Create Bulk for Team

        This endpoint is used to create multiple coin entries for a specific team in bulk. Below is a detailed description of each data element required in the request.

        #### Request Data

        - **Authentication**:
          - **Type**: Bearer
            - This specifies that the request requires bearer token authentication.
          - **Bearer Token**:
            - **Key**: `token`
            - **Value**: `BearerToken`
            - **Type**: `string`
            - Description: This is the authentication token needed to authorize the request. It should be replaced with a valid bearer token provided by the authentication service.

        - **Method**:
          - **Value**: `POST`
          - Description: This indicates that the HTTP method to be used for the request is POST, which is typically used for creating new resources.

        - **URL**:
          - **Value**: `http://localhost:3000/api/utility/coin/createBulk`
          - Description: This is the endpoint URL where the request will be sent. It targets the service responsible for creating bulk coins.

        - **Headers**:
          - **Key**: `""`
          - **Value**: `""`
          - **Type**: `default`
          - **Disabled**: `true`
          - Description: Currently, there are no specific headers needed for this request, and this field is disabled. However, you may add headers if required by the backend service.

        - **Body**:
          - **Mode**: `raw`
          - **Raw**:
            ```json
            {
                "sessionId": "sessionId",
                "accountId": "accountId",
                "targetType": "teamId",
                "targetId": "teamId",
                "list": [
                    {
                        "name": "MPC",
                        "description": "My Profile Coin",
                        "type": "platform",
                        "action": "buy",
                        "rate": 1,
                        "amount": 100000
                    },
                    {
                        "name": "MPC",
                        "description": "My Profile Coin",
                        "type": "platform",
                        "action": "buy",
                        "rate": 1,
                        "amount": 100000
                    }
                ]
            }
            ```
          - Description: The body of the request contains the following fields:
            - **sessionId**:
              - Value: `sessionId`
              - Description: This is an identifier for the session under which the operation is being performed. It should be replaced with the actual session ID.

            - **accountId**:
              - Value: `accountId`
              - Description: This represents the ID of the account associated with the request. It should be replaced with the actual account ID.

            - **targetType**:
              - Value: `teamId`
              - Description: This signifies the type of target for which the coins are being created. In this case, it is set to 'teamId', indicating that the coins are aimed at a specific team.

            - **targetId**:
              - Value: `teamId`
              - Description: This is the unique identifier for the target team. It should be replaced with the actual team ID.

            - **list**:
              - Description: This is an array containing individual coin entries to be created. Each object within the list has the following properties:
                - **name**:
                  - Value: `MPC`
                  - Description: The name of the coin being created.
                - **description**:
                  - Value: `My Profile Coin`
                  - Description: A brief description of the coin.
                - **type**:
                  - Value: `platform`
                  - Description: This indicates the type of coin and in this case represents that the coin is based on a platform.
                - **action**:
                  - Value: `buy`
                  - Description: The action associated with the coin. Here, it indicates that the action related to the coin is buying.
                - **rate**:
                  - Value: `1`
                  - Description: This represents the rate or value of the coin.
                - **amount**:
                  - Value: `100000`
                  - Description: This signifies the number of coins to be created or the total amount in the transaction.

        Note: The list contains multiple entries, and each entry should have its own specifications as illustrated.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                targetType: teamId
                targetId: teamId
                list:
                  - name: MPC
                    description: My Profile Coin
                    type: platform
                    action: buy
                    rate: 1
                    amount: 100000
                  - name: MPC
                    description: My Profile Coin
                    type: platform
                    action: buy
                    rate: 1
                    amount: 100000
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/coin/convert:
    post:
      tags:
        - UtilityCoin
      summary: Utility - Coin - Convert Coin
      description: |-
        ### Description of Each Data in the Endpoint

        #### Endpoint Name
        - **Utility - Coin - Convert Coin**: This is the name of the API endpoint responsible for converting a specific amount of one type of coin to another.

        #### Request Details
        - **Authentication**: 
          - **Type**: Bearer. This indicates that the endpoint requires a bearer token for authorization.
          - **Bearer Token**: Represents the token used for authentication, which should be replaced with a valid token. Here it's represented as "BearerToken".

        - **Method**: 
          - **POST**: The HTTP method used to send data to the server in order to execute the conversion request.

        - **URL**: 
          - **URL**: `http://localhost:3000/api/utility/coin/convert`. This is the endpoint where the conversion request is sent. The localhost indicates it's for local testing.

        - **Headers**:
          - **Client-UUID**: A unique identifier for the client making the request. This should be replaced with an actual UUID representing the client, here marked as "ClientUUID".

        #### Body of the Request
        - **Mode**: 
          - **raw**: This indicates the request body is sent as raw data.
          
        - **Body Content**: 
          - **Raw JSON**: The data sent in the body of the request, formatted in JSON. Below are the specific fields included in the body:
            - **sessionId**: A unique identifier for the user's session. This should be replaced with an actual session ID.
            - **accountId**: The identifier for the account from which the funds are being converted. Replace with the actual account ID.
            - **rate**: A numeric value representing the conversion rate for the coin to be converted.
            - **amount**: The amount of coins to be converted. This is a numeric value indicating how many coins to convert.
            - **type**: Describes the type of conversion; in this case, it is set as "platform".
            - **target**: Specifies the target currency or token to convert the amount into; indicated as "token" here.
            - **toType**: The type of the result after conversion; also set to "platform".

        This information contributes to the overall understanding of how to use the endpoint for coin conversion effectively. Users should ensure they replace placeholders with actual values before making requests.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                rate: 2
                amount: 5
                type: platform
                target: token
                toType: platform
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/coin/update:
    put:
      tags:
        - UtilityCoin
      summary: Utility - Coin - Update Coin for Team
      description: |-
        ### Description of Each Data in the Endpoint

        #### Name
        - **Utility - Coin - Update Coin for Team**
          - This is the name of the API endpoint, indicating that it is used for updating a coin associated with a team.

        #### Request
        - **Auth**
          - **Type**: Specifies the type of authentication required to access this endpoint.
            - **Bearer**
              - Uses a bearer token for authentication.
              - **Bearer Token**: 
                - **Key**: This is the name of the token property.
                - **Value**: Replace "BearerToken" with the actual token required for authentication.
                - **Type**: Indicates that this value should be a string.

        - **Method**
          - **PUT**
            - This HTTP method is used to update an existing resource. In this case, it updates details for a coin.

        - **URL**
          - **http://localhost:3000/api/utility/coin/update**
            - This is the endpoint URL for updating the coin. It is specified to run locally on port 3000.

        - **Headers**
          - Contains metadata that provides information about the request.
          - **Client-UUID**
            - **Key**: The name of the header.
            - **Value**: Replace "ClientUUID" with the actual client UUID being used to identify the client making the request.
            - **Type**: Specifies that the value is a default type header.

        #### Body
        - **Mode**
          - **raw**
            - Indicates that the body of the request will be sent as raw data.

        - **Raw**
          - This is the actual content of the request body formatted in JSON. The parameters to update the coin are specified here:
          ```json
          {
              "sessionId": "sessionId",
              "accountId": "accountId",
              "coinId": "coinId",
              "targetType": "teamId",
              "targetId": "teamId",
              "name": "MPCT",
              "description": "My Profile Coin Two",
              "type": "platform",
              "action": "buy",
              "rate": 2,
              "amount": 10
          }
          ```
          - **sessionId**: Identifier for the current session.
          - **accountId**: Identifier for the user's account.
          - **coinId**: Identifier for the specific coin being updated.
          - **targetType**: Indicates the type of entity that the coin is associated with, in this case, a team.
          - **targetId**: Identifier for the specific team the coin is being updated for.
          - **name**: The name of the coin being updated (e.g., "MPCT").
          - **description**: A brief description of the coin (e.g., "My Profile Coin Two").
          - **type**: Describes the type of coin (e.g., "platform").
          - **action**: The action being performed with the coin, which is "buy" in this case.
          - **rate**: The rate at which the coin is being bought.
          - **amount**: The amount of the coin being bought.

        - **Options**
          - **Raw**
            - **Language**: Specifies the programming language or format of the request body (JSON in this case).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                coinId: coinId
                targetType: teamId
                targetId: teamId
                name: MPCT
                description: My Profile Coin Two
                type: platform
                action: buy
                rate: 2
                amount: 10
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/coin/get:
    get:
      tags:
        - UtilityCoin
      summary: Utility - Coin - Get Neutral Logs
      description: |-
        {
          "name": "Utility - Coin - Get Neutral Logs",
          "description": {
            "request": {
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "BearerToken",
                    "type": "string"
                  }]
              },
              "method": "GET",
              "url": "http://localhost:3000/api/utility/coin/get/?log=category&category=neutrals&sessionId=sessionId&accountId=accountId",
              "headers": [
                {
                  "key": "",
                  "value": "",
                  "type": "default",
                  "disabled": true
                }
              ],
              "body": {
                "mode": "raw",
                "raw": ""
              }
            },
            "description": {
              "name": "This is the name of the API request which indicates its purpose." 
              "auth.type": "This specifies the type of authentication used, which in this case is bearer token authentication."
              "auth.bearer.key": "This is the key used in the authorization header for the bearer token."
              "auth.bearer.value": "This is where the actual bearer token value should be placed."
              "auth.bearer.type": "This indicates the type of data for the bearer token, which is a string."
              "method": "This specifies the HTTP method to be used for the request, which is GET. This method retrieves data from the specified resource."
              "url": "This is the endpoint url that will be called. It includes query parameters such as log type, category, session ID, and account ID."
              "headers.key": "This is where you can add any additional headers required for the request. Currently, it is empty and disabled."
              "headers.value": "This corresponding value for the header key which is also currently empty and disabled."
              "body.mode": "This indicates the mode of the body for the API request, which is set to 'raw.'"
              "body.raw": "This is the raw body of the request. Since it's a GET request, the body is empty."
            }
          }
        }
      security:
        - bearerAuth: []
      parameters:
        - name: log
          in: query
          schema:
            type: string
          example: category
        - name: category
          in: query
          schema:
            type: string
          example: neutrals
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/coin/all:
    get:
      tags:
        - UtilityCoin
      summary: Utility - Coin - Get All
      description: |-
        ### Endpoint Description: Utility - Coin - Get All

        This endpoint is designed to retrieve a list of all available coins from the utility service. Below is a detailed description of each component involved in the request.

        - **Name**: "Utility - Coin - Get All"
          - This is the name of the API request that indicates it is used for fetching all coins from the utility service.

        - **Request**:
          - **Auth**: This section describes the authentication method used for the API request.
            - **Type**: "bearer"
              - This indicates that the API requires bearer token authentication.
            - **Bearer**:
              - An array containing authentication details:
                - **Key**: "token"
                  - Specifies the name of the authentication parameter.
                - **Value**: "BearerToken"
                  - This value should be replaced with a valid token to authenticate the request.
                - **Type**: "string"
                  - Indicates that the value provided for the token is a string.

          - **Method**: "GET"
            - This indicates the HTTP method used for the request. In this case, it is a GET request, which is used to retrieve data from the server.

          - **URL**: "http://localhost:3000/api/utility/coin/all/?sessionId=sessionId&accountId=accountId"
            - This is the endpoint URL that specifies where the request is sent. It includes:
              - **Base URL**: "http://localhost:3000"
                - This indicates the local server address where the API is hosted.
              - **Path**: "/api/utility/coin/all/"
                - This is the specific path for accessing all coins in the utility service.
              - **Query Parameters**:
                - **sessionId**: This should be replaced with the actual session identifier to track the user session.
                - **accountId**: This should be replaced with the actual account identifier to specify the user's account.

          - **Headers**:
            - A list of HTTP headers that may be sent with the request. In this case:
              - An empty header field is shown:
                - **Key**: ""
                - **Value**: ""
                - **Type**: "default"
                - **Disabled**: true
                  - This indicates that this particular header is not active or used in the current request.

          - **Body**:
            - This section defines the body content of the request.
              - **Mode**: "raw"
                - Indicates that the body content type is set to raw format.
              - **Raw**: ""
                - This indicates that there is no body content sent with the request, as GET requests typically do not include a body.

        Overall, this endpoint is utilized to fetch all coins from the utility service, and it requires a valid bearer token for authentication along with necessary session and account identifiers in the URL.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/coin/delete:
    post:
      tags:
        - UtilityCoin
      summary: Utility - Coin - Delete
      description: |-
        ### Endpoint: Utility - Coin - Delete

        - **Name**: Utility - Coin - Delete  
          This denotes the purpose of the API request, which is to delete a specific coin from a utility service associated with a user.

        #### Request Details

        - **Authentication**:  
          This API requires bearer token authentication.
          - **Type**: Bearer  
            Indicates that the request must include a bearer token.
          - **Bearer Token**:  
            - **Key**: token  
              This represents the key used in the authorization header.
            - **Value**: sessionId  
              Placeholder for the actual session identifier used to authenticate the user. This should be replaced with a real session ID issued during user login.
            - **Type**: string  
              Specifies that the value is a string.

        - **Method**: POST  
          This indicates that the request type is POST, which is typically used for creating or modifying data on the server.

        - **URL**: http://localhost:3000/api/utility/coin/delete  
          This is the endpoint where the delete request is sent. The URL suggests that the API is hosted locally on port 3000, and the specific path indicates that it is meant for deleting a coin.

        - **Headers**:  
          - **Key**: (empty)  
            There are no additional headers included in this request as indicated by the empty key, and this header field is disabled.

        - **Body**:  
          This is where the data for the delete operation is specified.
          - **Mode**: raw  
            The body content is sent in raw format.
          - **Raw Content**:  
            This is a JSON string that contains the fields required for the delete operation:
            - **sessionId**: "sessionId"  
              This placeholder should be replaced with the real session ID of the user making the request.
            - **accountId**: "accountId"  
              Placeholder for the unique identifier of the user's account from which the coin is to be deleted. This should be replaced with a real account ID.
            - **coinId**: "coinId"  
              Placeholder for the unique identifier of the coin that is to be deleted. This should be replaced with a real coin ID.

        ### Summary
        This API endpoint allows users to delete a specific coin from their account in a utility service by sending a POST request with the necessary authentication token and identifying information in the request body.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"coinId\":\"coinId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/crypto/create:
    post:
      tags:
        - UtilityCrypto
      summary: Utility - Crypto - Create for Team
      description: |-
        ### Endpoint: Utility - Crypto - Create for Team

        - **Request Method**: POST  
          This indicates that the endpoint is designed to create a new resource, in this case, for a team related to cryptocurrency.

        - **URL**: `http://localhost:3000/api/utility/crypto/create`  
          The endpoint where the request will be sent. This URL is pointing to a local server.

        - **Authentication**:
          - **Type**: Bearer  
            This specifies that Bearer token is required for authentication.
          - **Bearer Token**:
            - **Key**: token  
              This is the identifier for the bearer token in the authorization header.
            - **Value**: BearerToken  
              This represents the actual token that grants access to the API. Replace "BearerToken" with an actual valid token to authorize the request.
            - **Type**: string  
              Indicates that the value of the token is a string datatype.

        - **Headers**:  
          An empty headers object is present, which is currently disabled. While it can be used in some scenarios for adding custom headers, it is not being utilized in this request.

        - **Body**:
          - **Mode**: raw  
            This signifies the format of the body being sent in the request.
          - **Raw JSON**:
            The following keys and values are included within the JSON body:
            
            - **sessionId**: `"sessionId"`  
              This is a placeholder for the session identifier associated with the user's session. It must be replaced with the actual session ID.
              
            - **accountId**: `"accountId"`  
              This is a placeholder for the unique identifier of the account making the request. It should be replaced with the actual account ID.
              
            - **targetType**: `"teamId"`  
              This specifies the type of target associated with the action. Here, it is indicating that the target is a team.
              
            - **targetId**: `"teamId"`  
              This is the ID of the team for which the cryptocurrency action is being created.
              
            - **name**: `"BTC"`  
              This represents the name of the cryptocurrency involved, in this case, Bitcoin.
              
            - **description**: `"Bitcoin"`  
              A brief description of the cryptocurrency, further clarifying that this is Bitcoin.
              
            - **type**: `"btc"`  
              This indicates the cryptocurrency type. "btc" stands for Bitcoin.
              
            - **action**: `"buy"`  
              This represents the action to be taken. In this instance, the action is to buy the specified cryptocurrency.
              
            - **rate**: `1`  
              This signifies the rate at which the cryptocurrency is being bought. In this example, it is set to 1, possibly meaning one unit of currency for one BTC.
              
            - **amount**: `10000`  
              This denotes the amount of the cryptocurrency to be purchased. In this case, it indicates a purchase of 10,000 units of Bitcoin.

        - **Options**:  
          - **Raw Settings**: 
            - **Language**: json  
              This indicates that the raw body content is formatted as JSON. This helps in ensuring proper parsing of the data being sent in the request.

        This endpoint is useful for creating crypto transactions specific to a team within the utility framework. The appropriate values for session ID, account ID, and team ID need to be provided to complete the request successfully.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                targetType: teamId
                targetId: teamId
                name: BTC
                description: Bitcoin
                type: btc
                action: buy
                rate: 1
                amount: 10000
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/crypto/createBulk:
    post:
      tags:
        - UtilityCrypto
      summary: Utility - Crypto - Create Bulk for Team
      description: |-
        ### Endpoint: Utility - Crypto - Create Bulk for Team

        #### Request Overview
        This endpoint allows users to create bulk cryptocurrency actions for a designated team. It is intended to facilitate multiple transactions in one request.

        ##### Authorization
        - **Type**: Bearer
          - **Token**: A string that represents the bearer token required for authorization. Replace `"BearerToken"` with your actual token.

        ##### Method
        - **POST**: This request type is used to send data to the API to create a new resource.

        ##### URL
        - **Endpoint**: `http://localhost:3000/api/utility/crypto/createBulk`
          - This is the URL where the request will be sent.

        #### Request Headers
        - Currently, no custom headers are included in the request. The default header is present but disabled.

        #### Request Body
        The body of the request is in JSON format and contains the following fields:

        - **sessionId**: 
          - Type: String
          - Description: Represents the unique identifier for the user's session.

        - **accountId**: 
          - Type: String
          - Description: Represents the unique identifier for the user's account.

        - **list**: 
          - Type: Array of Objects
          - Description: This is a collection of individual cryptocurrency transaction objects. Each object contains details about a specific cryptocurrency action. 

        Each object in the list has the following properties:

        1. **targetType**: 
           - Type: String
           - Description: Indicates the type of target for the action. In this case, it specifies that the action is directed towards a team (`"teamId"`).

        2. **targetId**: 
           - Type: String
           - Description: Represents the unique identifier for the team that the cryptocurrency action is targeting.

        3. **name**: 
           - Type: String
           - Description: The name of the cryptocurrency. Example: `"BTC"` represents Bitcoin.

        4. **description**: 
           - Type: String
           - Description: A brief description of the cryptocurrency. Example: `"Bitcoin"`.

        5. **type**: 
           - Type: String
           - Description: The type of cryptocurrency, which in this case is specified as `"btc"` for Bitcoin.

        6. **action**: 
           - Type: String
           - Description: The action to be performed with the cryptocurrency. Examples include actions like `"buy"` or `"sell"`.

        7. **rate**: 
           - Type: Number
           - Description: The rate at which the cryptocurrency is being bought or sold. Example: A value of `1` may represent the price per unit.

        8. **amount**: 
           - Type: Number
           - Description: The total amount of cryptocurrency to be transacted. Example: A value of `10000` represents the quantity being bought or sold.

        #### Example of Request Body
        ```json
        {
            "sessionId": "sessionId",
            "accountId": "accountId",
            "list": [
                {
                    "targetType": "teamId",
                    "targetId": "teamId",
                    "name": "BTC",
                    "description": "Bitcoin",
                    "type": "btc",
                    "action": "buy",
                    "rate": 1,
                    "amount": 10000
                },
                {
                    "targetType": "teamId",
                    "targetId": "teamId",
                    "name": "BTC",
                    "description": "Bitcoin",
                    "type": "btc",
                    "action": "buy",
                    "rate": 1,
                    "amount": 10000
                }
            ]
        }
        ```

        The request body is structured to facilitate multiple buy actions for Bitcoin for the same target team. Adjust the values as necessary for your specific use case.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                list:
                  - targetType: teamId
                    targetId: teamId
                    name: BTC
                    description: Bitcoin
                    type: btc
                    action: buy
                    rate: 1
                    amount: 10000
                  - targetType: teamId
                    targetId: teamId
                    name: BTC
                    description: Bitcoin
                    type: btc
                    action: buy
                    rate: 1
                    amount: 10000
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/crypto/convert:
    post:
      tags:
        - UtilityCrypto
      summary: Utility - Crypto - Convert Crypto
      description: |-
        ### Endpoint Description: Utility - Crypto - Convert Crypto

        **Request Method:**  
        - **POST**: This endpoint is accessed using the POST method, indicating that data will be sent to the server.

        **Request URL:**  
        - **http://localhost:3000/api/utility/crypto/convert**: This is the URL to which the request will be sent. It is structured to indicate it is part of a utility service for converting cryptocurrencies.

        **Authentication:**  
        - **Auth Type:** Bearer  
          - A bearer token is used for authentication. It is a type of token that provides access to the API on behalf of a user or service.
          - **Token Structure:**  
            - **Key:** `token`      
            - **Value:** `BearerToken`    
            - **Type:** `string`  
          - Replace `BearerToken` with the actual token value needed for authenticating the request.

        **Headers:**  
        - **Client-UUID**:  
          - This header is used to identify the client making the request.
          - **Key:** `Client-UUID`  
          - **Value:** `ClientUUID`  
          - Replace `ClientUUID` with the unique identifier for the client.

        **Request Body:**  
        - The body of the request contains key-value pairs in JSON format, detailing the conversion operation.

          **JSON Body Structure:**
          - **sessionId**:  
            - Type: `string`  
            - This represents the unique identifier for the session during which the conversion is taking place.

          - **accountId**:  
            - Type: `string`  
            - This is the identifier for the user's account that is requesting the conversion.

          - **cryptoId**:  
            - Type: `string`  
            - This represents the identifier for the cryptocurrency that is being converted.

          - **type**:  
            - Type: `string`  
            - This indicates the type of cryptocurrency being converted, for example, "btc" represents Bitcoin.

          - **rate**:  
            - Type: `number`  
            - This denotes the current exchange rate for the cryptocurrency being converted.

          - **amount**:  
            - Type: `number`  
            - This is the quantity of cryptocurrency to be converted.

          - **convertTo**:  
            - Type: `string`  
            - This specifies the token or cryptocurrency to which the conversion is being made.

        **Body Mode:**  
        - **Mode:** `raw`  
          - The request body is sent as raw data, formatted as JSON.

        **Options:**  
        - **Language:** `json`  
          - This option specifies that the raw data being sent is formatted in JSON.

        ### Summary:
        This endpoint handles cryptocurrency conversions. It requires a bearer token for authentication and expects specific parameters in the request body for the conversion operation. Make sure to replace placeholder values with actual data when using the endpoint.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                cryptoId: cryptoId
                type: btc
                rate: 1
                amount: 1
                convertTo: token
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/crypto/update:
    put:
      tags:
        - UtilityCrypto
      summary: Utility - Crypto - Update Crypto for Team
      description: |-
        ### Endpoint Description: Utility - Crypto - Update Crypto for Team

        **Request Type:**  
        - **Method:** PUT  
          Indicates that this endpoint is used to update existing resources.

        **Authentication:**  
        - **Type:** Bearer  
          This endpoint requires bearer token authentication. The token should be included in the Authorization header.

        **Request URL:**  
        - **URL:** `http://localhost:3000/api/utility/crypto/update`  
          This is the endpoint where the update request will be sent. It is hosted locally.

        **Headers:**  
        - **Client-UUID:**  
          - **Key:** `Client-UUID`  
            This header is expected to contain the UUID of the client making the request. It uniquely identifies the client.

        **Request Body:**  
        The body of the request must be in raw JSON format and includes the following fields:

        1. **sessionId:**  
           - A unique identifier for the current session. This is used to associate the update request with a specific session context.

        2. **accountId:**  
           - The identifier for the account that is being modified. This specifies which account the crypto update pertains to.

        3. **cryptoId:**  
           - The identifier for the cryptocurrency that is being updated. This tells the system which specific cryptocurrency to modify.

        4. **targetType:**  
           - The type of the target for this update. In this case, it is specified as `teamId`, indicating that the update is aimed at a team.

        5. **targetId:**  
           - The identifier for the team that is receiving the update. This specifies which team the action pertains to.

        6. **name:**  
           - The name of the cryptocurrency being updated. An example is "BTC" for Bitcoin.

        7. **description:**  
           - A brief description of the cryptocurrency. For example, "Bitcoin" is given as a description for BTC.

        8. **type:**  
           - The type of the cryptocurrency. This specifies the classification of the crypto, such as "btc" for Bitcoin.

        9. **action:**  
           - Indicates the action to be taken with the cryptocurrency. The example "buy" indicates that the action involves purchasing the specified crypto.

        10. **rate:**  
            - The rate at which the cryptocurrency is being bought or sold. For instance, `1` could represent the price in the specified quote currency.

        11. **amount:**  
            - The quantity of cryptocurrency being bought or sold. In this example, `2` indicates that two units of the cryptocurrency are involved in the action.

        **Body Format:**  
        - The body is raw JSON, which means it should be sent as is without any additional formatting. Ensure that the values are correctly set before making the request.

        This detailed structure helps to understand what data is needed and how to format the request for successful interaction with the endpoint.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                cryptoId: cryptoId
                targetType: teamId
                targetId: teamId
                name: BTC
                description: Bitcoin
                type: btc
                action: buy
                rate: 1
                amount: 2
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/crypto/get:
    get:
      tags:
        - UtilityCrypto
      summary: Utility - Crypto - Get Neutral Logs
      description: |-
        {
          "name": "Utility - Crypto - Get Neutral Logs",
          "description": {
            "request": {
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "BearerToken",
                    "type": "string"
                  }
                ],
                "description": "This section indicates that authentication is done using a bearer token. Users must provide a valid bearer token in the request header to access the endpoint."
              },
              "method": {
                "description": "The HTTP method used for this request is GET. This method is used to retrieve data from the server."
              },
              "url": {
                "description": "The URL required to access the endpoint: http://localhost:3000/api/utility/crypto/get/. It also includes query parameters: log, category, sessionId, and accountId, which are necessary for filtering the logs based on specific criteria."
              },
              "headers": {
                "description": "This is where you can specify additional headers if needed. Currently, there are no additional headers included, and this section is disabled."
              },
              "body": {
                "mode": "raw",
                "raw": {
                  "description": "The body of the request is set to raw mode, but it is currently empty. For a GET request, the body is typically not used, and parameters are sent via the URL."
                }
              }
            },
            "parameters": {
              "log": {
                "description": "This is a query parameter indicating the type of logs to retrieve. In this case, it's set to 'category'."
              },
              "category": {
                "description": "This parameter specifies the category of logs to retrieve. It is set to 'neutrals', which indicates that only neutral logs will be returned."
              },
              "sessionId": {
                "description": "A unique identifier for the user session. This helps in tracking and filtering logs related to a specific session."
              },
              "accountId": {
                "description": "A unique identifier for the user's account. This parameter is used to retrieve logs related to a specific account."
              }
            }
          }
        }
      security:
        - bearerAuth: []
      parameters:
        - name: log
          in: query
          schema:
            type: string
          example: category
        - name: category
          in: query
          schema:
            type: string
          example: neutrals
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/crypto/all:
    get:
      tags:
        - UtilityCrypto
      summary: Utility - Crypto - Get All
      description: |-
        ### Description of Each Data in the Endpoint:

        - **name**: This field specifies the name of the API request. In this case, the name is "Utility - Crypto - Get All". This indicates that the request is related to retrieving all cryptocurrency-related data.

        - **request**: This object contains all the details necessary to make the API request.

          - **auth**: This section outlines the authentication method used for this API request.
          
            - **type**: This indicates the authentication type being used. Here, it is set to "bearer", which means that the request requires a bearer token for authentication.
            
            - **bearer**: This array contains the details of the bearer token.
            
              - **key**: A label for the data being passed, which in this case is "token".
              
              - **value**: The actual bearer token value that will authenticate the request. It is presented here as "BearerToken", which should be replaced with a valid bearer token by the user.
              
              - **type**: Specifies the data type of the token. Here, it is set to "string".

          - **method**: This field states the HTTP method to be used for the request. It is set to "GET", indicating that data will be retrieved from the server.

          - **url**: This is the endpoint URL for the API request. It is configured as "http://localhost:3000/api/utility/crypto/all/?sessionId=sessionId&accountId=accountId".
            
            - **sessionId**: A query parameter that is expected to provide the session identifier for the request. Users should replace "sessionId" with an actual session ID.
            
            - **accountId**: Another query parameter that specifies the account identifier related to the request. Users should replace "accountId" with a valid account ID.

          - **headers**: This section lists any additional headers that should be included in the request.
            
            - **key**: The header field name. In this example, it is empty, suggesting no additional headers are required.
            
            - **value**: The value associated with the header, which is also empty in this case.
            
            - **type**: Indicates the type of the header. It is marked as "default", but it is also disabled, meaning this header will not be included in the request.

          - **body**: This object outlines the request body content.
            
            - **mode**: Indicates the format of the request body, which is set to "raw". This suggests that if there were a body, it would accept unstructured text.
            
            - **raw**: This field is currently empty, indicating there is no request body content needed for this GET request.

        Each user utilizing this API collection should pay close attention to the bearer token and the query parameters to ensure valid requests are sent.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/crypto/delete:
    post:
      tags:
        - UtilityCrypto
      summary: Utility - Crypto - Delete
      description: |-
        ### Endpoint: Utility - Crypto - Delete

        - **Name**: Utility - Crypto - Delete  
          This is the title of the API request, indicating that it is used to delete a cryptocurrency entry within a utility context.

        - **Request**:
          - **Auth**:
            - **Type**: Bearer  
              This specifies that the request will use bearer token authentication.
            - **Bearer**:  
              An array containing authentication details for the request.
              - **Key**: token  
                This is the key that represents the authentication type.
              - **Value**: sessionId  
                This is the variable name that holds the actual session token required for authentication.
              - **Type**: string  
                This indicates that the value of the token is expected to be a string data type.

          - **Method**: POST  
            This indicates that the HTTP method for the request is POST, meaning that this request will send data to the server to perform the delete operation.

          - **URL**: http://localhost:3000/api/utility/crypto/delete  
            This is the endpoint URL where the delete request will be sent. It points to a local server with the specified path for deleting cryptocurrency entries.

          - **Headers**:  
            This section includes any custom headers that may be sent with the request.
            - **Key**: (empty)  
              Currently, there are no custom headers included in this request, as the key is empty.
            - **Value**: (empty)  
              No value is associated with the header as it is disabled.
            - **Type**: default  
              Indicates the default type for any headers, though it is not in use here since the header is disabled.

          - **Body**:
            - **Mode**: raw  
              This indicates that the request body will be sent as raw text.
            - **Raw**:  
              A JSON object as a string which includes:
              - **sessionId**: "sessionId"  
                This is a placeholder for the actual session ID required for authentication. It must be replaced with a valid session ID when making the request.
              - **accountId**: "accountId"  
                This is a placeholder for the ID of the account from which the cryptocurrency should be deleted. This value needs to be replaced with the actual account ID when making the request.
              - **cryptoId**: "cryptoId"  
                This is a placeholder for the specific ID of the cryptocurrency that is intended to be deleted. Like the others, it should be replaced with the actual cryptocurrency ID in the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"cryptoId\":\"cryptoId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/fiat/create:
    post:
      tags:
        - UtilityFiat
      summary: Utility - Fiat - Create for Team
      description: |-
        ### Utility - Fiat - Create for Team Endpoint Description

        #### Request Details
        - **Auth**: This endpoint requires bearer token authentication. The token should be provided in the authorization header as a string.
          - **Type**: Indicates that the authentication method used is a bearer token.
          - **Bearer**: An array containing the token details for authentication.
            - **Key**: "token" indicates the type of key used for authorization.
            - **Value**: Placeholder "BearerToken" should be replaced with the actual token value when making requests.
            - **Type**: Indicates the data type of the token, which is a string.

        - **Method**: The HTTP method used for this request is POST, indicating that data is being sent to the server to create a new resource.

        - **URL**: This is the endpoint's address where the request will be sent.
          - **Endpoint**: `http://localhost:3000/api/utility/fiat/create` is the specified URL for creating a new fiat utility entry for a team.

        - **Headers**: 
          - There are currently no custom headers configured (the key and value are left empty), and this section is disabled.

        #### Body Details
        - **Mode**: The body of the request is in raw format, specifically using JSON.
          
        - **Raw JSON Content**: The content of the request body contains the following fields:
          - **sessionId**: A unique identifier for the session associated with the request. Should be replaced with the actual session ID.
          - **accountId**: The identifier for the account related to the action being taken. This needs to be the actual account ID.
          - **targetType**: Specifies the type of target for the action, in this case, it should be a string identifying the target type as "teamId".
          - **targetId**: The unique identifier for the team that the action relates to. Replace "teamId" with the actual team's ID.
          - **name**: The name of the fiat currency being created. Here, "USD" is provided as an example for the United States Dollar.
          - **description**: A brief descriptor of the currency. "United States Dollar" provides a clear identification of the currency involved.
          - **type**: This field indicates the type of currency, with "usd" being a designation for the United States Dollar.
          - **action**: This indicates the action to be taken with the currency; in this case, "buy" indicates that the currency is being purchased.
          - **rate**: The exchange rate for the currency, which is set to `1` as an example in this case.
          - **amount**: The quantity of the currency to be created, here set to `1`. 

        This endpoint serves to create an entry for fiat currency transactions within a specified team context and requires appropriate authentication alongside defined body parameters.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                targetType: teamId
                targetId: teamId
                name: USD
                description: United States Dollar
                type: usd
                action: buy
                rate: 1
                amount: 1
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/fiat/createBulk:
    post:
      tags:
        - UtilityFiat
      summary: Utility - Fiat - Create Bulk for Team
      description: |-
        ### Endpoint: Utility - Fiat - Create Bulk for Team

        #### Request Description

        - **Authentication**
          - **Type**: Bearer Token
            - **Key**: `token`
            - **Value**: `BearerToken`
            - **Type**: String
          - This section requires a bearer token for authorization to access the endpoint.

        - **Method**: `POST`
          - This specifies that the request method is POST, indicating that data will be sent to the server for processing.

        - **URL**: `http://localhost:3000/api/utility/fiat/createBulk`
          - This is the endpoint where the POST request will be sent. It is hosted locally on port 3000.

        - **Headers**
          - There are currently no custom headers specified for this request as the header key and value are empty and marked as disabled.

        - **Body**
          - **Mode**: Raw
            - This indicates that the body of the request contains raw data. The data format is JSON.
          
          - **Content**: 
            - The body contains a JSON object with the following fields:
              - **sessionId**: 
                - Type: String
                - Description: An identifier for the session during which the request is being made.
              
              - **accountId**: 
                - Type: String
                - Description: An identifier for the account involved in the transaction.

              - **list**: 
                - Type: Array
                - Description: A collection of transaction objects to be processed in bulk. Each object within the list contains:
                  - **targetType**: 
                    - Type: String
                    - Description: Indicates the type of target for the transaction, here it is consistently `teamId`.
                  
                  - **targetId**: 
                    - Type: String
                    - Description: An identifier for the specific team that the transaction will be directed towards.
                  
                  - **name**: 
                    - Type: String
                    - Description: This denotes the currency name, e.g., "USD" for United States Dollar.
                  
                  - **description**: 
                    - Type: String
                    - Description: A description of the currency being used, providing more context about the currency type.
                  
                  - **type**: 
                    - Type: String
                    - Description: Specifies the currency type, such as `usd`.
                  
                  - **action**: 
                    - Type: String
                    - Description: Indicates the type of action to be performed with the currency, such as `buy`.
                  
                  - **rate**: 
                    - Type: Number
                    - Description: The exchange rate for the transaction; in this example, it is set to 1.
                  
                  - **amount**: 
                    - Type: Number
                    - Description: The total amount of currency for the transaction, here it is set to 1.

        This structure allows the user to create multiple transactions involving buying a specified amount of a currency for a team in a single bulk request. Each transaction is represented as an object within the list array.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                list:
                  - targetType: teamId
                    targetId: teamId
                    name: USD
                    description: United States Dollar
                    type: usd
                    action: buy
                    rate: 1
                    amount: 1
                  - targetType: teamId
                    targetId: teamId
                    name: USD
                    description: United States Dollar
                    type: usd
                    action: buy
                    rate: 1
                    amount: 1
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/fiat/convert:
    post:
      tags:
        - UtilityFiat
      summary: Utility - Fiat - Convert Fiat
      description: |-
        ### Endpoint Description: Utility - Fiat - Convert Fiat

        #### Request Method
        - **Method**: POST
          - This indicates that the request will send data to the server to convert Fiat currency.

        #### Request URL
        - **URL**: `http://localhost:3000/api/utility/fiat/convert`
          - This is the endpoint that handles the Fiat currency conversion request. It's hosted locally.

        #### Authentication
        - **Auth Type**: Bearer
          - This endpoint uses Bearer token authentication for secure access to the API.
          
        - **Bearer Token**
          - **Key**: `token`
            - The key under which the authentication token is sent.
          - **Value**: `BearerToken`
            - The actual authentication token string that grants access to this API.
          - **Type**: String
            - Specifies that the token is a string format.

        #### Headers
        - **Header**: Client-UUID
          - **Key**: `Client-UUID`
            - This header includes a unique identifier for the client making the API request. It is used for tracking and managing client-specific activities.
          - **Value**: `ClientUUID`
            - This should be replaced with a specific UUID value that identifies the client.
          - **Type**: Default
            - Indicates a standard header format.

        #### Request Body
        - **Body Mode**: Raw
          - The body of the request will be sent as raw data, formatted as JSON.

        - **Raw Body Content**:
          ```json
          {
              "sessionId": "sessionId",
              "accountId": "accountId",
              "fiatId": "fiatId",
              "type": "usd",
              "rate": 1,
              "amount": 1,
              "convertTo": "token"
          }
          ```
          - **Field Descriptions**:
            - **sessionId**: Represents a unique identifier for the current session. This helps in managing user interactions without them logging in repeatedly.
            - **accountId**: Identifies the user's account that the Fiat conversion will be processed against. This is crucial for linking the transaction to the right user.
            - **fiatId**: Refers to the specific Fiat currency identification that indicates which currency is to be converted.
            - **type**: Specifies the type of Fiat currency being processed. For example, it may indicate "usd" for US dollars.
            - **rate**: The conversion rate applied to the Fiat amount. This is the rate at which the Fiat is converted to the target currency.
            - **amount**: The quantity of currency to convert. This is the actual amount of Fiat that the user wants to convert.
            - **convertTo**: Indicates the currency or token to which the Fiat amount will be converted. For instance, it could specify that the amount should be converted to a cryptocurrency token.

        #### Body Options
        - **Options**: 
          - **Raw**:
            - **Language**: JSON
              - This setting specifies that the raw body content is formatted as JSON, ensuring that the API can interpret the data correctly.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                fiatId: fiatId
                type: usd
                rate: 1
                amount: 1
                convertTo: token
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/fiat/update:
    put:
      tags:
        - UtilityFiat
      summary: Utility - Fiat - Update Fiat for Team
      description: |-
        ### Utility - Fiat - Update Fiat for Team

        **Request Type:** PUT  
        **Endpoint URL:** http://localhost:3000/api/utility/fiat/update

        ### Authentication
        - **Auth Type:** Bearer Token
          - **Token Key:** "token"  
          - **Token Value:** "BearerToken" (Replace with actual bearer token)

        ### Headers
        - **Client-UUID:**
          - **Key:** "Client-UUID"
          - **Value:** "ClientUUID" (Replace with actual Client UUID)

        ### Request Body
        The body of the request is in JSON format and includes the following fields:

        - **sessionId:** A unique identifier for the user's session. This is used to associate the request with the user's current session.

        - **accountId:** The ID of the account that is being updated. This identifies the specific account within the system.

        - **fiatId:** The unique identifier for the fiat currency entry that is to be updated. This allows the system to find the specific fiat currency record.

        - **targetType:** Specifies the type of target that the update applies to. In this case, it should be set to "teamId" indicating that the update applies to a team.

        - **targetId:** The ID of the target, which is the specific team being updated. This links the fiat update to a particular team.

        - **name:** The name of the fiat currency. For example, "USD" represents the United States Dollar.

        - **description:** A brief description of the fiat currency. For example, "United States Dollar" provides additional context about the currency.

        - **type:** Specifies the type of fiat currency. For this case, it is set to "usd" indicating that this is the US Dollar.

        - **action:** Indicates the action to perform with this fiat currency update. In this case, it is set to "gift", which may imply that this currency is being given or allocated as a gift within the context of the app.

        - **rate:** The exchange rate for the fiat currency. In this example, it is set to 1, indicating a 1:1 rate for this currency.

        - **amount:** The amount of fiat currency being referenced in the update. Here, it is set to 2, which would mean two units of the specified fiat currency are being managed or allocated.

        ### Notes
        Make sure to replace placeholder values with actual data before making a request. The endpoint is designed to update a specific fiat currency record associated with a team in the utility application.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                fiatId: fiatId
                targetType: teamId
                targetId: teamId
                name: USD
                description: United States Dollar
                type: usd
                action: gift
                rate: 1
                amount: 2
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/fiat/get:
    get:
      tags:
        - UtilityFiat
      summary: Utility - Fiat - Get Neutral Logs
      description: |-
        ### Endpoint Description: Utility - Fiat - Get Neutral Logs

        - **Name**: Utility - Fiat - Get Neutral Logs  
          This is a descriptive name for the API endpoint, indicating its purpose which is to retrieve neutral logs related to fiat transactions.

        - **Request**:  
          The request section contains all the details needed to make a call to the API.

          - **Auth**:  
            Specifies the authentication method used to access the endpoint.
            
            - **Type**: Bearer  
              Indicates that bearer token authentication is required to access this endpoint.

            - **Bearer**:  
              A list containing the details of the bearer token.

              - **Key**: token  
                Refers to the key under which the bearer token is passed.

              - **Value**: BearerToken  
                This placeholder represents the actual bearer token that must be provided for authentication.

              - **Type**: string  
                Indicates that the value for the bearer token should be in string format.

          - **Method**: GET  
            This specifies that the request method for this endpoint is GET, which is used for retrieving data.

          - **URL**:  
            The endpoint URL which is used to make the request.
            
            - `http://localhost:3000/api/utility/fiat/get/?log=category&category=neutrals&sessionId=sessionId&accountId=accountId`  
              This is the complete URL to access the API, which includes query parameters:
              
              - `log=category`: Indicates the type of logs to filter by, in this case, by category.
              - `category=neutrals`: Specifies that the category of logs to retrieve is 'neutrals'.
              - `sessionId=sessionId`: A placeholder for the session identifier, which is required to filter logs for a specific session.
              - `accountId=accountId`: A placeholder for the user's account identifier, necessary for scoping the logs to a specific account.

          - **Headers**:  
            Contains any additional headers that might be required in the request.
            
            - **Key**: (empty)  
              This indicates there are no custom headers included in this request; the default headers are used.

            - **Value**: (empty)  
              As there are no specific values for headers, this remains empty.

            - **Type**: default  
              Indicates the type of header, which in this case is set to default.

            - **Disabled**: true  
              This indicates that the headers specified are currently disabled and won’t be included in the request.

          - **Body**:  
            Details about the body of the request.

            - **Mode**: raw  
              The body of the request is in raw format, meaning it does not conform to any specific type like form data or URL-encoded data.

            - **Raw**: (empty)  
              The raw body content is empty, indicating that no body data needs to be sent with this GET request.

        This endpoint is designed to access and retrieve neutral logs associated with fiat transactions, requiring authentication and specific parameters to filter the results accurately.
      security:
        - bearerAuth: []
      parameters:
        - name: log
          in: query
          schema:
            type: string
          example: category
        - name: category
          in: query
          schema:
            type: string
          example: neutrals
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/fiat/all:
    get:
      tags:
        - UtilityFiat
      summary: Utility - Fiat - Get All
      description: |-
        {
          "name": "Utility - Fiat - Get All",
          "description": "This request fetches all available fiat utilities. It is useful for retrieving a comprehensive list of fiat-related utilities that the API provides.",
          "request": {
            "auth": {
              "type": "bearer",
              "description": "Authentication type used for this request. A bearer token must be provided for authorization to access the endpoint.",
              "bearer": [
                {
                  "key": "token",
                  "description": "The key for the bearer token. It is required to authorize the request.",
                  "value": "BearerToken",
                  "description": "The actual value of the bearer token, which needs to be replaced with a valid token for the request to succeed.",
                  "type": "string"
                }
              ]
            },
            "method": {
              "description": "This indicates the HTTP method used for the request. 'GET' is used here to retrieve information from the server."
            },
            "url": {
              "description": "The endpoint URL for the request. It consists of the base URL followed by the specific path for retrieving all fiat utilities. It also includes query parameters for session ID and account ID.",
              "value": "http://localhost:3000/api/utility/fiat/all/?sessionId=sessionId&accountId=accountId"
            },
            "headers": [
              {
                "key": "",
                "value": "",
                "type": "default",
                "disabled": true,
                "description": "This header entry is currently disabled and does not have any key or value defined. Normally, headers can be used to pass additional information with the request."
              }
            ],
            "body": {
              "mode": "raw",
              "description": "This indicates the format of the request body. In this case, it is set to 'raw', meaning that no body content is being sent with the request for the 'GET' method.",
              "raw": ""
            }
          }
        }
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/fiat/delete:
    post:
      tags:
        - UtilityFiat
      summary: Utility - Fiat - Delete
      description: |-
        ### Utility - Fiat - Delete Endpoint Description

        **Name:**  
        Utility - Fiat - Delete

        **Request Type:**  
        A POST request to delete a specific fiat record from the utility service.

        **Authentication Method:**  
        This endpoint requires bearer token authentication. The token must be included in the authorization header of the request.

        - **Auth Type:** Bearer token
          - **Key:** token - This is the identifier for the token.
          - **Value:** sessionId - The actual session token that verifies the user's identity and permissions.
          - **Type:** string - The format of the token.

        **HTTP Method:**  
        POST - Used to submit data to be processed to the specified resource.

        **URL:**  
        `http://localhost:3000/api/utility/fiat/delete`  
        The endpoint's URL where the delete request is sent.

        **Headers:**  
        There are currently no custom headers being sent with this request. A default header entry exists but is disabled.

        **Body:**  
        The body of the request is sent in raw JSON format, which contains the following fields:
        - **sessionId:** This field should be populated with the session ID of the user making the request, allowing the server to authenticate and authorize the user.
        - **accountId:** This field represents the ID of the account from which the fiat record should be deleted. It specifies which user's fiat data is affected by the operation.
        - **fiatId:** This field contains the ID of the specific fiat record that is to be deleted. This ID is used to identify which record in the database should be removed.

        In summary, this endpoint allows a user to delete a specific fiat record associated with their account by providing the necessary IDs and a valid session token.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"fiatId\":\"fiatId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/point/create:
    post:
      tags:
        - UtilityPoint
      summary: Utility - Point - Create for Team
      description: |-
        {
          "description": "This endpoint allows you to create a utility point for a specific team. Below is a detailed description of each data component involved in this request.",

          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "BearerToken",
                  "type": "string"
                }
              ],
              "description": "Authentication is handled using a Bearer token. Replace 'BearerToken' with your actual token to authenticate the request."
            },
            
            "method": {
              "value": "POST",
              "description": "This indicates that the request method is POST, which is used to send data to the server."
            },
            
            "url": {
              "value": "http://localhost:3000/api/utility/point/create",
              "description": "The endpoint URL where the request will be sent. It is currently set to a local server address."
            },
            
            "headers": [
              {
                "key": "",
                "value": "",
                "type": "default",
                "disabled": true,
                "description": "No additional headers are required for this request, and this default header is disabled."
              }
            ],

            "body": {
              "mode": "raw",
              "raw": "{\n    \"sessionId\": \"sessionId\",\n    \"accountId\": \"accountId\",\n    \"targetType\": \"teamId\",\n    \"targetId\": \"teamId\",\n    \"name\": \"TTP\",\n    \"description\": \"Team Tournament Point\",\n    \"type\": \"platform\",\n    \"action\": \"award\",\n    \"rate\": 1,\n    \"amount\": 5\n}",
              "options": {
                "raw": {
                  "language": "json",
                  "description": "The body of the request is in raw JSON format and contains the following fields:"
                }
              },
              "fields": {
                "sessionId": {
                  "description": "A unique identifier for the session. This should be replaced with the actual session ID."
                },
                "accountId": {
                  "description": "The account identifier associated with the action. Replace with the actual account ID."
                },
                "targetType": {
                  "description": "Defines the type of target for the utility point, in this case, it is set to 'teamId' indicating that the points are for a team."
                },
                "targetId": {
                  "description": "The specific identifier of the team that will receive the points. Replace with the actual team ID."
                },
                "name": {
                  "description": "A name for the utility point entry. In this example, it is 'TTP' which can represent a tournament point."
                },
                "description": {
                  "description": "A detailed description of what the utility point represents, in this case, 'Team Tournament Point'."
                },
                "type": {
                  "description": "Identifies the platform type associated with the point. Here it is specified as 'platform'."
                },
                "action": {
                  "description": "Specifies the action being performed with the utility point. In this example, it is set to 'award', indicating that points are being granted."
                },
                "rate": {
                  "description": "This field indicates the rate of the points being awarded. A value of 1 suggests that the points are awarded at a rate of 1."
                },
                "amount": {
                  "description": "The total amount of points being awarded to the team. In this case, it is set to 5."
                }
              }
            }
          }
        }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                targetType: teamId
                targetId: teamId
                name: TTP
                description: Team Tournament Point
                type: platform
                action: award
                rate: 1
                amount: 5
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/point/createBulk:
    post:
      tags:
        - UtilityPoint
      summary: Utility - Point - Create Bulk for User
      description: |-
        ### Endpoint: Utility - Point - Create Bulk for User

        **Description:** This API endpoint allows the bulk creation of utility points for users. It requires authentication via a bearer token and expects a specific JSON structure in the body of the request.

        #### Request Details

        - **Auth**:
          - **Type**: Bearer Authentication
            - **Bearer**:
              - **Key**: `token`
              - **Value**: `BearerToken` (This should be replaced with a valid token for authentication).
              - **Type**: String (The format of the token provided is in string format).

        - **Method**: 
          - **POST**: This specifies that the request is to create new resources.

        - **URL**: 
          - `http://localhost:3000/api/utility/point/createBulk`: The endpoint to which the request will be sent. This URL points to a local development server.

        #### Headers
        - **Key**: (Empty, currently not required in this request context)
        - **Value**: (Empty, currently not required in this request context)
        - **Disabled**: True (Means this header will not be sent with the request).

        #### Body
        - **Mode**: Raw (The body content is sent as raw data).
        - **Content**: The body must be a valid JSON object structured as follows:

        ```json
        {
          "sessionId": "sessionId",       // Unique identifier for the session, should be replaced with actual session ID.
          "accountId": "accountId",       // Unique identifier for the account, should be replaced with actual account ID.
          "list": [
            {
              "targetType": "teamId",     // Indicates the type of target entity, can refer to "teamId" or "accountId".
              "targetId": "teamId",       // ID of the team for which the points are awarded.
              "name": "TTP",              // Name of the point awarding mechanism.
              "description": "Team Tournament Point", // A brief description of what this point is for.
              "type": "platform",          // The type of point or reward being allocated.
              "action": "award",           // The action to be performed, in this case, awarding points.
              "rate": 1,                   // The rate at which points are assigned or calculated.
              "amount": 5                  // The actual amount of points to be awarded.
            },
            {
              "targetType": "accountId",   // Indicates the type of target entity, here it refers to "accountId".
              "name": "BPT",               // Name of the point allocation mechanism.
              "description": "Beladed Platform Token", // A description for this specific point allocation.
              "type": "platform",           // The type of point or reward being utilized.
              "action": "buy",              // The action to be performed for this entry, indicating a purchase.
              "rate": 1,                    // The rate at which the tokens are accounted for or purchased.
              "amount": 1000                // The quantity of points or tokens involved in the purchase.
            }
          ]
        }
        ```

        ### Summary:
        This API call is used to create multiple utility points in bulk for different target types (like teams or accounts). Ensure to replace placeholder values such as `sessionId`, `accountId`, `teamId`, etc., with appropriate identifiers before making the request. Each point entry includes details like the target type, action, rate, and amount, indicating how and for what reason points are being created or allocated.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                list:
                  - targetType: teamId
                    targetId: teamId
                    name: TTP
                    description: Team Tournament Point
                    type: platform
                    action: award
                    rate: 1
                    amount: 5
                  - targetType: accountId
                    name: BPT
                    description: Beladed Platform Token
                    type: platform
                    action: buy
                    rate: 1
                    amount: 1000
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/point/convert:
    post:
      tags:
        - UtilityPoint
      summary: Utility - Point - Convert Point
      description: |-
        ### Description of Endpoint: Utility - Point - Convert Point

        #### Request Type
        - **Method**: `POST`  
          This indicates that the endpoint expects a POST request to be made.

        #### URL
        - **Endpoint**: `http://localhost:3000/api/utility/point/convert`  
          This is the endpoint URL to which the request will be sent.

        #### Authentication
        - **Auth Type**: `Bearer`  
          The endpoint uses Bearer token authentication. The client must provide a valid token to access this endpoint.

        - **Bearer Token**:  
          - **Key**: `token`  
            This is the identifier for the authentication token.
          - **Value**: `BearerToken`  
            This represents the actual token string that the client will use to authenticate.
          - **Type**: `string`  
            Indicates that the value is a string type.

        #### Headers
        - **Header**:  
          - **Key**: `Client-UUID`  
            This is a unique identifier for the client making the request.
          - **Value**: `ClientUUID`  
            This should be replaced with the actual UUID value of the client.
          - **Type**: `default`  
            Specifies the type of header being sent in the request.

        #### Request Body
        - **Body Mode**: `raw`  
          The body of the request is sent in raw format.

        - **Body Content**: The body must be formatted in JSON and should contain the following fields:
          - **sessionId**: `sessionId`  
            A unique identifier for the user's session.
          - **accountId**: `accountId`  
            Identifies the user's account associated with the points.
          - **pointId**: `pointId`  
            Identifies the specific point that is to be converted.
          - **type**: `network`  
            Specifies the type of point conversion. In this case, it is a network type.
          - **rate**: `1`  
            Represents the conversion rate of points to tokens. This is a numeric value.
          - **amount**: `1`  
            Indicates the amount of points to be converted. This is a numeric value.
          - **convertTo**: `token`  
            Specifies the target unit to convert the points to, in this case, it is "token".

        - **Options**:  
          - **Raw**:  
            - **Language**: `json`  
              Indicates that the raw body content is in JSON format.

        This endpoint facilitates the conversion of points within a specified account into tokens, using the provided session and point identifiers, along with their respective amounts and conversion rates.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                pointId: pointId
                type: network
                rate: 1
                amount: 1
                convertTo: token
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/point/update:
    put:
      tags:
        - UtilityPoint
      summary: Utility - Point - Update Point for Team
      description: |-
        ### Endpoint: Utility - Point - Update Point for Team

        **Request Type:** PUT

        **URL:** `http://localhost:3000/api/utility/point/update`

        #### Authorization
        - **Auth Type:** Bearer
          - **Token:** A token that is required for authorization. It should be replaced with the actual bearer token during the request.

        #### Headers
        - **Client-UUID:** A unique identifier for the client making the request. This should be replaced with the actual UUID for the client.

        #### Body
        The request body should be sent in raw JSON format and contains the following fields:

        1. **sessionId**: Represents the session identifier for tracking the user's session during the request. This value should be replaced with the actual session ID.

        2. **accountId**: The unique identifier for the account that is associated with the points being updated. This should be replaced with the actual account ID.

        3. **pointId**: This is the unique identifier for the point entry that needs to be updated. The value should correspond to the point ID you wish to change.

        4. **targetType**: Specifies the type of target that is being updated with points. In this case, it should be set to "teamId" to indicate that points are awarded to a team.

        5. **targetId**: The unique identifier for the team that is receiving the points. This should be replaced with the actual team ID.

        6. **name**: A string representing the name of the point update. In this example, it is set to "TTP" (Team Tournament Point), but this can be customized to reflect the specific point update.

        7. **description**: A brief description of the point update. For instance, "Team Tournament Point" provides context about what the points are related to.

        8. **type**: Indicates the category or platform for the points. For this request, it is set to "platform," but could represent different contexts as necessary.

        9. **action**: Defines the action being taken with respect to the points. It is set to "award" here, indicating that points are being given to the team.

        10. **rate**: Specifies the rate or multiplier for the points being awarded. In this example, the rate is set to 1.

        11. **amount**: Represents the total points being awarded to the team. In this case, it is set to 5 points.

        ### Notes
        - Ensure that the values for `sessionId`, `accountId`, `pointId`, `targetId`, and other fields are correctly populated before making the request.
        - The endpoint is designed for updating team points effectively based on the provided parameters.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                pointId: pointId
                targetType: teamId
                targetId: teamId
                name: TTP
                description: Team Tournament Point
                type: platform
                action: award
                rate: 1
                amount: 5
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/point/get:
    get:
      tags:
        - UtilityPoint
      summary: Utility - Point - Get Neutral Logs
      description: |-
        ### Endpoint: Utility - Point - Get Neutral Logs

        #### Request Method
        - **Method**: `GET`
          - This endpoint uses the GET method to request data from the server.

        #### Request URL
        - **URL**: `http://localhost:3000/api/utility/point/get/?log=category&category=neutrals&sessionId=sessionId&accountId=accountId`
          - This is the endpoint to retrieve neutral logs. It includes query parameters for filtering the logs.

        #### Query Parameters
        - **log**: 
          - This parameter indicates the type of log being requested, which is set as "category".
          
        - **category**: 
          - This specifies the category of logs to retrieve. In this case, it is set to "neutrals". This will filter the logs to only include those categorized as neutrals.

        - **sessionId**: 
          - This is a placeholder for the session ID. It is used to uniquely identify a user session. The actual session ID should be provided when making the request.

        - **accountId**: 
          - This is a placeholder for the account ID. It is used to specify which user's logs are being requested. The actual account ID should be provided when making the request.

        #### Authentication
        - **Auth Type**: `Bearer`
          - This endpoint requires authentication using a Bearer token. 

        - **Bearer Token**: 
          - **Key**: `token`
          - **Value**: `BearerToken`
          - **Type**: `string`
            - The user must include a Bearer token in the request header for authorization. The actual token should be substituted for "BearerToken" when making the request.

        #### Headers
        - **Headers**: 
          - An empty header object is present but it's disabled. No additional headers are required for this endpoint.

        #### Request Body
        - **Body**: 
          - **Mode**: `raw`
          - **Raw**: `""`
            - The body is empty for this GET request, as there is no need to send any additional data in the request body.

        Overall, this endpoint allows users to retrieve logs categorized as neutral by providing necessary parameters and authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: log
          in: query
          schema:
            type: string
          example: category
        - name: category
          in: query
          schema:
            type: string
          example: neutrals
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/point/all:
    get:
      tags:
        - UtilityPoint
      summary: Utility - Point - Get All
      description: |-
        ### Endpoint: Utility - Point - Get All

        #### Authentication
        - **Type**: Bearer Token
          - **Key**: `token`
          - **Value**: `BearerToken`
          - **Type**: string  
          This section requires a bearer token for authorization. Users need to replace `BearerToken` with a valid token to access the endpoint.

        #### Request Method
        - **Method**: GET  
          This endpoint utilizes the GET HTTP method to retrieve data.

        #### URL
        - **URL**: `http://localhost:3000/api/utility/point/all/?sessionId=sessionId&accountId=accountId`  
          This is the endpoint URL where the request will be sent. It contains query parameters:
          - **sessionId**: Replace `sessionId` with the actual session ID to identify the user's session.
          - **accountId**: Replace `accountId` with the required account ID to specify which account's data to retrieve.

        #### Headers
        - **Headers**:  
          - **Key**: (not set)  
          - **Value**: (not set)  
          - **Type**: default  
          - **Disabled**: true  
          This section shows a placeholder for additional headers which are currently not set and are disabled. Users can include any necessary headers if required by the API.

        #### Body
        - **Body**:  
          - **Mode**: raw  
          - **Raw**: (empty)  
          This endpoint does not require a request body. The body is set to raw mode but is empty since no data needs to be sent with the request.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/point/delete:
    post:
      tags:
        - UtilityPoint
      summary: Utility - Point - Delete
      description: |-
        ### Description of Each Data in Endpoint

        - **name**: This is the identifier for the API request, which indicates that this endpoint is for deleting a utility point.

        - **request**: Contains the details of the API request configuration.

          - **auth**: Specifies the authentication method used for the request.
          
            - **type**: Indicates the type of authentication. In this case, it's 'bearer', meaning a token is required for access.
          
            - **bearer**: Contains the details of the bearer token required for authentication.
          
              - **key**: The name for the token, here it is labeled as "token".
              
              - **value**: Represents the actual variable that should be replaced with a session ID, signifying user authentication.
              
              - **type**: Defines the type of data for this token, which is a string.

          - **method**: Specifies the HTTP method used for the request. It is 'POST', indicating that data will be sent to the server for processing.

          - **url**: The endpoint URL where the API request is targeted. In this case, it's `http://localhost:3000/api/utility/point/delete`, a local server address pointing to the utility point deletion endpoint.

          - **headers**: A collection of additional information sent with the request. Currently, it's specified as an empty header, which means no additional headers are included. The header is marked as disabled.

          - **body**: This section contains the data sent in the request.
          
            - **mode**: Specifies how the body of the request is formatted. It's set to 'raw', indicating that the body contains a raw JSON string.
            
            - **raw**: This is the actual content of the request body in JSON format. It includes:
            
              - **sessionId**: This should be replaced with the actual session ID for the user making the request.
              
              - **accountId**: Represents the unique identifier for the account associated with the utility point to be deleted.
              
              - **pointId**: Refers to the specific identifier for the utility point that is to be removed from the system.

        This detailed description provides clarity on the purpose and structure of the request to ensure proper usage in the API collection.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"pointId\":\"pointId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/token/create:
    post:
      tags:
        - UtilityToken
      summary: Utility - Token - Create for Team
      description: |-
        {
          "description": {
            "name": "Utility - Token - Create for Team": "This is the title of the API request, indicating that it is used to create a token for a specific team within the utility service.",
            "request": {
              "auth": {
                "type": "bearer": "This indicates that the request uses Bearer Token authentication, which requires a token for authentication.",
                "bearer": [
                  {
                    "key": "token": "The key under which the token is stored in the request.",
                    "value": "BearerToken": "This specific value should be replaced with the actual bearer token required to authorize the request.",
                    "type": "string": "The data type of the token, which is a string."
                  }
                ]
              },
              "method": "POST": "This indicates that the request type is POST, commonly used for sending data to create a new resource.",
              "url": "http://localhost:3000/api/utility/token/create": "This is the endpoint URL where the API request is sent to create a token for a team.",
              "headers": [
                {
                  "key": "": "This field is currently empty and indicates that no additional headers are being passed in the request.",
                  "value": "": "The value associated with the header key, which is empty in this case.",
                  "type": "default": "This indicates that the header type is the default type.",
                  "disabled": true: "This means that the header is currently disabled and will not be included in the request."
                }
              ],
              "body": {
                "mode": "raw": "This indicates that the body of the request is raw data.",
                "raw": "{\n    \"sessionId\": \"sessionId\",\n    \"accountId\": \"accountId\",\n    \"targetType\": \"teamId\",\n    \"targetId\": \"teamId\",\n    \"name\": \"BPT\",\n    \"description\": \"Beladed Platform Token\",\n    \"type\": \"platform\",\n    \"action\": \"sell\",\n    \"rate\": 1,\n    \"amount\": 13\n}": "This is the actual JSON payload being sent in the request body. It contains various parameters including session ID, account ID, target type, target ID, token name, description, type of token, action to be performed, and the rate and amount associated with the token.",
                "options": {
                  "raw": {
                    "language": "json": "This specifies that the raw data being sent is in JSON format."
                  }
                }
              }
            }
          }
        }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                targetType: teamId
                targetId: teamId
                name: BPT
                description: Beladed Platform Token
                type: platform
                action: sell
                rate: 1
                amount: 13
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/token/createBulk:
    post:
      tags:
        - UtilityToken
      summary: Utility - Token - Create Bulk for User
      description: |-
        ### Endpoint: Create Bulk Token for User

        #### Overview
        This endpoint allows the creation of multiple tokens in bulk for a specified user. The request needs to include authentication via a bearer token and the details of the tokens to be created.

        #### Request Details

        - **Auth**
          - **Type**: Bearer
            - This indicates that authorization is done using a bearer token.
          - **Bearer Token**: 
            - **Key**: token
            - **Value**: BearerToken
              - Replace "BearerToken" with the actual token value for authentication.
            - **Type**: string

        - **Method**: POST
          - This HTTP method is used to send data to the server for processing.

        - **URL**: 
          - `http://localhost:3000/api/utility/token/createBulk`
            - This is the endpoint where the request should be sent.

        - **Headers**: 
          - Currently, there are no custom headers included in the request (disabled option).

        - **Body**:
          - **Mode**: raw
            - The body type is raw JSON data.
          - **Raw Data**:
            - A JSON object containing the following attributes:
              - **sessionId**: 
                - A unique identifier for the session. 
                - Replace with an actual session ID.
              - **accountId**: 
                - A unique identifier for the account the tokens are being created for.
                - Replace with the actual account ID.
              - **list**: 
                - An array of token objects that specify details for each token to be created. Each object in the list contains:
                  - **targetType**: 
                    - Specifies the type of target (e.g., teamId).
                  - **targetId**: 
                    - The identifier of the target (corresponding to the type specified).
                  - **name**: 
                    - The name of the token.
                  - **description**: 
                    - Provides a brief description of what the token represents.
                  - **type**: 
                    - Indicates the platform type (e.g., platform).
                  - **action**: 
                    - The action that can be performed with the token (e.g., sell).
                  - **rate**: 
                    - The rate at which the token is valued.
                  - **amount**: 
                    - The total amount of tokens to be created.

        #### Example Body Structure
        ```json
        {
            "sessionId": "sessionId",
            "accountId": "accountId",
            "list": [
                {
                    "targetType": "teamId",
                    "targetId": "teamId",
                    "name": "BPT",
                    "description": "Beladed Platform Token",
                    "type": "platform",
                    "action": "sell",
                    "rate": 1,
                    "amount": 13
                },
                {
                    "targetType": "teamId",
                    "targetId": "teamId",
                    "name": "BPT",
                    "description": "Beladed Platform Token",
                    "type": "platform",
                    "action": "sell",
                    "rate": 1,
                    "amount": 13
                }
            ]
        }
        ```

        ### Notes
        Make sure to replace the placeholder values (`sessionId`, `accountId`, `teamId`, etc.) with actual data before making the request. The response from the server will indicate whether the tokens were successfully created or if any errors occurred.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                list:
                  - targetType: teamId
                    targetId: teamId
                    name: BPT
                    description: Beladed Platform Token
                    type: platform
                    action: sell
                    rate: 1
                    amount: 13
                  - targetType: teamId
                    targetId: teamId
                    name: BPT
                    description: Beladed Platform Token
                    type: platform
                    action: sell
                    rate: 1
                    amount: 13
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/token/convert:
    post:
      tags:
        - UtilityToken
      summary: Utility - Token - Convert Token
      description: |-
        ### Endpoint Description: Utility - Token - Convert Token

        #### Request Method
        - **Method**: POST
          - This endpoint requires a POST request to convert tokens.

        #### Request URL
        - **URL**: `http://localhost:3000/api/utility/token/convert`
          - The endpoint is accessed at the specified URL on a local server.

        #### Authentication
        - **Auth Type**: Bearer Token
          - This endpoint requires bearer token authentication.
          - **Token**: The bearer token is expected in the request header for authorization.
          - **Key**: `token`
            - Represents the authentication token.
          - **Value**: `BearerToken`
            - Replace this placeholder with the actual token needed for authentication.
          - **Type**: string

        #### Headers
        - **Header Key**: `Client-UUID`
          - This header is used to identify the client making the request.
          - **Value**: `ClientUUID`
            - Replace this placeholder with the actual UUID of the client.
          - **Type**: default

        #### Request Body
        - **Body Mode**: Raw
          - The request body must be sent in raw format as a JSON object.
          
        - **Raw Body Content**:
          - ```json
            {
                "sessionId": "sessionId",
                "accountId": "accountId",
                "amount": 10,
                "rate": 1,
                "type": "platform",
                "target": "crypto",
                "toType": "platform"
            }
            ```

          - **Fields**:
            - **sessionId**: Represents the unique identifier for the session in which the token conversion is taking place. Replace `sessionId` with the actual session ID.
            
            - **accountId**: Represents the unique identifier of the account that is performing the conversion. Replace `accountId` with the actual account ID.
            
            - **amount**: The number of tokens to convert. This is a numerical value; in this example, it is set to `10`.
            
            - **rate**: The conversion rate of the tokens. In this example, it is set to `1`, which can be adjusted based on the conversion policy.
            
            - **type**: Indicates the current type of the token being converted. In this example, it is set to `platform`, which should be updated based on the token type you are working with.
            
            - **target**: Specifies the target currency or token type that the conversion will be performed to. In this example, it is set to `crypto`.
            
            - **toType**: Indicates the final type of the token after conversion. In this example, it is also set to `platform`.

        #### Notes
        - Ensure that all placeholder values (like `BearerToken`, `ClientUUID`, `sessionId`, and `accountId`) are replaced with valid data when making the request.
        - The response from this endpoint will typically provide information about the success or failure of the token conversion operation.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                amount: 10
                rate: 1
                type: platform
                target: crypto
                toType: platform
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/token/update:
    put:
      tags:
        - UtilityToken
      summary: Utility - Token - Update Token for Team
      description: |-
        ### Utility - Token - Update Token for Team

        This endpoint is designed to update a token for a specific team within the utility service. Below is a detailed description of the data involved in the request.

        #### Request Method
        - **Method**: PUT
          - This method is used to send data to the server to update an existing resource.

        #### Request URL
        - **URL**: `http://localhost:3000/api/utility/token/update`
          - This is the endpoint where the PUT request is sent. It updates the token for the specified team.

        #### Authentication
        - **Auth Type**: Bearer
          - This type of authentication requires a bearer token to be included in the request. It verifies the identity of the user making the request.

          - **Bearer Token**:
            - **Key**: `token`
            - **Value**: `BearerToken`
              - A placeholder for the actual bearer token that grants access to the API.
            - **Type**: string
              - This is the data type of the token, which is sent as a string.

        #### Headers
        - **Header**: `Client-UUID`
          - **Key**: `Client-UUID`
            - A unique identifier for the client making the request.
          - **Value**: `ClientUUID`
            - A placeholder for the actual Client UUID value.
          - **Type**: default
            - Indicates that this is a standard HTTP header.

        #### Request Body
        - **Body Mode**: Raw
          - This indicates that the body of the request is sent as raw text.

        - **Body Content**: 
        ```json
        {
            "sessionId": "sessionId",
            "accountId": "accountId",
            "tokenId": "tokenId",
            "targetType": "teamId",
            "targetId": "teamId",
            "name": "BPT",
            "type": "platform",
            "action": "buy",
            "amount": 1000
        }
        ```
          - **sessionId**: `sessionId`
            - A placeholder for the session identifier through which the user is authenticated.
          
          - **accountId**: `accountId`
            - A placeholder representing the account that the token is associated with.

          - **tokenId**: `tokenId`
            - A placeholder for the ID of the token to be updated.

          - **targetType**: `teamId`
            - Specifies the type of the target, in this case, it indicates that the target is a team.

          - **targetId**: `teamId`
            - A placeholder for the ID of the team for which the token is being updated.

          - **name**: `BPT`
            - A placeholder for the name of the token. In this example, it is set to "BPT".

          - **type**: `platform`
            - Defines the type of the token being updated. Here it is specified as "platform".

          - **action**: `buy`
            - The action associated with the token update; in this case, it is set to "buy".

          - **amount**: `1000`
            - Indicates the amount related to the action. Here, it is set to 1000. 

        #### Options
        - **Language**: json
          - This indicates that the raw body content is in JSON format, which is the expected format for this API endpoint.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                tokenId: tokenId
                targetType: teamId
                targetId: teamId
                name: BPT
                type: platform
                action: buy
                amount: 1000
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/token/get:
    get:
      tags:
        - UtilityToken
      summary: Utility - Token - Get Neutral Logs
      description: |-
        ### Utility - Token - Get Neutral Logs

        #### Request Details:

        - **Authentication**: This endpoint requires authentication using a Bearer token.
          - **Key**: `token` - This is the identifier for the authentication method.
          - **Value**: `BearerToken` - This is where the actual Bearer token should be provided, replacing "BearerToken" with the valid token string.
          - **Type**: `string` - This denotes that the token should be formatted as a string.

        - **Method**: `GET` - This indicates that the request is using the GET method to retrieve data from the server.

        - **URL**: This is the endpoint URL where the request will be sent. It uses query parameters to filter the logs being requested:
          - **Base URL**: `http://localhost:3000/api/utility/token/get/`
          - **Query Parameters**:
            - `log`: Specifies the log type to fetch; in this case, it is set to `category`.
            - `category`: This specifically identifies the category of logs desired, which is set to `neutrals`.
            - `sessionId`: This parameter should contain the unique session identifier to filter logs related to a particular session.
            - `accountId`: This parameter should contain the account identifier to filter logs pertaining to a specific account.

        - **Headers**: There is a header section included, but it is currently disabled and does not contain any keys or values.
          - **Key**: is empty.
          - **Value**: is empty.
          - **Type**: Default - Indicates the type of header being used (none in this case).
          - **Disabled**: true - This means that the header is not active in the request.

        - **Body**: 
          - **Mode**: `raw` - Indicates that the body will be sent in raw format.
          - **Raw**: Currently no data is included in the body for this GET request, as it typically does not require a request body.
      security:
        - bearerAuth: []
      parameters:
        - name: log
          in: query
          schema:
            type: string
          example: category
        - name: category
          in: query
          schema:
            type: string
          example: neutrals
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/token/all:
    get:
      tags:
        - UtilityToken
      summary: Utility - Token - Get All
      description: |-
        {
          "name": "Utility - Token - Get All",
          "description": "This endpoint is used to retrieve all token information associated with a given session and account. It supports authentication via a bearer token that must be included in the request header. The API call is made using the GET method, indicating that it is intended for data retrieval without side effects. The URL for the request includes two query parameters: sessionId and accountId, which are required to specify the session and account whose tokens are being requested. The request does not include any additional headers or body content since it solely relies on the URL parameters and the authentication token."
        }
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/utility/token/delete:
    post:
      tags:
        - UtilityToken
      summary: Utility - Token - Delete
      description: |-
        ### Endpoint Description: Utility - Token - Delete

        - **Name**: Utility - Token - Delete  
          This is the designation for the operation that handles the deletion of a token related to a user session.

        - **Request**: This section details how to set up the request to the server.

          - **Auth**:  
            Specifies the authentication method required to access the endpoint.
            
            - **Type**: Bearer  
              Indicates that the authentication uses a bearer token.

            - **Bearer**: Contains the necessary token information.  
              - **Key**: `token`  
                This is the identifier for the authentication token.
              - **Value**: `sessionId`  
                Represents the actual session identifier used to authenticate the request.
              - **Type**: string  
                Specifies that the value provided should be a string.

          - **Method**: POST  
            This shows that the request method used to interact with the endpoint is POST, which is typically used to submit data to the server.

          - **URL**: `http://localhost:3000/api/utility/token/delete`  
            This is the address of the API endpoint where the deletion request is sent. In this case, it targets the local server.

          - **Headers**:  
            An array of headers to be sent with the request.
            - **Key**: (Empty)  
              There are no specific headers set in this array.
            - **Value**: (Empty)  
              There are no values assigned as the key is empty.
            - **Type**: default  
              This indicates the standard type of header, but as there are no headers, it is currently disabled.

          - **Body**:  
            This section contains the data payload sent with the request. The body is formatted in raw JSON format.

            - **Mode**: raw  
              Indicates that the body content is being sent as raw data.

            - **Raw**:  
              This is the JSON object that will be transmitted in the request body.
              ```json
              {
                "sessionId": "sessionId",
                "accountId": "accountId",
                "tokenId": "tokenId"
              }
              ```
              - **sessionId**: A string representing the identifier for the session from which the token should be deleted.
              - **accountId**: A string representing the unique identifier of the user account associated with the session.
              - **tokenId**: A string that denotes the specific token that is to be deleted from the user's session.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"tokenId\":\"tokenId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/category/create:
    post:
      tags:
        - VideoCategory
      summary: Video - Category - Create
      description: |-
        ### Video - Category - Create

        - **Name**: This is the title of the API request, which describes the purpose of the endpoint - creating a video category.

        - **Request**: This section contains all the details required to make the API call.

          - **Auth**: This specifies the authentication method used for the request.
            - **Type**: Indicates that bearer token authentication is required.
            - **Bearer**: This is an array that includes:
              - **Key**: This is a label for the token; in this case, it is simply "token."
              - **Value**: This represents the actual authentication token that must be provided, formatted as "BearerToken."
              - **Type**: Defines the data type of the key. Here, it is a string.

          - **Method**: This specifies the HTTP method used for the API call. In this instance, it is a POST request, which is commonly used to create new resources.

          - **URL**: This is the endpoint where the API request will be sent. Here, it is pointing to `http://localhost:3000/api/video/category/create`, indicating that the request is being sent to a local server.

          - **Headers**: Headers may contain additional information with the request. In this example, there are no custom headers provided, and the header section is disabled.

          - **Body**: This is the main content of the request, which contains the data you want to send.
            - **Mode**: Indicates the format of the body; it is set to "raw," meaning we are sending a raw data payload.
            - **Raw**: This is the actual data being sent in JSON format. The content includes:
              - **sessionId**: A unique identifier for the session, placeholder is provided.
              - **accountId**: A unique identifier for the user account, placeholder is provided.
              - **name**: This specifies the name of the category being created, which in this example is "My Second Category."
              - **description**: A textual description of the category, detailed as "This category is my second category."
              - **tags**: Keywords associated with the category, in this case, "second" and "category."
              - **searchType**: Describes the type of content the category is related to; here, it is specified as "Game."
              - **isEnabled**: A boolean value indicating whether the category is enabled (`true` means it is active).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: My Second Category
                description: This category is my second category
                tags: second,category
                searchType: Game
                isEnabled: true
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/category/update:
    put:
      tags:
        - VideoCategory
      summary: Video - Category - Update
      description: |-
        ### Video - Category - Update

        This API endpoint allows users to update an existing video category.

        #### Request Details:

        - **Authentication:**
          - **Type:** Bearer Token
          - **Description:** Users must provide a valid bearer token for authentication. The token is included in the request header and is crucial for authorizing access to the API.
          
        - **Method:** 
          - **Description:** This endpoint accepts the `PUT` method, which is used to update the information of an existing video category.

        - **URL:** 
          - **Description:** The endpoint for this request is `http://localhost:3000/api/video/category/update`. This URL should be accessed to perform the update operation.

        - **Headers:**
          - **Client-UUID:**
            - **Description:** This header must include a unique identifier for the client making the request. It helps distinguish between different clients or applications using the API.

        #### Request Body:

        The request body must be sent in JSON format and includes the following fields:

        - **categoryId:** 
          - **Description:** The unique identifier of the category that is being updated. This field is required to specify which category is targeted for the update.

        - **sessionId:** 
          - **Description:** A unique identifier for the current session. This can be used for tracking or validation purposes.

        - **accountId:** 
          - **Description:** The identifier for the account associated with the request. This field is used to link the category update to a specific user account.

        - **name:** 
          - **Description:** The new name for the video category. It should accurately represent the category’s content and purpose.

        - **description:** 
          - **Description:** A brief description of the category. This field provides additional context or details about what the category represents.

        - **tags:** 
          - **Description:** A comma-separated list of tags associated with the category. Tags help in categorizing and searching for video content effectively.

        - **searchType:** 
          - **Description:** Indicates the type of search being performed for this category. This could refer to the type of content (e.g., Game).

        - **isEnabled:** 
          - **Description:** A boolean value that specifies whether the category is enabled or disabled. Setting this to `true` means the category is active and can be used; `false` disables it.

        Make sure to populate the fields with the appropriate values to successfully perform the category update operation.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"categoryId\":\"categoryId\",\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second Category 2.0\",\"description\":\"This category is my second category\",\"tags\":\"second,category\",\"searchType\":\"Game\",\"isEnabled\":true}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/category/get:
    get:
      tags:
        - VideoCategory
      summary: Video - Category - Get
      description: |-
        {
          "name": "Video - Category - Get",
          "description": {
            "endpoint": "This is the GET endpoint used to retrieve video details based on a specified category.",
            
            "auth": {
              "type": "bearer": "This indicates that authentication is required via a bearer token. A valid token must be supplied in the request for successful access.",
              
              "bearer": {
                "key": "token": "This is the key used to pass the authentication token.",
                
                "value": "BearerToken": "This placeholder represents the actual bearer token that must be included in the request. Replace 'BearerToken' with your valid token.",
                
                "type": "string": "This indicates that the value of the token should be formatted as a string."
              }
            },
            
            "method": "GET": "This specifies that the request method to be used is GET, which is typically used to retrieve data from a specified resource.",
            
            "url": "http://localhost:3000/api/video/category/get/?categoryId=categoryId&sessionId=sessionId&accountId=accountId": "This is the URL to access the endpoint. It includes three query parameters: 'categoryId', 'sessionId', and 'accountId'. Replace 'categoryId', 'sessionId', and 'accountId' with the actual values to specify the category of the videos you wish to retrieve, as well as the session and account identifiers.",
            
            "headers": [
              {
                "key": "": "This field is currently empty, indicating that no custom headers are required for this request.",
                
                "value": "": "This field is empty, as there are no custom values to provide in the header.",
                
                "type": "default": "Specifies that the header type is default. Note that this header is disabled and will not be included in the request."
              }
            ],
            
            "body": {
              "mode": "raw": "This indicates that the body of the request is not used since it's a GET method, which typically does not require a body.",
              
              "raw": "": "This field is empty as there is no raw data to send in the body for a GET request."
            }
          }
        }
      security:
        - bearerAuth: []
      parameters:
        - name: categoryId
          in: query
          schema:
            type: string
          example: categoryId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/category/all:
    get:
      tags:
        - VideoCategory
      summary: Video - Category - Get All - Tournament SubCategory
      description: |-
        ### Endpoint Description: Video - Category - Get All - Tournament SubCategory

        **Name:**  
        This describes the purpose of the API call, which retrieves all videos in a specified category and subcategory related to tournaments.

        **Request:**

        - **Auth:**
          - **Type:** Bearer
            - This specifies that the authentication method used is a Bearer token, which is a common way to ensure secure access to APIs.
          - **Bearer:**
            - **Key:** Token
              - This is the name given to the Bearer token required for authorization.
            - **Value:** BearerToken
              - This is a placeholder for the actual token value used for authentication. Users will need to replace this with their valid token.
            - **Type:** String
              - Indicates that the value of the token is a string data type.

        - **Method:** GET
          - This indicates that the HTTP method used for this request is GET, which is used to retrieve data from the server.

        - **URL:**  
          This is the endpoint used to get the video data. 
          ```
          http://localhost:3000/api/video/category/all/?sessionId=sessionId&accountId=accountId&searchType=Tournament&category=Dance&subCategory=Bboy%20Dance%20Battle
          ```
          - The URL consists of several query parameters:
            - **sessionId:** The ID representing the user's current session.
            - **accountId:** The ID associated with the user's account.
            - **searchType:** The type of search being conducted, which in this case is set to "Tournament".
            - **category:** The overall category of the videos, which is set to "Dance".
            - **subCategory:** A more specific subgroup of the selected category, here defined as "Bboy Dance Battle".

        - **Headers:**
          - This section shows any additional HTTP headers that might be sent with the request.
          - Currently, there is an empty header entry that is disabled, indicating no additional headers are required.

        - **Body:**
          - **Mode:** Raw
            - The body is in raw format, which means that there are no data parameters being sent with the request.
          - **Raw:** 
            - An empty string is provided here since this GET request does not require a body.

        ### Summary
        This endpoint allows users to fetch all videos related to a specific tournament subcategory under the broader category of dance. Authentication is necessary via a Bearer token, and the request requires various identifiers to filter the results accordingly.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: searchType
          in: query
          schema:
            type: string
          example: Tournament
        - name: category
          in: query
          schema:
            type: string
          example: Dance
        - name: subCategory
          in: query
          schema:
            type: string
          example: Bboy%20Dance%20Battle
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/category/delete:
    post:
      tags:
        - VideoCategory
      summary: Video - Category - Delete
      description: |
        ### Video - Category - Delete

        This endpoint is used to delete a specific category of videos associated with a user's account. Below is a detailed description of each data element involved in this API request:

        - **name**: This indicates the name of the API request. In this case, it is "Video - Category - Delete", which clearly describes the action being performed.

        - **request**: This section contains all the necessary information required to make the API call.

          - **auth**: This specifies the type of authentication to be used for the request. 

            - **type**: Indicates that the authentication type is "bearer", which means an authorization token is needed.
            
            - **bearer**: This is an array of objects that contains the details of the bearer token needed for authorization.
            
              - **key**: This specifies the name of the token. Here, it is labeled as "token".
              
              - **value**: This represents the value of the token that will be used for authentication. The placeholder "sessionId" indicates where the actual session ID should be provided.
              
              - **type**: This indicates the type of value, which is set as "string".

          - **method**: This indicates the HTTP method used for the request. In this case, it is a "POST" method, which is commonly used for actions that change the state on the server, such as deleting resources.

          - **url**: This is the endpoint URL where the request will be sent. The specified URL is "http://localhost:3000/api/video/category/delete", indicating that this API is hosted locally on port 3000.

          - **headers**: This section can include any additional headers that need to be sent with the request.

            - **key**: This is a placeholder for any header key that may be needed. Currently, it is empty as no custom headers are required.
            
            - **value**: This is the corresponding value for the header key, which is also empty.
            
            - **type**: This indicates the type of header. It is set as "default".
            
            - **disabled**: This is a boolean that indicates whether this header is active or not. Here, it is set to true, meaning this header will not be sent in the request.

          - **body**: This part of the request contains the data that will be sent to the server.

            - **mode**: Specifies the format of the body content. It is set to "raw", indicating the body will contain a raw JSON string.
            
            - **raw**: This is the actual content sent in the request body. It includes three key-value pairs in JSON format:
            
              - **sessionId**: Placeholder for the ID of the session that is currently active for the user.
              
              - **accountId**: Placeholder for the unique identifier of the user's account from which the category should be deleted.
              
              - **categoryId**: Placeholder for the unique identifier of the video category that is to be deleted.

        This API request allows users to specify which video category they wish to delete by providing the relevant session ID, account ID, and category ID.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"categoryId\":\"categoryId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/channel/create:
    post:
      tags:
        - VideoChannel
      summary: Video - Channel - Create
      description: |-
        ### Endpoint: Video - Channel - Create

        This endpoint allows users to create a new video channel with various customizable settings. Below is a detailed description of each data field in the request body.

        #### Request Body Fields:

        - **sessionId**: Represents the unique identifier for the current user session. This is used to track the user's activity and ensure that actions are associated with the correct session.

        - **accountId**: This is the unique identifier for the user's account. It links the channel to the specific account of the user creating it.

        - **name**: The name of the channel. It is how the channel will be identified and searched. For example, "Fortune".

        - **description**: A brief description of the channel, providing insights into the content or the purpose of the channel. For example, "This channel is by Fortune Vieyra".

        - **tags**: A comma-separated list of keywords associated with the channel. Tags help categorize the channel and make it easier for users to find content, such as "second,channel".

        - **profilePhotoUrl**: The URL link to the profile photo of the channel. This image represents the channel visually across the platform. For example, "https://example.com/profile.jpg".

        - **coverPhotoUrl**: The URL link to the cover photo of the channel. This is the larger image that appears at the top of the channel page, providing a visual identity. For example, "https://example.com/cover.jpg".

        - **minimumTipAmount**: The minimum amount that a viewer can tip the channel creator. This is defined in the currency set by the platform. For example, the minimum tip could be 10 units.

        - **unlockAmount**: The amount required to unlock specific content or features in the channel. For example, an unlock amount of 1 unit might be charged to access exclusive videos.

        - **category**: The main category that the channel falls under. This helps users navigate channels by content type. An example would be "General".

        - **subCategory**: A more specific classification within the main category. This helps further refine the channel’s classification, such as "Specific".

        - **searchType**: Specifies the type of content that can be searched within the channel. For example, "Game" indicates that the channel may focus on gaming-related content.

        - **isEnabled**: A boolean value indicating whether the channel is currently active and visible to users. If set to true, the channel is enabled.

        - **isChannelPrivate**: A boolean value that specifies whether the channel is private and only accessible to selected viewers. If true, only invited users can view the channel.

        - **isTournamentOnly**: A boolean that indicates if the channel is exclusively for tournaments. If set to true, only tournament-related content will be available.

        - **isChannelDefault**: A boolean value indicating whether this channel should be set as the default channel. If true, it may be the first option users see when accessing video channels.

        - **isPreLiveVideoAds**: A boolean indicating whether ads are shown before the live video starts. If true, viewers will see ads prior to the content.

        - **isPostLiveVideoAds**: A boolean indicating whether ads are shown after the live video ends. If true, viewers will see ads after the content concludes.

        - **breakPreLiveVideoUrl**: URL to a video that will be played during breaks before the live video starts. This content can keep viewers engaged until the live stream begins.

        - **breakLivePauseVideoUrl**: URL to a video that will play if the live stream is paused. This ensures viewers have something to watch rather than a blank screen.

        - **breakPostLiveVideoUrl**: URL to a video that will play after the live stream ends. This could contain highlights or additional content related to the channel.

        This collection allows for detailed channel creation, catering to various aspects of user engagement and content management.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                name: Fortune
                description: This channel is by Fortune Vieyra
                tags: second,channel
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                unlockAmount: 1
                category: General
                subCategory: Specific
                searchType: Game
                isEnabled: true
                isChannelPrivate: true
                isTournamentOnly: false
                isChannelDefault: true
                isPreLiveVideoAds: true
                isPostLiveVideoAds: true
                breakPreLiveVideoUrl: https://example.com/break-pre-live.mp4
                breakLivePauseVideoUrl: https://example.com/break-paused-live.mp4
                breakPostLiveVideoUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/channel/update:
    put:
      tags:
        - VideoChannel
      summary: Video - Channel - Update
      description: |-
        ### Endpoint: Video - Channel - Update

        #### Auth
        - **Type**: Bearer
          - **Key**: `token`
            - **Value**: `BearerToken` - This is the authorization token required to access the endpoint.

        #### Method
        - **Type**: PUT - This HTTP method is used to update an existing resource on the server.

        #### URL
        - **Endpoint**: `http://localhost:3000/api/video/channel/update` - This is the URL where the request will be sent to update the video channel.

        #### Headers
        - **Client-UUID**
          - **Key**: `Client-UUID` - A unique identifier for the client making the request.
          - **Value**: `ClientUUID` - This represents the UUID associated with the client.

        #### Body
        - **Mode**: Raw - The body of the request is sent in raw format.
        - **Raw Content**: This is a JSON object that must be sent in the request body. Below are the individual fields:

          - **channelId**: 
            - A unique identifier for the channel to be updated.

          - **sessionId**: 
            - A unique identifier for the user session.

          - **accountId**: 
            - A unique identifier for the account associated with the channel.

          - **name**: 
            - The name of the channel (e.g., "MyNikeChannel").

          - **description**: 
            - A brief description of the channel (e.g., "This channel is my second channel").

          - **tags**: 
            - Comma-separated list of tags associated with the channel (e.g., "second,channel").

          - **profilePhotoUrl**: 
            - A URL pointing to the profile photo for the channel (e.g., "https://example.com/profile.jpg").

          - **coverPhotoUrl**: 
            - A URL pointing to the cover photo for the channel (e.g., "https://example.com/cover.jpg").

          - **minimumTipAmount**: 
            - The minimum amount that can be tipped on the channel, specified in the relevant monetary unit (e.g., 10).

          - **unlockAmount**: 
            - The amount required to unlock specific content on the channel (e.g., 100).

          - **category**: 
            - The primary category for the channel (e.g., "General").

          - **subCategory**: 
            - A more detailed classification of the channel (e.g., "Specific").

          - **searchType**: 
            - The method or type of search associated with the channel (e.g., "Game").

          - **isEnabled**: 
            - A boolean value indicating if the channel is active (true) or not (false).

          - **isChannelPrivate**: 
            - A boolean that indicates whether the channel is private (true) or public (false).

          - **isTournamentOnly**: 
            - Indicates if the channel is exclusively for tournaments (true) or has other content (false).

          - **isChannelDefault**: 
            - A flag indicating if this is the default channel (true) or not (false).

          - **isPreLiveVideoAds**: 
            - Indicates whether pre-live video advertisements are enabled for the channel (true) or not (false).

          - **isPostLiveVideoAds**: 
            - Indicates whether post-live video advertisements are enabled for the channel (true) or not (false).

          - **breakPreLiveVideoUrl**: 
            - A URL for a video that plays during pre-live breaks (e.g., "https://example.com/break-pre-live.mp4").

          - **breakLivePauseVideoUrl**: 
            - A URL for a video that plays during live video pauses (e.g., "https://example.com/break-paused-live.mp4").

          - **breakPostLiveVideoUrl**: 
            - A URL for a video that plays after the live stream ends (e.g., "https://example.com/break-post-live.mp4"). 

        These fields collectively define the properties and configuration of the video channel to be updated in the system.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                channelId: channelId
                sessionId: sessionId
                accountId: accountId
                name: MyNikeChannel
                description: This channel is my second channel
                tags: second,channel
                profilePhotoUrl: https://example.com/profile.jpg
                coverPhotoUrl: https://example.com/cover.jpg
                minimumTipAmount: 10
                unlockAmount: 100
                category: General
                subCategory: Specific
                searchType: Game
                isEnabled: true
                isChannelPrivate: true
                isTournamentOnly: false
                isChannelDefault: true
                isPreLiveVideoAds: true
                isPostLiveVideoAds: true
                breakPreLiveVideoUrl: https://example.com/break-pre-live.mp4
                breakLivePauseVideoUrl: https://example.com/break-paused-live.mp4
                breakPostLiveVideoUrl: https://example.com/break-post-live.mp4
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/channel/get:
    get:
      tags:
        - VideoChannel
      summary: Video - Channel - Get
      description: |-
        {
          "description": {
            "name": "Video - Channel - Get": "This refers to the name of the API endpoint which retrieves video data associated with a specific channel.",
            
            "request": {
              "auth": {
                "type": "bearer": "This indicates that the API request uses Bearer authentication, requiring a token for authorization.",
                
                "bearer": [
                  {
                    "key": "token": "This represents the key used in the authorization header.",
                    "value": "BearerToken": "This placeholder indicates where the actual Bearer token should be provided for authentication.",
                    "type": "string": "This specifies that the value of the Bearer token is a string."
                  }
                ]
              },
              
              "method": "GET": "This indicates that the HTTP method used for the request is 'GET', which is used to retrieve data from the specified resource.",
              
              "url": "http://localhost:3000/api/video/channel/get/?channelId=channelId": "This is the endpoint URL where the request is sent. It includes a query parameter 'channelId', which should be replaced with the actual ID of the channel for which video information is being requested.",
              
              "headers": [
                {
                  "key": "": "This is an empty key indicating that no additional headers are being sent with the request.",
                  "value": "": "This is an empty value corresponding to the empty key, meaning no value is associated.",
                  "type": "default": "This indicates the type of header, which in this case is set to default, but is not actively used since headers are disabled.",
                  "disabled": true: "This indicates that the header is disabled and will not be included in the request."
                }
              ],
              
              "body": {
                "mode": "raw": "This specifies the mode of the body for the API request, indicating that the body content is sent in raw format.",
                
                "raw": "": "This placeholder denotes that the body of the request is empty, as the GET method does not typically require a body."
              }
            }
          }
        }
      security:
        - bearerAuth: []
      parameters:
        - name: channelId
          in: query
          schema:
            type: string
          example: channelId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/channel/all:
    get:
      tags:
        - VideoChannel
      summary: Video - Channel - Get All
      description: |-
        {
          "description": {
            "name": "Video - Channel - Get All",
            "request": {
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "BearerToken",
                    "type": "string"
                  }
                ]
              },
              "method": "GET",
              "url": "http://localhost:3000/api/video/channel/all/?accountId=accountId",
              "headers": [
                {
                  "key": "",
                  "value": "",
                  "type": "default",
                  "disabled": true
                }
              ],
              "body": {
                "mode": "raw",
                "raw": ""
              }
            }
          },
          "details": {
            "name": "This is the name of the API endpoint used to retrieve all video channels.",
            "auth": {
              "type": "bearer": "This indicates that the endpoint requires bearer token authentication.",
              "bearer": [
                {
                  "key": "token": "This is the key name for the authentication token.",
                  "value": "BearerToken": "This is a placeholder for the actual bearer token that should be used for authentication. Replace with a valid token.",
                  "type": "string": "This indicates that the value type is a string."
                }
              ]
            },
            "method": "GET": "This specifies that the request method is GET, meaning data will be retrieved from the server.",
            "url": "http://localhost:3000/api/video/channel/all/?accountId=accountId": "This is the endpoint URL that needs to be called to get all video channels. The 'accountId' parameter should be set to the actual account ID you want to query.",
            "headers": [
              {
                "key": "": "This is currently empty, indicating no specific header is required for this request.",
                "value": "": "This is also empty, as there are no header values set.",
                "type": "default": "This implies that the header type is a standard header.",
                "disabled": true: "This indicates that this header is currently disabled and will not be sent with the request."
              }
            ],
            "body": {
              "mode": "raw": "This indicates the format of the body data, which is set to raw.",
              "raw": "": "Since the request does not require a body for a GET request, this is left empty."
            }
          }
        }
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/channel/delete:
    post:
      tags:
        - VideoChannel
      summary: Video - Channel - Delete
      description: |-
        ### Description of Each Data in the Endpoint

        - **Name**: 
          - This represents the name of the API request, which is "Video - Channel - Delete". It indicates that this request is used to delete a channel associated with a video.

        - **Request**: 
          - This section contains details about how the request should be made.

          - **Auth**: 
            - This specifies the authentication type needed for the request. In this case, it is a bearer token, which is a type of access token used for authentication.

            - **Type**: 
              - This indicates that the authentication method is "bearer".

            - **Bearer**: 
              - This array holds the details of the token used for authentication. 

              - **Key**: 
                - This is a description of the item in the token, which is "token". 

              - **Value**: 
                - This is the actual value associated with the key, here it is "sessionId", which should be replaced with a valid session identifier.

              - **Type**: 
                - This indicates the data type of the value, which is a string.

          - **Method**: 
            - This indicates the HTTP method used for the request. It is set to "POST", which means data will be sent to the server to request the deletion of the channel.

          - **URL**: 
            - This is the endpoint where the request is sent. It points to "http://localhost:3000/api/video/channel/delete", which is a local server URL pointing to the delete channel functionality.

          - **Headers**: 
            - This section may contain additional headers for the request.

            - **Key**: 
              - Currently empty, indicating that no additional header is defined for this request.

            - **Value**: 
              - Also empty, as there are no associated values with the key.

            - **Type**: 
              - Set to "default", which implies a standard header is expected.

            - **Disabled**: 
              - This is a boolean value indicating whether the header is enabled or not. It is set to true, meaning this header will not be included in the request.

          - **Body**: 
            - This section defines the body of the request, which contains the data that will be sent to the server.

            - **Mode**: 
              - Indicating the format of the request body. It is set to "raw", meaning the data is sent in a raw format.

            - **Raw**: 
              - This is where the actual data to be sent is defined. The body consists of a JSON object with three key-value pairs:
              
              - **sessionId**: 
                - This key is meant to identify the user's session. It should be replaced with a valid session identifier when making a request.

              - **accountId**: 
                - This key represents the ID of the user's account. It requires a valid account identifier to specify which account is associated with the request.

              - **channelId**: 
                - This key is used to identify the specific channel that is to be deleted. It should be replaced with the relevant channel identifier when the request is made.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"channelId\":\"channelId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/connect/create:
    post:
      tags:
        - VideoConnect
      summary: Video - Connect - Create - ZhanqiTV
      description: |-
        ### API Endpoint Description: Video - Connect - Create - ZhanqiTV

        #### Request Information

        - **Method**: 
          - The HTTP method used for this request is POST. This method is typically used to send data to the server for the creation of resources or for actions that lead to changes on the server side.

        - **URL**: 
          - The request is sent to `http://localhost:3000/api/video/connect/create`, which indicates it is an API endpoint meant for creating a connection for video streaming.

        - **Headers**: 
          - **Content-Type**: Specifies that the data being sent in the request body is in JSON format.

        #### Request Body

        The body of the request includes two main sections: `options` and `stream`.

        1. **Options Section**:
           - This section includes various parameters needed for connecting to the video provider (ZhanqiTV).

           - **providerName**: 
             - Specifies the name of the video provider (in this case, "zhanqitv").
           
           - **providerId**: 
             - An identifier for the provider which can be used for tracking or management purposes.
           
           - **apiKey, apiSecret, apiClientId, authToken**: 
             - These fields are for authentication and authorization purposes and may be set to null if not required.
           
           - **server**: 
             - Indicates the server to be used for connection; can be null.
           
           - **rtmpUrl and streamKey**: 
             - These are used for RTMP streaming and can be set to null if not applicable.
           
           - **channelUrl**: 
             - The URL associated with the streaming channel; can be null.
           
           - **authUsername and authPassword**: 
             - Credentials for authenticated access (set to null if not required).
           
           - **uniqueKey**: 
             - A unique identifier for this connection instance.
           
           - **videoId, accountId, channelId, sessionId, streamId**: 
             - Identifiers for the video, account, channel, session, and stream, respectively.
           
           - **ipAddress**: 
             - Holds the IP address of the connection source (can be null).
           
           - **country and state**: 
             - Indicates the geographic area associated with the stream.
           
           - **title**: 
             - The title of the video stream.
           
           - **description**: 
             - A brief description of the video content.
           
           - **tags**: 
             - Comma-separated keywords related to the stream (for search optimization).

        2. **Stream Section**:
           - Contains information specific to the video stream.

           - **streamId**: 
             - Identifier for the stream.
           
           - **streamName**: 
             - A name given to the stream for identification.
           
           - **videoStatus**: 
             - The current status of the video (e.g., not ready).
           
           - **providerName**: 
             - The name of the provider (indicated again for clarity).
           
           - **providerUniqueId**: 
             - Unique identifier for the provider's stream.
           
           - **providerPlaybackUrl, providerStreamId, providerStreamKey, providerStreamUrl**: 
             - These are URLs and identifiers for accessing the stream across various protocols (RTMP and SRT).
           
           - **providerStreamData**: 
             - Contains detailed information about the stream, including various streaming protocols (RTMPS, SRT, WebRTC) and associated URLs.
           
           - **created and modified**: 
             - Timestamps indicating when the stream was created and last modified.
           
           - **meta**: 
             - This field includes additional metadata such as account ID, audio and video input names, cover photo URL, title, description, and video ID.
           
           - **recording**: 
             - Specifies recording settings such as mode and whether signed URLs are required.

        3. **Details Section**:
           - Provides further information and configuration related to the stream.

           - **accountId, sessionId, channelId, videoId, title, description, tags**: 
             - Relevant identifiers and details for the video stream.
           
           - **streamType**: 
             - Indicates the type of stream, whether it's Live or VOD.
           
           - **searchType**: 
             - Defines how the stream will be categorized in search queries (e.g., Game).
           
           - **started and paused**: 
             - Boolean flags indicating whether the stream has started or been paused.
           
           - **streamId**: 
             - Reiterated identifier for the stream context.
           
           - **channel**: 
             - The name of the channel broadcasting the stream.
           
           - **category and subCategory**: 
             - Information about the categorization of the stream.
           
           - **scheduled date and time**: 
             - Indicates when the stream is scheduled to take place.
           
           - **coverPhotoUrl**: 
             - URL for the cover photo associated with the stream.
           
           - **voteTokenQuantity, votingTimeReset, voteButtonQuantity**: 
             - Configuration settings related to viewer interactions and voting.
           
           - **tournament settings**: 
             - Configuration fields for enabling tournaments within the live stream.
           
           - **streamLocatorName and streamAssetName**: 
             - Names for easy identification of the stream and its associated assets.
           
           - **platformVideoIds**: 
             - Mapping of output video IDs to various social media and streaming platforms.
           
           - **platformEventIds**: 
             - Mapping of event IDs to various scheduling and event management platforms.
           
           - **primaryCameraName, primaryMicrophoneName, primarySpeakerName**: 
             - Names of the primary audio and video devices being used for the stream.
           
           - **additionalCameras**: 
             - List of additional cameras and microphones utilized during the stream.
           
           - **created and updated dates and times**: 
             - Timestamps for when the stream details were created and last updated.

        This summarization helps users understand the required and optional fields for making requests to create and manage video streams using the ZhanqiTV API.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"options\":{\n        \"providerName\": \"zhanqitv\",\n        \"providerId\": \"\",\n        \"apiKey\": null,\n        \"apiSecret\": null,\n        \"apiClientId\": null,\n        \"authToken\": null,\n        \"server\": null,\n        \"rtmpUrl\": null,\n        \"streamKey\": null,\n        \"channelUrl\": null,\n        \"authUsername\": null,\n        \"authPassword\": null,\n        \"uniqueKey\": \"uniqueKey\",\n        \"videoId\": \"videoId\",\n        \"accountId\": \"accountId\",\n        \"channelId\": \"channelId\",\n        \"sessionId\": \"sessionId\",\n        \"streamId\": \"streamId\",\n        \"ipAddress\": null,\n        \"country\": \"United States\",\n        \"state\": \"California\",\n        \"title\":\"Fortune''s Basketball Challenge\",\n        \"description\":\"Basketball game featuring amazing plays and challenges.\",\n        \"tags\":\"basketball,game,challenge\"\n    },\n    \"stream\": {\n        \"streamId\":\"streamId\",\n        \"streamName\":\"live-video-stream-7164b12d-1708817130231\",\n        \"uniqueKey\":\"uniqueKey\",\n        \"videoId\": \"videoId\",\n        \"accountId\": \"accountId\",\n        \"channelId\": \"channelId\",\n        \"sessionId\": \"sessionId\",\n        \"videoStatus\":\"notready\",\n        \"providerName\":\"cloudflare\",\n        \"providerUniqueId\":\"c3b3f93b0a7594f3db917d5f9a671351\",\n        \"providerPlaybackUrl\":\"\",\n        \"providerStreamId\":\"c3b3f93b0a7594f3db917d5f9a671351\",\n        \"providerStreamKey\":\"e0bb5fa14f7059bccfcef40d5dbe2283kc3b3f93b0a7594f3db917d5f9a671351\",\n        \"providerStreamUrl\":\"srt://live.cloudflare.com:778\",\n        \"providerStreamData\":{\"result\":{\"uid\":\"c3b3f93b0a7594f3db917d5f9a671351\",\"rtmps\":{\"url\":\"rtmps://live.cloudflare.com:443/live/\",\"streamKey\":\"e0bb5fa14f7059bccfcef40d5dbe2283kc3b3f93b0a7594f3db917d5f9a671351\"},\"rtmpsPlayback\":{\"url\":\"rtmps://live.cloudflare.com:443/live/\",\"streamKey\":\"af3d7056104ecfa601cc1d3e9aa07c3bkc3b3f93b0a7594f3db917d5f9a671351\"},\"srt\":{\"url\":\"srt://live.cloudflare.com:778\",\"streamId\":\"c3b3f93b0a7594f3db917d5f9a671351\",\"passphrase\":\"bc9be9fb5bfb73d0c0260d82e9e40434kc3b3f93b0a7594f3db917d5f9a671351\"},\"srtPlayback\":{\"url\":\"srt://live.cloudflare.com:778\",\"streamId\":\"playc3b3f93b0a7594f3db917d5f9a671351\",\"passphrase\":\"bc54e6ca94314ca15f5e04495ee2c20dkc3b3f93b0a7594f3db917d5f9a671351\"},\"webRTC\":{\"url\":\"https://customer-q9gw1dgorkl8h10h.cloudflarestream.com/1d9bfda169eb256cedc88b900e59fc01kc3b3f93b0a7594f3db917d5f9a671351/webRTC/publish\"},\"webRTCPlayback\":{\"url\":\"https://customer-q9gw1dgorkl8h10h.cloudflarestream.com/c3b3f93b0a7594f3db917d5f9a671351/webRTC/play\"},\"created\":\"2024-02-24T23:25:30.935251Z\",\"modified\":\"2024-02-24T23:25:30.935251Z\",\"meta\":{\"accountId\":\"de449412-4732-490f-a1d0-19ac7e96e7e6\",\"audioInputName\":\"My macBook Microphone\",\"channelId\":\"ee435434-e90f-4484-a3b3-63819dc539ef\",\"coverPhotoUrl\":\"basketball-cover-url.jpg\",\"description\":\"Basketball game featuring amazing plays and challenges.\",\"streamId\":\"c4d36b16-e5f3-4bb2-a1d5-334fcad9f08f\",\"title\":\"Fortune''s Basketball Challenge\",\"videoId\":\"133c4f1f-a914-4956-9f79-bc82a890361d\",\"videoInputName\":\"My MacBook Camera\"},\"defaultCreator\":\"7164b12d\",\"status\":null,\"recording\":{\"mode\":\"automatic\",\"requireSignedURLs\":false,\"allowedOrigins\":null},\"deleteRecordingAfterDays\":null},\"success\":true,\"errors\":[],\"messages\":[]},\n        \"createdDate\":\"2024-02-24\",\n        \"createdTime\":\"23:25:30\",\n        \"updatedDate\":\"2024-02-25\",\n        \"updatedTime\":\"01:14:26\",\n        \"deletedDate\":null,\n        \"deletedTime\":null\n    },\n    \"details\":{\n        \"accountId\":\"accountId\",\n        \"sessionId\":\"sessionId\",\n        \"channelId\":\"channelId\",\n        \"videoId\":\"videoId\",\n        \"title\":\"Fortune''s Basketball Challenge\",\n        \"description\":\"Basketball game featuring amazing plays and challenges.\",\n        \"tags\":\"basketball,game,challenge\",\n        \"streamType\":\"Live\",\n        \"searchType\":\"Game\",\n        \"started\":true,\n        \"startedOn\":\"2024-02-24T22:41:42.483Z\",\n        \"paused\":false,\n        \"pausedOn\":\"2024-02-24T22:41:42.483Z\",\n        \"stopped\":false,\n        \"stoppedOn\":null,\n        \"streamId\":\"streamId\",\n        \"channel\":\"Fortune''s Basketball Channel\",\n        \"category\":\"Board\",\n        \"categoryId\":\"categoryId\",\n        \"subCategory\":\"Outdoor Party\",\n        \"subCategoryId\":\"subCategoryId\",\n        \"scheduleDate\":\"2024-02-01\",\n        \"scheduleTime\":\"18:00:00\",\n        \"streamHours\":1,\n        \"coverPhotoUrl\":\"basketball-cover-url.jpg\",\n        \"providerPlaybackUrl\":\"\",\n        \"voteTokenQuantity\":100,\n        \"votingTimeReset\":\"5\",\n        \"voteButtonQuantity\":4,\n        \"voteButtonText1\":\"Layup\",\n        \"voteButtonText2\":\"Dunk\",\n        \"isRewardsEnabled\":false,\n        \"isTournamentEnabled\":true,\n        \"tournamentButtonText1\":\"Hit\",\n        \"tournamentButtonText2\":\"Miss\",\n        \"streamLocatorName\":\"basketball-locator-name\",\n        \"streamAssetName\":\"basketball-asset-name\",\n        \"platformVideoIds\":{\"youtubeOutputId\":false,\"twitchOutputId\":false,\"instagramOutputId\":false,\"tiktokOutputId\":false,\"facebookOutputId\":false,\"vimeoOutputId\":false,\"periscopeOutputId\":false,\"linkedInOutputId\":false,\"brightcoveOutputId\":false,\"twitterOutputId\":false,\"dailymotionOutputId\":false,\"kickOutputId\":false,\"rumbleOutputId\":false,\"trovoOutputId\":false,\"restreamPlaybackUrl\":false,\"telegramOutputId\":false,\"amazonLiveOutputId\":false,\"dLiveOutputId\":false,\"mixCloudOutputId\":false,\"kakaoTVOutputId\":false,\"naverTVOutputId\":false,\"nimoTVOutputId\":false,\"nonoLiveOutputId\":false,\"huyaOutputId\":false,\"zhanquiTVOutputId\":false,\"bilibiliOutputId\":false,\"afreecaTVOutputId\":false,\"mlgOutputId\":false,\"douyuOutputId\":false,\"liveEduOutputId\":false,\"vaughnLiveOutputId\":false,\"breakersTVOutputId\":false,\"picartoTVOutputId\":false,\"fc2LiveOutputId\":false,\"steamOutputId\":false},\n        \"platformEventIds\":{\"facebookGroupEventId\":false,\"facebookPageEventId\":false,\"linkedInEventId\":false,\"youtubeEventId\":false,\"eventBrightEventId\":false,\"meetupEventId\":false,\"calendlyEventId\":false,\"googleEventId\":false,\"twitterEventId\":false,\"instagramEventId\":false,\"redditEventId\":false,\"telegramEventId\":false,\"tiktokEventId\":false,\"pinterestEventId\":false,\"wordpressEventId\":false,\"discordEventId\":false,\"mediumEventId\":false,\"tumblrEventId\":false,\"wixEventId\":false},\n        \"primaryCameraName\":\"Sony 4K Ultra HD WebCam\",\n        \"primaryMicrophoneName\":\"WirelessAudioTek Device\",\n        \"primarySpeakerName\":\"Bose-Mega-Speaker 2.0\",\n        \"additionalCameras\":[{\"camera\":\"camera-2\",\"microphone\":\"mic-2\"},{\"camera\":\"camera-3\",\"microphone\":\"mic-3\"}],\n        \"createdDate\":\"2024-02-18\",\n        \"createdTime\":\"14:54:25\",\n        \"updatedDate\":\"2024-02-24\",\n        \"updatedTime\":\"23:29:19\",\n        \"deletedDate\":null,\n        \"deletedTime\":null\n    }\n}"'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/connect/update:
    put:
      tags:
        - VideoConnect
      summary: Video - Connect - Update - ZhanqiTV
      description: |-
        ### Description of Each Data in Endpoint: Video - Connect - Update - ZhanqiTV

        - **name**: The name of this API request, indicating it is for updating the connection for the video titled "Fortune's Basketball Challenge".

        - **request**: Contains all the information regarding the request being made to the server.

          - **method**: Specifies the HTTP method used for the request. In this case, it's a `PUT` method, which is typically used for updating resources.
          
          - **url**: The endpoint URL to which the request is sent. Here, it is pointing to a local server that handles video connection updates.
          
          - **headers**: An array that contains key-value pairs for HTTP headers.
          
            - **key**: "Content-Type" which indicates the media type of the resource being sent to the server.
            
            - **value**: "application/json" specifies that the content being sent is in JSON format.
            
          - **body**: The main content of the request.
          
            - **mode**: Indicates the data format. Here, it is set to "raw", meaning the body contains raw JSON.
            
            - **raw**: The actual JSON body being sent in the request. Below are the descriptions of its components:
            
              - **options**: Configuration options for the video connection.
              
                - **providerName**: The name of the video streaming provider, set to "zhanqitv".
                - **providerId**: An identifier for the provider, currently empty.
                - **apiKey**: Used to authenticate requests to the provider, currently null.
                - **apiSecret**: A secret key for API access, currently null.
                - **apiClientId**: Used for identifying the client, currently null.
                - **authToken**: Token used for authorization, currently null.
                - **server**: The server address, currently null.
                - **rtmpUrl**: URL for RTMP streaming, currently null.
                - **streamKey**: A key used for streaming, currently null.
                - **channelUrl**: URL for the channel, currently null.
                - **authUsername**: Username for authorized access, currently null.
                - **authPassword**: Password for authorized access, currently null.
                - **uniqueKey**: A unique identifier for this video connection.
                - **videoId**: The specific identifier for the video being updated.
                - **accountId**: The identifier for the account associated with the video.
                - **channelId**: The identifier for the channel of the video.
                - **sessionId**: The unique session identifier.
                - **streamId**: The identifier for the stream.
                - **ipAddress**: IP address of the user or server, currently null.
                - **country**: Country where the video is being hosted, set to "United States".
                - **state**: The state where the video is being hosted, set to "California".
                - **title**: The title of the video, "Fortune's Basketball Challenge".
                - **description**: Description of the video, indicating it is a basketball game with amazing plays and challenges.
                - **tags**: Tags associated with the video, specifying it is about basketball, games, and challenges.

              - **stream**: Details regarding the stream itself.
              
                - **streamId**: Identifier of the stream.
                - **streamName**: The name of the stream, indicating it is a live video stream.
                - **uniqueKey**: The same unique key referenced above.
                - **videoId**: The ID of the video.
                - **accountId**: The account ID associated with the video.
                - **channelId**: The channel ID for the video.
                - **sessionId**: The session ID associated with the video.
                - **videoStatus**: Status of the video, indicated as "notready".
                - **providerName**: Name of the streaming provider, which is "cloudflare".
                - **providerUniqueId**: A unique identifier for the streaming provider.
                - **providerPlaybackUrl**: URL for playback from the provider, currently empty.
                - **providerStreamId**: ID for the stream from the provider.
                - **providerStreamKey**: Key for accessing the stream from the provider.
                - **providerStreamUrl**: URL for accessing the stream, set to an SRT URL.
                - **providerStreamData**: Contains additional information about the stream including URLs for different streaming methods (RTMPS, SRT, WebRTC), created and modified timestamps, and metadata such as account ID, input names, stream ID, title, and description.
                - **success**: Indicates whether the operation was successful, set to `true`.
                - **errors**: An array for error messages, currently empty.
                - **messages**: An array for additional messages, currently empty.
                
                - **createdDate**: Date the stream was created.
                - **createdTime**: Time the stream was created.
                - **updatedDate**: Date the stream was last updated.
                - **updatedTime**: Time the stream was last updated.
                - **deletedDate**: Date the stream was deleted, currently null.
                - **deletedTime**: Time the stream was deleted, currently null.

              - **details**: Detailed metadata about the video streaming session.
              
                - **accountId**: The ID of the account associated with the video.
                - **sessionId**: The session ID for the current video.
                - **channelId**: The ID of the channel where the video is hosted.
                - **videoId**: The video identifier.
                - **title**: Title of the video.
                - **description**: Description of the video.
                - **tags**: Tags related to the video.
                - **streamType**: Type of stream, in this case, "Live".
                - **searchType**: The category of search for the video, indicated as "Game".
                - **started**: Indicates whether the stream has started, set to `true`.
                - **startedOn**: Timestamp when the stream started.
                - **paused**: Indicates whether the stream is currently paused, set to `false`.
                - **pausedOn**: Timestamp when the stream was paused.
                - **stopped**: Indicates whether the stream is currently stopped, set to `false`.
                - **stoppedOn**: Timestamp when the stream was stopped, currently null.
                - **streamId**: The unique identifier for the stream.
                - **channel**: Name of the channel, "Fortune's Basketball Channel".
                - **category**: Category of the video, "Board".
                - **categoryId**: Identifier for the category.
                - **subCategory**: Sub-category of the video, "Outdoor Party".
                - **subCategoryId**: Identifier for the sub-category.
                - **scheduleDate**: Date the video is scheduled for.
                - **scheduleTime**: Time the video is scheduled for.
                - **streamHours**: Duration of the stream in hours.
                - **coverPhotoUrl**: URL for the cover photo of the stream.
                - **providerPlaybackUrl**: URL for playback provided, currently empty.
                - **voteTokenQuantity**: Token amount for voting, set to 100.
                - **votingTimeReset**: Time reset for voting, set to 5.
                - **voteButtonQuantity**: Number of vote buttons, set to 4.
                - **voteButtonText1**: Text for the first vote button, "Layup".
                - **voteButtonText2**: Text for the second vote button, "Dunk".
                - **isRewardsEnabled**: Indicates if rewards are enabled, set to `false`.
                - **isTournamentEnabled**: Indicates if tournaments are enabled, set to `true`.
                - **tournamentButtonText1**: Text for the first tournament button, "Hit".
                - **tournamentButtonText2**: Text for the second tournament button, "Miss".
                - **streamLocatorName**: A naming field for locating the stream.
                - **streamAssetName**: Name for the asset related to the stream.
                - **platformVideoIds**: An object containing identifiers for different platforms where the video may be shared, all currently set to `false`.
                - **platformEventIds**: An object containing event identifiers for various platforms, all currently set to `false`.
                - **primaryCameraName**: Name of the primary camera being used for the stream.
                - **primaryMicrophoneName**: Name of the primary microphone being used for the stream.
                - **primarySpeakerName**: Name of the primary speaker setup for the stream.
                - **additionalCameras**: An array of objects detailing additional camera and microphone setups being used.
                - **createdDate**: Date the video details were created.
                - **createdTime**: Time the video details were created.
                - **updatedDate**: Date the video details were last modified.
                - **updatedTime**: Time the video details were last modified.
                - **deletedDate**: Date the video details were deleted, currently null.
                - **deletedTime**: Time the video details were deleted, currently null.

        This information provides a comprehensive understanding of the API request for updating the video connection with details about the video and stream.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"options\":{\n        \"providerName\": \"zhanqitv\",\n        \"providerId\": \"\",\n        \"apiKey\": null,\n        \"apiSecret\": null,\n        \"apiClientId\": null,\n        \"authToken\": null,\n        \"server\": null,\n        \"rtmpUrl\": null,\n        \"streamKey\": null,\n        \"channelUrl\": null,\n        \"authUsername\": null,\n        \"authPassword\": null,\n        \"uniqueKey\": \"uniqueKey\",\n        \"videoId\": \"videoId\",\n        \"accountId\": \"accountId\",\n        \"channelId\": \"channelId\",\n        \"sessionId\": \"sessionId\",\n        \"streamId\": \"streamId\",\n        \"ipAddress\": null,\n        \"country\": \"United States\",\n        \"state\": \"California\",\n        \"title\":\"Fortune''s Basketball Challenge\",\n        \"description\":\"Basketball game featuring amazing plays and challenges.\",\n        \"tags\":\"basketball,game,challenge\"\n    },\n    \"stream\": {\n        \"streamId\":\"streamId\",\n        \"streamName\":\"live-video-stream-7164b12d-1708817130231\",\n        \"uniqueKey\":\"uniqueKey\",\n        \"videoId\": \"videoId\",\n        \"accountId\": \"accountId\",\n        \"channelId\": \"channelId\",\n        \"sessionId\": \"sessionId\",\n        \"videoStatus\":\"notready\",\n        \"providerName\":\"cloudflare\",\n        \"providerUniqueId\":\"c3b3f93b0a7594f3db917d5f9a671351\",\n        \"providerPlaybackUrl\":\"\",\n        \"providerStreamId\":\"c3b3f93b0a7594f3db917d5f9a671351\",\n        \"providerStreamKey\":\"e0bb5fa14f7059bccfcef40d5dbe2283kc3b3f93b0a7594f3db917d5f9a671351\",\n        \"providerStreamUrl\":\"srt://live.cloudflare.com:778\",\n        \"providerStreamData\":{\"result\":{\"uid\":\"c3b3f93b0a7594f3db917d5f9a671351\",\"rtmps\":{\"url\":\"rtmps://live.cloudflare.com:443/live/\",\"streamKey\":\"e0bb5fa14f7059bccfcef40d5dbe2283kc3b3f93b0a7594f3db917d5f9a671351\"},\"rtmpsPlayback\":{\"url\":\"rtmps://live.cloudflare.com:443/live/\",\"streamKey\":\"af3d7056104ecfa601cc1d3e9aa07c3bkc3b3f93b0a7594f3db917d5f9a671351\"},\"srt\":{\"url\":\"srt://live.cloudflare.com:778\",\"streamId\":\"c3b3f93b0a7594f3db917d5f9a671351\",\"passphrase\":\"bc9be9fb5bfb73d0c0260d82e9e40434kc3b3f93b0a7594f3db917d5f9a671351\"},\"srtPlayback\":{\"url\":\"srt://live.cloudflare.com:778\",\"streamId\":\"playc3b3f93b0a7594f3db917d5f9a671351\",\"passphrase\":\"bc54e6ca94314ca15f5e04495ee2c20dkc3b3f93b0a7594f3db917d5f9a671351\"},\"webRTC\":{\"url\":\"https://customer-q9gw1dgorkl8h10h.cloudflarestream.com/1d9bfda169eb256cedc88b900e59fc01kc3b3f93b0a7594f3db917d5f9a671351/webRTC/publish\"},\"webRTCPlayback\":{\"url\":\"https://customer-q9gw1dgorkl8h10h.cloudflarestream.com/c3b3f93b0a7594f3db917d5f9a671351/webRTC/play\"},\"created\":\"2024-02-24T23:25:30.935251Z\",\"modified\":\"2024-02-24T23:25:30.935251Z\",\"meta\":{\"accountId\":\"de449412-4732-490f-a1d0-19ac7e96e7e6\",\"audioInputName\":\"My macBook Microphone\",\"channelId\":\"ee435434-e90f-4484-a3b3-63819dc539ef\",\"coverPhotoUrl\":\"basketball-cover-url.jpg\",\"description\":\"Basketball game featuring amazing plays and challenges.\",\"streamId\":\"c4d36b16-e5f3-4bb2-a1d5-334fcad9f08f\",\"title\":\"Fortune''s Basketball Challenge\",\"videoId\":\"133c4f1f-a914-4956-9f79-bc82a890361d\",\"videoInputName\":\"My MacBook Camera\"},\"defaultCreator\":\"7164b12d\",\"status\":null,\"recording\":{\"mode\":\"automatic\",\"requireSignedURLs\":false,\"allowedOrigins\":null},\"deleteRecordingAfterDays\":null},\"success\":true,\"errors\":[],\"messages\":[]},\n        \"createdDate\":\"2024-02-24\",\n        \"createdTime\":\"23:25:30\",\n        \"updatedDate\":\"2024-02-25\",\n        \"updatedTime\":\"01:14:26\",\n        \"deletedDate\":null,\n        \"deletedTime\":null\n    },\n    \"details\":{\n        \"accountId\":\"accountId\",\n        \"sessionId\":\"sessionId\",\n        \"channelId\":\"channelId\",\n        \"videoId\":\"videoId\",\n        \"title\":\"Fortune''s Basketball Challenge\",\n        \"description\":\"Basketball game featuring amazing plays and challenges.\",\n        \"tags\":\"basketball,game,challenge\",\n        \"streamType\":\"Live\",\n        \"searchType\":\"Game\",\n        \"started\":true,\n        \"startedOn\":\"2024-02-24T22:41:42.483Z\",\n        \"paused\":false,\n        \"pausedOn\":\"2024-02-24T22:41:42.483Z\",\n        \"stopped\":false,\n        \"stoppedOn\":null,\n        \"streamId\":\"streamId\",\n        \"channel\":\"Fortune''s Basketball Channel\",\n        \"category\":\"Board\",\n        \"categoryId\":\"categoryId\",\n        \"subCategory\":\"Outdoor Party\",\n        \"subCategoryId\":\"subCategoryId\",\n        \"scheduleDate\":\"2024-02-01\",\n        \"scheduleTime\":\"18:00:00\",\n        \"streamHours\":1,\n        \"coverPhotoUrl\":\"basketball-cover-url.jpg\",\n        \"providerPlaybackUrl\":\"\",\n        \"voteTokenQuantity\":100,\n        \"votingTimeReset\":\"5\",\n        \"voteButtonQuantity\":4,\n        \"voteButtonText1\":\"Layup\",\n        \"voteButtonText2\":\"Dunk\",\n        \"isRewardsEnabled\":false,\n        \"isTournamentEnabled\":true,\n        \"tournamentButtonText1\":\"Hit\",\n        \"tournamentButtonText2\":\"Miss\",\n        \"streamLocatorName\":\"basketball-locator-name\",\n        \"streamAssetName\":\"basketball-asset-name\",\n        \"platformVideoIds\":{\"youtubeOutputId\":false,\"twitchOutputId\":false,\"instagramOutputId\":false,\"tiktokOutputId\":false,\"facebookOutputId\":false,\"vimeoOutputId\":false,\"periscopeOutputId\":false,\"linkedInOutputId\":false,\"brightcoveOutputId\":false,\"twitterOutputId\":false,\"dailymotionOutputId\":false,\"kickOutputId\":false,\"rumbleOutputId\":false,\"trovoOutputId\":false,\"restreamPlaybackUrl\":false,\"telegramOutputId\":false,\"amazonLiveOutputId\":false,\"dLiveOutputId\":false,\"mixCloudOutputId\":false,\"kakaoTVOutputId\":false,\"naverTVOutputId\":false,\"nimoTVOutputId\":false,\"nonoLiveOutputId\":false,\"huyaOutputId\":false,\"zhanquiTVOutputId\":false,\"bilibiliOutputId\":false,\"afreecaTVOutputId\":false,\"mlgOutputId\":false,\"douyuOutputId\":false,\"liveEduOutputId\":false,\"vaughnLiveOutputId\":false,\"breakersTVOutputId\":false,\"picartoTVOutputId\":false,\"fc2LiveOutputId\":false,\"steamOutputId\":false},\n        \"platformEventIds\":{\"facebookGroupEventId\":false,\"facebookPageEventId\":false,\"linkedInEventId\":false,\"youtubeEventId\":false,\"eventBrightEventId\":false,\"meetupEventId\":false,\"calendlyEventId\":false,\"googleEventId\":false,\"twitterEventId\":false,\"instagramEventId\":false,\"redditEventId\":false,\"telegramEventId\":false,\"tiktokEventId\":false,\"pinterestEventId\":false,\"wordpressEventId\":false,\"discordEventId\":false,\"mediumEventId\":false,\"tumblrEventId\":false,\"wixEventId\":false},\n        \"primaryCameraName\":\"Sony 4K Ultra HD WebCam\",\n        \"primaryMicrophoneName\":\"WirelessAudioTek Device\",\n        \"primarySpeakerName\":\"Bose-Mega-Speaker 2.0\",\n        \"additionalCameras\":[{\"camera\":\"camera-2\",\"microphone\":\"mic-2\"},{\"camera\":\"camera-3\",\"microphone\":\"mic-3\"}],\n        \"createdDate\":\"2024-02-18\",\n        \"createdTime\":\"14:54:25\",\n        \"updatedDate\":\"2024-02-24\",\n        \"updatedTime\":\"23:29:19\",\n        \"deletedDate\":null,\n        \"deletedTime\":null\n    }\n}"'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/connect/delete:
    post:
      tags:
        - VideoConnect
      summary: Video - Connect - Delete - ZhanqiTV
      description: |-
        ### Endpoint Description: Video - Connect - Delete - ZhanqiTV

        #### Request Method
        - **Method**: `POST`
          - This endpoint is used to delete a video connection.

        #### Request URL
        - **URL**: `http://localhost:3000/api/video/connect/delete`
          - This is the URL where the request is sent.

        #### Request Headers
        - **Content-Type**: `application/json`
          - Specifies that the request body format is JSON.

        #### Request Body

        ##### Options Object
        - **providerName**: `zhanqitv`
          - Indicates the name of the video service provider.
          
        - **providerId**: `""`
          - Placeholder for the unique identifier of the provider. (Empty in this instance)

        - **apiKey**: `null`
          - API key for authentication, needed by some services. (Not provided here)

        - **apiSecret**: `null`
          - Secret key for API authentication. (Not provided here)

        - **apiClientId**: `null`
          - Client ID for the API. (Not provided here)

        - **authToken**: `null`
          - Token for user authentication. (Not provided here)

        - **server**: `null`
          - Server address for the video service. (Not provided here)

        - **rtmpUrl**: `null`
          - URL for Real-Time Messaging Protocol (RTMP) streaming. (Not provided here)

        - **streamKey**: `null`
          - Key used to identify the stream on the platform. (Not provided here)

        - **channelUrl**: `null`
          - URL for the video channel. (Not provided here)

        - **authUsername**: `null`
          - Username for authentication. (Not provided here)

        - **authPassword**: `null`
          - Password for authentication. (Not provided here)

        - **uniqueKey**: `"uniqueKey"`
          - A unique identifier for the video connection.

        - **videoId**: `"videoId"`
          - Unique identifier for the video.

        - **accountId**: `"accountId"`
          - Identifier for the user’s account.

        - **channelId**: `"channelId"`
          - Unique identifier for the channel associated with the video.

        - **sessionId**: `"sessionId"`
          - ID for the current session.

        - **streamId**: `"streamId"`
          - Unique identifier for the stream.

        - **ipAddress**: `null`
          - IP address of the user. (Not provided here)

        - **country**: `"United States"`
          - Country from where the request is made.

        - **state**: `"California"`
          - State from where the request originates.

        - **title**: `"Fortune's Basketball Challenge"`
          - Title of the video.

        - **description**: `"Basketball game featuring amazing plays and challenges."`
          - Description of the video content.

        - **tags**: `"basketball,game,challenge"`
          - Tags associated with the video for categorization.

        ##### Stream Object
        - **streamId**: `"streamId"`
          - Identifier for the stream.

        - **streamName**: `"live-video-stream-7164b12d-1708817130231"`
          - Name of the stream being used.

        - **uniqueKey**: `"uniqueKey"`
          - A unique identifier linking back to the options provided.

        - **videoId**: `"videoId"`
          - The identifier related to the video.

        - **accountId**: `"accountId"`
          - Identifier for the account holding the video.

        - **channelId**: `"channelId"`
          - Identifier for the channel associated with the stream.

        - **sessionId**: `"sessionId"`
          - Session identifier for tracking.

        - **videoStatus**: `"notready"`
          - Current status of the video.

        - **providerName**: `"cloudflare"`
          - Name of the streaming provider managing the video.

        - **providerUniqueId**: `"c3b3f93b0a7594f3db917d5f9a671351"`
          - A unique identifier assigned by the provider.

        - **providerPlaybackUrl**: `""`
          - URL for playback of the video stream, if available.

        - **providerStreamId**: `"c3b3f93b0a7594f3db917d5f9a671351"`
          - Stream ID from the provider.

        - **providerStreamKey**: `"e0bb5fa14f7059bccfcef40d5dbe2283kc3b3f93b0a7594f3db917d5f9a671351"`
          - Stream key for establishing a connection to the provider.

        - **providerStreamUrl**: `"srt://live.cloudflare.com:778"`
          - URL for streaming using the SRT protocol.

        - **providerStreamData**: 
          - Contains various details about the stream, including:
            - **result**: Contains the stream's details such as UID, RTMPS and SRT connection URLs, and the created/modified timestamps.
            - **created**: `"2024-02-24T23:25:30.935251Z"`
              - Timestamp of when the stream was created.
            - **modified**: `"2024-02-24T23:25:30.935251Z"`
              - Timestamp of when the data was last modified.

        - **success**: `true`
          - Indicates a successful operation.

        - **errors**: `[]`
          - List of errors that occurred during the operation. (Empty in this instance)

        - **messages**: `[]`
          - Any messages related to the operation. (Empty in this instance)

        - **createdDate**: `"2024-02-24"`
          - Date when the stream was created.

        - **createdTime**: `"23:25:30"`
          - Time when the stream was created.

        - **updatedDate**: `"2024-02-25"`
          - Date when the stream was last updated.

        - **updatedTime**: `"01:14:26"`
          - Time when the stream was last updated.

        - **deletedDate**: `null`
          - Date when the video was deleted. (Not applicable here)

        - **deletedTime**: `null`
          - Time when the video was deleted. (Not applicable here)

        ##### Details Object
        - **accountId**: `"accountId"`
          - Identifier for the account associated with the video.

        - **sessionId**: `"sessionId"`
          - The ID for the session linked to this video.

        - **channelId**: `"channelId"`
          - The ID for the channel where the video is hosted.

        - **videoId**: `"videoId"`
          - Unique identifier for the video.

        - **title**: `"Fortune's Basketball Challenge"`
          - Title assigned to the video.

        - **description**: `"Basketball game featuring amazing plays and challenges."`
          - Description providing more details about the video.

        - **tags**: `"basketball,game,challenge"`
          - Keywords for easier categorization and search.

        - **streamType**: `"Live"`
          - Indicates the type of stream (live recording).

        - **searchType**: `"Game"`
          - Category designation for search purposes.

        - **started**: `true`
          - Shows if the stream has started or not.

        - **startedOn**: `"2024-02-24T22:41:42.483Z"`
          - Timestamp of when the stream started.

        - **paused**: `false`
          - Indicates if the stream is paused.

        - **pausedOn**: `"2024-02-24T22:41:42.483Z"`
          - Timestamp of when the stream was paused.

        - **stopped**: `false`
          - Indicates if the stream has been stopped.

        - **stoppedOn**: `null`
          - Timestamp for when the stream was stopped. (Not applicable here)

        - **streamId**: `"streamId"`
          - Unique identifier for the active stream.

        - **channel**: `"Fortune's Basketball Channel"`
          - Name of the channel where the video is streamed.

        - **category**: `"Board"`
          - Main category that the video belongs to.

        - **categoryId**: `"categoryId"`
          - Unique identifier for the category.

        - **subCategory**: `"Outdoor Party"`
          - Subcategory related to the content of the video.

        - **subCategoryId**: `"subCategoryId"`
          - Unique identifier for the subcategory.

        - **scheduleDate**: `"2024-02-01"`
          - The date when the video is scheduled to be streamed.

        - **scheduleTime**: `"18:00:00"`
          - The time when the stream is scheduled to start.

        - **streamHours**: `1`
          - Duration of the planned stream in hours.

        - **coverPhotoUrl**: `"basketball-cover-url.jpg"`
          - URL link to the cover photo associated with the video.

        - **providerPlaybackUrl**: `""`
          - Playback URL provided by the service (currently empty).

        - **voteTokenQuantity**: `100`
          - Number of tokens available for voting related to the video.

        - **votingTimeReset**: `"5"`
          - The time period for which the voting remains active (in seconds).

        - **voteButtonQuantity**: `4`
          - Number of voting options available for viewers.

        - **voteButtonText1**: `"Layup"`
          - Text displayed for the first voting option.

        - **voteButtonText2**: `"Dunk"`
          - Text displayed for the second voting option.

        - **isRewardsEnabled**: `false`
          - Indicates if rewards for viewers are enabled.

        - **isTournamentEnabled**: `true`
          - Indicates if a tournament feature is active for this video.

        - **tournamentButtonText1**: `"Hit"`
          - Text for the tournament voting button option indicating a successful event.

        - **tournamentButtonText2**: `"Miss"`
          - Text for the tournament voting button option indicating a failed event.

        - **streamLocatorName**: `"basketball-locator-name"`
          - Identifier for tracking the stream.

        - **streamAssetName**: `"basketball-asset-name"`
          - Name of the asset related to the stream for identification purposes.

        - **platformVideoIds**: 
          - Contains output IDs for various platforms (empty in this instance).

        - **platformEventIds**: 
          - Contains event IDs for platforms. (All false in this instance)

        - **primaryCameraName**: `"Sony 4K Ultra HD WebCam"`
          - Name of the main camera used for the video.

        - **primaryMicrophoneName**: `"WirelessAudioTek Device"`
          - Name of the primary microphone used for capturing audio.

        - **primarySpeakerName**: `"Bose-Mega-Speaker 2.0"`
          - Name of the primary speaker setup for audio output.

        - **additionalCameras**: `[]`
          - Array of objects representing additional cameras and microphones (empty in this instance).

        - **createdDate**: `"2024-02-18"`
          - The date when the video details were created.

        - **createdTime**: `"14:54:25"`
          - The time when the video details were created.

        - **updatedDate**: `"2024-02-24"`
          - The date when the video details were last updated.

        - **updatedTime**: `"23:29:19"`
          - The time when the video details were last updated.

        - **deletedDate**: `null`
          - Date when the video was deleted. (Not applicable here)

        - **deletedTime**: `null`
          - Time when the video was deleted. (Not applicable here)
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"options\":{\n        \"providerName\": \"zhanqitv\",\n        \"providerId\": \"\",\n        \"apiKey\": null,\n        \"apiSecret\": null,\n        \"apiClientId\": null,\n        \"authToken\": null,\n        \"server\": null,\n        \"rtmpUrl\": null,\n        \"streamKey\": null,\n        \"channelUrl\": null,\n        \"authUsername\": null,\n        \"authPassword\": null,\n        \"uniqueKey\": \"uniqueKey\",\n        \"videoId\": \"videoId\",\n        \"accountId\": \"accountId\",\n        \"channelId\": \"channelId\",\n        \"sessionId\": \"sessionId\",\n        \"streamId\": \"streamId\",\n        \"ipAddress\": null,\n        \"country\": \"United States\",\n        \"state\": \"California\",\n        \"title\":\"Fortune''s Basketball Challenge\",\n        \"description\":\"Basketball game featuring amazing plays and challenges.\",\n        \"tags\":\"basketball,game,challenge\"\n    },\n    \"stream\": {\n        \"streamId\":\"streamId\",\n        \"streamName\":\"live-video-stream-7164b12d-1708817130231\",\n        \"uniqueKey\":\"uniqueKey\",\n        \"videoId\": \"videoId\",\n        \"accountId\": \"accountId\",\n        \"channelId\": \"channelId\",\n        \"sessionId\": \"sessionId\",\n        \"videoStatus\":\"notready\",\n        \"providerName\":\"cloudflare\",\n        \"providerUniqueId\":\"c3b3f93b0a7594f3db917d5f9a671351\",\n        \"providerPlaybackUrl\":\"\",\n        \"providerStreamId\":\"c3b3f93b0a7594f3db917d5f9a671351\",\n        \"providerStreamKey\":\"e0bb5fa14f7059bccfcef40d5dbe2283kc3b3f93b0a7594f3db917d5f9a671351\",\n        \"providerStreamUrl\":\"srt://live.cloudflare.com:778\",\n        \"providerStreamData\":{\"result\":{\"uid\":\"c3b3f93b0a7594f3db917d5f9a671351\",\"rtmps\":{\"url\":\"rtmps://live.cloudflare.com:443/live/\",\"streamKey\":\"e0bb5fa14f7059bccfcef40d5dbe2283kc3b3f93b0a7594f3db917d5f9a671351\"},\"rtmpsPlayback\":{\"url\":\"rtmps://live.cloudflare.com:443/live/\",\"streamKey\":\"af3d7056104ecfa601cc1d3e9aa07c3bkc3b3f93b0a7594f3db917d5f9a671351\"},\"srt\":{\"url\":\"srt://live.cloudflare.com:778\",\"streamId\":\"c3b3f93b0a7594f3db917d5f9a671351\",\"passphrase\":\"bc9be9fb5bfb73d0c0260d82e9e40434kc3b3f93b0a7594f3db917d5f9a671351\"},\"srtPlayback\":{\"url\":\"srt://live.cloudflare.com:778\",\"streamId\":\"playc3b3f93b0a7594f3db917d5f9a671351\",\"passphrase\":\"bc54e6ca94314ca15f5e04495ee2c20dkc3b3f93b0a7594f3db917d5f9a671351\"},\"webRTC\":{\"url\":\"https://customer-q9gw1dgorkl8h10h.cloudflarestream.com/1d9bfda169eb256cedc88b900e59fc01kc3b3f93b0a7594f3db917d5f9a671351/webRTC/publish\"},\"webRTCPlayback\":{\"url\":\"https://customer-q9gw1dgorkl8h10h.cloudflarestream.com/c3b3f93b0a7594f3db917d5f9a671351/webRTC/play\"},\"created\":\"2024-02-24T23:25:30.935251Z\",\"modified\":\"2024-02-24T23:25:30.935251Z\",\"meta\":{\"accountId\":\"de449412-4732-490f-a1d0-19ac7e96e7e6\",\"audioInputName\":\"My macBook Microphone\",\"channelId\":\"ee435434-e90f-4484-a3b3-63819dc539ef\",\"coverPhotoUrl\":\"basketball-cover-url.jpg\",\"description\":\"Basketball game featuring amazing plays and challenges.\",\"streamId\":\"c4d36b16-e5f3-4bb2-a1d5-334fcad9f08f\",\"title\":\"Fortune''s Basketball Challenge\",\"videoId\":\"133c4f1f-a914-4956-9f79-bc82a890361d\",\"videoInputName\":\"My MacBook Camera\"},\"defaultCreator\":\"7164b12d\",\"status\":null,\"recording\":{\"mode\":\"automatic\",\"requireSignedURLs\":false,\"allowedOrigins\":null},\"deleteRecordingAfterDays\":null},\"success\":true,\"errors\":[],\"messages\":[]},\n        \"createdDate\":\"2024-02-24\",\n        \"createdTime\":\"23:25:30\",\n        \"updatedDate\":\"2024-02-25\",\n        \"updatedTime\":\"01:14:26\",\n        \"deletedDate\":null,\n        \"deletedTime\":null\n    },\n    \"details\":{\n        \"accountId\":\"accountId\",\n        \"sessionId\":\"sessionId\",\n        \"channelId\":\"channelId\",\n        \"videoId\":\"videoId\",\n        \"title\":\"Fortune''s Basketball Challenge\",\n        \"description\":\"Basketball game featuring amazing plays and challenges.\",\n        \"tags\":\"basketball,game,challenge\",\n        \"streamType\":\"Live\",\n        \"searchType\":\"Game\",\n        \"started\":true,\n        \"startedOn\":\"2024-02-24T22:41:42.483Z\",\n        \"paused\":false,\n        \"pausedOn\":\"2024-02-24T22:41:42.483Z\",\n        \"stopped\":false,\n        \"stoppedOn\":null,\n        \"streamId\":\"streamId\",\n        \"channel\":\"Fortune''s Basketball Channel\",\n        \"category\":\"Board\",\n        \"categoryId\":\"categoryId\",\n        \"subCategory\":\"Outdoor Party\",\n        \"subCategoryId\":\"subCategoryId\",\n        \"scheduleDate\":\"2024-02-01\",\n        \"scheduleTime\":\"18:00:00\",\n        \"streamHours\":1,\n        \"coverPhotoUrl\":\"basketball-cover-url.jpg\",\n        \"providerPlaybackUrl\":\"\",\n        \"voteTokenQuantity\":100,\n        \"votingTimeReset\":\"5\",\n        \"voteButtonQuantity\":4,\n        \"voteButtonText1\":\"Layup\",\n        \"voteButtonText2\":\"Dunk\",\n        \"isRewardsEnabled\":false,\n        \"isTournamentEnabled\":true,\n        \"tournamentButtonText1\":\"Hit\",\n        \"tournamentButtonText2\":\"Miss\",\n        \"streamLocatorName\":\"basketball-locator-name\",\n        \"streamAssetName\":\"basketball-asset-name\",\n        \"platformVideoIds\":{\"youtubeOutputId\":false,\"twitchOutputId\":false,\"instagramOutputId\":false,\"tiktokOutputId\":false,\"facebookOutputId\":false,\"vimeoOutputId\":false,\"periscopeOutputId\":false,\"linkedInOutputId\":false,\"brightcoveOutputId\":false,\"twitterOutputId\":false,\"dailymotionOutputId\":false,\"kickOutputId\":false,\"rumbleOutputId\":false,\"trovoOutputId\":false,\"restreamPlaybackUrl\":false,\"telegramOutputId\":false,\"amazonLiveOutputId\":false,\"dLiveOutputId\":false,\"mixCloudOutputId\":false,\"kakaoTVOutputId\":false,\"naverTVOutputId\":false,\"nimoTVOutputId\":false,\"nonoLiveOutputId\":false,\"huyaOutputId\":false,\"zhanquiTVOutputId\":false,\"bilibiliOutputId\":false,\"afreecaTVOutputId\":false,\"mlgOutputId\":false,\"douyuOutputId\":false,\"liveEduOutputId\":false,\"vaughnLiveOutputId\":false,\"breakersTVOutputId\":false,\"picartoTVOutputId\":false,\"fc2LiveOutputId\":false,\"steamOutputId\":false},\n        \"platformEventIds\":{\"facebookGroupEventId\":false,\"facebookPageEventId\":false,\"linkedInEventId\":false,\"youtubeEventId\":false,\"eventBrightEventId\":false,\"meetupEventId\":false,\"calendlyEventId\":false,\"googleEventId\":false,\"twitterEventId\":false,\"instagramEventId\":false,\"redditEventId\":false,\"telegramEventId\":false,\"tiktokEventId\":false,\"pinterestEventId\":false,\"wordpressEventId\":false,\"discordEventId\":false,\"mediumEventId\":false,\"tumblrEventId\":false,\"wixEventId\":false},\n        \"primaryCameraName\":\"Sony 4K Ultra HD WebCam\",\n        \"primaryMicrophoneName\":\"WirelessAudioTek Device\",\n        \"primarySpeakerName\":\"Bose-Mega-Speaker 2.0\",\n        \"additionalCameras\":[{\"camera\":\"camera-2\",\"microphone\":\"mic-2\"},{\"camera\":\"camera-3\",\"microphone\":\"mic-3\"}],\n        \"createdDate\":\"2024-02-18\",\n        \"createdTime\":\"14:54:25\",\n        \"updatedDate\":\"2024-02-24\",\n        \"updatedTime\":\"23:29:19\",\n        \"deletedDate\":null,\n        \"deletedTime\":null\n    }\n}"'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/details/create:
    post:
      tags:
        - VideoDetails
      summary: Video - Details - Create
      description: |-
        ### Video - Details - Create Endpoint Description

        The following details describe the data required for creating video details using the API.

        - **sessionId**: Unique identifier for the current session. Used to track and manage sessions for video streaming.

        - **accountId**: Unique identifier for the account associated with the video. This allows linking the video to a user's specific account.

        - **channelId**: Unique identifier for the channel where the video will be streamed. This is used to identify the specific channel context.

        - **streamType**: Specifies the type of stream, such as "Live" or "Recorded". In this case, it indicates that the stream is live.

        - **searchType**: Indicates the content type being searched for, set as "Game" here. This could be used for categorizing content.

        - **title**: The title of the video. Here it is set to "Fortune's Basketball Challenge", summarizing the video’s primary focus.

        - **description**: Provides a short description of the video content. In this example, it describes the video as a basketball game featuring amazing plays and challenges.

        - **tags**: A comma-separated list of tags related to the video. Used for categorization and improving searchability, such as "basketball,game,challenge".

        - **channel**: The name of the channel where the video is hosted. In this case, it's "Fortune's Basketball Channel".

        - **category**: Broad category under which the video falls. This is set as "Board", representing the type of content.

        - **subCategory**: More specific classification of the content, noted as "Outdoor Party", indicating the setting or type of the event.

        - **started**: Boolean value indicating whether the stream has started; here it is set to false, meaning it has not yet begun.

        - **paused**: Boolean value indicating if the stream is currently paused. It is also set to false.

        - **stopped**: Boolean value indicating if the stream has ended. This is set to false, showing that the stream has not yet stopped.

        - **scheduleDate**: The date scheduled for the video to be streamed. In this case, set to "2024-02-01".

        - **scheduleTime**: The time designated for the start of the stream, noted as "18:00:00".

        - **streamHours**: Indicates the expected duration of the stream in hours, which is set to 1 hour.

        - **coverPhotoUrl**: URL pointing to the cover photo image of the video, here noted as "basketball-cover-url.jpg".

        - **voteTokenQuantity**: Number of tokens available for voting, set to 100 in this case.

        - **votingTimeReset**: Time period for resetting voting, noted as "5", though the unit (seconds/minutes) should be specified.

        - **voteButtonQuantity**: Total number of voting buttons available during the stream. This is set to 4.

        - **voteButtonText1**, **voteButtonText2**, **voteButtonText3**, **voteButtonText4**: Text labels for each of the voting buttons, allowing users to choose options such as "Layup", "Dunk", "3 Point", and "Free Throw".

        - **isVoteResultsVisible**: Boolean flag that indicates if the results of the votes will be visible to the audience. It's set to true, meaning viewers will see the results.

        - **isRewardsEnabled**: Boolean value indicating whether rewards for participation in the stream are enabled. This is set to false.

        - **isTournamentEnabled**: Boolean value that states if a tournament feature is enabled during the stream; here it is set to true.

        - **isPlayerTournament**: A flag indicating if the tournament is player-based, set to false, implying that it's not focused solely on players.

        - **isTeamTournament**: A flag signaling whether the tournament is team-based, set to false, implying that it does not involve teams.

        - **tournamentButtonText1**, **tournamentButtonText2**: Labels for the tournament buttons, which are "Hit" and "Miss" for voting during tournament scenarios.

        - **streamPlaybackUrl**: URL where the video stream can be accessed for playback, noted as "basketball-stream-url".

        - **streamLocatorName**: Identifies the name used to locate the stream, in this case, "basketball-locator-name".

        - **streamAssetName**: Specifies the name of the asset related to the stream, here it is "basketball-asset-name".

        - **platformPlaybackUrls**: List of URLs for various platforms where the playback of the video can be viewed, including links to YouTube and Twitch.

        - **platformEventUrls**: List of URLs for event-related information about the video on platforms like Eventbrite and Meetup.

        - **primaryCameraName**: Name of the primary camera used for the stream, set to "Sony 4K Ultra HD WebCam".

        - **primaryMicrophoneName**: Name of the main microphone used during the stream, here it is "WirelessAudioTek Device".

        - **primarySpeakerName**: Name of the primary speaker setup for the audio during the stream, noted as "Bose-Mega-Speaker 2.0".

        - **additionalCameras**: Array containing information about additional cameras and microphones used in the stream. Each object includes a "camera" and "microphone" key that specifies their names.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                channelId: channelId
                streamType: Live
                searchType: Game
                title: Fortune's Basketball Challenge
                description: Basketball game featuring amazing plays and challenges.
                tags: basketball,game,challenge
                channel: Fortune's Basketball Channel
                category: Board
                subCategory: Outdoor Party
                started: false
                paused: false
                stopped: false
                scheduleDate: '2024-02-01'
                scheduleTime: '18:00:00'
                streamHours: 1
                coverPhotoUrl: basketball-cover-url.jpg
                voteTokenQuantity: 100
                votingTimeReset: '5'
                voteButtonQuantity: 4
                voteButtonText1: Layup
                voteButtonText2: Dunk
                voteButtonText3: 3 Point
                voteButtonText4: Free Throw
                isVoteResultsVisible: true
                isRewardsEnabled: false
                isTournamentEnabled: true
                isPlayerTournament: false
                isTeamTournament: false
                tournamentButtonText1: Hit
                tournamentButtonText2: Miss
                streamPlaybackUrl: basketball-stream-url
                streamLocatorName: basketball-locator-name
                streamAssetName: basketball-asset-name
                platformPlaybackUrls:
                  - https://youtube.com/channel/fortune/sports-basketball-12345
                  - https://www.twitch.com/fortune/sports-basketball-12345
                platformEventUrls:
                  - https://eventbrite.com/events/beladed-fortune-sports-basketball-12345
                  - https://www.meetup.com/events/beladed-fortune-sports-basketball-12345
                primaryCameraName: Sony 4K Ultra HD WebCam
                primaryMicrophoneName: WirelessAudioTek Device
                primarySpeakerName: Bose-Mega-Speaker 2.0
                additionalCameras:
                  - camera: camera-2
                    microphone: mic-2
                  - camera: camera-3
                    microphone: mic-3
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/details/update:
    put:
      tags:
        - VideoDetails
      summary: Video - Details - Update - Stop Stream
      description: |-
        ### Endpoint: Video - Details - Update - Stop Stream

        **Request Type:** PUT  
        **URL:** `http://localhost:3000/api/video/details/update`

        #### Authentication
        - **Auth Type:** Bearer Token
          - **Token Key:** `token`
          - **Token Value:** The actual bearer token used for authorization, represented as `BearerToken`.

        #### Headers
        - **Client-UUID:** A unique identifier for the client making the request, represented as `ClientUUID`.

        #### Body Parameters (in JSON format)
        1. **sessionId:** Identifier for the current streaming session.
        2. **accountId:** Identifier for the account associated with the stream.
        3. **channelId:** Identifier for the specific channel hosting the video.
        4. **videoId:** Unique ID for the video being updated.
        5. **streamType:** Indicates the type of stream; in this case, set to "Live".
        6. **searchType:** Specifies the type of content for search; here it is defined as "Game".
        7. **title:** The title of the video; for example, "Fortune's Basketball Challenge".
        8. **description:** A brief description of the video content, e.g., "Basketball game featuring amazing plays and challenges."
        9. **tags:** Comma-separated keywords relevant to the video, such as "basketball,game,challenge".
        10. **channel:** The name of the channel broadcasting the content, like "Fortune's Basketball Channel".
        11. **category:** The main category of the video; here it is "Board".
        12. **subCategory:** A finer classification of the content, specified as "Outdoor Party".
        13. **started:** A boolean indicating whether the stream has started; set to `true`.
        14. **paused:** A boolean indicating if the stream is paused; set to `false`.
        15. **stopped:** A boolean indicating if the stream has stopped; set to `true`.
        16. **scheduleDate:** Date when the stream is scheduled to start, formatted as "YYYY-MM-DD" (e.g., "2024-02-01").
        17. **scheduleTime:** Time when the stream is scheduled to start, formatted as "HH:MM:SS" (e.g., "18:00:00").
        18. **streamHours:** Duration of the stream in hours, set to `1`.
        19. **coverPhotoUrl:** URL to the cover photo for the stream, represented as "basketball-cover-url.jpg".
        20. **voteTokenQuantity:** The number of tokens available for voting, set to `100`.
        21. **votingTimeReset:** Specifies the reset time for voting in seconds; here it is `5`.
        22. **voteButtonQuantity:** Number of voting buttons available, set to `4`.
        23. **voteButtonText1:** Text for the first voting button, which is "Layup".
        24. **voteButtonText2:** Text for the second voting button, "Dunk".
        25. **voteButtonText3:** Text for the third voting button, "3 Point".
        26. **voteButtonText4:** Text for the fourth voting button, "Free Throw".
        27. **isRewardsEnabled:** A boolean indicating whether rewards are enabled; set to `false`.
        28. **isTournamentEnabled:** A boolean indicating if tournaments are enabled; set to `true`.
        29. **tournamentButtonText1:** Text for the first tournament button, "Hit".
        30. **tournamentButtonText2:** Text for the second tournament button, "Miss".
        31. **streamPlaybackUrl:** URL to access the playback of the stream, represented as "basketball-stream-url".
        32. **streamLocatorName:** Name used to identify the stream location, set as "basketball-locator-name".
        33. **streamAssetName:** Name of the stream asset, represented as "basketball-asset-name".
        34. **platformPlaybackUrls:** An array of URLs where the stream can be viewed on other platforms, including:
           - `https://youtube.com/channel/fortune/sports-basketball-12345`
           - `https://www.twitch.com/fortune/sports-basketball-12345`
        35. **platformEventUrls:** An array of URLs for events associated with the stream, including:
           - `https://eventbrite.com/events/beladed-fortune-sports-basketball-12345`
           - `https://www.meetup.com/events/beladed-fortune-sports-basketball-12345`
        36. **primaryCameraName:** Name of the primary camera used for the stream, for example, "Sony 4K Ultra HD WebCam".
        37. **primaryMicrophoneName:** Name of the primary microphone used, represented as "WirelessAudioTek Device".
        38. **primarySpeakerName:** Name of the primary speaker used for audio output, set as "Bose-Mega-Speaker 2.0".
        39. **additionalCameras:** An array of additional camera configurations, where each object contains:
           - **camera:** Identifier for the additional camera (e.g., "camera-2").
           - **microphone:** Identifier for the microphone associated with the additional camera (e.g., "mic-2"). 

        This endpoint is designed to update the details of an ongoing or scheduled video stream, including information about the session, media assets, voting options, and platform integrations.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                channelId: channelId
                videoId: videoId
                streamType: Live
                searchType: Game
                title: Fortune's Basketball Challenge
                description: Basketball game featuring amazing plays and challenges.
                tags: basketball,game,challenge
                channel: Fortune's Basketball Channel
                category: Board
                subCategory: Outdoor Party
                started: true
                paused: false
                stopped: true
                scheduleDate: '2024-02-01'
                scheduleTime: '18:00:00'
                streamHours: 1
                coverPhotoUrl: basketball-cover-url.jpg
                voteTokenQuantity: 100
                votingTimeReset: '5'
                voteButtonQuantity: 4
                voteButtonText1: Layup
                voteButtonText2: Dunk
                voteButtonText3: 3 Point
                voteButtonText4: Free Throw
                isRewardsEnabled: false
                isTournamentEnabled: true
                tournamentButtonText1: Hit
                tournamentButtonText2: Miss
                streamPlaybackUrl: basketball-stream-url
                streamLocatorName: basketball-locator-name
                streamAssetName: basketball-asset-name
                platformPlaybackUrls:
                  - https://youtube.com/channel/fortune/sports-basketball-12345
                  - https://www.twitch.com/fortune/sports-basketball-12345
                platformEventUrls:
                  - https://eventbrite.com/events/beladed-fortune-sports-basketball-12345
                  - https://www.meetup.com/events/beladed-fortune-sports-basketball-12345
                primaryCameraName: Sony 4K Ultra HD WebCam
                primaryMicrophoneName: WirelessAudioTek Device
                primarySpeakerName: Bose-Mega-Speaker 2.0
                additionalCameras:
                  - camera: camera-2
                    microphone: mic-2
                  - camera: camera-3
                    microphone: mic-3
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/details/get:
    get:
      tags:
        - VideoDetails
      summary: Video - Details - Get
      description: |-
        ### Endpoint: Video - Details - Get

        #### Request Authentication
        - **Auth Type**: Bearer
          - The request requires a bearer token for authentication.
          - **Bearer Token**: A string token is needed to validate the request. Replace `"BearerToken"` with your actual token.
            - **Key**: `token` - This is the identifier for the bearer token.
            - **Value**: The actual token string that grants access to the API.

        #### HTTP Method
        - **Method**: GET
          - This endpoint uses the GET method to retrieve data.

        #### Request URL
        - **URL**: `http://localhost:3000/api/video/details/get/?videoId=videoId&accountId=accountId`
          - This is the endpoint to fetch video details.
          - **URL Parameters**:
            - **videoId**: The unique identifier for the video. Replace `videoId` with the actual ID of the video you want to retrieve details for.
            - **accountId**: The unique identifier for the user account associated with the video. Replace `accountId` with the actual account ID.

        #### Request Headers
        - **Headers**: 
          - No additional headers are required for this request. Currently, there is a placeholder present with empty key and value, which is disabled.

        #### Request Body
        - **Body**: 
          - The request does not require a body when using the GET method. The body mode is set to "raw", but it remains empty. 

        Please ensure to fill in the videoId and accountId in the URL before making the request.
      security:
        - bearerAuth: []
      parameters:
        - name: videoId
          in: query
          schema:
            type: string
          example: videoId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/details/all:
    get:
      tags:
        - VideoDetails
      summary: Video - Details - Get All by Channel Name
      description: |-
        ### Endpoint Description: Video - Details - Get All by Channel Name

        This endpoint retrieves detailed information about all videos associated with a specific channel name.

        #### Components of the Request:

        - **Authorization**:
          - **Type**: Bearer Authentication
          - **Description**: This endpoint requires a bearer token for authentication. The token must be included in the request header to access the data securely.
          - **Token Example**: `BearerToken` (replace with an actual token)

        - **HTTP Method**:
          - **Method**: GET
          - **Description**: This endpoint uses the GET method to request data from the server.

        - **URL**:
          - **Endpoint URL**: `http://localhost:3000/api/video/details/all/`
          - **Query Parameters**: 
            - `accountId`: This parameter should be replaced with the specific account ID for which the video details are being requested.
            - `channel`: Set to `Basketball`, or any desired channel name to filter results accordingly.

        - **Headers**:
          - **Headers Array**: Currently empty and disabled. No custom headers are required for this request, but you can add headers if needed based on the application's requirements.

        - **Body**:
          - **Body Mode**: Raw
          - **Body Content**: The body is empty for this GET request, as no data payload is sent with the request.

        This endpoint is designed to return a complete list of video details that belong to the specified channel, allowing users to access specific content easily.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: channel
          in: query
          schema:
            type: string
          example: Basketball
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/details/delete:
    post:
      tags:
        - VideoDetails
      summary: Video - Details - Delete
      description: |-
        ### API Endpoint: Video - Details - Delete

        #### Request Method
        - **Method**: POST  
          This indicates that the request will send data to the specified URL to delete video details.

        #### Authentication
        - **Auth Type**: Bearer  
          This endpoint requires bearer token authentication, which means you need to include a token that represents your session.

        - **Bearer Token Details**:
          - **Key**: token  
            This is the key used to identify the bearer token.
          - **Value**: sessionId  
            This is the actual session identifier that grants access to the API. Users need to replace this with their own valid session identifier.
          - **Type**: string  
            This indicates that the token is a string type.

        #### Request URL
        - **URL**: `http://localhost:3000/api/video/details/delete`  
          This is the endpoint where the delete request will be sent. It is currently set to a local server.

        #### Request Headers
        - **Headers**:  
          - No specific headers are currently set, but the option is available. The default header setting is disabled.

        #### Request Body
        - **Body Mode**: Raw  
          Indicates that the body of the request will be sent as raw JSON.

        - **Raw Body Content**: 
        ```json
        {
          "sessionId": "sessionId",
          "accountId": "accountId",
          "videoId": "videoId"
        }
        ```
          - **sessionId**: This field should contain the session identifier used for authentication to ensure that the request is valid.
          - **accountId**: This should be the identifier for the account associated with the video you want to delete.
          - **videoId**: This is the identifier for the specific video whose details you are requesting to delete.

        Users need to replace `sessionId`, `accountId`, and `videoId` with the actual identifiers to perform the deletion of video details.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"videoId\":\"videoId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/event/create:
    post:
      tags:
        - VideoEvent
      summary: Video - Event - Create - WordPress
      description: |-
        ### Endpoint Overview

        **Name:** Video - Event - Create - WordPress

        **Request Type:** POST

        **URL:** `http://localhost:3000/api/video/event/create`

        **Headers:**
        - **Content-Type:** Indicates that the request body format is JSON.

        ### Request Body Breakdown

        #### Options Section
        - **providerName:** Identifies the service provider for the video event, in this case, WordPress.
        - **providerId:** A unique identifier for the video provider; currently left empty.
        - **apiKey:** The API key for authentication with the video provider; currently null.
        - **apiSecret:** The secret key for additional authentication; currently null.
        - **apiClientId:** A client ID for API access; currently null.
        - **authToken:** An authentication token if required; currently null.
        - **server:** The server where the event is hosted; currently null.
        - **rtmpUrl:** URL for RTMP streaming; currently null.
        - **streamKey:** Key for accessing the streaming service; currently null.
        - **channelUrl:** URL for the event channel; currently null.
        - **authUsername:** Username for authentication; currently null.
        - **authPassword:** Password for authentication; currently null.
        - **uniqueKey:** A unique key to identify the event.
        - **videoId:** Identifier for the video; serves as a unique reference.
        - **accountId:** Identifier for the user's account in the system.
        - **channelId:** Identifier for the channel where the event streams.
        - **sessionId:** Identifier for the streaming session.
        - **streamId:** Identifier for the stream itself.
        - **ipAddress:** IP address of the user; currently null.
        - **country:** The country of the event, defaulted to United States.
        - **state:** The state of the event, defaulted to California.
        - **title:** Title of the video event, "Fortune's Basketball Challenge."
        - **description:** Detailed description of the event—"Basketball game featuring amazing plays and challenges."
        - **tags:** Tags relevant to the event for searchability, e.g., "basketball, game, challenge".

        #### Details Section
        - **accountId:** Same as above; redundant in the context.
        - **sessionId:** Same as above; redundant in the context.
        - **channelId:** Same as above; redundant in the context.
        - **videoId:** Same as above; redundant in the context.
        - **title:** Same title as listed in Options.
        - **description:** Same description as listed in Options.
        - **tags:** Same tags as listed in Options.
        - **streamType:** Indicates whether the stream is Live or Recorded (here it is Live).
        - **searchType:** Type of content for searching; here it’s classified as a Game.
        - **started:** Boolean indicating whether the stream has started; true means it has begun.
        - **startedOn:** Timestamp for when the streaming started.
        - **paused:** Boolean that shows if the stream is currently paused; false means it is not paused.
        - **pausedOn:** Timestamp for when the stream was paused; if not paused, it reflects the start time.
        - **stopped:** Boolean indicating if the stream has stopped; false shows it is still ongoing.
        - **stoppedOn:** Timestamp for when the stream was stopped; currently null since the stream is ongoing.
        - **streamId:** Identifier for the current stream.
        - **channel:** Name of the channel where the event is being streamed, "Fortune's Basketball Channel."
        - **category:** Main category of the event, designated as Board.
        - **categoryId:** Identifier for the category; currently stated as categoryId.
        - **subCategory:** More specific category information, here labeled as Outdoor Party.
        - **subCategoryId:** Identifier for the sub-category; currently stated as subCategoryId.
        - **scheduleDate:** Date when the event is scheduled to occur, namely "2024-02-01."
        - **scheduleTime:** Time for the scheduled event, which is "18:00:00."
        - **streamHours:** Duration of the stream in hours; set to 1 hour.
        - **coverPhotoUrl:** URL for the cover photo image of the event; here it is "basketball-cover-url.jpg."
        - **providerPlaybackUrl:** URL for playback access to the provider's video; currently empty.
        - **voteTokenQuantity:** Amount of voting tokens available for the event; set to 100.
        - **votingTimeReset:** Time in seconds to reset the voting period, listed as 5 seconds.
        - **voteButtonQuantity:** Number of survey options available; set to 4.
        - **voteButtonText1:** Text for the first vote button, specified as "Layup."
        - **voteButtonText2:** Text for the second vote button, specified as "Dunk."
        - **isRewardsEnabled:** Indicates if rewards for participation are enabled; currently false.
        - **isTournamentEnabled:** Indicates if a tournament feature is active; currently true.
        - **tournamentButtonText1:** Text for the first tournament option button, labeled "Hit."
        - **tournamentButtonText2:** Text for the second tournament option button, labeled "Miss."
        - **streamLocatorName:** Name used for locating the stream, specified as "basketball-locator-name."
        - **streamAssetName:** Name assigned to the streaming asset; currently it states "basketball-asset-name."
        - **platformVideoIds:** Object holding identifiers for various social media and video platforms; all are currently set to false, indicating no IDs are present.
        - **platformEventIds:** Object holding identifiers for various social media events; all set to false, indicating no event IDs are present.
        - **primaryCameraName:** Name of the main camera used for the event, which is "Sony 4K Ultra HD WebCam."
        - **primaryMicrophoneName:** Name of the main microphone used, denoted as "WirelessAudioTek Device."
        - **primarySpeakerName:** Name of the main speaker system used, stated as "Bose-Mega-Speaker 2.0."
        - **additionalCameras:** List of additional cameras and microphones used during the stream, including camera names and corresponding microphone identifiers.
        - **createdDate:** Date when the event was created, noted as "2024-02-18."
        - **createdTime:** Time when the event was created, noted as "14:54:25."
        - **updatedDate:** Date when the event was last updated, noted as "2024-02-24."
        - **updatedTime:** Time when the event was last updated, noted as "23:29:19."
        - **deletedDate:** Date when the event was deleted; currently null, indicating it is not deleted.
        - **deletedTime:** Time when the event was deleted; currently null, indicating it is not deleted.

        This detailed description provides a clear understanding of each data element included in the request for creating a video event on WordPress.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"options\":{\n        \"providerName\": \"wordpress\",\n        \"providerId\": \"\",\n        \"apiKey\": null,\n        \"apiSecret\": null,\n        \"apiClientId\": null,\n        \"authToken\": null,\n        \"server\": null,\n        \"rtmpUrl\": null,\n        \"streamKey\": null,\n        \"channelUrl\": null,\n        \"authUsername\": null,\n        \"authPassword\": null,\n        \"uniqueKey\": \"uniqueKey\",\n        \"videoId\": \"videoId\",\n        \"accountId\": \"accountId\",\n        \"channelId\": \"channelId\",\n        \"sessionId\": \"sessionId\",\n        \"streamId\": \"streamId\",\n        \"ipAddress\": null,\n        \"country\": \"United States\",\n        \"state\": \"California\",\n        \"title\":\"Fortune''s Basketball Challenge\",\n        \"description\":\"Basketball game featuring amazing plays and challenges.\",\n        \"tags\":\"basketball,game,challenge\"\n    },\n    \"details\":{\n        \"accountId\":\"accountId\",\n        \"sessionId\":\"sessionId\",\n        \"channelId\":\"channelId\",\n        \"videoId\":\"videoId\",\n        \"title\":\"Fortune''s Basketball Challenge\",\n        \"description\":\"Basketball game featuring amazing plays and challenges.\",\n        \"tags\":\"basketball,game,challenge\",\n        \"streamType\":\"Live\",\n        \"searchType\":\"Game\",\n        \"started\":true,\n        \"startedOn\":\"2024-02-24T22:41:42.483Z\",\n        \"paused\":false,\n        \"pausedOn\":\"2024-02-24T22:41:42.483Z\",\n        \"stopped\":false,\n        \"stoppedOn\":null,\n        \"streamId\":\"streamId\",\n        \"channel\":\"Fortune''s Basketball Channel\",\n        \"category\":\"Board\",\n        \"categoryId\":\"categoryId\",\n        \"subCategory\":\"Outdoor Party\",\n        \"subCategoryId\":\"subCategoryId\",\n        \"scheduleDate\":\"2024-02-01\",\n        \"scheduleTime\":\"18:00:00\",\n        \"streamHours\":1,\n        \"coverPhotoUrl\":\"basketball-cover-url.jpg\",\n        \"providerPlaybackUrl\":\"\",\n        \"voteTokenQuantity\":100,\n        \"votingTimeReset\":\"5\",\n        \"voteButtonQuantity\":4,\n        \"voteButtonText1\":\"Layup\",\n        \"voteButtonText2\":\"Dunk\",\n        \"isRewardsEnabled\":false,\n        \"isTournamentEnabled\":true,\n        \"tournamentButtonText1\":\"Hit\",\n        \"tournamentButtonText2\":\"Miss\",\n        \"streamLocatorName\":\"basketball-locator-name\",\n        \"streamAssetName\":\"basketball-asset-name\",\n        \"platformVideoIds\":{\"youtubeOutputId\":false,\"twitchOutputId\":false,\"instagramOutputId\":false,\"tiktokOutputId\":false,\"facebookOutputId\":false,\"vimeoOutputId\":false,\"periscopeOutputId\":false,\"linkedInOutputId\":false,\"brightcoveOutputId\":false,\"twitterOutputId\":false,\"dailymotionOutputId\":false,\"kickOutputId\":false,\"rumbleOutputId\":false,\"trovoOutputId\":false,\"restreamPlaybackUrl\":false,\"telegramOutputId\":false,\"amazonLiveOutputId\":false,\"dLiveOutputId\":false,\"mixCloudOutputId\":false,\"kakaoTVOutputId\":false,\"naverTVOutputId\":false,\"nimoTVOutputId\":false,\"nonoLiveOutputId\":false,\"huyaOutputId\":false,\"zhanquiTVOutputId\":false,\"bilibiliOutputId\":false,\"afreecaTVOutputId\":false,\"mlgOutputId\":false,\"douyuOutputId\":false,\"liveEduOutputId\":false,\"vaughnLiveOutputId\":false,\"breakersTVOutputId\":false,\"picartoTVOutputId\":false,\"fc2LiveOutputId\":false,\"steamOutputId\":false},\n        \"platformEventIds\":{\"facebookGroupEventId\":false,\"facebookPageEventId\":false,\"linkedInEventId\":false,\"youtubeEventId\":false,\"eventBrightEventId\":false,\"meetupEventId\":false,\"calendlyEventId\":false,\"googleEventId\":false,\"twitterEventId\":false,\"instagramEventId\":false,\"redditEventId\":false,\"telegramEventId\":false,\"tiktokEventId\":false,\"pinterestEventId\":false,\"wordpressEventId\":false,\"discordEventId\":false,\"mediumEventId\":false,\"tumblrEventId\":false,\"wixEventId\":false},\n        \"primaryCameraName\":\"Sony 4K Ultra HD WebCam\",\n        \"primaryMicrophoneName\":\"WirelessAudioTek Device\",\n        \"primarySpeakerName\":\"Bose-Mega-Speaker 2.0\",\n        \"additionalCameras\":[{\"camera\":\"camera-2\",\"microphone\":\"mic-2\"},{\"camera\":\"camera-3\",\"microphone\":\"mic-3\"}],\n        \"createdDate\":\"2024-02-18\",\n        \"createdTime\":\"14:54:25\",\n        \"updatedDate\":\"2024-02-24\",\n        \"updatedTime\":\"23:29:19\",\n        \"deletedDate\":null,\n        \"deletedTime\":null\n    }\n}"'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/event/update:
    put:
      tags:
        - VideoEvent
      summary: Video - Event - Update - WordPress
      description: |-
        ### API Endpoint: Video - Event - Update - WordPress

        **Request Method:** PUT  
        **Request URL:** `http://localhost:3000/api/video/event/update`  
        **Headers:**
        - **Content-Type:** The format of the request body. Here, it is set to 'application/json', indicating that the body contains JSON data.

        ---

        **Request Body:**

        The body of the request includes two main sections: `options` and `details`.

        #### 1. **Options:**
        - **providerName:** Identifies the service used for the video provider, which is "wordpress."
        - **providerId:** A unique identifier for the provider. Currently left blank.
        - **apiKey:** Key for authenticating API requests. Currently set to null.
        - **apiSecret:** Secret key for added security. Currently set to null.
        - **apiClientId:** Client ID for the API. Currently set to null.
        - **authToken:** Token used for authentication. Currently set to null.
        - **server:** The server where the media is hosted. Currently set to null.
        - **rtmpUrl:** The URL for the RTMP stream. Currently set to null.
        - **streamKey:** Key used to authenticate the stream request. Currently set to null.
        - **channelUrl:** URL for the channel where the stream is broadcasted. Currently set to null.
        - **authUsername:** Username for authentication. Currently set to null.
        - **authPassword:** Password for authentication. Currently set to null.
        - **uniqueKey:** A unique string identifier for this video event.
        - **videoId:** The ID associated with the video being updated.
        - **accountId:** The ID of the user account related to this event.
        - **channelId:** The ID of the channel related to this event.
        - **sessionId:** The session ID for tracking the streaming session.
        - **streamId:** The ID of the stream.
        - **ipAddress:** The IP address of the user or server. Currently set to null.
        - **country:** The country associated with the event, set to "United States."
        - **state:** The state associated with the event, set to "California."
        - **title:** The title of the video event, which is "Fortune's Basketball Challenge."
        - **description:** Description of the video event, explaining that it features basketball games with amazing plays and challenges.
        - **tags:** Comma-separated tags associated with the video, including "basketball," "game," and "challenge."

        #### 2. **Details:**
        - **accountId:** Same as above, repeats the account ID.
        - **sessionId:** Matches the session ID from above for tracking.
        - **channelId:** Same as the channel ID specified in options.
        - **videoId:** Same as the video ID specified in options.
        - **title:** The title of the event, which is "Fortune's Basketball Challenge."
        - **description:** Description of the event, explaining that it features basketball games with amazing plays and challenges.
        - **tags:** Same tags as mentioned in options.
        - **streamType:** Identifies the type of stream, which is "Live."
        - **searchType:** The type of search associated with this event, listed as "Game."
        - **started:** Boolean value indicating if the streaming has started. Set to true.
        - **startedOn:** Timestamp when the event started.
        - **paused:** Boolean indicating if the streaming is paused. Set to false.
        - **pausedOn:** Timestamp when the stream was paused.
        - **stopped:** Boolean indicating if the streaming has stopped. Set to false.
        - **stoppedOn:** Timestamp for when the stream stopped, currently set to null.
        - **streamId:** The ID of the stream.
        - **channel:** Name of the channel where the event is broadcasted, "Fortune's Basketball Channel."
        - **category:** General category for the event, labeled as "Board."
        - **categoryId:** ID related to the category, specified as "categoryId."
        - **subCategory:** More specific categorization, here listed as "Outdoor Party."
        - **subCategoryId:** ID for the subcategory, specified as "subCategoryId."
        - **scheduleDate:** Date on which the event is scheduled, set to "2024-02-01."
        - **scheduleTime:** Time at which the event is scheduled to begin, set to "18:00:00."
        - **streamHours:** Duration for the stream in hours, set to 1.
        - **coverPhotoUrl:** URL pointing to the cover photo of the event, specified as "basketball-cover-url.jpg."
        - **providerPlaybackUrl:** URL for playback from the provider, currently set to an empty string.
        - **voteTokenQuantity:** Number of tokens available for voting, set to 100.
        - **votingTimeReset:** Time after which voting time resets, set to 5.
        - **voteButtonQuantity:** Number of voting buttons available, set to 4.
        - **voteButtonText1 & 2:** Text for the two voting buttons labeled "Layup" and "Dunk."
        - **isRewardsEnabled:** Boolean indicating whether rewards are enabled. Set to false.
        - **isTournamentEnabled:** Boolean indicating if the tournament feature is enabled. Set to true.
        - **tournamentButtonText1 & 2:** Text for buttons related to the tournament, "Hit" and "Miss."
        - **streamLocatorName:** Name for the stream locator, set to "basketball-locator-name."
        - **streamAssetName:** Name for the streaming asset, defined as "basketball-asset-name."
        - **platformVideoIds:** Collection of video IDs for various platforms, all currently set to false indicating no IDs are assigned.
        - **platformEventIds:** Collection of event IDs for various platforms, all currently set to false indicating no IDs are assigned.
        - **primaryCameraName:** Name of the primary camera used for streaming, designated as "Sony 4K Ultra HD WebCam."
        - **primaryMicrophoneName:** Name of the primary microphone used, identified as "WirelessAudioTek Device."
        - **primarySpeakerName:** Name of the primary speaker used, identified as "Bose-Mega-Speaker 2.0."
        - **additionalCameras:** List of additional cameras and microphones used, defining pairs of camera and microphone names.
        - **createdDate & Time:** Date and time when the event was created, recorded as "2024-02-18" and "14:54:25."
        - **updatedDate & Time:** Date and time when the event was last updated, recorded as "2024-02-24" and "23:29:19."
        - **deletedDate & Time:** These fields are currently set to null, indicating that the event has not been deleted.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"options\":{\n        \"providerName\": \"wordpress\",\n        \"providerId\": \"\",\n        \"apiKey\": null,\n        \"apiSecret\": null,\n        \"apiClientId\": null,\n        \"authToken\": null,\n        \"server\": null,\n        \"rtmpUrl\": null,\n        \"streamKey\": null,\n        \"channelUrl\": null,\n        \"authUsername\": null,\n        \"authPassword\": null,\n        \"uniqueKey\": \"uniqueKey\",\n        \"videoId\": \"videoId\",\n        \"accountId\": \"accountId\",\n        \"channelId\": \"channelId\",\n        \"sessionId\": \"sessionId\",\n        \"streamId\": \"streamId\",\n        \"ipAddress\": null,\n        \"country\": \"United States\",\n        \"state\": \"California\",\n        \"title\":\"Fortune''s Basketball Challenge\",\n        \"description\":\"Basketball game featuring amazing plays and challenges.\",\n        \"tags\":\"basketball,game,challenge\"\n    },\n    \"details\":{\n        \"accountId\":\"accountId\",\n        \"sessionId\":\"sessionId\",\n        \"channelId\":\"channelId\",\n        \"videoId\":\"videoId\",\n        \"title\":\"Fortune''s Basketball Challenge\",\n        \"description\":\"Basketball game featuring amazing plays and challenges.\",\n        \"tags\":\"basketball,game,challenge\",\n        \"streamType\":\"Live\",\n        \"searchType\":\"Game\",\n        \"started\":true,\n        \"startedOn\":\"2024-02-24T22:41:42.483Z\",\n        \"paused\":false,\n        \"pausedOn\":\"2024-02-24T22:41:42.483Z\",\n        \"stopped\":false,\n        \"stoppedOn\":null,\n        \"streamId\":\"streamId\",\n        \"channel\":\"Fortune''s Basketball Channel\",\n        \"category\":\"Board\",\n        \"categoryId\":\"categoryId\",\n        \"subCategory\":\"Outdoor Party\",\n        \"subCategoryId\":\"subCategoryId\",\n        \"scheduleDate\":\"2024-02-01\",\n        \"scheduleTime\":\"18:00:00\",\n        \"streamHours\":1,\n        \"coverPhotoUrl\":\"basketball-cover-url.jpg\",\n        \"providerPlaybackUrl\":\"\",\n        \"voteTokenQuantity\":100,\n        \"votingTimeReset\":\"5\",\n        \"voteButtonQuantity\":4,\n        \"voteButtonText1\":\"Layup\",\n        \"voteButtonText2\":\"Dunk\",\n        \"isRewardsEnabled\":false,\n        \"isTournamentEnabled\":true,\n        \"tournamentButtonText1\":\"Hit\",\n        \"tournamentButtonText2\":\"Miss\",\n        \"streamLocatorName\":\"basketball-locator-name\",\n        \"streamAssetName\":\"basketball-asset-name\",\n        \"platformVideoIds\":{\"youtubeOutputId\":false,\"twitchOutputId\":false,\"instagramOutputId\":false,\"tiktokOutputId\":false,\"facebookOutputId\":false,\"vimeoOutputId\":false,\"periscopeOutputId\":false,\"linkedInOutputId\":false,\"brightcoveOutputId\":false,\"twitterOutputId\":false,\"dailymotionOutputId\":false,\"kickOutputId\":false,\"rumbleOutputId\":false,\"trovoOutputId\":false,\"restreamPlaybackUrl\":false,\"telegramOutputId\":false,\"amazonLiveOutputId\":false,\"dLiveOutputId\":false,\"mixCloudOutputId\":false,\"kakaoTVOutputId\":false,\"naverTVOutputId\":false,\"nimoTVOutputId\":false,\"nonoLiveOutputId\":false,\"huyaOutputId\":false,\"zhanquiTVOutputId\":false,\"bilibiliOutputId\":false,\"afreecaTVOutputId\":false,\"mlgOutputId\":false,\"douyuOutputId\":false,\"liveEduOutputId\":false,\"vaughnLiveOutputId\":false,\"breakersTVOutputId\":false,\"picartoTVOutputId\":false,\"fc2LiveOutputId\":false,\"steamOutputId\":false},\n        \"platformEventIds\":{\"facebookGroupEventId\":false,\"facebookPageEventId\":false,\"linkedInEventId\":false,\"youtubeEventId\":false,\"eventBrightEventId\":false,\"meetupEventId\":false,\"calendlyEventId\":false,\"googleEventId\":false,\"twitterEventId\":false,\"instagramEventId\":false,\"redditEventId\":false,\"telegramEventId\":false,\"tiktokEventId\":false,\"pinterestEventId\":false,\"wordpressEventId\":false,\"discordEventId\":false,\"mediumEventId\":false,\"tumblrEventId\":false,\"wixEventId\":false},\n        \"primaryCameraName\":\"Sony 4K Ultra HD WebCam\",\n        \"primaryMicrophoneName\":\"WirelessAudioTek Device\",\n        \"primarySpeakerName\":\"Bose-Mega-Speaker 2.0\",\n        \"additionalCameras\":[{\"camera\":\"camera-2\",\"microphone\":\"mic-2\"},{\"camera\":\"camera-3\",\"microphone\":\"mic-3\"}],\n        \"createdDate\":\"2024-02-18\",\n        \"createdTime\":\"14:54:25\",\n        \"updatedDate\":\"2024-02-24\",\n        \"updatedTime\":\"23:29:19\",\n        \"deletedDate\":null,\n        \"deletedTime\":null\n    }\n}"'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/event/delete:
    post:
      tags:
        - VideoEvent
      summary: Video - Event - Delete - WordPress
      description: |-
        ### Endpoint Description: Video - Event - Delete - WordPress

        #### Endpoint Summary
        This endpoint is used to delete a video event that is hosted on WordPress. It requires a POST request to the specified URL and expects JSON formatted data in the body.

        #### Request Details

        - **Method**: 
          - `POST`: This indicates that you are sending data to the server to request the deletion of a video event.

        - **URL**: 
          - `http://localhost:3000/api/video/event/delete`: Local server endpoint for deleting video events.

        - **Headers**:
          - `Content-Type`: `application/json`: This header specifies that the body content type is JSON.

        #### Body Parameters

        ##### Options Object
        Contains various settings and identifiers related to the video event:

        - **providerName**: 
          - Specifies the name of the content provider, e.g., "wordpress".

        - **providerId**: 
          - Unique identifier for the content provider (leave empty if not needed).

        - **apiKey**: 
          - API key for authentication with the provider (can be null).

        - **apiSecret**: 
          - Secret key for secure access (can be null).

        - **apiClientId**: 
          - Client ID for the API requests (can be null).

        - **authToken**: 
          - Token used for authentication (can be null).

        - **server**: 
          - The server used for the video event (can be null).

        - **rtmpUrl**: 
          - Real-Time Messaging Protocol URL (can be null).

        - **streamKey**: 
          - Key for accessing the stream (can be null).

        - **channelUrl**: 
          - URL linking to the particular channel (can be null).

        - **authUsername**: 
          - Username for authentication (can be null).

        - **authPassword**: 
          - Password for authentication (can be null).

        - **uniqueKey**: 
          - Unique key used to identify this event (required).

        - **videoId**: 
          - The ID of the video that is to be deleted (required).

        - **accountId**: 
          - Identifier for the user account associated with the video (required).

        - **channelId**: 
          - Identifier for the channel (required).

        - **sessionId**: 
          - Identifier for the session in which the video event was created (required).

        - **streamId**: 
          - Identifier for the stream (required).

        - **ipAddress**: 
          - IP address of the user making the request (can be null).

        - **country**: 
          - The country associated with the event (default is "United States").

        - **state**: 
          - The state associated with the event (default is "California").

        - **title**: 
          - Title of the video event (for reference).

        - **description**: 
          - Short textual description of the video event.

        - **tags**: 
          - Comma-separated list of tags related to the video event.

        ##### Details Object
        Represents specific details of the video event to be deleted:

        - **accountId**: 
          - Same as in options, for user account identification.

        - **sessionId**:
          - Same as in options, for session identification.

        - **channelId**:
          - Same as in options, for channel identification.

        - **videoId**:
          - Same as in options, ID of the video to delete.

        - **title**:
          - Title of the event.

        - **description**:
          - Description of the event.

        - **tags**:
          - Tags associated with the video event.

        - **streamType**:
          - Represents the type of streaming (e.g., "Live").

        - **searchType**:
          - Refers to the type of content for searching (e.g., "Game").

        - **started**:
          - Indicates if the stream has started (boolean value).

        - **startedOn**:
          - Timestamp noting when the stream started.

        - **paused**:
          - Indicates if the stream has been paused (boolean value).

        - **pausedOn**:
          - Timestamp noting when the stream was paused.

        - **stopped**:
          - Indicates if the stream has been stopped (boolean value).

        - **stoppedOn**:
          - Timestamp noting when the stream was stopped (can be null).

        - **streamId**:
          - Same as in options, identifying the stream.

        - **channel**:
          - Name of the channel.

        - **category**:
          - Main category of the video content.

        - **categoryId**:
          - Identifier for the category.

        - **subCategory**:
          - Subcategory of the video content.

        - **subCategoryId**:
          - Identifier for the subcategory.

        - **scheduleDate**:
          - Date when the event was scheduled.

        - **scheduleTime**:
          - Time when the event was scheduled.

        - **streamHours**:
          - Duration of the stream in hours.

        - **coverPhotoUrl**:
          - URL for the cover photo of the event.

        - **providerPlaybackUrl**:
          - URL for playback through the provider (can be empty).

        - **voteTokenQuantity**:
          - Number of tokens required to vote.

        - **votingTimeReset**:
          - Time in seconds for resetting voting.

        - **voteButtonQuantity**:
          - Number of vote buttons available.

        - **voteButtonText1** and **voteButtonText2**:
          - Texts for the votable options.

        - **isRewardsEnabled**:
          - Indicates if rewards are enabled (boolean).

        - **isTournamentEnabled**:
          - Indicates if a tournament feature is active (boolean).

        - **tournamentButtonText1** and **tournamentButtonText2**:
          - Button texts for tournament actions.

        - **streamLocatorName**:
          - Name used to locate the stream.

        - **streamAssetName**:
          - Name associated with the stream's asset.

        - **platformVideoIds**:
          - Object containing identifiers for different platforms.

        - **platformEventIds**:
          - Object containing event identifiers for multiple platforms.

        - **primaryCameraName**: 
          - Name of the main camera used for the stream.

        - **primaryMicrophoneName**: 
          - Name of the main microphone used for the stream.

        - **primarySpeakerName**: 
          - Name of the main speaker used for audio playback.

        - **additionalCameras**: 
          - Array of objects representing additional camera and microphone setups.

        - **createdDate**: 
          - Date when the video event was created.

        - **createdTime**: 
          - Time when the video event was created.

        - **updatedDate**: 
          - Date the video event was last updated.

        - **updatedTime**: 
          - Time the video event was last updated.

        - **deletedDate**: 
          - Date when the video event was deleted (can be null).

        - **deletedTime**: 
          - Time when the video event was deleted (can be null).
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"options\":{\n        \"providerName\": \"wordpress\",\n        \"providerId\": \"\",\n        \"apiKey\": null,\n        \"apiSecret\": null,\n        \"apiClientId\": null,\n        \"authToken\": null,\n        \"server\": null,\n        \"rtmpUrl\": null,\n        \"streamKey\": null,\n        \"channelUrl\": null,\n        \"authUsername\": null,\n        \"authPassword\": null,\n        \"uniqueKey\": \"uniqueKey\",\n        \"videoId\": \"videoId\",\n        \"accountId\": \"accountId\",\n        \"channelId\": \"channelId\",\n        \"sessionId\": \"sessionId\",\n        \"streamId\": \"streamId\",\n        \"ipAddress\": null,\n        \"country\": \"United States\",\n        \"state\": \"California\",\n        \"title\":\"Fortune''s Basketball Challenge\",\n        \"description\":\"Basketball game featuring amazing plays and challenges.\",\n        \"tags\":\"basketball,game,challenge\"\n    },\n    \"details\":{\n        \"accountId\":\"accountId\",\n        \"sessionId\":\"sessionId\",\n        \"channelId\":\"channelId\",\n        \"videoId\":\"videoId\",\n        \"title\":\"Fortune''s Basketball Challenge\",\n        \"description\":\"Basketball game featuring amazing plays and challenges.\",\n        \"tags\":\"basketball,game,challenge\",\n        \"streamType\":\"Live\",\n        \"searchType\":\"Game\",\n        \"started\":true,\n        \"startedOn\":\"2024-02-24T22:41:42.483Z\",\n        \"paused\":false,\n        \"pausedOn\":\"2024-02-24T22:41:42.483Z\",\n        \"stopped\":false,\n        \"stoppedOn\":null,\n        \"streamId\":\"streamId\",\n        \"channel\":\"Fortune''s Basketball Channel\",\n        \"category\":\"Board\",\n        \"categoryId\":\"categoryId\",\n        \"subCategory\":\"Outdoor Party\",\n        \"subCategoryId\":\"subCategoryId\",\n        \"scheduleDate\":\"2024-02-01\",\n        \"scheduleTime\":\"18:00:00\",\n        \"streamHours\":1,\n        \"coverPhotoUrl\":\"basketball-cover-url.jpg\",\n        \"providerPlaybackUrl\":\"\",\n        \"voteTokenQuantity\":100,\n        \"votingTimeReset\":\"5\",\n        \"voteButtonQuantity\":4,\n        \"voteButtonText1\":\"Layup\",\n        \"voteButtonText2\":\"Dunk\",\n        \"isRewardsEnabled\":false,\n        \"isTournamentEnabled\":true,\n        \"tournamentButtonText1\":\"Hit\",\n        \"tournamentButtonText2\":\"Miss\",\n        \"streamLocatorName\":\"basketball-locator-name\",\n        \"streamAssetName\":\"basketball-asset-name\",\n        \"platformVideoIds\":{\"youtubeOutputId\":false,\"twitchOutputId\":false,\"instagramOutputId\":false,\"tiktokOutputId\":false,\"facebookOutputId\":false,\"vimeoOutputId\":false,\"periscopeOutputId\":false,\"linkedInOutputId\":false,\"brightcoveOutputId\":false,\"twitterOutputId\":false,\"dailymotionOutputId\":false,\"kickOutputId\":false,\"rumbleOutputId\":false,\"trovoOutputId\":false,\"restreamPlaybackUrl\":false,\"telegramOutputId\":false,\"amazonLiveOutputId\":false,\"dLiveOutputId\":false,\"mixCloudOutputId\":false,\"kakaoTVOutputId\":false,\"naverTVOutputId\":false,\"nimoTVOutputId\":false,\"nonoLiveOutputId\":false,\"huyaOutputId\":false,\"zhanquiTVOutputId\":false,\"bilibiliOutputId\":false,\"afreecaTVOutputId\":false,\"mlgOutputId\":false,\"douyuOutputId\":false,\"liveEduOutputId\":false,\"vaughnLiveOutputId\":false,\"breakersTVOutputId\":false,\"picartoTVOutputId\":false,\"fc2LiveOutputId\":false,\"steamOutputId\":false},\n        \"platformEventIds\":{\"facebookGroupEventId\":false,\"facebookPageEventId\":false,\"linkedInEventId\":false,\"youtubeEventId\":false,\"eventBrightEventId\":false,\"meetupEventId\":false,\"calendlyEventId\":false,\"googleEventId\":false,\"twitterEventId\":false,\"instagramEventId\":false,\"redditEventId\":false,\"telegramEventId\":false,\"tiktokEventId\":false,\"pinterestEventId\":false,\"wordpressEventId\":false,\"discordEventId\":false,\"mediumEventId\":false,\"tumblrEventId\":false,\"wixEventId\":false},\n        \"primaryCameraName\":\"Sony 4K Ultra HD WebCam\",\n        \"primaryMicrophoneName\":\"WirelessAudioTek Device\",\n        \"primarySpeakerName\":\"Bose-Mega-Speaker 2.0\",\n        \"additionalCameras\":[{\"camera\":\"camera-2\",\"microphone\":\"mic-2\"},{\"camera\":\"camera-3\",\"microphone\":\"mic-3\"}],\n        \"createdDate\":\"2024-02-18\",\n        \"createdTime\":\"14:54:25\",\n        \"updatedDate\":\"2024-02-24\",\n        \"updatedTime\":\"23:29:19\",\n        \"deletedDate\":null,\n        \"deletedTime\":null\n    }\n}"'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/static/create:
    post:
      tags:
        - VideoStatic
      summary: Video - Static - Create
      description: |-
        ### Endpoint Description: Video - Static - Create

        #### Authentication
        - **Type**: Bearer
          - **Key**: Token
            - This is the authentication token required to access the endpoint. It should be a valid bearer token prefixed with "Bearer ".

        #### Request Method
        - **Method**: POST
          - This request uses the POST method to submit data to the specified URL.

        #### URL
        - **URL**: `http://localhost:3000/api/video/static/create`
          - This is the endpoint where the request will be made to create a static video.

        #### Headers
        - **Headers**: 
          - Currently, there are no specific headers provided as `disabled: true`. This means no additional headers are currently set.

        #### Request Body
        - **Body**:
          - **Mode**: Raw
            - The body of the request is sent in raw format.
          - **Raw**: 
            - A JSON string containing the following fields:
              - **sessionId**: `sessionId`
                - This is a unique identifier for the user session.
              - **accountId**: `accountId`
                - This identifies the user’s account in the system.
              - **searchType**: `Game`
                - Indicates the type of content being categorized; in this case, it's a game.
              - **title**: `Sample Video Title`
                - This is the title of the video being created.
              - **description**: `Sample video description.`
                - A brief description providing more information about the video.
              - **tags**: `tag1,tag2`
                - Tags associated with the video, used to categorize or enhance searchability.
              - **channelId**: `channelId`
                - The identifier for the channel under which the video will be categorized.
              - **category**: `Comedy`
                - The main category under which the video falls, in this instance, comedy.
              - **subCategory**: `Improv`
                - A more specific category related to the main category, denoting improv content.
              - **scheduleDate**: `2024-02-01`
                - The date when the video is scheduled to be published.
              - **scheduleTime**: `18:00:00`
                - The time at which the video is set to be published on the schedule date.
              - **coverPhotoUrl**: `sample-cover-url.jpg`
                - A URL pointing to the cover photo image for the video.
              - **isRewardsEnabled**: `false`
                - A boolean indicating whether rewards are enabled for viewers of this video.
              - **videoUrl**: `http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4`
                - The URL where the actual video file is hosted.

        #### Options
        - **Options**: 
          - **Raw**:
            - **Language**: JSON
              - Indicates that the raw data format is JSON, which is necessary for parsing and processing the input data correctly.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                searchType: Game
                title: Sample Video Title
                description: Sample video description.
                tags: tag1,tag2
                channelId: channelId
                category: Comedy
                subCategory: Improv
                scheduleDate: '2024-02-01'
                scheduleTime: '18:00:00'
                coverPhotoUrl: sample-cover-url.jpg
                isRewardsEnabled: false
                videoUrl: http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/static/update:
    put:
      tags:
        - VideoStatic
      summary: Video - Static - Update
      description: |-
        ### Endpoint: Video - Static - Update

        **Method**: PUT

        **Request URL**: `http://localhost:3000/api/video/static/update`

        #### Authentication

        - **Auth Type**: Bearer
          - **Token**: A string value that represents the bearer token needed for authentication. It should have the format `BearerToken`.

        #### Headers

        - **Client-UUID**: A unique identifier for the client making the request. This value should be replaced with a relevant UUID to identify the client.

        #### Request Body

        The request body is in JSON format and contains the following fields:

        - **sessionId**: A unique identifier for the session associated with the request. This should be replaced with the actual session ID.

        - **accountId**: The unique identifier for the user's account. Replace this value with the actual account ID.

        - **staticId**: The unique identifier for the static video that needs to be updated. This should be replaced with the actual static video ID.

        - **searchType**: Describes the type of search associated with the video. For this request, the value should be set to "Game".

        - **title**: The title of the video. This is the name that will be displayed and must be provided.

        - **description**: A brief description of the video content. This field should be filled with an overview or summary of the video.

        - **tags**: A comma-separated list of tags associated with the video. These tags help categorize the content and improve searchability.

        - **channelId**: The unique identifier for the channel under which the video is categorized. Replace this with the relevant channel ID.

        - **category**: The main category under which the video falls. For this request, the value is "Comedy".

        - **subCategory**: The subcategory within the main category. For this request, the value is "Improv".

        - **scheduleDate**: The date for scheduling the video in the format `YYYY-MM-DD`. In this request, the sample date is `2024-02-01`.

        - **scheduleTime**: The time for scheduling the video in the format `HH:MM:SS`. In this request, the sample time is `18:00:00`.

        - **coverPhotoUrl**: The URL of the cover photo for the video. This value should point to the location of the cover image (e.g., `sample-cover-url.jpg`).

        - **isRewardsEnabled**: A boolean value indicating whether rewards should be enabled for this video. Set this to `true` or `false` based on the requirement. In this request, it is set to `false`.

        - **videoUrl**: The URL pointing to the location of the actual video content. For this request, the sample URL is `http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4`.

        ### Summary

        This endpoint allows users to update existing static video entries by providing necessary identifiers and metadata in the request body. Proper authentication and required headers must be included in the request for successful processing.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                staticId: staticId
                searchType: Game
                title: Sample Video Title
                description: Sample video description.
                tags: tag1,tag2
                channelId: channelId
                category: Comedy
                subCategory: Improv
                scheduleDate: '2024-02-01'
                scheduleTime: '18:00:00'
                coverPhotoUrl: sample-cover-url.jpg
                isRewardsEnabled: false
                videoUrl: http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/static/get:
    get:
      tags:
        - VideoStatic
      summary: Video - Static - Get
      description: |-
        {
          "name": "Video - Static - Get",
          "description": {
            "request": {
              "auth": {
                "type": "bearer": "Authentication method used is bearer token, which requires a valid token for access.",
                "bearer": [
                  {
                    "key": "token": "The specific key representing the authentication token required for the API request.",
                    "value": "BearerToken": "A placeholder indicating where the actual bearer token should be placed in the request.",
                    "type": "string": "Indicates that the token should be provided as a string."
                  }
                ]
              },
              "method": "GET": "The HTTP method used for the request, which in this case is GET, meaning the request is intended to retrieve data.",
              "url": "http://localhost:3000/api/video/static/get/?channelId=channelId&staticId=staticId": "The endpoint URL where the API request is sent. It includes parameters for channelId and staticId, which should be replaced with actual values when making the request.",
              "headers": [
                {
                  "key": "": "An empty key A placeholder for any custom headers that may be added, currently not in use.",
                  "value": "": "Placeholder for header values; currently not in use.",
                  "type": "default": "Indicates the default type of header; currently, the header is disabled.",
                  "disabled": true: "Indicates that this header is currently disabled and will not be sent with the request."
                }
              ],
              "body": {
                "mode": "raw": "The type of body content being sent with the request, which is in raw format (not currently used in a GET request).",
                "raw": "": "An empty value, as the GET request typically doesn't send a body."
              }
            }
          }
        }
      security:
        - bearerAuth: []
      parameters:
        - name: channelId
          in: query
          schema:
            type: string
          example: channelId
        - name: staticId
          in: query
          schema:
            type: string
          example: staticId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/static/all:
    get:
      tags:
        - VideoStatic
      summary: Video - Static - Get All by Channel Name
      description: |-
        ### API Endpoint Description

        #### Name:
        **Video - Static - Get All by Channel Name**
        - This endpoint retrieves all static videos associated with a specific channel name.

        #### Request:

        - **Auth**:
          - **Type**: "bearer"
            - This indicates that the request requires authentication using a bearer token.
          - **Bearer**:
            - **Key**: "token"
              - This represents the key used for authentication.
            - **Value**: "BearerToken"
              - This is a placeholder for the actual bearer token. Users should replace this with their own valid token.
            - **Type**: "string"
              - This indicates that the token should be provided as a string.

        - **Method**: "GET"
          - This specifies that the request method used to access the endpoint is a GET request, which means data will be fetched from the server.

        - **URL**: 
          - `"http://localhost:3000/api/video/static/all/?accountId=accountId&channel=Fortune"`
          - This is the endpoint where the request will be sent. It consists of the following components:
            - **Base URL**: `http://localhost:3000`
              - This indicates that the server is running locally on port 3000.
            - **Path**: `/api/video/static/all/`
              - This specifies the resource being accessed, which is a collection of static videos.
            - **Query Parameters**:
              - `accountId=accountId`
                - This parameter should be replaced with the actual account ID to filter the videos associated with that account.
              - `channel=Fortune`
                - This parameter specifies the channel name for which the videos are being retrieved. In this case, it is set to "Fortune".

        - **Headers**:
          - An array of headers that can be sent with the request.
            - **Key**: ""
              - This is currently empty and implies no custom headers are being added to the request.
            - **Value**: ""
              - This is also empty, reflecting that there are no specific values set for the headers.
            - **Type**: "default"
              - This indicates the type of header being used.
            - **Disabled**: true
              - This means that this header will not be sent with the request.

        - **Body**:
          - **Mode**: "raw"
            - Indicates that the body content is sent as raw data.
          - **Raw**: ""
            - This is empty, suggesting that no data is required to be sent in the body of the request for this GET operation.

        ### Summary
        This endpoint is designed to fetch all static videos for a specified channel associated with a given account ID. It requires bearer token authentication and uses a GET request method. Ensure to replace placeholder values with actual data where necessary.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: channel
          in: query
          schema:
            type: string
          example: Fortune
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/static/delete:
    post:
      tags:
        - VideoStatic
      summary: Video - Static - Delete
      description: |-
        ### Description of the Endpoint "Video - Static - Delete"

        - **Name**: 
          - This is the name of the API endpoint which is used for deleting a static video.

        - **Request**: 
          - This section contains the details required to make the API call.

          - **Auth**: 
            - **Type**: 
              - Specifies the authentication method used for this request. In this case, it is set to "bearer" which requires a token for authorization.
            - **Bearer**: 
              - This is an array that contains the authentication details. The following details are included:
                - **Key**: 
                  - The identifier for the token, which in this case is "token".
                - **Value**: 
                  - Represents the session identifier that is required for validating the user's session.
                - **Type**: 
                  - Indicates the data type of the token, which is set to "string".

          - **Method**: 
            - This specifies the HTTP method used for the request. The method chosen here is "POST", indicating that data will be sent to the server to perform the delete operation.

          - **URL**: 
            - This is the endpoint where the delete request is sent. For this API call, the URL is "http://localhost:3000/api/video/static/delete".

          - **Headers**: 
            - This section includes the headers that can be sent along with the request. In this case, there is an entry but it is disabled and has no key or value set.

          - **Body**: 
            - This section contains the data that will be sent in the body of the request.
            - **Mode**: 
              - The format of the body data. It is set to "raw", meaning the data will be sent as a raw JSON string.
            - **Raw**: 
              - This is the actual data being sent in the body. It is a JSON object containing:
                - **sessionId**: 
                  - The ID representing the current user session.
                - **accountId**: 
                  - The ID of the account associated with the video that is to be deleted.
                - **videoId**: 
                  - The ID of the video that is being targeted for deletion. 

        Use this information as a guide to understand how to interact with the "Video - Static - Delete" API endpoint effectively.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"videoId\":\"videoId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/stream/create:
    post:
      tags:
        - VideoStream
      summary: Video - Stream - Create
      description: |-
        ### Endpoint: Video - Stream - Create

        **Request Type**: POST  
        **URL**: `http://localhost:3000/api/video/stream/create`  

        #### Authorization
        - **Type**: Bearer Token  
          - **Key**: `token`  
          - **Value**: `BearerToken`  
          - **Type**: string  
          This section is used to authorize the user making the request. The bearer token must be included in the request to access the resource securely.

        #### Headers
        - **Key**: (none)  
        - **Value**: (none)  
        - **Type**: default  
        - **Disabled**: true  
        There are currently no custom headers being used for this request as this part is disabled. 

        #### Body
        - **Mode**: raw  
          This indicates that the body of the request will be sent in a raw format. 

        **Raw JSON Data**:
        ```json
        {
          "sessionId": "sessionId",
          "accountId": "accountId",
          "channelId": "channelId",
          "videoId": "videoId",
          "isPrimaryCamera": false,
          "isPrimaryAudio": false,
          "videoInputName": "My MacBook Camera",
          "audioInputName": "My macBook Microphone",
          "started": false,
          "paused": false,
          "stopped": false
        }
        ```
        **Field Descriptions**:
        - **sessionId**: Unique identifier for the streaming session. This value should be replaced with the actual session ID.
        - **accountId**: Identifier for the user’s account. It should match the account related to the streaming activity.
        - **channelId**: Identifier for the channel where the video will be streamed. Must correspond to an existing channel.
        - **videoId**: Identifier for the video being streamed. This should be set to the specific video you want to stream.
        - **isPrimaryCamera**: Boolean value (true or false) indicating whether the primary camera is being used for the stream. Default is false.
        - **isPrimaryAudio**: Boolean value (true or false) indicating whether the primary audio source is being used for the stream. Default is false.
        - **videoInputName**: Name of the video input device being used, such as a webcam. Default value is "My MacBook Camera".
        - **audioInputName**: Name of the audio input device being used, such as a microphone. Default value is "My macBook Microphone".
        - **started**: Boolean value representing whether the stream has started. Default is false.
        - **paused**: Boolean value indicating if the stream is currently paused. Default is false.
        - **stopped**: Boolean value indicating if the stream has stopped. Default is false.

        This endpoint is used for creating a new video stream session with specific configuration details for the video and audio input devices. Be sure to replace placeholder values with actual data before sending the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                channelId: channelId
                videoId: videoId
                isPrimaryCamera: false
                isPrimaryAudio: false
                videoInputName: My MacBook Camera
                audioInputName: My macBook Microphone
                started: false
                paused: false
                stopped: false
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/stream/update:
    put:
      tags:
        - VideoStream
      summary: Video - Stream - Update - Stop Stream
      description: |-
        ### API Endpoint: Video - Stream - Update - Stop Stream

        #### Request Details:

        - **Name**: This is the title of the request, indicating the action to update and stop a video stream.

        - **Authentication**:
          - **Type**: Bearer Token
            - **Key**: `token`
            - **Value**: `BearerToken`
            - **Type**: This denotes the type of the authentication token required to access the API endpoint, which is a string format.

        - **HTTP Method**: 
          - **PUT**: This indicates that the request will modify existing data on the server.

        - **URL**: 
          - `http://localhost:3000/api/video/stream/update`: This is the endpoint where the request is to be sent. It is expected to be a local server running on port 3000.

        #### Headers:

        - **Client-UUID**:
          - **Key**: `Client-UUID`
          - **Value**: `ClientUUID`
          - **Type**: This header is used to uniquely identify the client making the request. It is typically a UUID (Universally Unique Identifier) string that helps in tracking requests to the server.

        #### Request Body: 
        The body of the request is formatted as raw JSON and contains the following fields:

        - **sessionId**: 
          - This field is used to specify the unique identifier for the session in which the video stream is running.

        - **accountId**: 
          - This field represents the unique identifier of the account associated with the video stream.

        - **channelId**: 
          - This field specifies the unique identifier for the channel where the stream is being broadcast.

        - **videoId**: 
          - This field is used to provide the unique identifier for the video that is being streamed.

        - **streamId**: 
          - This field represents the unique identifier for the stream itself.

        - **isPrimaryCamera**: 
          - A boolean value indicating whether the primary video camera is in use. This can be set to `true` or `false`.

        - **isPrimaryAudio**: 
          - A boolean value indicating whether the primary audio device is in use. This can be set to `true` or `false`.

        - **videoInputName**: 
          - This field specifies the name of the video input device being used, for example, "My MacBook Camera".

        - **audioInputName**: 
          - This field specifies the name of the audio input device being used, for example, "My MacBook Microphone".

        - **started**: 
          - A boolean value that indicates if the stream has started. It can be set to `true` or `false`.

        - **paused**: 
          - A boolean value indicating whether the stream is currently paused. It can be set to `true` or `false`.

        - **stopped**: 
          - A boolean value that indicates if the stream has been stopped. It can be set to `true` or `false`.

        This request format allows the user to update the status of a video stream and provide additional details about the various inputs used during the streaming session.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                channelId: channelId
                videoId: videoId
                streamId: streamId
                isPrimaryCamera: false
                isPrimaryAudio: false
                videoInputName: My MacBook Camera
                audioInputName: My macBook Microphone
                started: true
                paused: false
                stopped: true
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/stream/get:
    get:
      tags:
        - VideoStream
      summary: Video - Stream - Get
      description: |-
        ### Endpoint: Video - Stream - Get

        #### Request Details:
        - **Authentication**:
          - **Type**: Bearer
            - This indicates that the API requires a bearer token for authentication. You must provide a valid token in the request header.
            - **Token**:
              - **Key**: token
              - **Value**: BearerToken (replace with your actual token)
              - **Type**: string
              - The bearer token is used to securely access the API.

        - **Method**: GET
          - This specifies that the request uses the GET HTTP method, which retrieves data from the server.

        - **URL**:
          - **Format**: `http://localhost:3000/api/video/stream/get/?streamId=streamId&channelId=channelId`
            - You need to replace `streamId` and `channelId` in the URL with the actual values you want to query.
            - This URL targets the specific endpoint responsible for retrieving video stream data based on the given parameters.

        - **Headers**:
          - This section contains any additional HTTP headers you may need to send with the request.
          - In this case, no headers are defined (it has an empty key and value), and it is marked as disabled. You can add custom headers if required for your specific use case.

        - **Body**:
          - **Mode**: raw
            - This indicates that the body of the request is sent in a raw format, but for this GET request, the body is not utilized.
          - **Raw**: 
            - The raw body content is empty, meaning that no data is being sent in the body of the request. GET requests typically do not include a body.

        ### Notes:
        - Ensure you have a valid bearer token to access this endpoint.
        - Make sure to correctly replace the placeholders in the URL with real `streamId` and `channelId` values prior to making the request.
      security:
        - bearerAuth: []
      parameters:
        - name: streamId
          in: query
          schema:
            type: string
          example: streamId
        - name: channelId
          in: query
          schema:
            type: string
          example: channelId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/stream/all:
    get:
      tags:
        - VideoStream
      summary: Video - Stream - Get All
      description: |-
        {
          "name": "Video - Stream - Get All",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "BearerToken",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "url": "http://localhost:3000/api/video/stream/all/?channelId=channelId",
            "headers": [
              {
                "key": "",
                "value": "",
                "type": "default",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            }
          }
        }

        ### Description:

        - **name**: This field specifies the name of the request. In this case, it indicates that the request is related to retrieving all video streams.

        - **request**: This is an object that contains all the details of the request being made.

          - **auth**: This section defines the type of authentication needed for this request.

            - **type**: Indicates the authentication method, which is set to "bearer" for token-based authentication.
            
            - **bearer**: An array that includes the authentication token.
            
              - **key**: This is a label for the token value.
              
              - **value**: Actual bearer token that needs to be included in the request for authentication. The sample shows a placeholder "BearerToken".
              
              - **type**: Denotes the data type of the value, in this case, it is a "string".

          - **method**: This indicates the HTTP method used to send the request. Here, it is set to "GET", meaning the request is intended to retrieve data.

          - **url**: This is the endpoint where the request is being sent. It shows the base URL and includes a query parameter `channelId` that is used to specify the channel for which the video streams are being requested.

          - **headers**: This is an array of headers that may be sent along with the request.

            - **key**: This field is for the name of the header, but in this instance, it is left empty.
            
            - **value**: This is the value for the header, but it is also empty, suggesting that no custom headers are being used here.
            
            - **type**: Indicates the type of header, which is set to "default". 

            - **disabled**: A boolean that signifies whether this header is active or not. It is set to true, meaning this header is currently disabled.

          - **body**: This section details the body of the request.

            - **mode**: Specifies the format of the body content. It is set to "raw", indicating raw input data can be provided.
            
            - **raw**: This field holds the actual content of the body. It is empty in this case, implying that no body content is needed for a GET request.
        }
      security:
        - bearerAuth: []
      parameters:
        - name: channelId
          in: query
          schema:
            type: string
          example: channelId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/stream/delete:
    post:
      tags:
        - VideoStream
      summary: Video - Stream - Delete
      description: |-
        **Description of each data in the endpoint "Video - Stream - Delete":**

        - **name**: This represents the name of the API request. In this case, it identifies the action to delete a video stream.

        - **request**: This key contains all the necessary details required to make the API request.

          - **auth**: This section specifies the authentication method to be used when making the request.
            - **type**: Indicates the type of authentication. Here it is a bearer token authentication.
            - **bearer**: An array that holds details about the bearer token.
              - **key**: The name of the token field used in the authentication header.
              - **value**: This is a placeholder for the actual token value, denoting it should be replaced with a session ID.
              - **type**: Specifies that the value should be treated as a string.

          - **method**: This indicates the HTTP method used for the request. Here, it is a POST method, which is typically used to send data to the server.

          - **url**: The endpoint URL where the API request will be sent. In this case, it points to the delete video stream functionality.

          - **headers**: This section can include additional headers for the request.
            - **key**: The name of the header.
            - **value**: The value of the header.
            - **type**: The type of the header; indicated as default in this instance.
            - **disabled**: A boolean indicating whether this header is currently active. It is set to true, meaning this header will not be sent with the request.

          - **body**: This part of the request provides the data to be sent.
            - **mode**: Specifies the format of the body content. Here it is set to 'raw', indicating that the data is sent as a raw JSON string.
            - **raw**: Contains the actual data payload to be sent in the request. This consists of the following fields:
              - **sessionId**: This should be replaced with the actual session ID for authentication.
              - **accountId**: A unique identifier for the user's account that owns the video stream.
              - **streamId**: The identifier of the stream that is intended to be deleted.
              - **channelId**: The identifier of the channel associated with the stream.
              - **videoId**: The unique identifier of the video that is linked to the stream being deleted.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"streamId\":\"streamId\",\"channelId\":\"channelId\",\"videoId\":\"videoId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/streams/live:
    post:
      tags:
        - VideoStream
      summary: Bitmovin - Create - Stream
      description: |-
        ### Endpoint: Bitmovin - Create - Stream

        #### Request Details

        - **Authentication**:
          - **Type**: `apikey`
            - This denotes that the API request requires an API key for authentication.
            - **API Key Details**:
              - **Key**: `X-Api-Key`
                - This is the header field name used to pass the API key.
              - **Value**: `da9b4135-88b7-43fd-a846-1c4cc7d82b6`
                - This is the actual API key that authorizes the request. Keep this value secure as it provides access to the API.

        - **Request Method**: `POST`
          - This indicates that the request method is POST, which is typically used for creating new resources in RESTful APIs.

        - **Request URL**: `https://api.bitmovin.com/v1/streams/live`
          - This is the endpoint URL where the request is sent. It points to the live stream creation API of the Bitmovin service.

        - **Headers**: 
          - There are no additional headers specified in this request.

        - **Body**:
          - **Mode**: `raw`
            - This means the body of the request is sent as raw data.
          - **Raw Content**:
            - The body contains a JSON formatted string which includes:
              - **title**: `"test123"`
                - This is a title for the stream being created. It is a string that helps identify the stream.
              - **description**: `"This is a test 123"`
                - This provides additional information about the stream being created. It is a string that offers more context or details.

        - **Options**:
          - **Raw Options**: 
            - **Language**: `json`
              - This indicates that the format of the raw body data is JSON, which is commonly used for transmitting data in web APIs. 

        Overall, this endpoint is designed to create a new live stream on Bitmovin's platform by sending a POST request with required details in the body.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: test123
                description: This is a test 123
      security:
        - apikeyAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /client/v4/accounts/e1e50a59d512cf5ae589e24ea351c5eb/stream/live_inputs:
    post:
      tags:
        - VideoStream
      summary: CloudFlare - Create - Stream
      description: |-
        {
          "name": "CloudFlare - Create - Stream",
          "description": "This endpoint is used to create a new live input stream in your Cloudflare account. When making this request, you will need to provide several parameters in the body of the request as described below.",
          "request": {
            "auth": {
              "type": "bearer",
              "description": "Authentication is done via a Bearer token. Replace the placeholder token (J6uYKKFPH5oUcCm3wqurzOy5_sHrASSR9srHUjIQ) with your actual Cloudflare API token to authenticate the request."
            },
            "method": "POST",
            "description": "This indicates that the request method used to interact with the endpoint is POST. It is used to send data to the server to create a new resource.",
            "url": "https://api.cloudflare.com/client/v4/accounts/e1e50a59d512cf5ae589e24ea351c5eb/stream/live_inputs",
            "description": "This is the URL for the Cloudflare API endpoint where the request will be sent. It targets the specific account (indicated by the account ID) to create live input streams.",
            "headers": [],
            "description": "No additional headers are required for this request, apart from the authentication token as a Bearer.",
            "body": {
              "mode": "raw",
              "description": "The body of the request is sent in raw format, meaning the data structure is directly written out as a JSON object.",
              "raw": "{\n    \"defaultCreator\": \"test123\",\n    \"deleteRecordingAfterDays\": null,\n    \"meta\": {},\n    \"recording\": {\n        \"mode\": \"automatic\", \n        \"requireSignedURLs\": false, \n        \"timeoutSeconds\": 0,\n        \"allowedOrigins\": []\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              },
              "description": "This is the JSON body that contains parameters for the new live input stream. Below are the specific fields defined within the body:\n      - \"defaultCreator\": This field specifies the default creator for the stream. It is set to 'test123' in this example.\n      - \"deleteRecordingAfterDays\": This field determines how many days to keep the recording before deletion. A null value means there is no automatic deletion.\n      - \"meta\": This field is used for any metadata associated with the stream. In the example, it is empty.\n      - \"recording\": This section contains settings related to the recording of the stream:\n        - \"mode\": Describes how the recording will function; 'automatic' means it will start recording as soon as the stream begins.\n        - \"requireSignedURLs\": A boolean value that indicates whether signed URLs are necessary for accessing the stream. Set to false in this example, indicating signed URLs are not required.\n        - \"timeoutSeconds\": The duration in seconds that the server will wait before cancelling a request. A value of 0 means there is no timeout.\n        - \"allowedOrigins\": An array that specifies which origins are permitted to access the stream; it is empty in the example."
            }
          }
        }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                defaultCreator: test123
                deleteRecordingAfterDays: null
                meta: {}
                recording:
                  mode: automatic
                  requireSignedURLs: false
                  timeoutSeconds: 0
                  allowedOrigins: []
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /client/v4/user/tokens/verify:
    get:
      tags:
        - VideoStream
      summary: CloudFlare - Verify - Token
      description: |-
        {
          "name": "CloudFlare - Verify - Token",
          "description": "This endpoint is used to verify an API token with CloudFlare. The verification process checks whether the provided token is valid and has the necessary permissions for making API calls. It is an essential step for users to ensure that their authentication credentials are correct before proceeding with further actions that require authentication.",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "J6uYKKFPH5oUcCm3wqurzOy5_sHrASSR9srHUjIQ",
                  "type": "string"
                }
              ],
              "description": "The authorization method used here is a bearer token. This token should be included in the request header to authenticate the user's identity. The provided token in this example is a string that must be replaced with a valid token for successful verification."
            },
            "method": "GET",
            "description": "This method specifies the type of HTTP request to be made. In this case, a GET request is used, which is typically employed for retrieving data from the server. Here, it is utilized to check the validity of the provided token.",
            "url": "https://api.cloudflare.com/client/v4/user/tokens/verify",
            "description": "This is the URL endpoint for the token verification request. It is the address of the CloudFlare API that processes the request to verify the user's token. Users should ensure they are calling this exact URL for the verification process.",
            "headers": [],
            "description": "This section is empty, meaning no additional headers are sent with the request. However, users may add custom headers if required by their specific use case."
          },
          "body": {
            "mode": "raw",
            "description": "The body of the request is sent in raw format, which is useful for specifying complex data structures when necessary. In this case, JSON format is used.",
            "raw": "{\n    \"defaultCreator\": \"test123\",\n    \"deleteRecordingAfterDays\": null,\n    \"meta\": {},\n    \"recording\": {\n        \"mode\": \"automatic\", \n        \"requireSignedURLs\": false, \n        \"timeoutSeconds\": 0,\n        \"allowedOrigins\": []\n    }\n}",
            "description": "This is a JSON structure that contains additional configuration related to the request. It defines parameters like 'defaultCreator', which likely indicates the user creating the token. Other fields include 'deleteRecordingAfterDays' set to null (indicating no deletion time is specified), an empty 'meta' object, and a 'recording' object that establishes settings for recording behavior, such as whether it is automatic and the requirements for signed URLs. The 'allowedOrigins' array is also empty, signifying that no specific origins are permitted at this point."
          },
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/subcategory/create:
    post:
      tags:
        - VideoSubcategory
      summary: Video - SubCategory - Create
      description: |-
        ### Video - SubCategory - Create Endpoint Description

        - **Auth**:
          - **Type**: This specifies the type of authentication being used for the request, which is "bearer" in this case.
          - **Bearer**:
            - **Key**: The identifier for the token, here referred to as "token".
            - **Value**: This is where the actual bearer token is inputted. It should be formatted as "BearerToken".
            - **Type**: Indicates that the token is a string.

        - **Method**:
          - The HTTP method used for the request, which is "POST". This means you are submitting data to the server to create a resource.

        - **URL**:
          - The endpoint URL where the request will be sent. In this example, it is "http://localhost:3000/api/video/subcategory/create", which indicates that this is a local server addressing the creation of a video subcategory.

        - **Headers**:
          - A collection of headers to be sent with the request. In this case, there are no specific headers set, as the default header is empty and disabled.

        - **Body**:
          - **Mode**: The format of the body data being sent, which is "raw". This means the body is sent as a plain text string.
          - **Raw**: This is the actual content of the body in JSON format, which includes:
            - **sessionId**: A unique identifier for the session during which the request is made.
            - **accountId**: The ID associated with the account that is creating the subcategory.
            - **categoryId**: The ID of the main category under which this subcategory falls.
            - **name**: The name of the new subcategory; in this case, it is "My Second SubCategory".
            - **description**: A brief explanation of the subcategory, stated as "This subcategory is my second subcategory".
            - **tags**: Keywords associated with the subcategory for better categorization; here, it includes "second" and "subcategory".
            - **isEnabled**: A boolean flag that indicates whether the subcategory is active or not. "true" means that it is enabled.

        - **Options**:
          - **Raw**:
            - **Language**: Specifies the programming or data format language being used for the raw body content, which is set to "json".
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sessionId: sessionId
                accountId: accountId
                categoryId: categoryId
                name: My Second SubCategory
                description: This subcategory is my second subcategory
                tags: second,subcategory
                isEnabled: true
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/subcategory/update:
    put:
      tags:
        - VideoSubcategory
      summary: Video - SubCategory - Update
      description: |-
        ### API Endpoint Description: Video - SubCategory - Update

        - **Name**: This identifier indicates the purpose of the API request, which is to update information related to a specific sub-category of a video.

        - **Request**: This section contains details about how to make the API call.

          - **Auth**: This specifies the authentication method required to access the endpoint.
          
            - **Type**: "bearer" indicates that the API uses Bearer Token authentication.
            
            - **Bearer**: This contains an array to hold data related to the Bearer Token.
            
              - **Key**: "token" is the field name used to send the token for authentication.
              
              - **Value**: "BearerToken" is a placeholder that should be replaced with an actual Bearer Token for authorization.
              
              - **Type**: "string" indicates that the value should be a string type.

          - **Method**: "PUT" indicates that this request is intended to update an existing resource.

          - **URL**: Specifies the endpoint where the request is sent. In this case, it is `http://localhost:3000/api/video/subcategory/update`, which is the address of the API.

          - **Headers**: This section lists additional information sent with the request.

            - **Key**: "Client-UUID" represents a unique identifier for the client making the request.
            
            - **Value**: "ClientUUID" is a placeholder that should be replaced with the actual UUID for the client.
            
            - **Type**: "default" signifies that it is a standard header.

          - **Body**: This contains the data to be sent with the PUT request.

            - **Mode**: "raw" indicates that the data is sent in a raw format, as opposed to form-encoded or binary formats.

            - **Raw**: This part includes the actual payload that must be sent to update the sub-category. The payload is formatted as JSON and includes the following fields:
            
              - **subCategoryId**: Represents the unique identifier for the sub-category that is being updated.
              
              - **sessionId**: Denotes the session identifier, which may be required to track the session during which the update is made.
              
              - **accountId**: Refers to the identifier for the account linked to the sub-category being modified.
              
              - **name**: Specifies the new name for the sub-category. In this example, it is set to "My Second SubCategory 2".
              
              - **description**: Provides additional information about the sub-category. Here, it states "This is a changed subcategory".
              
              - **tags**: A comma-separated list of tags associated with the sub-category. In this case, it includes "second" and "subcategory".
              
              - **isEnabled**: A boolean field indicating whether the sub-category is enabled (true) or disabled (false). In this example, it is set to false, meaning the sub-category will not be active.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"subCategoryId\":\"subCategoryId\",\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"name\":\"My Second SubCategory 2\",\"description\":\"This is a changed subcategory\",\"tags\":\"second,subcategory\",\"isEnabled\":false}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/subcategory/get:
    get:
      tags:
        - VideoSubcategory
      summary: Video - SubCategory - Get
      description: |-
        ### Description of each data in the endpoint

        - **name**: Indicates the name of the API request. In this case, it is titled "Video - SubCategory - Get," which signifies that this request is meant to retrieve video data filtered by subcategories.

        - **request**: This object contains all the properties needed to make the API call.

          - **auth**: A sub-object that specifies the type of authentication required to access this endpoint.
          
            - **type**: Indicates the method of authentication. Here, it is set to "bearer," which is a common method used to secure APIs.
            
            - **bearer**: An array containing the details of the bearer token needed for authentication.
            
              - **key**: Identifies the parameter name for the bearer token, which is generally required in the format of "Authorization". In this case, it's labeled "token".
              
              - **value**: The actual token value needed for authentication. It is represented as "BearerToken" here, indicating that the user should insert a valid token.
              
              - **type**: Specifies the data type of the value, which in this instance is "string".

          - **method**: Describes the HTTP method to be used for the request. This is a GET request, which is typically used to retrieve data from the server.

          - **url**: The endpoint URL where the request is sent. It incorporates query parameters for filtering results.
          
            - **subCategoryId**: A query parameter that specifies the ID of the subcategory for which video data is being requested.
            
            - **sessionId**: A query parameter representing the session ID, which may be used to track a user’s session.
            
            - **accountId**: A query parameter that identifies the user account for which the video data is being requested.

          - **headers**: An array to define additional headers sent with the request.
            
            - **key**: This field is empty, meaning no specific headers are currently being set.
          
            - **value**: This field is also empty, indicating no header value is specified.

            - **type**: Denoted as "default," meaning this header is a standard type.

            - **disabled**: Set to true, indicating that this header is not currently active and will not be sent with the request.

          - **body**: Defines the content sent with the request. Since this is a GET request, which typically does not send a body, it's configured as follows:
          
            - **mode**: States the body mode in which data would be sent, here it is "raw."

            - **raw**: The content for the raw body, which is empty in this case, meaning no body content will be sent with the request.
      security:
        - bearerAuth: []
      parameters:
        - name: subCategoryId
          in: query
          schema:
            type: string
          example: subCategoryId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/subcategory/all:
    get:
      tags:
        - VideoSubcategory
      summary: Video - SubCategory - Get All - Show SubCategory
      description: |-
        ### Endpoint Description

        - **Name**: Video - SubCategory - Get All - Show SubCategory
          - This is the name of the API request that retrieves all subcategories related to videos, specifically filtered to show a particular subcategory.

        ### Request Details

        - **Auth**:
          - **Type**: Bearer
            - This indicates that the request uses bearer token authentication. This method requires a token that must be included in the authorization header of the request for authentication purposes.
          - **Bearer**:
            - **Key**: token
              - This is the field name for the token that is required to authorize the request.
            - **Value**: BearerToken
              - This is a placeholder for the actual token string that should be used for authentication. Replace "BearerToken" with a valid token when making the request.
            - **Type**: string
              - Indicates that the value of the token should be in string format.

        - **Method**: GET
          - This specifies the HTTP method used for the request. A GET method is used to retrieve data from the specified resource.

        - **URL**: 
          - `http://localhost:3000/api/video/subcategory/all/?sessionId=sessionId&accountId=accountId&searchType=Show&category=Music&subCategory=Rap`
            - This is the endpoint URL where the API request is sent.
              - **Base URL**: http://localhost:3000
              - **Endpoint**: /api/video/subcategory/all/
              - **Query Parameters**:
                - **sessionId**: sessionId
                  - A placeholder for the session ID that is required to maintain the user session. Replace "sessionId" with the actual session ID.
                - **accountId**: accountId
                  - A placeholder for the account ID associated with the user. Replace "accountId" with the actual account ID.
                - **searchType**: Show
                  - This parameter specifies that the search is intended to show specific results.
                - **category**: Music
                  - This indicates that the API should filter results to only include subcategories related to the Music category.
                - **subCategory**: Rap
                  - This specifies that the API should further filter results to only include the Rap subcategory within the Music category.

        - **Headers**:
          - This section is reserved for request headers but is not currently utilized in this request.
          - **Key**: (empty)
            - The key field for headers is currently empty, meaning no additional headers are being sent with the request.
          - **Value**: (empty)
            - The value field is also empty. No specific header values are defined.
          - **Type**: default
            - This denotes a default header type, suggesting that it is not set to a specific format.
          - **Disabled**: true
            - This indicates that the headers section is disabled and will not be sent with the request.

        - **Body**:
          - **Mode**: raw
            - This indicates that the body of the request is being sent as raw text.
          - **Raw**: ""
            - The body is currently empty. As it’s a GET request, typically no body content is needed.

        This endpoint is designed to fetch subcategory data related to videos within a specific category and subcategory, requiring user authentication and specific query parameters to filter the desired results.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: searchType
          in: query
          schema:
            type: string
          example: Show
        - name: category
          in: query
          schema:
            type: string
          example: Music
        - name: subCategory
          in: query
          schema:
            type: string
          example: Rap
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/video/subcategory/delete:
    post:
      tags:
        - VideoSubcategory
      summary: Video - SubCategory - Delete
      description: |-
        {
          "name": "Video - SubCategory - Delete",
          "description": {
            "request": {
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "sessionId",
                    "type": "string"
                  }
                ]
              },
              "method": "POST",
              "url": "http://localhost:3000/api/video/subcategory/delete",
              "headers": [
                {
                  "key": "",
                  "value": "",
                  "type": "default",
                  "disabled": true
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"subCategoryId\":\"subCategoryId\"}"
              }
            },
            "auth": "Authorization method using Bearer token. A valid sessionId should be provided for authentication.",
            "method": "HTTP method used for the request. This is a POST request, indicating data will be sent to the server.",
            "url": "The endpoint where the request is sent. This URL targets the delete action for a video subcategory.",
            "headers": "Contains optional headers for the request. Currently no headers are specified.",
            "body": {
              "mode": "raw": "Indicates that the request body will be sent as raw JSON data.",
              "raw": "This is the actual JSON payload sent in the request body. It contains the following fields: 
                - sessionId: Represents the unique identifier for the user session, which is necessary for authentication.
                - accountId: Denotes the identifier for the user account associated with the request.
                - subCategoryId: Specifies the identifier of the video subcategory to be deleted."
            }
          }
        }
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"subCategoryId\":\"subCategoryId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/VideoConnect:
    post:
      tags:
        - VideoUploadAfreecaTV
      summary: POST Delete Video (AfreecaTV)
      description: |-
        ### POST Delete Video (AfreecaTV)

        **Request Method:**  
        This request uses the POST method to initiate the video deletion process on AfreecaTV.

        **Request URL:**  
        The endpoint is located at `http://localhost:3000/api/VideoConnect`. This is the address where the request is sent to handle video deletion.

        **Headers:**  
        - **Content-Type:** This header is set to `application/json`, indicating that the request body will be formatted as JSON.

        **Request Body:**  
        The body of the request is formatted in raw JSON and contains the following fields:

        - **provider:** This field specifies the video service provider for the video that is to be deleted. In this case, it is set to "afreecatv".

        - **videoDetails:** This object should contain specific information about the video that is intended for deletion. Currently, it is a placeholder labeled `/* Video details */`, which should be replaced with actual video attributes, such as video ID or title.

        - **routeSettings:** This object defines how the request should be processed. It contains the following property:
          - **action:** This is set to "delete", indicating that the intended action for the request is to remove a video from the service. 

        Make sure to fill out the `videoDetails` with the relevant information before sending the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n  \"provider\": \"afreecatv\",\n  \"videoDetails\": { /* Video details */ },\n  \"routeSettings\": { \"action\": \"delete\" }\n}"'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/VideoConnect/afreecatv/videoId:
    get:
      tags:
        - VideoUploadAfreecaTV
      summary: GET Video Information (AfreecaTV)
      description: |-
        ### GET Video Information (AfreecaTV)

        **Request Method**: GET  
        This indicates that the request is used to retrieve data from the server.

        **URL**: `http://localhost:3000/api/VideoConnect/afreecatv/videoId`  
        This is the endpoint where the request is sent. It is expected to be run on a local server at port 3000. The `videoId` in the URL should be replaced with the actual identifier of the video you want to get information about.

        **Headers**:  
        - **Content-Type**: `application/json`  
          This header specifies the format of the data being sent to the server. In this case, it indicates that the request will send and expect data in JSON format. 

        Make sure to replace `videoId` with the specific video ID you want to retrieve from AfreecaTV.
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    apikeyAuth:
      type: http
      scheme: apikey
