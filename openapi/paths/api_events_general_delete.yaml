post:
  tags:
    - EventsGeneral
  summary: Events - General - Delete
  description: >-
    The given data specifies details of an HTTP endpoint:


    1. **Name**: The unique identifier of the endpoint. In this case, the name
    is "Events - General - Delete," indicating this endpoint is used to delete
    general event data.


    2. **Request**: This represents the details of the HTTP request made to this
    endpoint.

        - **Auth**: This field describes the authorization type that the endpoint uses. In this case, the `type` is set to "bearer", meaning that it uses Bearer Authentication. Bearer Authentication is a schema where the sender and the recipient of an HTTP request can authenticate to each other by a bearer token. Here, the key for the token is named "token" and its value is "sessionId".
        
        - **Method**: This describes the HTTP method used for the request. Here, the method is "POST", which is typically used to send data to a server to create a new resource.

        - **URL**: This field contains the access link of the API. The present URL is "http://localhost:3000/api/events/general/delete", which indicates the server is currently running locally on port 3000.

        - **Headers**: This is typically used to provide additional information about the request. In this case, it is not utilized; the `key` and `value` fields are empty, and its `type` is set as "default", but it is `disabled`.

        - **Body**: This contains the data that is sent to the server. The mode here is "raw," meaning that the data is sent in a string format. The raw string contains a JSON string with keys "sessionId", "accountId", and "eventId" whose values would need to be instantiated by the user.

    In summary, this endpoint, "Events - General - Delete", is a POST Request
    that uses Bearer Authentication. It deletes events for the account specified
    by the "accountId", and the event specified by the "eventId". The session is
    specified by "sessionId". The API is currently hosted locally on port 3000.
  requestBody:
    content:
      '*/*':
        schema:
          type: string
          example: >-
            "{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"eventId\":\"eventId\"}"
  security:
    - bearerAuth: []
  responses:
    '200':
      description: Successful response
      content:
        application/json: {}
