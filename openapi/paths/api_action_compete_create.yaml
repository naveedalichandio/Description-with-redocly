post:
  tags:
    - ActionCompete
  summary: Action - Compete - Create
  description: |-
    {
      "description": "This endpoint is used to create a competition action. Below is a detailed description of each data point included in the request body:\n\n- **sessionId**: A unique identifier for the session in which the action is being created. This helps to associate the action with a specific user session.\n\n- **accountId**: This represents the unique identifier for the account associated with the action being created. It is important to link the action to the correct user or account.\n\n- **path**: This indicates the path to the content that is being targeted within the application's structure. In this case, it points to a specific video channel.\n\n- **targetType**: Specifies the type of the target for the action. The value \"videoId\" indicates that the action is related to a video.\n\n- **targetId**: The unique identifier for the target content. In this scenario, it corresponds to the specific video involved in the competition action.\n\n- **sourceType**: Describes the type of the source from which the action is initiated. Here it is set to \"accountId\", relating to the user's account.\n\n- **sourceId**: The unique identifier for the source that is initiating the competition action. Similar to accountId, it links back to the user's account.\n\n- **name**: The name given to the tournament or competition. In this example, it is \"Tournament 1\", which provides a label for the action.\n\n- **targetText**: A textual description or message associated with the target action. In this case, it encourages participation in a cricket match by stating \"lets play a cricket match\".\n\n- **description**: An optional field for adding a more detailed description of the action. Currently, it is left empty.\n\n- **tags**: This allows for tagging the action with specific keywords or categories. This field is also currently empty and can be utilized for better classification or searchability."
    }
  requestBody:
    content:
      application/json:
        schema:
          type: object
          example:
            sessionId: sessionId
            accountId: accountId
            path: /live/channel/video123
            targetType: videoId
            targetId: videoId
            sourceType: accountId
            sourceId: accountId
            name: Tournament 1
            targetText: lets play a cricket match
            description: ''
            tags: ''
  security:
    - bearerAuth: []
  responses:
    '200':
      description: Successful response
      content:
        application/json: {}
